<Type Name="BindingOperations" FullName="System.Windows.Data.BindingOperations">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4601fcaf8f086826132c17425f722a0180d270b0" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52236435" /></Metadata><TypeSignature Language="C#" Value="public static class BindingOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindingOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingOperations abstract sealed" />
  <TypeSignature Language="F#" Value="type BindingOperations = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供靜態方法操作繫結，包括 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.MultiBinding" /> 和 <see cref="T:System.Windows.Data.PriorityBinding" /> 物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會公開一組靜態方法做為資料繫結的協助程式作業。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessCollection">
      <MemberSignature Language="C#" Value="public static void AccessCollection (System.Collections.IEnumerable collection, Action accessMethod, bool writeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AccessCollection(class System.Collections.IEnumerable collection, class System.Action accessMethod, bool writeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.AccessCollection(System.Collections.IEnumerable,System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AccessCollection (collection As IEnumerable, accessMethod As Action, writeAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AccessCollection(System::Collections::IEnumerable ^ collection, Action ^ accessMethod, bool writeAccess);" />
      <MemberSignature Language="F#" Value="static member AccessCollection : System.Collections.IEnumerable * Action * bool -&gt; unit" Usage="System.Windows.Data.BindingOperations.AccessCollection (collection, accessMethod, writeAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="accessMethod" Type="System.Action" />
        <Parameter Name="writeAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="collection">要存取的集合。</param>
        <param name="accessMethod">要對集合執行的動作。</param>
        <param name="writeAccess">如果<paramref name="accessMethod" />會寫入至集合中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>透過應用程式在呼叫 EnableCollectionSynchronization 時指定的同步處理機制，提供對集合的存取。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllBindings">
      <MemberSignature Language="C#" Value="public static void ClearAllBindings (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllBindings(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearAllBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllBindings (target As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllBindings(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ClearAllBindings : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearAllBindings target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">要從中移除繫結的物件。</param>
        <summary>移除所指定 <see cref="T:System.Windows.DependencyObject" /> 的所有繫結 (包括類型為 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.MultiBinding" /> 和 <see cref="T:System.Windows.Data.PriorityBinding" /> 的繫結)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的物件不是資料繫結，這個方法沒有任何作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果 <paramref name="target" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearBinding">
      <MemberSignature Language="C#" Value="public static void ClearBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearBinding (target As DependencyObject, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member ClearBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">要從中移除繫結的物件。</param>
        <param name="dp">要從中移除繫結的相依性屬性。</param>
        <summary>如果有的話，請從屬性移除繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的屬性是資料繫結與<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，或<xref:System.Windows.Data.MultiBinding>，這個方法會移除對應的繫結運算式，然後還原到之前的任何區域值屬性的值已設定透過繫結。  
  
 如果指定的屬性不是資料繫結，這個方法沒有任何作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數不可以是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CollectionRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionRegisteringEventArgs ^&gt; ^ CollectionRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionRegistering : EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " Usage="member this.CollectionRegistering : System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當資料繫結系統注意到集合時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionViewRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionViewRegisteringEventArgs ^&gt; ^ CollectionViewRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionViewRegistering : EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " Usage="member this.CollectionViewRegistering : System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當資料繫結系統注意到集合檢視時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void DisableCollectionSynchronization (System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableCollectionSynchronization(class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.DisableCollectionSynchronization(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableCollectionSynchronization (collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisableCollectionSynchronization(System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="static member DisableCollectionSynchronization : System.Collections.IEnumerable -&gt; unit" Usage="System.Windows.Data.BindingOperations.DisableCollectionSynchronization collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="collection">要移除其同步存取的集合。</param>
        <summary>移除為指定集合註冊的同步處理。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectedSource">
      <MemberSignature Language="C#" Value="public static object DisconnectedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property object DisconnectedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DisconnectedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Object ^ DisconnectedSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisconnectedSource : obj" Usage="System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件，從視覺化樹狀結構中移除項目容器時，它會取代 <see cref="P:System.Windows.FrameworkElement.DataContext" />。</summary>
        <value>在項目容器從視覺化樹狀結構中移除時取代 <see cref="P:System.Windows.FrameworkElement.DataContext" /> 的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性，如果您要應付<xref:System.Windows.FrameworkElement.DataContext%2A>的項目容器。  項目容器是 UI 元素的顯示中的項目<xref:System.Windows.Controls.ItemsControl>。  當<xref:System.Windows.Controls.ItemsControl>是資料繫結至集合，項目容器會產生每個項目。  在某些情況下，項目容器會從視覺化樹狀結構移除。  移除項目容器的其中兩個典型情況是項目從基礎集合中移除時，當已啟用虛擬化<xref:System.Windows.Controls.ItemsControl>。  在這些情況下，<xref:System.Windows.FrameworkElement.DataContext%2A>的項目容器的屬性會設定為<xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A>屬性，您應該檢查是否<xref:System.Windows.FrameworkElement.DataContext%2A>等於<xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A>才能存取<xref:System.Windows.FrameworkElement.DataContext%2A>中<xref:System.Windows.FrameworkElement.DataContextChanged>事件項目容器。 如需項目容器和虛擬化的詳細資訊，請參閱中的備註<xref:System.Windows.Controls.VirtualizingStackPanel>類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableCollectionSynchronization">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>讓 <see cref="T:System.Windows.Data.CollectionView" /> 物件能夠參與同步存取多個執行緒上所使用的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

WPF 應用程式可以顯示資料所使用的集合<xref:System.Windows.Controls.ItemsControl>或其中一個子類別 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，依此類推。)。 WPF 通道所有其存取集合的子類別透過<xref:System.Windows.Data.CollectionView>。 同時<xref:System.Windows.Controls.ItemsControl>而<xref:System.Windows.Data.CollectionView>有執行緒親和性所在<xref:System.Windows.Controls.ItemsControl>已建立，這表示，它們使用不同的執行緒上被禁止，而且會擲回例外狀況。 實際上，這項限制適用於集合。
 
若要使用多個執行緒上的集合。   例如，在您想要更新集合 （新增或移除項目） 上的 「 資料收集 」 執行緒，在 「 使用者介面 」 的執行緒上顯示結果時，讓 UI 保持回應時資料收集的情況。 在這種情況下，您有責任確保同步處理 （「 執行緒安全 」） 存取集合項目。   這通常是使用簡單的鎖定機制或更複雜的同步處理機制例如號誌、 重設事件等等。  雖然您必須同步處理對集合的應用程式的存取，您也必須保證該存取權從 WPF (特別是從<xref:System.Windows.Data.CollectionView>) 參與相同的同步處理機制。  您可以藉由呼叫 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> 方法執行這項作業。
 
若要使用多個執行緒的集合，其中之一就是 UI 執行緒擁有<xref:System.Windows.Controls.ItemsControl>，應用程式須擔負下列責任：

1. 選擇同步處理機制。

1. 同步處理從應用程式以使用該機制在集合的所有存取。

1. 呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>通知 WPF 的機制。

   - 呼叫必須在 UI 執行緒上發生。

   - 之前使用不同的執行緒上的集合，或附加至集合前，必須發生呼叫<xref:System.Windows.Controls.ItemsControl>，兩者取其較晚。

   - 呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>多載，如果使用簡單的鎖定機制; 呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>多載，如果使用更複雜的機制。

1. 請確認變更的集合，而且該變更通知 (透過<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是不可部分完成; 無法存取來自其他執行緒可以介入。  （這是通常是免費的。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保證，前提是所有的變更會受到同步處理。)

1. 如果您呼叫 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，呼叫也必須在 UI 執行緒上會發生。

1. 如果您想要在多個 UI 執行緒上使用相同的集合，您必須呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如有需要) 分別在每個 UI 執行緒上。

1. 避免死結。  這是已經應用程式的責任之後選擇要使用同步處理，但它還必須考慮到帳戶 WPF 參與同步處理，在下列段落中所述。

在 退貨，WPF 提供下列行為：

- <xref:System.Windows.Data.CollectionView>存取集合的指定同步處理機制。

- <xref:System.Windows.Data.CollectionView>會維護 「 陰影複製 」 使用的集合在 UI 執行緒上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件會排入佇列 （在任何執行緒中） 上所顯示的送達。

- 暫止的事件會套用至 UI 執行緒上以非同步方式的陰影複製時就有機會這麼做。

- <xref:System.Windows.Data.CollectionView>不會直接使用應用程式可以看到任何其他同步處理機制。 這是 WPF 的方法有助於避免發生死結 （請參閱上一個項目 7）。   

結果是，您可以變更任何執行緒上的集合，這些變更最後會出現在<xref:System.Windows.Controls.ItemsControl>當 UI 執行緒會有 「 趕上 」 的時間。  實作已調整成節流閥速率的變更會流至 UI 執行緒，讓背景執行緒從飽和，讓 UI 執行緒，並佔用一般使用者輸入的回應。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object lockObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object lockObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, lockObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ lockObject);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, lockObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="lockObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collection">需要同步存取的集合。</param>
        <param name="lockObject">存取集合時要鎖定的物件。</param>
        <summary>使用簡單的鎖定機制，讓 <see cref="T:System.Windows.Data.CollectionView" /> 物件能夠參與同步存取多個執行緒上所使用的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

WPF 應用程式可以顯示資料所使用的集合<xref:System.Windows.Controls.ItemsControl>或其中一個子類別 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，依此類推。)。 WPF 通道所有其存取集合的子類別透過<xref:System.Windows.Data.CollectionView>。 同時<xref:System.Windows.Controls.ItemsControl>而<xref:System.Windows.Data.CollectionView>有執行緒親和性所在<xref:System.Windows.Controls.ItemsControl>已建立，這表示，它們使用不同的執行緒上被禁止，而且會擲回例外狀況。 實際上，這項限制適用於集合。
 
若要使用多個執行緒上的集合。   例如，在您想要更新集合 （新增或移除項目） 上的 「 資料收集 」 執行緒，在 「 使用者介面 」 的執行緒上顯示結果時，讓 UI 保持回應時資料收集的情況。 在這種情況下，您必須負責確保同步處理 （「 執行緒安全 」） 存取集合，並保證該存取權，從 WPF (特別是從<xref:System.Windows.Data.CollectionView>) 參與相同的同步處理機制。 藉由呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>方法中，您可以使用簡單的鎖定機制。 
 
若要使用多個執行緒的集合，其中之一就是 UI 執行緒擁有<xref:System.Windows.Controls.ItemsControl>，您必須執行下列動作：

1. 要鎖定時存取集合的物件具現化。

1. 同步處理從應用程式集合的所有存取，藉由鎖定該物件。

1. 呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>通知 WPF 使用簡單的鎖定機制。

   - 呼叫必須在 UI 執行緒上發生。

   - 之前使用不同的執行緒上的集合，或附加至集合前，必須發生呼叫<xref:System.Windows.Controls.ItemsControl>，兩者取其較晚。

1. 請確認變更的集合，而且該變更通知 (透過<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是不可部分完成; 無法存取來自其他執行緒可以介入。  （這是通常是免費的。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保證，前提是所有的變更會受到同步處理。)

1. 如果您呼叫 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，呼叫也必須在 UI 執行緒上會發生。

1. 如果您想要在多個 UI 執行緒上使用相同的集合，您必須呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如有需要) 分別在每個 UI 執行緒上。

1. 避免死結。  一旦選擇要使用同步處理，但它還必須考慮到帳戶同步處理的 WPF 的參與，這是已經應用程式的責任。 （請參閱詳細資訊下, 面）。

在 退貨，WPF 提供下列行為：

- <xref:System.Windows.Data.CollectionView>存取使用的鎖定機制的集合。

- <xref:System.Windows.Data.CollectionView>會維護 「 陰影複製 」 使用的集合在 UI 執行緒上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件會排入佇列 （在任何執行緒中） 上所顯示的送達。

- 暫止的事件會套用至 UI 執行緒上以非同步方式的陰影複製時就有機會這麼做。

- <xref:System.Windows.Data.CollectionView>不是直接將使用的應用程式可以看到任何其他同步處理機制。 這是 WPF 的方法有助於避免發生死結 （請參閱上一個項目 7）。   

結果是，您可以變更任何執行緒上的集合，這些變更最後會出現在<xref:System.Windows.Controls.ItemsControl>當 UI 執行緒會有 「 趕上 」 的時間。  實作已調整成節流閥速率的變更會流至 UI 執行緒，讓背景執行緒從飽和，讓 UI 執行緒，並佔用一般使用者輸入的回應。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object context, System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object context, class System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, context As Object, synchronizationCallback As CollectionSynchronizationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ context, System::Windows::Data::CollectionSynchronizationCallback ^ synchronizationCallback);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj * System.Windows.Data.CollectionSynchronizationCallback -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, context, synchronizationCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="context" Type="System.Object" />
        <Parameter Name="synchronizationCallback" Type="System.Windows.Data.CollectionSynchronizationCallback" />
      </Parameters>
      <Docs>
        <param name="collection">需要同步存取的集合。</param>
        <param name="context">傳遞至回呼的物件。</param>
        <param name="synchronizationCallback">當需要存取集合時，就會叫用回呼。 您可以使用它來確保一次只會有一個執行緒存取集合。</param>
        <summary>使用簡單鎖定以外的機制，讓 <see cref="T:System.Windows.Data.CollectionView" /> 物件能夠參與同步存取多個執行緒上所使用的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

WPF 應用程式可以顯示資料所使用的集合<xref:System.Windows.Controls.ItemsControl>或其中一個子類別 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，依此類推。)。 WPF 通道所有其存取集合的子類別透過<xref:System.Windows.Data.CollectionView>。 同時<xref:System.Windows.Controls.ItemsControl>而<xref:System.Windows.Data.CollectionView>有執行緒親和性所在<xref:System.Windows.Controls.ItemsControl>已建立，這表示，它們使用不同的執行緒上被禁止，而且會擲回例外狀況。 實際上，這項限制適用於集合。
 
若要使用多個執行緒上的集合。   例如，在您想要更新集合 （新增或移除項目） 上的 「 資料收集 」 執行緒，在 「 使用者介面 」 的執行緒上顯示結果時，讓 UI 保持回應時資料收集的情況。 在這種情況下，您必須負責確保同步處理 （「 執行緒安全 」） 存取集合，並保證該存取權，從 WPF (特別是從<xref:System.Windows.Data.CollectionView>) 參與相同的同步處理機制。 藉由呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>方法中，您可以使用 同步處理機制，例如號誌、 重設事件等等。  若要使用多個執行緒的集合，其中之一就是 UI 執行緒擁有<xref:System.Windows.Controls.ItemsControl>，您必須執行下列動作：

1. 選擇同步處理機制。

1. 同步處理從應用程式以使用該機制在集合的所有存取。

1. 呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>多載，以告知 WPF 使用簡單鎖定以外的機制。

   - 呼叫必須在 UI 執行緒上發生。

   - 之前使用不同的執行緒上的集合，或附加至集合前，必須發生呼叫<xref:System.Windows.Controls.ItemsControl>，兩者取其較晚。

1. 請確認變更的集合，而且該變更通知 (透過<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是不可部分完成; 無法存取來自其他執行緒可以介入。  （這是通常是免費的。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保證，前提是所有的變更會受到同步處理。)

1. 如果您呼叫 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，呼叫也必須在 UI 執行緒上會發生。

1. 如果您想要在多個 UI 執行緒上使用相同的集合，您必須呼叫<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如有需要) 分別在每個 UI 執行緒上。

1. 避免死結。  一旦選擇要使用同步處理，但它還必須考慮到帳戶同步處理的 WPF 的參與，這是已經應用程式的責任。 （請參閱詳細資訊下, 面）。

在 退貨，WPF 提供下列行為：

- <xref:System.Windows.Data.CollectionView>存取集合，藉由呼叫的已註冊<xref:System.Windows.Data.CollectionSynchronizationCallback>的下列引數：

   - `collection`： 感興趣的集合。
   - `context`： 已註冊的內容物件。
   - `accessMethod`： 執行實際存取的委派。
   - `writeAccess`:`true`如果委派將會修改集合`false`否則。

   您<xref:System.Windows.Data.CollectionSynchronizationCallback>應該建立在集合上的同步處理 (使用`context`物件並`writeAccess`值，視需要)，呼叫`accessMethod`，再放開 同步處理。

- <xref:System.Windows.Data.CollectionView>會維護 「 陰影複製 」 使用的集合在 UI 執行緒上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件會排入佇列 （在任何執行緒中） 上所顯示的送達。

- 暫止的事件會套用至 UI 執行緒上以非同步方式的陰影複製時就有機會這麼做。

- <xref:System.Windows.Data.CollectionView>不是直接將使用的應用程式可以看到任何其他同步處理機制。 這是 WPF 的方法有助於避免發生死結 （請參閱上一個項目 7）。   

結果是，您可以變更任何執行緒上的集合，這些變更最後會出現在<xref:System.Windows.Controls.ItemsControl>當 UI 執行緒會有 「 趕上 」 的時間。  實作已調整成節流閥速率的變更會流至 UI 執行緒，讓背景執行緒從飽和，讓 UI 執行緒，並佔用一般使用者輸入的回應。

 `context`參數是任意物件傳遞至`callback`。 您可以使用它來判斷用來控制存取權的同步處理機制`collection`。 `Context` 可以是`null`。  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.Binding GetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.Binding GetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBinding (target As DependencyObject, dp As DependencyProperty) As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::Binding ^ GetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.Binding" Usage="System.Windows.Data.BindingOperations.GetBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要從其中擷取繫結的繫結目標屬性。</param>
        <summary>擷取針對指定之屬性設定的 <see cref="T:System.Windows.Data.Binding" /> 物件。</summary>
        <returns>針對指定之屬性設定的 <see cref="T:System.Windows.Data.Binding" /> 物件；如果未設定 <see cref="T:System.Windows.Data.Binding" /> 物件，則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數都不能為 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingBase GetBindingBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingBase GetBindingBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingBase (target As DependencyObject, dp As DependencyProperty) As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingBase ^ GetBindingBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingBase" Usage="System.Windows.Data.BindingOperations.GetBindingBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要從中擷取 <see cref="T:System.Windows.Data.BindingBase" /> 物件的繫結目標屬性。</param>
        <summary>擷取針對指定之屬性設定的 <see cref="T:System.Windows.Data.BindingBase" /> 物件。</summary>
        <returns>針對指定之屬性設定的 <see cref="T:System.Windows.Data.BindingBase" /> 物件；如果未設定繫結物件，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase>類別是通用的基底類別，如<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，和<xref:System.Windows.Data.MultiBinding>類別。 您可以使用<xref:System.Windows.Data.BindingOperations.GetBinding%2A>， <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>，和<xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A>方法，如果您事先知道的繫結也就類型的屬性上設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數不可以是 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpression (target As DependencyObject, dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="System.Windows.Data.BindingOperations.GetBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的繫結目標物件。</param>
        <param name="dp">要從中擷取 <see cref="T:System.Windows.Data.BindingExpression" /> 物件的繫結目標屬性。</param>
        <summary>傳回與所指定物件上指定繫結目標屬性相關聯的 <see cref="T:System.Windows.Data.BindingExpression" /> 物件。</summary>
        <returns>與指定屬性相關聯的 <see cref="T:System.Windows.Data.BindingExpression" /> 物件；如果不存在，則為 <see langword="null" />。 如果在屬性上設定 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 物件，則會傳回 <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingExpression>物件會維護繫結來源和繫結目標之間的連線。 您可以取得<xref:System.Windows.Data.BindingExpression>藉由呼叫這個靜態方法，或藉由呼叫物件<xref:System.Windows.FrameworkElement.GetBindingExpression%2A>方法，在資料繫結<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>物件。  
  
   
  
## Examples  
 下列範例示範實作<xref:System.Windows.Controls.Primitives.ButtonBase.Click>使用的事件處理常式<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>方法，以取得<xref:System.Windows.Data.BindingExpression>，然後呼叫<xref:System.Windows.Data.BindingExpression.DataItem%2A>屬性來存取繫結來源物件。  
  
 <xref:System.Windows.Controls.TextBlock> `SavingsText`是繫結目標物件和<xref:System.Windows.Controls.TextBlock.Text%2A>是繫結目標屬性。  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數不可以是 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpressionBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase GetBindingExpressionBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase GetBindingExpressionBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpressionBase (target As DependencyObject, dp As DependencyProperty) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ GetBindingExpressionBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpressionBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.GetBindingExpressionBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要從中擷取 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 物件的繫結目標屬性。</param>
        <summary>擷取針對指定之屬性設定的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 物件。</summary>
        <returns>針對指定之屬性設定的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 物件；如果未設定繫結物件，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingExpressionBase>類別是通用的基底類別，如<xref:System.Windows.Data.BindingExpression>， <xref:System.Windows.Data.PriorityBindingExpression>，和<xref:System.Windows.Data.MultiBindingExpression>類別。 您可以使用<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>， <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>，和<xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A>方法，如果您事先知道屬性上設定的繫結的型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數都不能為 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBinding GetMultiBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBinding GetMultiBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBinding (target As DependencyObject, dp As DependencyProperty) As MultiBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBinding ^ GetMultiBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBinding" Usage="System.Windows.Data.BindingOperations.GetMultiBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要從其中擷取繫結的繫結目標屬性。</param>
        <summary>擷取針對指定之屬性設定的 <see cref="T:System.Windows.Data.MultiBinding" /> 物件。</summary>
        <returns>針對指定之屬性設定的 <see cref="T:System.Windows.Data.MultiBinding" /> 物件；如果未設定 <see cref="T:System.Windows.Data.MultiBinding" /> 物件，則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數都不能為 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBindingExpression GetMultiBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBindingExpression GetMultiBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBindingExpression (target As DependencyObject, dp As DependencyProperty) As MultiBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBindingExpression ^ GetMultiBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBindingExpression" Usage="System.Windows.Data.BindingOperations.GetMultiBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的繫結目標物件。</param>
        <param name="dp">要從中擷取 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 物件的繫結目標屬性。</param>
        <summary>傳回與所指定物件上指定繫結目標屬性相關聯的 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 物件。</summary>
        <returns>與指定屬性相關聯的 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 物件；如果不存在，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 與指定屬性相關聯的 <xref:System.Windows.Data.MultiBindingExpression> 物件；如果不存在，則為 `null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數不可以是 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBinding GetPriorityBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBinding GetPriorityBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBinding (target As DependencyObject, dp As DependencyProperty) As PriorityBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBinding ^ GetPriorityBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBinding" Usage="System.Windows.Data.BindingOperations.GetPriorityBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要從其中擷取繫結的繫結目標屬性。</param>
        <summary>擷取針對指定之屬性設定的 <see cref="T:System.Windows.Data.PriorityBinding" /> 物件。</summary>
        <returns>針對指定之屬性設定的 <see cref="T:System.Windows.Data.PriorityBinding" /> 物件；如果未設定 <see cref="T:System.Windows.Data.PriorityBinding" /> 物件，則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數都不能為 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBindingExpression (target As DependencyObject, dp As DependencyProperty) As PriorityBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBindingExpression ^ GetPriorityBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBindingExpression" Usage="System.Windows.Data.BindingOperations.GetPriorityBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的繫結目標物件。</param>
        <param name="dp">要從中擷取 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 物件的繫結目標屬性。</param>
        <summary>傳回與所指定物件上指定繫結目標屬性相關聯的 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 物件。</summary>
        <returns>與指定屬性相關聯的 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 物件；如果不存在，則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 參數不可以是 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindingGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindingGroups (root As DependencyObject) As ReadOnlyCollection(Of BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingGroup ^&gt; ^ GetSourceUpdatingBindingGroups(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindingGroups : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">要取得其繫結群組的根<see cref="T:System.Windows.UIElement" />。  這個方法會傳回<see cref="T:System.Windows.Data.BindingGroup" />物件，其與此項目或它的子代項目相關聯。</param>
        <summary>取得所有 <see cref="T:System.Windows.Data.BindingGroup" /> 物件，這些物件有無效值或者目標值尚未被來源更新。</summary>
        <returns><see cref="T:System.Windows.Data.BindingGroup" /> 物件的集合，這些物件與指定的項目相關聯，並且含有無效值或是其目標值尚未更新來源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`root`已`null`，<xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A>會傳回所有<xref:System.Windows.Data.BindingGroup>無效或尚未更新的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindings">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindings (root As DependencyObject) As ReadOnlyCollection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ GetSourceUpdatingBindings(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindings : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindings root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">要取得其繫結群組的根<see cref="T:System.Windows.UIElement" />。  這個方法會傳回<see cref="T:System.Windows.Data.BindingExpressionBase" />物件，其與此項目或它的子代項目相關聯。</param>
        <summary>取得所有 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 物件，這些物件有無效值或者目標值尚未被來源更新。</summary>
        <returns><see cref="T:System.Windows.Data.BindingExpressionBase" /> 物件的集合，這些物件與指定的項目相關聯，並且含有無效值或是其目標值尚未更新來源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`root`已`null`，<xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A>會傳回所有<xref:System.Windows.Data.BindingExpressionBase>無效或尚未更新的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDataBound">
      <MemberSignature Language="C#" Value="public static bool IsDataBound (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDataBound(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.IsDataBound(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDataBound (target As DependencyObject, dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDataBound(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member IsDataBound : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.Data.BindingOperations.IsDataBound (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的物件。</param>
        <param name="dp">要檢查的相依性屬性。</param>
        <summary>傳回值，這個值表示指定的屬性目前是否已繫結資料。</summary>
        <returns>如果指定的屬性已繫結資料，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">如果 <paramref name="target" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetBinding (target As DependencyObject, dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="static member SetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.SetBinding (target, dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="target">繫結的繫結目標。</param>
        <param name="dp">繫結的目標屬性。</param>
        <param name="binding">描述繫結的 <see cref="T:System.Windows.Data.BindingBase" /> 物件。</param>
        <summary>建立 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 的新執行個體，並使其與指定的繫結目標屬性產生關聯。</summary>
        <returns>針對指定屬性所建立並與其相關聯的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 執行個體。 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 類別是 <see cref="T:System.Windows.Data.BindingExpression" />、<see cref="T:System.Windows.Data.MultiBindingExpression" /> 和 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 的基底類別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立的新執行個體<xref:System.Windows.Data.BindingExpressionBase>並將執行個體與指定的物件指定相依性屬性相關聯。 這個方法可以將繫結至任意地<xref:System.Windows.DependencyObject>，可能不會公開它自己的 SetBinding 方法。  
  
   
  
## Examples  
 下列範例示範如何使用這個方法來設定繫結。 在此範例中，`myNewBindDef`是<xref:System.Windows.Data.Binding>描述繫結的物件。 繫結目標是`myDateText`，執行個體<xref:System.Windows.Controls.TextBlock>類別。  
  
 [!code-csharp[BindConversion#BOSetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#bosetbinding)]
 [!code-vb[BindConversion#BOSetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#bosetbinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="binding" /> 參數不可為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>