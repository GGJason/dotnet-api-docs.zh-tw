<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3dea502097bd7de2a1d19d1c41fb212d88ea6ba2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399782" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>讓您安裝和設定可讓應用程式在執行時，進行讀取和寫入事件的記錄檔。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller>正由[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)安裝事件記錄檔時。 <xref:System.Diagnostics.EventLogInstaller>類別可以在本機電腦上只安裝事件記錄檔。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>類別時，您的應用程式寫入事件記錄檔，則不需要使用您的應用程式事件記錄檔安裝程式來讀取事件記錄檔。 應用程式和服務應該寫入應用程式記錄檔或自訂的記錄檔。 裝置驅動程式應該寫入至系統記錄檔。  
  
> [!NOTE]
>  安全性記錄檔為唯讀。  
  
 安裝程式會建立您在中指定的事件來源<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性和其事件記錄檔中指定的暫存器<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。 此行為是類似於呼叫<xref:System.Diagnostics.EventLog.CreateEventSource%2A>上<xref:System.Diagnostics.EventLog>元件。  
  
 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>和<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法將事件寫入事件記錄檔。 您必須指定事件來源寫入事件。您必須建立並設定事件來源寫入來源的第一個項目之前。  
  
 在您的應用程式的安裝期間建立新的事件來源。 這可讓作業系統重新整理其已註冊的事件來源的清單和其設定的時間。 如果作業系統不重新整理其事件來源的清單，而且您嘗試寫入的事件，該新的來源寫入作業將會失敗。 您可以設定新的來源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 您必須建立新的事件來源電腦上具有系統管理權限。  
  
 您可以建立現有的事件記錄檔或新的事件記錄檔事件來源。 當您建立新的事件記錄檔的新來源時，系統會註冊為該記錄檔中，來源，但寫入第一個項目之前，不會建立記錄檔。  
  
 若要安裝事件記錄檔，請建立繼承自專案安裝程式類別<xref:System.Configuration.Install.Installer>，並設定<xref:System.ComponentModel.RunInstallerAttribute>類別`true`。 在您的專案內建立<xref:System.Diagnostics.EventLogInstaller>每個事件記錄檔會寫入您的應用程式，並加入您專案的安裝程式類別的執行個體。  
  
 當[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)是呼叫，它會查看<xref:System.ComponentModel.RunInstallerAttribute>。 如果是`true`，工具會安裝中的所有項目<xref:System.Configuration.Install.Installer.Installers%2A>與您專案的安裝程式相關聯的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，工具會忽略專案安裝程式。  
  
 修改的其他屬性<xref:System.Diagnostics.EventLogInstaller>之前或之後加入至執行個體<xref:System.Configuration.Install.Installer.Installers%2A>您專案的安裝程式，但安裝程式工具執行前集合。 您必須設定<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性，如果您的應用程式將會寫入事件記錄檔。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>註冊新的或現有的事件記錄; 新的來源不使用<xref:System.Diagnostics.EventLogInstaller>若要變更現有的來源。 <xref:System.Diagnostics.EventLogInstaller>類別不會修改現有的來源，以符合指定的安裝屬性的組態屬性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法擲回例外狀況，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對不同的事件記錄檔，在電腦上已註冊的來源名稱。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不會註冊來源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對已註冊相同的事件記錄檔中指定的來源名稱<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。  
  
 您可以註冊的當地語系化的資源檔的事件來源事件分類和訊息字串。 您的應用程式可以寫入事件記錄項目使用的資源識別項，而非指定實際的字串。 事件檢視器會尋找並顯示目前的語言設定為基礎的當地語系化的資源檔中的對應字串使用的資源識別碼。 您可以註冊的事件類別目錄、 訊息和參數插入字串中，個別的檔案，或您可以註冊相同的資源檔，所有的三種類型的字串。 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>， <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>內容來設定要當地語系化的項目寫入事件記錄檔的來源。 如果您的應用程式會將字串值，直接寫入事件記錄檔，您不需要設定這些屬性。  
  
 必須設定來源，寫入當地語系化的項目或寫入直接的字串。 如果您的應用程式將使用的資源識別元和字串值的項目寫入，您必須註冊兩個不同的來源。 例如，設定一個來源的資源檔，然後使用該來源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法來寫入項目使用事件記錄檔的資源識別項。 建立不同的來源，如果沒有資源檔，然後使用該來源中的<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，將使用該來源的事件記錄檔中直接寫入字串。  
  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>類別從您的程式碼中，它們通常稱為只能由 Installutil.exe。 此工具會自動呼叫<xref:System.Diagnostics.EventLogInstaller.Install%2A>在安裝程序的方法。 它會備份時失敗，如有必要，藉由呼叫<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>產生例外狀況物件的方法。  
  
   
  
## Examples  
 下列程式碼範例會設定新的事件來源的安裝屬性。 程式碼範例設定的來源名稱和事件記錄檔名稱，並將<xref:System.Diagnostics.EventLogInstaller>至<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.EventLogInstaller" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分類資源檔中的分類數目。</summary>
        <value>分類資源檔中的分類數目。 預設值是零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>来寫入事件的屬性當地語系化類別目錄字串。 如果您提供類別，當您撰寫事件時，事件檢視器顯示事件項目，類別。 事件記錄檔分類是應用程式定義的字串，用來協助篩選事件，或提供事件的相關資訊。 例如，您的應用程式可以定義不同的類別，不同的元件或不同的作業。  
  
 事件類別是選擇性的。如果您的應用程式不會使用類別，請勿設定<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>屬性。  
  
 定義事件訊息及建置事件資源檔的相關詳細資訊，請參閱 「 訊息編譯器 」 中的主題 Platform SDK 文件，網址為[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例會設定新的事件來源的安裝屬性。 程式碼範例會設定事件來源名稱、 事件記錄檔名稱和資源檔中的文字當地語系化的事件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 程式碼範例會使用下列的訊息文字檔案，內建資源程式庫 EventLogMsgs.dll。 訊息文字檔案是建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源檔路徑，這個資源檔包含來源的分類字串。</summary>
        <value>分類資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>来寫入事件的屬性當地語系化類別目錄字串。 如果您提供類別，當您撰寫事件，事件檢視器顯示事件項目類別。 事件記錄檔分類是應用程式定義的字串，用來幫助篩選事件，或提供事件的相關資訊。 比方說，您的應用程式可能會有不同的類別，不同的元件或不同的作業。  
  
 事件類別是選擇性的。如果您的應用程式不會使用類別，請勿設定<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>屬性。  
  
 定義事件訊息及建置事件資源檔的相關詳細資訊，請參閱 「 訊息編譯器 」 中的主題 Platform SDK 文件，網址為[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例會設定新的事件來源的安裝屬性。 程式碼範例會設定事件來源名稱、 事件記錄檔名稱和資源檔中的文字當地語系化的事件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 程式碼範例會使用下列的訊息文字檔案，內建資源程式庫 EventLogMsgs.dll。 訊息文字檔案是建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" />，要用做 <see cref="T:System.Diagnostics.EventLogInstaller" /> 的樣板 (Template)。</param>
        <summary>為事件記錄檔複製安裝時所需之 <see cref="T:System.Diagnostics.EventLog" /> 元件的屬性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的元件`component`參數必須是<xref:System.Diagnostics.EventLog>，否則會擲回例外狀況。  
  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>從程式碼; 內通常稱為只有[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> 用來設定的屬性值 installutil.exe<xref:System.Diagnostics.EventLogInstaller>的現有值<xref:System.Diagnostics.EventLog>。  
  
 如果<xref:System.Diagnostics.EventLog.Log%2A>的<xref:System.Diagnostics.EventLog>也就是傳入為空字串 ("")，您必須設定<xref:System.Diagnostics.EventLog.Log%2A>屬性設為有效的值執行安裝程式之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的元件不是 <see cref="T:System.Diagnostics.EventLog" />。  
  
 -或-  
  
 指定元件的 <see cref="P:System.Diagnostics.EventLog.Log" /> 或 <see cref="P:System.Diagnostics.EventLog.Source" /> 屬性是 <see langword="null" /> 或空的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" />，用來儲存執行復原或解除安裝作業所需的資訊。</param>
        <summary>執行安裝，並將事件記錄檔資訊寫入至登錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法將事件記錄檔資訊寫入至登錄，並將事件記錄檔與所指定的記錄檔相關聯<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。 如果記錄檔不存在，指定來源<xref:System.Diagnostics.EventLogInstaller.Install%2A>建立記錄檔，並將新的來源與它相關聯。  
  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>從程式碼; 內通常稱為只有[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 此工具會自動呼叫<xref:System.Diagnostics.EventLogInstaller.Install%2A>寫入安裝的事件記錄檔相關聯的登錄資訊在安裝程序的方法。 安裝是交易式的所以如果在安裝期間沒有任何安裝專案元件失敗，所有先前安裝的元件會回復到安裝前狀態。 這是藉由呼叫每個元件的<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>註冊新的或現有的事件記錄; 新的來源不使用<xref:System.Diagnostics.EventLogInstaller>若要變更現有的來源。 <xref:System.Diagnostics.EventLogInstaller>類別不會修改現有的來源，以符合指定的安裝屬性的組態屬性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法擲回例外狀況，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對不同的事件記錄檔，在電腦上已註冊的來源名稱。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法略過註冊來源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對已註冊相同的事件記錄檔中指定的來源名稱<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊的屬性。 此狀態資訊，這會傳遞至<xref:System.Diagnostics.EventLogInstaller.Install%2A>為`stateSaver`參數，會持續更新工具安裝的每個<xref:System.Diagnostics.EventLogInstaller>。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">安裝程式要嘗試使用的平台不是 Windows NT 4.0 或者更新的版本。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> 屬性中指定的名稱是已經為不同事件記錄檔註冊的名稱。</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">要比較的安裝程式。</param>
        <summary>判斷安裝程式和其他指定的安裝程式是否參考相同的來源。</summary>
        <returns>
          如果這個安裝程式和 <paramref name="otherInstaller" /> 參數所指定的安裝程式安裝或解除安裝相同的來源，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>從程式碼; 它們通常稱為只能由安裝程式工具 (Installutil.exe)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要將來源設定至的記錄檔名稱。</summary>
        <value>記錄檔的名稱。 這可以是應用程式、系統或自訂的記錄檔名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Diagnostics.EventLogInstaller.Log%2A>相關聯的來源，您在中指定屬性<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性與現有的記錄檔或在本機電腦上新的記錄檔。 [Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)來源對應到電腦的登錄中的記錄檔會使用此資訊。 應用程式和服務應該寫入應用程式記錄檔或自訂的記錄檔。 裝置驅動程式應該寫入至系統記錄檔。  
  
 若要將項目寫入事件記錄檔中，您必須建立來源，並向事件記錄檔。 事件來源只可以一次寫入到一個記錄檔。 安裝程式會使用值<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性向您的應用程式事件記錄檔項目的有效來源。 如果您不指定記錄檔名稱在安裝程式執行之前，安裝程式註冊您的來源應用程式記錄檔。 如果您指定新的來源和現有的記錄檔，安裝程式會建立新的事件來源，並將它與您指定的記錄檔產生關聯。 如果您指定新的來源和新的記錄檔，安裝程式會將新的來源關聯在登錄中，新的記錄檔，但寫入第一個項目之前，不會建立記錄檔。  
  
 作業系統會將事件記錄檔儲存為檔案。 當您使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法來建立新的事件記錄檔，相關聯的檔案會儲存在指定的電腦上的 %SystemRoot%\System32\Config 目錄。 檔案名稱由所附加的前 8 個字元設定<xref:System.Diagnostics.EventLogInstaller.Log%2A>副檔名".evt"檔案名稱的屬性。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>註冊新的或現有的事件記錄; 新的來源不使用<xref:System.Diagnostics.EventLogInstaller>若要變更現有的來源。 <xref:System.Diagnostics.EventLogInstaller>類別不會修改現有的來源，以符合指定的安裝屬性的組態屬性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法擲回例外狀況，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對不同的事件記錄檔，在電腦上已註冊的來源名稱。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不會註冊來源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對已註冊相同的事件記錄檔中指定的來源名稱<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。  
  
 如需詳細的事件記錄檔和來源的行為相關資訊，請參閱<xref:System.Diagnostics.EventLog>類別的文件<xref:System.Diagnostics.EventLog.Log%2A>和<xref:System.Diagnostics.EventLog.Source%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源檔路徑，這個資源檔包含來源的訊息格式化字串。</summary>
        <value>訊息資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>設定來將當地語系化的事件訊息寫入事件記錄檔來源的屬性。 事件訊息是應用程式定義的字串，描述使用者事件。  
  
 您的應用程式可以寫入事件記錄檔項目使用資源識別項。 資源識別元索引位於訊息<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>。 事件檢視器會尋找並顯示目前的語言設定為基礎的當地語系化的資源檔中的對應字串使用的資源識別碼。  
  
 必須設定事件來源，寫入當地語系化的項目或寫入直接的字串。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法，以撰寫當地語系化的項目，設定與訊息資源檔的來源。  
  
 如果您的應用程式中寫入事件訊息字串直接管理，而不是使用的資源識別項中當地語系化的資源檔，請勿設定<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>屬性。  
  
 如果<xref:System.Diagnostics.EventLog.MachineName%2A>屬性不是本機電腦的識別項 ("。")，.NET Framework 會假設資源檔位於遠端電腦上。 如果<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>屬性值包含磁碟機代號，則資源會假設檔案上\\ \\< machinename\>\\< 磁碟機\>$ 共用 (例如， \\\server\c$)。 如果值包含字串 %systemroot%，則資源會假設檔案上\\ \\< machinename\>\admin$ 共用 (例如， \\\server\admin$)。  
  
 定義事件訊息及建置事件資源檔的相關詳細資訊，請參閱 「 訊息編譯器 」 中的主題 Platform SDK 文件，網址為[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例會設定新的事件來源的安裝屬性。 程式碼範例會設定事件來源名稱、 事件記錄檔名稱和資源檔中的文字當地語系化的事件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 程式碼範例會使用下列的訊息文字檔案，內建資源程式庫 EventLogMsgs.dll。 訊息文字檔案是建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源檔路徑，這個資源檔包含來源的訊息參數字串。</summary>
        <value>訊息參數資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>設定事件記錄檔寫入與當地語系化的事件訊息來源的屬性插入參數字串。 指定在每個當地語系化的事件訊息<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>屬性可以包含插入字串的預留位置。 這些預留位置用來指定的位置和語言無關的字串，事件訊息中的資源識別項。 事件檢視器中的對應字串，取代預留位置<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>並且針對當地語系化的事件項目將事件記錄檔訊息格式化。  
  
 比方說，訊息的文字檔案的下列區段會定義的參數預留位置的字串：  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 在參數資源檔中，插入字串必須定義與資源識別項對應至預留位置，如下所示：  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 必須設定事件來源，寫入當地語系化的項目或寫入直接的字串。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法，以撰寫當地語系化的項目，設定與訊息資源檔的來源。  
  
 如果您的應用程式會將事件訊息字串直接寫入事件記錄檔，或您<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>不包含訊息與參數插入預留位置，請勿設定<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>屬性。  
  
 定義事件訊息及建置事件資源檔的相關詳細資訊，請參閱 「 訊息編譯器 」 中的主題 Platform SDK 文件，網址為[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例會設定新的事件來源的安裝屬性。 程式碼範例會設定事件來源名稱、 事件記錄檔名稱和資源檔中的文字當地語系化的事件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 程式碼範例會使用下列的訊息文字檔案，內建資源程式庫 EventLogMsgs.dll。 訊息文字檔案是建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。 具體而言，資源識別碼 1004年定義的訊息會使用預留位置為資源識別元 5002 定義的參數字串。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含電腦的安裝前狀態。</param>
        <summary>將電腦還原到安裝之前的狀態，方法是復原安裝程序寫入至登錄的事件記錄檔資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法復原的效果<xref:System.Diagnostics.EventLogInstaller.Install%2A>方法。 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> 安裝專案中的任何元件的安裝失敗時呼叫。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法建立或設定事件記錄檔和事件來源的屬性。 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> 請刪除事件記錄檔和來源，或將現有的來源的屬性重設其預先安裝值。  
  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>從程式碼; 內通常稱為只有[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 此工具會呼叫<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法，這個或其他元件無法安裝，以復原已經安裝程序所做的任何變更。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊的屬性。 此狀態資訊，這會傳遞至<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>為`savedState`參數，會持續更新此工具會復原備份<xref:System.Diagnostics.EventLogInstaller>。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用記錄檔登錄的來源名稱。</summary>
        <value>使用事件記錄檔登錄作為項目來源的名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件來源會指出項目會記錄事件。 通常是應用程式名稱或大型應用程式內的元件名稱。  
  
 安裝程式會使用值<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性向您的應用程式事件記錄檔項目的有效來源。 新的來源名稱不符合現有的來源名稱或現有的事件記錄檔名稱。 每個來源只能寫入一個事件記錄檔一次。不過，您的應用程式可以使用多個來源來寫入多個事件記錄檔。 例如，您的應用程式可能需要多個來源設定為不同的事件記錄檔或不同的資源檔案。  
  
 應用程式和服務應該寫入應用程式記錄檔或自訂的記錄檔。 裝置驅動程式應該寫入至系統記錄檔。 如果您不指定記錄檔名稱在安裝程式執行之前，安裝程式註冊您的來源應用程式記錄檔。 如果您指定不存在的記錄檔的名稱，系統會登錄<xref:System.Diagnostics.EventLogInstaller.Source%2A>該記錄檔，但寫入第一個項目之前，不會建立記錄檔。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>註冊新的或現有的事件記錄; 新的來源不使用<xref:System.Diagnostics.EventLogInstaller>若要變更現有的來源。 <xref:System.Diagnostics.EventLogInstaller>類別不會修改現有的來源，以符合指定的安裝屬性的組態屬性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法擲回例外狀況，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對不同的事件記錄檔，在電腦上已註冊的來源名稱。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不會註冊來源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>屬性會比對已註冊相同的事件記錄檔中指定的來源名稱<xref:System.Diagnostics.EventLogInstaller.Log%2A>屬性。  
  
 如需詳細的事件記錄檔和來源的行為相關資訊，請參閱<xref:System.Diagnostics.EventLog>類別的文件<xref:System.Diagnostics.EventLog.Log%2A>和<xref:System.Diagnostics.EventLog.Source%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含電腦的安裝前狀態。</param>
        <summary>從登錄移除事件記錄檔資訊，以移除安裝。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>屬性值是`Remove`、<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>方法會刪除來源和相關聯的記錄檔，如果安裝程式會建立<xref:System.Diagnostics.EventLogInstaller.Log%2A>和<xref:System.Diagnostics.EventLogInstaller.Source%2A>指定建立新的事件記錄檔和來源的屬性。  
  
 一般而言，未呼叫的方法<xref:System.Diagnostics.EventLogInstaller>從程式碼; 內通常稱為只有[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)中解除安裝模式。 此工具會自動呼叫<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>還原系統所影響的預先安裝的狀態安裝的組件的方法。 這包括刪除正在解除安裝的事件記錄檔相關聯的登錄資訊。  
  
 應用程式的解除安裝常式會使用專案安裝程式的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已解除安裝元件的相關資訊的屬性。 此狀態資訊，這會傳遞至<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>為`savedState`參數，會持續更新此工具解除安裝每個<xref:System.Diagnostics.EventLogInstaller>。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出在解除安裝時，[Installutil.exe (安裝程式工具)](~/docs/framework/tools/installutil-exe-installer-tool.md) 應該移除事件記錄檔，還是將它保留在已安裝的狀態。</summary>
        <value>其中一個 <see cref="T:System.Configuration.Install.UninstallAction" /> 值，表示解除安裝 <see cref="T:System.Diagnostics.EventLog" /> 時，要讓事件記錄檔保持什麼狀態。 預設值為 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您安裝事件記錄檔時，可以選擇性地將它連接至現有的記錄檔。 如果您這樣做，您必須決定記錄檔應該還原成預先安裝的狀態，或維持在其目前、 安裝後的狀態。 如果您選擇事件記錄檔還原成預先安裝的狀態，不會還原變更在安裝時的事件記錄檔項目。 您可以重設只會與相關聯的事件記錄檔屬性<xref:System.Diagnostics.EventLogInstaller>為其預先安裝的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> 包含無效的值。 這個屬性的有效值只有 <see langword="Remove" /> 和 <see langword="NoAction" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>