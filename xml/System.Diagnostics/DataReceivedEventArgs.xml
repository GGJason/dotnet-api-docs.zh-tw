<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="205ebec39040ed058ad9ffbdc4b91602849b5386" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30397212" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 和 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件的資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以非同步方式收集的重新導向<xref:System.Diagnostics.Process.StandardOutput%2A>或<xref:System.Diagnostics.Process.StandardError%2A>資料流輸出處理程序，您必須建立處理將重新導向資料流輸出事件的方法。 寫入重新導向資料流的處理程序時，會呼叫事件處理常式方法。 事件的委派會呼叫事件處理常式的執行個體<xref:System.Diagnostics.DataReceivedEventArgs>。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>屬性包含在程序已重新導向資料流寫入文字行。  
  
   
  
## Examples  
 下列程式碼範例說明如何執行非同步的讀取的作業上的重新導向<xref:System.Diagnostics.Process.StandardOutput%2A>資料流`sort`命令。 `sort`命令是主控台應用程式讀取及排序文字輸入。  
  
 此範例會建立為事件委派`SortOutputHandler`事件處理常式並將它與相關聯<xref:System.Diagnostics.Process.OutputDataReceived>事件。 此事件處理常式收到來自的重新導向的文字行<xref:System.Diagnostics.Process.StandardOutput%2A>資料流，格式化文字，並將文字寫入至螢幕。  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得已寫入至重新導向 <see cref="T:System.Diagnostics.Process" /> 輸出資料流的字元行。</summary>
        <value>由關聯的 <see cref="T:System.Diagnostics.Process" /> 寫入至其重新導向的 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 或 <see cref="P:System.Diagnostics.Process.StandardError" /> 資料流的字行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您重新導向<xref:System.Diagnostics.Process.StandardOutput%2A>或<xref:System.Diagnostics.Process.StandardError%2A>資料流<xref:System.Diagnostics.Process>對事件處理常式中，是每次引發事件的處理程序將某行寫入至重新導向資料流。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>屬性是該行的<xref:System.Diagnostics.Process>已寫入的重新導向的輸出資料流。 可以使用事件處理常式<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>屬性來篩選處理序的輸出，或將輸出寫入至替代位置。 例如，您可以建立將所有錯誤輸出行都儲存到指定的錯誤記錄檔的事件處理常式。  
  
 一條線被定義為換行字元 ("\n") 後面接著一連串字元或歸位字元後面緊跟著行摘要 ("\r\n")。 行的字元是使用預設的系統 ANSI 字碼頁來編碼。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>屬性不會包含傳回的結束歸位字元或換行字元。  
  
 重新導向資料流關閉時，null 的列會傳送至事件處理常式。 請確定您的事件處理常式會檢查<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>適當之前存取它的屬性。 例如，您可以使用靜態方法<xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType>驗證<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>事件處理常式中的屬性。  
  
   
  
## Examples  
 下列程式碼範例將說明與相關聯的簡單事件處理常式<xref:System.Diagnostics.Process.OutputDataReceived>事件。 此事件處理常式收到來自的重新導向的文字行<xref:System.Diagnostics.Process.StandardOutput%2A>資料流，格式化文字，並將文字寫入至螢幕。  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>