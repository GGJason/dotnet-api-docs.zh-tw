<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7eed23eed830d885974c2c49ca7497e4f2db1423" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39884994" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一組方法和屬性，您可以使用這些方法和屬性，精確地測量已耗用時間。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Diagnostics.Stopwatch>執行個體可以跨多個間隔一個間隔，或已耗用時間總計中測量已耗用時間。 在典型<xref:System.Diagnostics.Stopwatch>案例中，呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>方法，然後最後會呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>方法，然後檢查 經過時間使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>屬性。  
  
 A<xref:System.Diagnostics.Stopwatch>執行個體已執行或已停止，請改用<xref:System.Diagnostics.Stopwatch.IsRunning%2A>若要判斷目前的狀態<xref:System.Diagnostics.Stopwatch>。 使用 <xref:System.Diagnostics.Stopwatch.Start%2A>若要開始測量已耗用時間; 使用<xref:System.Diagnostics.Stopwatch.Stop%2A>停止測量已耗用時間。 查詢經過的時間值，透過內容<xref:System.Diagnostics.Stopwatch.Elapsed%2A>， <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>，或<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>。 執行或已停止執行個體時，您可以查詢經過的時間屬性。 內容持續穩定增加的經過時間而<xref:System.Diagnostics.Stopwatch>是執行; 它們保持不變執行個體停止時。  
  
 根據預設，經過時間值的<xref:System.Diagnostics.Stopwatch>的執行個體等於所有測量的時間間隔的總和。 每次呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>開始計算累積的經過時間; 在每次呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>結束目前的時間間隔測量，並會凍結累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法，以清除所累積的經過時間，以將現有<xref:System.Diagnostics.Stopwatch>執行個體。  
  
 <xref:System.Diagnostics.Stopwatch>藉由計算計時器刻度基礎計時器機制來測量已耗用時間。 如果已安裝的硬體和作業系統支援高解析度效能計數器，則<xref:System.Diagnostics.Stopwatch>類別會使用該 計數器來測量已耗用時間。 否則，<xref:System.Diagnostics.Stopwatch>類別會使用系統計時器來測量已耗用時間。 使用<xref:System.Diagnostics.Stopwatch.Frequency>並<xref:System.Diagnostics.Stopwatch.IsHighResolution>等欄位判斷的有效位數和解析度<xref:System.Diagnostics.Stopwatch>計時實作。  
  
 <xref:System.Diagnostics.Stopwatch>類別可協助 managed 程式碼中的計時有關的效能計數器的操作。 具體而言，<xref:System.Diagnostics.Stopwatch.Frequency>欄位與<xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>方法可用來取代未受管理的 Win32 Api`QueryPerformanceFrequency`和`QueryPerformanceCounter`。  
  
> [!NOTE]
>  在多處理器電腦上，它並不重要的執行緒執行哪一個處理器。 不過，BIOS 或硬體抽象層 (HAL) 中的錯誤，因為您可以在不同的處理器上取得不同計時結果。 若要指定執行緒的處理器親和性，使用<xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Diagnostics.Stopwatch>類別，以判斷應用程式的執行時間。  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 下列範例示範如何使用<xref:System.Diagnostics.Stopwatch>類別以計算效能資料。  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回<xref:System.Diagnostics.Stopwatch>停止執行個體，而且執行個體的已耗用時間屬性為零。  
  
 使用<xref:System.Diagnostics.Stopwatch.Start%2A>方法開始測量已耗用時間，與新<xref:System.Diagnostics.Stopwatch>執行個體。 使用<xref:System.Diagnostics.Stopwatch.StartNew%2A>方法來初始化新<xref:System.Diagnostics.Stopwatch>執行個體，並立即加以啟動。  
  
   
  
## Examples  
 下列範例會初始化<xref:System.Diagnostics.Stopwatch>使用簡單的類別建構函式的執行個體。  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行個體所測量的已耗用時間總和。</summary>
        <value>表示目前執行個體所測量之已耗用時間總和的唯讀 <see cref="T:System.TimeSpan" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在典型<xref:System.Diagnostics.Stopwatch>案例中，呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>方法，然後最後會呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>方法，然後檢查 經過時間使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>屬性。  
  
 使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>要擷取已耗用時間屬性值使用<xref:System.TimeSpan>方法和屬性。 例如，您可以設定的格式傳回<xref:System.TimeSpan>執行個體的文字表示法，或將它傳遞給需要的另一個類別<xref:System.TimeSpan>參數。  
  
 您可以查詢的內容<xref:System.Diagnostics.Stopwatch.Elapsed%2A>， <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>，並<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>雖然<xref:System.Diagnostics.Stopwatch>執行個體正在執行或已停止。 內容持續穩定增加的經過時間而<xref:System.Diagnostics.Stopwatch>是執行; 它們保持不變執行個體停止時。  
  
 根據預設，經過時間值的<xref:System.Diagnostics.Stopwatch>的執行個體等於所有測量的時間間隔的總和。 每次呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>開始計算累積的經過時間; 在每次呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>結束目前的時間間隔測量，並會凍結累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法，以清除所累積的經過時間，以將現有<xref:System.Diagnostics.Stopwatch>執行個體。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>屬性來判斷應用程式的執行時間。  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行個體所測量的已耗用時間總和，以毫秒為單位。</summary>
        <value>表示目前執行個體所測量之毫秒總數的唯讀長整數 (Long Integer)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性代表經過時間無條件捨去至最接近之整數毫秒值。 針對較高的精確度度量，使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>或<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>屬性。  
  
 您可以查詢的內容<xref:System.Diagnostics.Stopwatch.Elapsed%2A>， <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>，並<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>雖然<xref:System.Diagnostics.Stopwatch>執行個體正在執行或已停止。 內容持續穩定增加的經過時間而<xref:System.Diagnostics.Stopwatch>是執行; 它們保持不變執行個體停止時。  
  
 根據預設，經過時間值的<xref:System.Diagnostics.Stopwatch>的執行個體等於所有測量的時間間隔的總和。 每次呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>開始計算累積的經過時間; 在每次呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>結束目前的時間間隔測量，並會凍結累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法，以清除所累積的經過時間，以將現有<xref:System.Diagnostics.Stopwatch>執行個體。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Stopwatch>類別，測量效能的四個不同的實作，來剖析字串的整數。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.Stopwatch>類別。  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行個體所測量的已耗用時間總和，以計時器刻度為單位。</summary>
        <value>表示目前執行個體所測量之計時器刻度總數的唯讀長整數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性表示基礎計時器機制中的計時器刻度數目。 刻度是最小時間單位，<xref:System.Diagnostics.Stopwatch>計時器可以測量。 使用<xref:System.Diagnostics.Stopwatch.Frequency>要轉換的欄位<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>值的秒數。  
  
 您可以查詢的內容<xref:System.Diagnostics.Stopwatch.Elapsed%2A>， <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>，並<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>雖然<xref:System.Diagnostics.Stopwatch>執行個體正在執行或已停止。 內容持續穩定增加的經過時間而<xref:System.Diagnostics.Stopwatch>是執行; 它們保持不變執行個體停止時。  
  
 根據預設，經過時間值的<xref:System.Diagnostics.Stopwatch>的執行個體等於所有測量的時間間隔的總和。 每次呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>開始計算累積的經過時間; 在每次呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>結束目前的時間間隔測量，並會凍結累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法，以清除所累積的經過時間，以將現有<xref:System.Diagnostics.Stopwatch>執行個體。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> 刻度會從不同<xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>。 中的每個刻度<xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>值代表一個 100 奈秒間隔。 中的每個刻度<xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>值代表時間間隔等於 1 秒除以<xref:System.Diagnostics.Stopwatch.Frequency>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Stopwatch>類別，測量效能的四個不同的實作，來剖析字串的整數。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.Stopwatch>類別。  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得計時器頻率，做為每秒的刻度數。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計時器頻率表示計時器精確度和解析度。 例如，計時器頻率為 2 百萬個刻度第二個等於每 500 的奈秒，每個刻度的計時器解析度。 換句話說，因為一秒等於 1 億個奈秒，計時器頻率為每秒 2 百萬個刻度相當於每 1 億個奈秒，可以進一步簡化以每 500 的奈秒的 1 刻度的 2 百萬個刻度。  
  
 <xref:System.Diagnostics.Stopwatch.Frequency>值取決於基礎計時機制的解析度。 如果已安裝的硬體和作業系統支援高解析度效能計數器，則<xref:System.Diagnostics.Stopwatch.Frequency>值會反映該計數器的頻率。 否則，<xref:System.Diagnostics.Stopwatch.Frequency>值根據系統計時器的頻率。  
  
 因為<xref:System.Diagnostics.Stopwatch>頻率取決於已安裝的硬體和作業系統，<xref:System.Diagnostics.Stopwatch.Frequency>系統執行時的值會維持不變。  
  
   
  
## Examples  
 下列範例顯示的頻率和解析度<xref:System.Diagnostics.Stopwatch>計時器。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.Stopwatch>類別。  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得計時器機制中的目前刻度數。</summary>
        <returns>表示基礎計時器機制之刻度計數器值的長整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Diagnostics.Stopwatch>類別會使用高解析度效能計數器，<xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>傳回該計數器的目前值。 如果<xref:System.Diagnostics.Stopwatch>類別會使用系統計時器<xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>會傳回目前<xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>屬性<xref:System.DateTime.Now%2A?displayProperty=nameWithType>執行個體。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>方法來更新效能計數器。  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示計時器是否以高解析度效能計數器為基礎。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用計時器<xref:System.Diagnostics.Stopwatch>類別取決於系統硬體和作業系統。 <xref:System.Diagnostics.Stopwatch.IsHighResolution> 已`true`如果<xref:System.Diagnostics.Stopwatch>計時器為基礎的高解析度效能計數器。 否則，請<xref:System.Diagnostics.Stopwatch.IsHighResolution>已`false`，這表示<xref:System.Diagnostics.Stopwatch>計時器為基礎的系統計時器。  
  
   
  
## Examples  
 下列範例顯示的頻率和解析度<xref:System.Diagnostics.Stopwatch>計時器。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.Stopwatch>類別。  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示 <see cref="T:System.Diagnostics.Stopwatch" /> 計時器是否執行中。</summary>
        <value>如果 <see cref="T:System.Diagnostics.Stopwatch" /> 執行個體目前執行中並正在測量間隔的已耗用時間，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Diagnostics.Stopwatch>執行個體開始執行，藉由呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>或<xref:System.Diagnostics.Stopwatch.StartNew%2A>。 執行呼叫的執行個體停止<xref:System.Diagnostics.Stopwatch.Stop%2A>或<xref:System.Diagnostics.Stopwatch.Reset%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止時間間隔測量並將已耗用時間重設為零。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Diagnostics.Stopwatch>計算執行個體，並跨多個時間間隔，保留所累積的經過時間，直到重設執行個體。 使用<xref:System.Diagnostics.Stopwatch.Stop%2A>来停止目前的時間間隔測量並保留累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>停止進行中的任何間隔測量並清除 經過時間值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止時間間隔測量，並將耗用時間重設為零，然後開始測量耗用時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Diagnostics.Stopwatch>計算執行個體，並跨多個時間間隔，保留所累積的經過時間，直到重設或重新啟動執行個體。 使用<xref:System.Diagnostics.Stopwatch.Stop%2A>来停止目前的時間間隔測量並保留累計的經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>停止進行中的任何間隔測量並清除 經過時間值。 使用<xref:System.Diagnostics.Stopwatch.Restart%2A>停止目前的時間間隔測量並啟動新的間隔測量。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>啟動或繼續測量間隔的已耗用時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在典型<xref:System.Diagnostics.Stopwatch>案例中，呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>方法，然後最後會呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>方法，然後檢查 經過時間使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>屬性。  
  
 一旦啟動之後，<xref:System.Diagnostics.Stopwatch>計時器會測量目前的間隔，以耗用的計時器刻度為單位，直到停止或重設執行個體。 啟動<xref:System.Diagnostics.Stopwatch>也就是已在執行不會將計時器的狀態變更或重設的已耗用時間屬性。  
  
 當<xref:System.Diagnostics.Stopwatch>執行個體則測量一個以上的時間間隔，<xref:System.Diagnostics.Stopwatch.Start%2A>方法繼續測量從目前的經過時間值的時間。 A<xref:System.Diagnostics.Stopwatch>計算執行個體，並跨多個時間間隔，保留所累積的經過時間，直到重設執行個體。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法之前呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>清除所累積的經過時間，以<xref:System.Diagnostics.Stopwatch>執行個體。 使用<xref:System.Diagnostics.Stopwatch.Restart%2A>方法，以<xref:System.Diagnostics.Stopwatch.Reset%2A>並<xref:System.Diagnostics.Stopwatch.Start%2A><xref:System.Diagnostics.Stopwatch>使用單一命令。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Diagnostics.Stopwatch.Start%2A>方法，以啟動計時器，測量應用程式的執行時間。  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化新的 <see cref="T:System.Diagnostics.Stopwatch" /> 執行個體，將已耗用時間屬性設定為零，然後開始測量已耗用時間。</summary>
        <returns>剛開始測量已耗用時間的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法就相當於呼叫<xref:System.Diagnostics.Stopwatch>建構函式，然後呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>新執行個體上。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Stopwatch>類別，測量效能的四個不同的實作，來剖析字串的整數。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.Stopwatch>類別。  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止測量間隔的已耗用時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在典型<xref:System.Diagnostics.Stopwatch>案例中，呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>方法，然後最後會呼叫<xref:System.Diagnostics.Stopwatch.Stop%2A>方法，然後檢查 經過時間使用<xref:System.Diagnostics.Stopwatch.Elapsed%2A>屬性。  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A>方法結束目前的時間間隔測量。 停止<xref:System.Diagnostics.Stopwatch>也就是未執行不會將計時器的狀態變更或重設的已耗用時間屬性。  
  
 當<xref:System.Diagnostics.Stopwatch>執行個體則測量一個以上的時間間隔，<xref:System.Diagnostics.Stopwatch.Stop%2A>方法相當於暫停已耗用時間度量。 後續呼叫<xref:System.Diagnostics.Stopwatch.Start%2A>繼續測量從目前的經過時間值的時間。 使用<xref:System.Diagnostics.Stopwatch.Reset%2A>方法，以清除所累積的經過時間，以<xref:System.Diagnostics.Stopwatch>執行個體。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Diagnostics.Stopwatch.Stop%2A>方法來停止計時器，測量應用程式的執行時間。  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>