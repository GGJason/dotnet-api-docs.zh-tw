<Type Name="Trace" FullName="System.Diagnostics.Trace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ce349e938cbbfe615cd631111cb2663fbd39683" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061489" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Trace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Trace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Trace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Trace" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trace sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一組可協助您追蹤程式碼執行的方法與屬性。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用的屬性和方法中的<xref:System.Diagnostics.Trace>類別來檢測發行組建。 檢測可讓您監視執行實際的設定中的應用程式的健全狀況。 追蹤可協助您隔離問題，並加以修正，而不會影響執行中的系統。  
  
 這個類別會提供方法來顯示<xref:System.Diagnostics.Trace.Assert%2A>對話方塊中，並發出一律將判斷提示<xref:System.Diagnostics.Trace.Fail%2A>。 這個類別會提供寫入方法中的下列差異： <xref:System.Diagnostics.Trace.Write%2A>， <xref:System.Diagnostics.Trace.WriteLine%2A>， <xref:System.Diagnostics.Trace.WriteIf%2A>，和<xref:System.Diagnostics.Trace.WriteLineIf%2A>。  
  
 <xref:System.Diagnostics.BooleanSwitch>和<xref:System.Diagnostics.TraceSwitch>類別提供方法以動態方式控制追蹤輸出。 您可以修改這些參數的值不需要重新編譯您的應用程式。 如需使用組態檔來設定參數資訊，請參閱<xref:System.Diagnostics.Switch>類別和[How to： 建立、 初始化和設定追蹤參數](~/docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)主題。  
  
 您可以新增自訂追蹤輸出的目標<xref:System.Diagnostics.TraceListener>執行個體，或移除執行個體從<xref:System.Diagnostics.Trace.Listeners%2A>集合。 <xref:System.Diagnostics.Trace.Listeners%2A>集合由兩者共用<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>類別; 加入其中一個類別的追蹤接聽程式將接聽程式加入至兩者。 根據預設，追蹤輸出，就會發出使用<xref:System.Diagnostics.DefaultTraceListener>類別。  
  
> [!NOTE]
>  加入追蹤接聽程式，<xref:System.Diagnostics.Trace.Listeners%2A>集合可能會造成追蹤，時擲回例外狀況，如果追蹤接聽程式所使用的資源無法使用。 條件和擲回的例外狀況取決於追蹤接聽項，且無法列舉本主題中。 可能很有用呼叫<xref:System.Diagnostics.Trace>方法`try` / `catch`區塊偵測和處理來自追蹤接聽程式的任何例外狀況。  
  
> [!NOTE]
>  如果您將追蹤接聽項加入至部分信任程式碼時，您會收到<xref:System.Security.SecurityException>例外狀況，因為加入追蹤接聽程式需要<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode>權限。 若要追蹤 Visual Studio 中的沙箱中執行部分信任程式碼，不要將追蹤接聽項。 相反地，檢視<xref:System.Diagnostics.Trace>和<xref:System.Diagnostics.Debug>訊息**輸出**視窗。  
  
 <xref:System.Diagnostics.Trace>類別提供屬性，取得或設定的層級<xref:System.Diagnostics.Trace.Indent%2A>、 <xref:System.Diagnostics.Trace.IndentSize%2A>，以及是否要<xref:System.Diagnostics.Trace.AutoFlush%2A>之後每次寫入。  
  
 若要設定<xref:System.Diagnostics.Trace.AutoFlush%2A>和<xref:System.Diagnostics.Trace.IndentSize%2A>如<xref:System.Diagnostics.Trace>，您可以編輯組態檔對應到您的應用程式的名稱。 組態檔應該格式如下列範例所示：  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.ConditionalAttribute>屬性會套用至方法的<xref:System.Diagnostics.Trace>。 支援的編譯器<xref:System.Diagnostics.ConditionalAttribute>忽略呼叫這些方法，除非 「 追蹤 」 定義為條件式編譯符號。 請參閱編譯器的文件，以判斷是否<xref:System.Diagnostics.ConditionalAttribute>支援，以及定義條件式編譯符號的語法。  
  
> [!NOTE]
>  在 Visual Studio 專案中，依預設，[偵錯] 條件式編譯符號定義偵錯組建，而"TRACE"符號的同時進行偵錯和發行的組建定義。 如需如何停用此行為，請參閱 Visual Studio 文件。  
  
 若要在 C# 中定義的 「 追蹤 」 的條件式編譯符號，新增`/d:TRACE`編譯器命令列選項，當您編譯程式碼使用命令列，或新增`#define TRACE`加入您的檔案頂端。 在 Visual Basic 中，加入`/d:TRACE=True`編譯器命令列選項，或新增`#Const TRACE=True`檔案。  
  
 <xref:System.Diagnostics.ConditionalAttribute> 不支援 c + + 編譯器。 若要提供對等的功能，您必須將之方法的呼叫<xref:System.Diagnostics.Trace>中`#if defined(TRACE) ... #endif`區塊，並加入`/DTRACE`編譯器命令列選項，或新增`#define TRACE`檔案。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Trace>來指示的開始和結束程式的執行。 此範例也會使用<xref:System.Diagnostics.Trace.Indent%2A?displayProperty=nameWithType>和<xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=nameWithType>區別追蹤輸出的方法。 如需更完整的使用範例<xref:System.Diagnostics.Trace>，請參閱[How to： 將追蹤陳述式加入應用程式程式碼](~/docs/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code.md)。  
  
 [!code-cpp[Classic Trace Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace Example/CS/source.cs#1)]
 [!code-vb[Classic Trace Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>檢查條件；如果條件為 <see langword="false" />，則輸出訊息，並顯示訊息方塊，該方塊會顯示呼叫堆疊。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">要評估的條件運算式。 如果條件為 <see langword="true" />，就不會傳送失敗的訊息，也不會顯示訊息方塊。</param>
        <summary>檢查條件；如果條件為 <see langword="false" />，則顯示訊息方塊，該方塊會顯示呼叫堆疊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法，如果您想要執行判斷提示，發行組建。 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法只適用於偵錯組建。 如需詳細資訊，請參閱[Managed 程式碼中的判斷提示](/visualstudio/debugger/assertions-in-managed-code)。  
  
 一般而言，<xref:System.Diagnostics.Trace.Assert%28System.Boolean%29>方法用來在程式開發期間識別出邏輯錯誤。 <xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> 評估條件。 如果結果為`false`，它會傳送失敗訊息給<xref:System.Diagnostics.Trace.Listeners%2A>集合。 您可以自訂此行為，藉由新增<xref:System.Diagnostics.TraceListener>，或移除，<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
 當使用者介面模式中執行應用程式時，它會顯示訊息方塊，其中會顯示呼叫堆疊，與檔案和行號。 訊息方塊包含三個按鈕：**中止**，**重試**，和**忽略**。 按一下**中止**按鈕結束應用程式。 按一下**重試**如果您的應用程式正在執行中偵錯工具，或詢問您是否要開啟偵錯工具，如果不是傳送至偵錯工具中的程式碼。 按一下**忽略**會繼續進行下一個指令碼中。  
  
> [!NOTE]
>  訊息方塊的顯示取決於是否存在<xref:System.Diagnostics.DefaultTraceListener>。 如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，訊息方塊不會顯示。 <xref:System.Diagnostics.DefaultTraceListener>可以移除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或藉由呼叫<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>屬性 (`System.Diagnostics.Trace.Listeners.Clear()`)。  
  
 您可以變更的行為<xref:System.Diagnostics.DefaultTraceListener>對應至您的應用程式名稱的組態檔中。 在此檔案中，您可以啟用和停用判斷提示訊息方塊或設定<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>屬性。 組態檔的格式應該如下：  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 下列範例會建立陣列的索引。 某些動作就會進行索引的值。 接下來的程式碼呼叫<xref:System.Diagnostics.Trace.Assert%2A>來驗證索引值是否有效。 如果不是有效的<xref:System.Diagnostics.Trace.Assert%2A>輸出呼叫堆疊。  
  
 [!code-cpp[Classic Trace.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">要評估的條件運算式。 如果條件為 <see langword="true" />，就不會傳送指定的訊息，也不會顯示訊息方塊。</param>
        <param name="message">要傳送給 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的訊息。</param>
        <summary>檢查條件；如果條件為 <see langword="false" />，則輸出指定的訊息，並顯示訊息方塊，該方塊會顯示呼叫堆疊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法，如果您想要執行判斷提示，發行組建。 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法只適用於偵錯組建。 如需詳細資訊，請參閱[Managed 程式碼中的判斷提示](/visualstudio/debugger/assertions-in-managed-code)。  
  
 一般而言，<xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29>方法用來在程式開發期間識別出邏輯錯誤。 <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> 評估條件。 如果結果為`false`，它會傳送至指定的診斷訊息<xref:System.Diagnostics.Trace.Listeners%2A>集合。 您可以自訂此行為，藉由新增<xref:System.Diagnostics.TraceListener>，或移除，<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
 當使用者介面模式中執行應用程式時，它會顯示訊息方塊，其中會顯示呼叫堆疊，與檔案和行號。 訊息方塊包含三個按鈕：**中止**，**重試**，和**忽略**。 按一下**中止**按鈕結束應用程式。 按一下**重試**如果您的應用程式正在執行中偵錯工具，或詢問您是否要開啟偵錯工具，如果不是傳送至偵錯工具中的程式碼。 按一下**忽略**會繼續進行下一個指令碼中。  
  
> [!NOTE]
>  訊息方塊的顯示取決於是否存在<xref:System.Diagnostics.DefaultTraceListener>。 如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，訊息方塊不會顯示。 <xref:System.Diagnostics.DefaultTraceListener>可以移除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或藉由呼叫<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>屬性 (`System.Diagnostics.Trace.Listeners.Clear()`)。  
  
 您可以變更的行為<xref:System.Diagnostics.DefaultTraceListener>對應至您的應用程式名稱的組態檔中。 在此檔案中，您可以啟用和停用判斷提示訊息方塊或設定<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>屬性。 組態檔的格式應該如下：  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 下列範例會檢查，查看`type`參數才有效。 如果`type`傳入`null`、<xref:System.Diagnostics.Trace.Assert%2A>輸出訊息。  
  
 [!code-cpp[Classic Trace.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">要評估的條件運算式。 如果條件為 <see langword="true" />，就不會傳送指定的訊息，也不會顯示訊息方塊。</param>
        <param name="message">要傳送給 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的訊息。</param>
        <param name="detailMessage">要傳送給 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的詳細訊息。</param>
        <summary>檢查條件；如果條件為 <see langword="false" />，則輸出兩個指定的訊息，並顯示訊息方塊，該方塊會顯示呼叫堆疊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法，如果您想要執行判斷提示，發行組建。 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法只適用於偵錯組建。 如需詳細資訊，請參閱[Managed 程式碼中的判斷提示](/visualstudio/debugger/assertions-in-managed-code)。  
  
 一般而言，<xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29>方法用來在程式開發期間識別出邏輯錯誤。 <xref:System.Diagnostics.Trace.Assert%2A> 評估條件。 如果結果為`false`，它會傳送指定的診斷訊息和要詳細的訊息<xref:System.Diagnostics.Trace.Listeners%2A>集合。 您可以自訂此行為，藉由新增<xref:System.Diagnostics.TraceListener>，或移除，<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
 當使用者介面模式中執行應用程式時，它會顯示訊息方塊，其中會顯示呼叫堆疊，與檔案和行號。 訊息方塊包含三個按鈕：**中止**，**重試**，和**忽略**。 按一下**中止**按鈕結束應用程式。 按一下**重試**如果您的應用程式正在執行中偵錯工具，或詢問您是否要開啟偵錯工具，如果不是傳送至偵錯工具中的程式碼。 按一下**忽略**會繼續進行下一個指令碼中。  
  
> [!NOTE]
>  訊息方塊的顯示取決於是否存在<xref:System.Diagnostics.DefaultTraceListener>。 如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，訊息方塊不會顯示。 <xref:System.Diagnostics.DefaultTraceListener>可以移除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或藉由呼叫<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>屬性 (`System.Diagnostics.Trace.Listeners.Clear()`)。  
  
 您可以變更的行為<xref:System.Diagnostics.DefaultTraceListener>對應至您的應用程式名稱的組態檔中。 在此檔案中，您可以啟用和停用判斷提示訊息方塊或設定<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>屬性。 組態檔的格式應該如下：  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 下列範例會檢查，查看`type`參數才有效。 如果`type`傳入`null`、<xref:System.Diagnostics.Trace.Assert%2A>輸出訊息。  
  
 [!code-cpp[Classic Trace.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定每次寫入後是否應該在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上呼叫 <see cref="M:System.Diagnostics.Trace.Flush" />。</summary>
        <value>
          如果每次寫入後會在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上呼叫 <see cref="M:System.Diagnostics.Trace.Flush" />，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設值為 `false`。  
  
 清除資料流不會清除其基礎的編碼器，除非您明確地呼叫<xref:System.Diagnostics.Trace.Flush%2A>或<xref:System.Diagnostics.Trace.Close%2A>。 設定<xref:System.Diagnostics.Trace.AutoFlush%2A>至`true`表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。 這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。 這種情況下會影響 UTF8 及 UTF7 其中某些字元可以只編碼的編碼器接收或多個相鄰的字元之後。  
  
 若要設定<xref:System.Diagnostics.Trace.AutoFlush%2A>和<xref:System.Diagnostics.Trace.IndentSize%2A>如<xref:System.Diagnostics.Trace>，您也可以編輯組態檔對應到您的應用程式的名稱。 組態檔應該格式如下列範例所示：  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除輸出緩衝區，然後關閉 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法，當時輸出至檔案，例如<xref:System.Diagnostics.TextWriterTraceListener>。  
  
 清除資料流不會清除其基礎的編碼器，除非您明確地呼叫<xref:System.Diagnostics.Trace.Flush%2A>或<xref:System.Diagnostics.Trace.Close%2A>。 設定<xref:System.Diagnostics.Trace.AutoFlush%2A>至`true`表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。 這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。 這種情況下會影響 UTF8 及 UTF7 其中某些字元可以只編碼的編碼器接收或多個相鄰的字元之後。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TextWriterTraceListener>名為`myTextListener`。 `myTextListener` 使用<xref:System.IO.StreamWriter>呼叫`myOutputWriter`寫入到名為`TestFile.txt`。 此範例建立檔案、 資料流和文字寫入器、 將一行文字寫入檔案，然後清除和關閉輸出。  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationManager">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.CorrelationManager CorrelationManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.CorrelationManager CorrelationManager" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.CorrelationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrelationManager As CorrelationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::CorrelationManager ^ CorrelationManager { System::Diagnostics::CorrelationManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CorrelationManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這項追蹤的執行緒相關管理員。</summary>
        <value>與這個追蹤的執行緒相關聯的 <see cref="T:System.Diagnostics.CorrelationManager" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這是進階的屬性，大部分的應用程式不應該使用的情況。  
  
 <xref:System.Diagnostics.CorrelationManager>類別會提供用來儲存執行緒繫結內容中的邏輯作業識別和自動標記 預存的身分識別與執行緒產生的每個追蹤事件的方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.CorrelationManager" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>發出錯誤訊息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要發出的訊息。</param>
        <summary>發出指定的錯誤訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的追蹤接聽程式的預設行為是輸出`message`參數，以在使用者介面模式中，以及執行應用程式時的訊息方塊<xref:System.Diagnostics.TraceListener>中執行個體<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
> [!NOTE]
>  顯示訊息方塊是取決於是否存在<xref:System.Diagnostics.DefaultTraceListener>。 如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，訊息方塊不會顯示。 <xref:System.Diagnostics.DefaultTraceListener>可以移除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或藉由呼叫<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>屬性 (`System.Diagnostics.Trace.Listeners.Clear()`)。  
  
 您可以自訂此行為，藉由新增<xref:System.Diagnostics.TraceListener>，或藉由移除其中一個，<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Trace.Fail%2A>例外狀況處理期間列印一則訊息的方法。  
  
 [!code-cpp[Classic Trace.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#1)]  
  
 您也可以使用<xref:System.Diagnostics.Trace.Fail%2A>switch 陳述式中的方法。  
  
 [!code-cpp[Classic Trace.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要發出的訊息。</param>
        <param name="detailMessage">要發出的詳細訊息。</param>
        <summary>會發出錯誤訊息以及詳細的錯誤訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設行為是預設的追蹤接聽程式，以輸出`message`參數和`detailedMessage`參數，以在使用者介面模式中，以及執行應用程式時的訊息方塊<xref:System.Diagnostics.TraceListener>中執行個體<xref:System.Diagnostics.Trace.Listeners%2A>集合.  
  
> [!NOTE]
>  顯示訊息方塊是取決於是否存在<xref:System.Diagnostics.DefaultTraceListener>。 如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，訊息方塊不會顯示。 <xref:System.Diagnostics.DefaultTraceListener>可以移除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或藉由呼叫<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>屬性 (`System.Diagnostics.Trace.Listeners.Clear()`)。  
  
 您可以自訂此行為，藉由新增<xref:System.Diagnostics.TraceListener>，或藉由移除其中一個，<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Diagnostics.Trace.Fail%2A>例外狀況處理期間列印一則訊息的方法。  
  
 [!code-cpp[Classic Trace.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#1)]  
  
 您也可以使用<xref:System.Diagnostics.Trace.Fail%2A>switch 陳述式中的方法。  
  
 [!code-cpp[Classic Trace.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除輸出緩衝區，讓緩衝的資料寫入 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 清除資料流不會清除其基礎的編碼器，除非您明確地呼叫<xref:System.Diagnostics.Trace.Flush%2A>或<xref:System.Diagnostics.Trace.Close%2A>。 設定<xref:System.Diagnostics.Trace.AutoFlush%2A>至`true`表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。 這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。 這種情況下會影響 UTF8 及 UTF7 其中某些字元可以只編碼的編碼器接收或多個相鄰的字元之後。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TextWriterTraceListener>名為`myTextListener`。 `myTextListener` 使用<xref:System.IO.StreamWriter>呼叫`myOutputWriter`寫入到名為`TestFile.txt`。 此範例建立檔案、 資料流和文字寫入器、 將一行文字寫入檔案，然後清除和關閉輸出。  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 增加一。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例遞增和遞減縮排層級並發出追蹤訊息。  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 這個範例會產生下列輸出：  
  
```  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Unindent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定縮排層級。</summary>
        <value>縮排層級。 預設值是零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.IndentLevel%2A>屬性表示的次數大小的縮排<xref:System.Diagnostics.Trace.IndentSize%2A>套用。 這個屬性會儲存每個執行緒/每個要求為基礎。  
  
   
  
## Examples  
 下列範例遞增和遞減縮排層級並發出追蹤訊息。  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 這個範例會產生下列輸出：  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定縮排的空格數目。</summary>
        <value>縮排中的空格數目。 預設值為 4。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Diagnostics.TextWriterTraceListener>將這個數字解譯為空格。 <xref:System.Diagnostics.EventLogTraceListener>會忽略此值。  
  
 這個屬性會儲存每個執行緒/每個要求為基礎。  
  
 若要設定<xref:System.Diagnostics.Trace.AutoFlush%2A>和<xref:System.Diagnostics.Trace.IndentSize%2A>如<xref:System.Diagnostics.Trace>，您也可以編輯組態檔對應到您的應用程式的名稱。 組態檔應該格式如下列範例所示：  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得正在監視追蹤輸出的接聽程式集合。</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceListenerCollection" />，表示監視追蹤輸出的 <see cref="T:System.Diagnostics.TraceListener" /> 類型集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接聽程式會產生追蹤輸出中的格式化的輸出。 根據預設，集合包含的執行個體<xref:System.Diagnostics.DefaultTraceListener>類別。 如果您想要移除預設的接聽程式，呼叫<xref:System.Diagnostics.TraceListenerCollection.Remove%2A>方法，並將它傳遞的執行個體<xref:System.Diagnostics.DefaultTraceListener>。 若要將輸出重新導向至主控台視窗中，執行個體加入<xref:System.Diagnostics.ConsoleTraceListener>類別。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Trace.Listeners%2A>集合由兩者共用<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>類別; 加入其中一個類別的追蹤接聽程式將接聽程式加入至兩者。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.ConsoleTraceListener>，輸出至主控台畫面。 程式碼會再加入新的接聽程式<xref:System.Diagnostics.Trace.Listeners%2A>。  
  
 [!code-cpp[Classic Trace.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重新整理追蹤組態資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式啟動時，會擷取追蹤組態資料。 如果組態資料已變更應用程式啟動之後，呼叫<xref:System.Diagnostics.Trace.Refresh%2A>方法，以更新追蹤組態資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceError">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將錯誤訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的資訊訊息。</param>
        <summary>使用指定的訊息，將錯誤訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceError%2A> 呼叫`TraceEvent`每個追蹤接聽程式，以追蹤事件類型的方法<xref:System.Diagnostics.TraceEventType.Error>，做為訊息字串中傳遞資訊的訊息。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">包含零或多個格式項目的格式字串，它與 <c>args</c> 陣列中的物件相對應。</param>
        <param name="args">
          <see langword="object" /> 陣列，含有零或多個要格式化的物件。</param>
        <summary>使用指定的物件陣列和格式化資訊，將錯誤訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceError%2A> 呼叫`TraceEvent`追蹤事件類型的追蹤接聽項中的方法<xref:System.Diagnostics.TraceEventType.Error>，傳遞訊息內容做為物件陣列與格式設定資訊。 請參閱<xref:System.String.Format%2A>方法，如需有關`format`和`args`參數。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceInformation">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將告知性訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽程式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的資訊訊息。</param>
        <summary>使用指定的訊息，將告知性訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceInformation%2A> 呼叫`TraceEvent`每個追蹤接聽程式，以追蹤事件類型的方法<xref:System.Diagnostics.TraceEventType.Information>，做為訊息字串中傳遞資訊的訊息。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">包含零或多個格式項目的格式字串，它與 <c>args</c> 陣列中的物件相對應。</param>
        <param name="args">
          <see langword="object" /> 陣列，含有零或多個要格式化的物件。</param>
        <summary>使用指定的物件陣列和格式化資訊，將告知性訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceInformation%2A> 呼叫`TraceEvent`追蹤事件類型的追蹤接聽項中的方法<xref:System.Diagnostics.TraceEventType.Information>，傳遞訊息內容做為物件陣列與格式設定資訊。 請參閱<xref:System.String.Format%2A>方法，如需有關`format`和`args`參數。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceWarning">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將警告訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽程式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的資訊訊息。</param>
        <summary>使用指定的訊息，將警告訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceWarning%2A> 呼叫`TraceEvent`方法的每個追蹤事件類型的追蹤接聽項<xref:System.Diagnostics.TraceEventType.Warning>，做為訊息字串中傳遞資訊的訊息。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">包含零或多個格式項目的格式字串，它與 <c>args</c> 陣列中的物件相對應。</param>
        <param name="args">
          <see langword="object" /> 陣列，含有零或多個要格式化的物件。</param>
        <summary>使用指定的物件陣列和格式化資訊，將警告訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceWarning%2A> 呼叫`TraceEvent`追蹤事件類型的追蹤接聽項中的方法<xref:System.Diagnostics.TraceEventType.Warning>，傳遞訊息內容做為物件陣列與格式設定資訊。 請參閱<xref:System.String.Format%2A>方法，如需有關`format`和`args`參數。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 減少一。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例遞增和遞減縮排層級並發出追蹤訊息。  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 這個範例會產生下列輸出：  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Indent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="UseGlobalLock">
      <MemberSignature Language="C#" Value="public static bool UseGlobalLock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseGlobalLock" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.UseGlobalLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseGlobalLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseGlobalLock { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否應該使用全域鎖定。</summary>
        <value>
          如果要使用全域鎖定則為 <see langword="true" />；否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果追蹤接聽程式不具備執行緒安全的值為何，一律使用全域鎖定<xref:System.Diagnostics.Trace.UseGlobalLock%2A>。 <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>屬性用來判斷接聽程式是否具備執行緒安全。 只有當不使用全域鎖定的值<xref:System.Diagnostics.Trace.UseGlobalLock%2A>是`false`和值<xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>是`true`。 預設行為是使用全域鎖定。  
  
 若要設定<xref:System.Diagnostics.Trace.UseGlobalLock%2A>如<xref:System.Diagnostics.Trace>，您也可以編輯組態檔對應到您的應用程式的名稱。 組態檔應該格式如下列範例所示：  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace useGlobalLock="false" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 相關聯的列舉型別：  <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將有關追蹤的資訊寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <summary>將物件的 <see cref="M:System.Object.ToString" /> 方法值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
> [!NOTE]
>  ASP.NET 提供量身訂做的 Web 網頁的追蹤功能。 寫入追蹤訊息中的 ASP.NET 網頁，請使用<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。  
  
 根據預設，ASP.NET Web 網頁，陳述式相關聯的程式碼中`Trace.Write("...")`呼叫<xref:System.Web.TraceContext.Write%2A>方法<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。 若要使用<xref:System.Diagnostics.Trace?displayProperty=nameWithType>類別網頁，您必須包含命名空間，例如， `System.Diagnostics.Trace.Write("...")`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的名字`value`參數<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第一個訊息的同一行上的訊息。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.Write1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <summary>將訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
> [!NOTE]
>  ASP.NET 提供量身訂做的 Web 網頁的追蹤功能。 寫入追蹤訊息中的 ASP.NET 網頁，請使用<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。  
  
 根據預設，ASP.NET Web 網頁，陳述式相關聯的程式碼中`Trace.Write("...")`呼叫<xref:System.Web.TraceContext.Write%2A>方法<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。 若要使用<xref:System.Diagnostics.Trace?displayProperty=nameWithType>類別網頁，您必須包含命名空間，例如， `System.Diagnostics.Trace.Write("...")`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 行結束字元會遵循第二個訊息。  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> 名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>將物件之 <see cref="M:System.Object.ToString" /> 方法的分類名稱和值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
> [!NOTE]
>  ASP.NET 提供量身訂做的 Web 網頁的追蹤功能。 寫入追蹤訊息中的 ASP.NET 網頁，請使用<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。  
  
 根據預設，ASP.NET Web 網頁，陳述式相關聯的程式碼中`Trace.Write("...")`呼叫<xref:System.Web.TraceContext.Write%2A>方法<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。 若要使用<xref:System.Diagnostics.Trace?displayProperty=nameWithType>類別網頁，您必須包含命名空間，例如， `System.Diagnostics.Trace.Write("...")`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel> `Verbose`，此範例輸出的名稱`myObject`和`category`至<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Error`或更新版本中，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.Write3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>將分類名稱和訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
> [!NOTE]
>  ASP.NET 提供量身訂做的 Web 網頁的追蹤功能。 寫入追蹤訊息中的 ASP.NET 網頁，請使用<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。  
  
 根據預設，ASP.NET Web 網頁，陳述式相關聯的程式碼中`Trace.Write("...")`呼叫<xref:System.Web.TraceContext.Write%2A>方法<xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType>屬性。 若要使用<xref:System.Diagnostics.Trace?displayProperty=nameWithType>類別網頁，您必須包含命名空間，例如， `System.Diagnostics.Trace.Write("...")`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel> `Verbose`，範例會輸出第一個錯誤訊息至<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Error`或更新版本中，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.Write2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>如果條件為 <see langword="true" />，將有關追蹤的資訊寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <summary>如果條件為 <see langword="true" />，則將物件的 <see cref="M:System.Object.ToString" /> 方法值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出值參數的名字<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第一個訊息的同一行上的訊息。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.Write(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="message">要寫入的訊息。</param>
        <summary>如果條件為 <see langword="true" />，則將訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.Write(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>如果條件為 <see langword="true" />，則將物件之 <see cref="M:System.Object.ToString" /> 方法的分類名稱和值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel> `Verbose`，此範例輸出的名稱`myObject`和`category`至<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Error`或更新版本中，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.Write(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="message">要寫入的訊息。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>如果條件是 <see langword="true" />，則將分類名稱和訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.Write%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel> `Verbose`，範例會輸出第一個錯誤訊息至<xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Error`或更新版本中，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.Write(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將有關追蹤的資訊寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <summary>將物件的 <see cref="M:System.Object.ToString" /> 方法值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第一個訊息的同一行上之物件的名稱。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <summary>將訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>將物件之 <see cref="M:System.Object.ToString" /> 方法的分類名稱和值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>將分類名稱和訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息和`category`第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>如果條件為 <see langword="true" />，將有關追蹤的資訊寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <summary>如果條件為 <see langword="true" />，則將物件的 <see cref="M:System.Object.ToString" /> 方法值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第一個訊息的同一行上之物件的名稱。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="message">要寫入的訊息。</param>
        <summary>如果條件為 <see langword="true" />，則將訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="value">
          <see cref="T:System.Object" />，其名稱會傳送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>如果條件為 <see langword="true" />，則將物件之 <see cref="M:System.Object.ToString" /> 方法的分類名稱和值寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息的第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> 會寫入訊息，否則為 <see langword="false" />。</param>
        <param name="message">要寫入的訊息。</param>
        <param name="category">用來組織輸出的類別名稱。</param>
        <summary>如果條件是 <see langword="true" />，則將分類名稱和訊息寫入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的追蹤接聽項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，輸出會寫入執行個體<xref:System.Diagnostics.DefaultTraceListener>。  
  
 `category`參數可以用來群組輸出訊息。  
  
 這個方法會呼叫<xref:System.Diagnostics.TraceListener.WriteLine%2A>追蹤接聽項的方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Diagnostics.TraceSwitch>名為`generalSwitch`。 這個參數會設定外部程式碼範例。  
  
 如果切換設定為<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，此範例輸出的第一個錯誤訊息， <xref:System.Diagnostics.Trace.Listeners%2A>。 如需將加入至接聽程式的資訊<xref:System.Diagnostics.Trace.Listeners%2A>集合，請參閱<xref:System.Diagnostics.TraceListenerCollection>類別。  
  
 如果<xref:System.Diagnostics.TraceLevel>設`Verbose`，範例會輸出第二個錯誤訊息和`category`第一個訊息的同一行上。 第二個訊息後面接著行結束字元。  
  
 [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用來檢測應用程式的效能負面影響降至最低<see langword="If...Then" />陳述式，而不是使用<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />陳述式。 下列兩個程式碼範例會傳送相同的偵錯訊息。 但是，第一個範例時，更快速追蹤已關閉，因為如果<c>mySwitch.TraceError</c>評估為<see langword="false" />沒有呼叫<see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />。 第二個範例會一律呼叫<see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />，即使<c>mySwitch.TraceError</c>是<see langword="false" />並會產生任何追蹤輸出。 這會導致不必要執行複雜的程式碼。  
  
 **第一個範例**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **第二個範例**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>