<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3fb887e69cbce0df3845c3eef1e79b919a3ee40b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37664955" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>將追蹤或偵錯輸出直接導向到標準輸出或標準錯誤資料流。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.ConsoleTraceListener>類別來寫入追蹤和偵錯訊息至主控台。 您可以初始化<xref:System.Diagnostics.ConsoleTraceListener>將追蹤訊息寫入至物件<xref:System.Console.Out%2A?displayProperty=nameWithType>資料流或<xref:System.Console.Error%2A?displayProperty=nameWithType>資料流。  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> 介面。 當您完成使用型別時，您應該處置它直接或間接。 若要直接處置型別，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try`/ `catch`區塊。 若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。  
  
 當追蹤和偵錯輸出已啟用<xref:System.Diagnostics.ConsoleTraceListener>訊息會寫入至指定<xref:System.Console?displayProperty=nameWithType>資料流，也就是訊息都已寫明其方式類似於<xref:System.Console.Write%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法。 在主控台應用程式<xref:System.Console?displayProperty=nameWithType>輸出和錯誤資料流將訊息寫入至現有的主控台視窗中，或將寫入資料流將重新導向<xref:System.IO.TextWriter?displayProperty=nameWithType>執行個體。  
  
> [!NOTE]
>  如果主控台不存在，如同以 Windows 為基礎的應用程式，不會顯示訊息寫入主控台。  
  
 新增<xref:System.Diagnostics.ConsoleTraceListener>至適當的物件<xref:System.Diagnostics.Trace.Listeners%2A>集合，如果您想要透過寫入訊息<xref:System.Diagnostics.Trace>， <xref:System.Diagnostics.TraceSource>，或<xref:System.Diagnostics.Debug>寫入至主控台。 此外，您可以訊息直接寫入主控台中使用<xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType>方法。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug>並<xref:System.Diagnostics.Trace>類別會共用相同<xref:System.Diagnostics.TraceListenerCollection>集合，透過其各自存取`Listeners`屬性。 如果您新增<xref:System.Diagnostics.ConsoleTraceListener>另一個類別會自動使用相同接聽程式来使用其中一個類別，在集合的物件。  
  
 大多數的編譯器會啟用追蹤和偵錯輸出透過條件式編譯旗標。 如果您未啟用追蹤或偵錯，透過寫入訊息<xref:System.Diagnostics.Debug?displayProperty=nameWithType>和<xref:System.Diagnostics.Trace?displayProperty=nameWithType>類別實際上會被忽略。 啟用追蹤和偵錯輸出的語法是編譯器特定;如果您使用 C# 或 Visual Basic 以外的編譯器時，請參閱編譯器的文件。  
  
-   若要啟用偵錯 C# 中，新增 **/d: debug**旗標，當您編譯程式碼，或者您可以新增時，編譯器命令列 **#define 偵錯**至檔案頂端。 在 Visual Basic 中，新增 **/d: debug = True**至編譯器命令列的旗標。  
  
-   若要啟用 C# 中的追蹤，請新增 **/d:TRACE**旗標來編譯程式碼，或新增時，才會進行編譯器命令列 **#define 追蹤**至檔案頂端。 在 Visual Basic 中，新增 **/d:TRACE = True**至編譯器命令列的旗標。  
  
 您可以加入<xref:System.Diagnostics.ConsoleTraceListener>物件至<xref:System.Diagnostics.Trace.Listeners%2A>集合，您的程式碼，或者您可以新增<xref:System.Diagnostics.ConsoleTraceListener>物件<xref:System.Diagnostics.Trace.Listeners%2A>透過應用程式組態檔的集合。 新增<xref:System.Diagnostics.ConsoleTraceListener>撰寫特定程式碼區段或執行路徑的訊息的程式碼中的物件。 新增<xref:System.Diagnostics.ConsoleTraceListener>應用程式執行時，將所有追蹤和偵錯您的應用程式組態檔中的物件訊息至主控台。  
  
 若要寫入追蹤及偵錯特定的一段程式碼的主控台訊息，初始化<xref:System.Diagnostics.ConsoleTraceListener>物件，並將它新增至<xref:System.Diagnostics.Trace.Listeners%2A>集合。 檢測包含訊息使用的程式碼區段<xref:System.Diagnostics.Trace>或<xref:System.Diagnostics.Debug>類別。 在程式碼區段結尾，移除<xref:System.Diagnostics.ConsoleTraceListener>物件從<xref:System.Diagnostics.Trace.Listeners%2A>集合，並呼叫<xref:System.Diagnostics.TextWriterTraceListener.Close%2A>方法<xref:System.Diagnostics.ConsoleTraceListener>。  
  
 若要將所有的追蹤，並應用程式執行時，偵錯訊息至主控台，新增<xref:System.Diagnostics.ConsoleTraceListener>應用程式組態檔的物件。 編輯組態檔對應到您的應用程式的名稱或 app.config 檔案中的[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]專案。 在此檔案中，插入的項目<xref:System.Diagnostics.ConsoleTraceListener>。  
  
 下列範例會將<xref:System.Diagnostics.ConsoleTraceListener>名為物件`configConsoleListener`到<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 如需在應用程式組態檔中加入追蹤接聽項的詳細資訊，請參閱[&lt;接聽程式&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)。  
  
   
  
## Examples  
 下列程式碼範例會實作類別包含具有兩個公用方法的主控台應用程式。  
  
 `Main`方法會檢查命令列引數，並判斷是否應該被追蹤輸出導向至標準錯誤資料流或標準輸出資料流。 `Main` 建立並初始化<xref:System.Diagnostics.ConsoleTraceListener>所指定的物件<xref:System.Console>輸出資料流，並將此物件加入至追蹤接聽程式集合。 然後它會呼叫`WriteEnvironmentInfoToTrace`方法，將執行環境和追蹤輸出的追蹤接聽程式組態相關的詳細資料。  
  
 範例應用程式執行時，環境和追蹤組態詳細資料會寫入至指定的主控台輸出資料流，透過<xref:System.Diagnostics.ConsoleTraceListener>物件。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 類別的新執行個體，附追蹤輸出寫入至標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Diagnostics.ConsoleTraceListener>物件將訊息寫入至<xref:System.Console.Out%2A?displayProperty=nameWithType>資料流。 其<xref:System.Diagnostics.TraceListener.Name%2A>屬性會初始化為空字串 ("")。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Diagnostics.ConsoleTraceListener>所指定的物件<xref:System.Console>輸出資料流，並將它加入至追蹤接聽程式集合。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.ConsoleTraceListener>類別。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">如果是 <see langword="true" />，就表示要將追蹤與偵錯輸出寫入至標準錯誤資料流；如果是 <see langword="false" />，則表示要寫入追蹤與偵錯輸出至標準輸出資料流。</param>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 類別的新執行個體，附寫入追蹤輸出至標準輸出資料流或標準錯誤資料流的選項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Diagnostics.ConsoleTraceListener>物件，以將訊息寫入至其中一個<xref:System.Console.Out%2A?displayProperty=nameWithType>或<xref:System.Console.Error%2A?displayProperty=nameWithType>資料流。 其<xref:System.Diagnostics.TraceListener.Name%2A>屬性會初始化為空字串 ("")。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Diagnostics.ConsoleTraceListener>所指定的物件<xref:System.Console>輸出資料流，並將它加入至追蹤接聽程式集合。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Diagnostics.ConsoleTraceListener>類別。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉輸出到為此追蹤接聽項所指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定這個資料流<xref:System.Diagnostics.ConsoleTraceListener>執行個體 (任一<xref:System.Console.Out%2A?displayProperty=nameWithType>資料流或<xref:System.Console.Error%2A?displayProperty=nameWithType>串流) 已關閉。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>