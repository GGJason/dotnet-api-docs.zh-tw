<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextWriterTraceListener.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bfc9a606c15ed33778d3238afffbae6a888814c3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfc9a606c15ed33778d3238afffbae6a888814c3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Directs tracing or debugging output to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> or to a <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, such as <ph id="ph3">&lt;see cref="T:System.IO.FileStream" /&gt;</ph>.</source>
          <target state="translated">將追蹤或偵錯輸出導至 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>，例如 <ph id="ph3">&lt;see cref="T:System.IO.FileStream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> property to get or set the text writer that receives the tracing or debugging output.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>類別提供<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>屬性來取得或設定文字寫入器會接收追蹤或偵錯輸出。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此類型會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法中的<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面 &gt; 主題。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>This class also provides methods to <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> so that it no longer receives tracing or debugging output, to <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Flush%2A&gt;</ph> the output buffer for the <ph id="ph4">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>, and to <ph id="ph5">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> a message to the <ph id="ph6">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>.</source>
          <target state="translated">這個類別也提供方法<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> ，讓它不再接收追蹤或偵錯輸出中，為<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Flush%2A&gt;</ph>的輸出緩衝區<ph id="ph4">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>，以及<ph id="ph5">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph>訊息<ph id="ph6">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>You must enable tracing or debugging to use a trace listener.</source>
          <target state="translated">您必須啟用追蹤或偵錯才能使用追蹤接聽項。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The following syntax is compiler specific.</source>
          <target state="translated">下列語法是特定的編譯器。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
          <target state="translated">如果您使用 C# 或 Visual Basic 以外的編譯器，請參閱編譯器的文件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To enable debugging in C#, add the <ph id="ph1">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id="ph2">`#define DEBUG`</ph> to the top of your file.</source>
          <target state="translated">若要啟用偵錯 C# 中，加入<ph id="ph1">`/d:DEBUG`</ph>旗標設為編譯器命令列，當您編譯程式碼，或者您可以加入<ph id="ph2">`#define DEBUG`</ph>加入您的檔案頂端。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:DEBUG=True`</ph> flag to the compiler command line.</source>
          <target state="translated">在 Visual Basic 中，加入<ph id="ph1">`/d:DEBUG=True`</ph>編譯器命令列的旗標。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To enable tracing in C#, add the <ph id="ph1">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id="ph2">`#define TRACE`</ph> to the top of your file.</source>
          <target state="translated">若要啟用追蹤，在 C# 中的，加入<ph id="ph1">`/d:TRACE`</ph>旗標設為編譯器命令列，當您編譯程式碼，或新增<ph id="ph2">`#define TRACE`</ph>加入您的檔案頂端。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:TRACE=True`</ph> flag to the compiler command line.</source>
          <target state="translated">在 Visual Basic 中，加入<ph id="ph1">`/d:TRACE=True`</ph>編譯器命令列的旗標。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To add a trace listener, edit the configuration file that corresponds to the name of your application.</source>
          <target state="translated">若要加入追蹤接聽程式，請編輯對應到您的應用程式名稱的組態檔。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application.</source>
          <target state="translated">在這個檔案中，您可以加入接聽程式、 設定其類型和其參數，移除接聽程式，或清除所有先前設定的應用程式的接聽程式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The configuration file should be formatted like the following example.</source>
          <target state="translated">組態檔應該格式如下列範例所示。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>If an attempt is made to write to a file that is in use or unavailable, the file name is automatically prefixed by a GUID.</source>
          <target state="translated">如果嘗試寫入正在使用中的檔案，或無法使用，檔案名稱自動加上為 GUID。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The following example implements an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class that uses a <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph3">`myOutputWriter`</ph> to write to a file named <ph id="ph4">`TestFile.txt`</ph>.</source>
          <target state="translated">下列範例會實作的執行個體<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用類別<ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph>呼叫<ph id="ph3">`myOutputWriter`</ph>寫入到名為<ph id="ph4">`TestFile.txt`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>First the example creates a file for output.</source>
          <target state="translated">此範例會先建立輸出的檔案。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Then it creates the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> for the first text writer, assigns it the output file, and adds it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>.</source>
          <target state="translated">然後它會建立<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>的第一次的文字寫入器，將其指派輸出檔，並將它加入<ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Then, the code outputs one line of text to the file.</source>
          <target state="translated">然後，程式碼輸出一行文字檔案。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Finally, the example flushes the output buffer.</source>
          <target state="translated">最後，此範例會清除輸出緩衝區。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>After running this sample, you can open the <ph id="ph1">`TestFile.txt`</ph> file to see the output.</source>
          <target state="translated">之後執行此範例，您可以開啟<ph id="ph1">`TestFile.txt`</ph>看到輸出檔案。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> as the output recipient.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 做為輸出接收者，來初始化 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>This constructor uses the <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> stream as the recipient of the tracing or debugging output.</source>
          <target state="translated">這個建構函式會使用<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>資料流，做為追蹤或偵錯輸出的接收者。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("", or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性會初始化為空字串 (""，或<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>It sets the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> property to console output, and then adds the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">它會設定<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>屬性主控台輸出，並將<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>至<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>It writes a message in two segments, and then closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">它在兩個區段，會將訊息寫入，然後關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that represents the stream the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>，表示 <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 所寫入的資料流。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class, using the stream as the recipient of the debugging and tracing output.</source>
          <target state="translated">使用資料流做為偵錯和追蹤之輸出的接收者，來初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性設為空字串 ("")。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%29&gt;</ph> constructor and adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%29&gt;</ph>建構函式並將它加入<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The example then writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, and writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">範例接著會寫入兩則訊息這<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，並將訊息寫入所有<ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">最後，清除，並關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">資料流為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that receives the output from the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 接收輸出的 <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class using the specified writer as recipient of the tracing or debugging output.</source>
          <target state="translated">使用指定的寫入器當做追蹤或偵錯之輸出的接收者，來初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性設為空字串 ("")。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%29&gt;</ph> constructor.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%29&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, then references the <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> when it creates the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, which it then adds to the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>，然後參考<ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph>當建立<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，然後將加入<ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The example writes a message to all <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>, then closes this <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">此範例會將訊息寫入所有<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>，然後關閉這<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The writer is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">writer 為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The name of the file the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 寫入的檔案名稱。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class, using the file as the recipient of the debugging and tracing output.</source>
          <target state="translated">使用檔案做為偵錯和追蹤之輸出的接收者，來初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性設為空字串 ("")。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%29&gt;</ph> constructor, then adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%29&gt;</ph>建構函式，然後將它加入至<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">此範例會寫入兩個訊息至這個<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，然後將訊息寫入所有<ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">最後，清除，並關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The file is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">檔案為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that represents the stream the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>，表示 <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 所寫入的資料流。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">新執行個體的名稱。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the stream as the recipient of the debugging and tracing output.</source>
          <target state="translated">使用資料流做為偵錯和追蹤之輸出的接收者，以指定的名稱初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to the <ph id="ph2">`name`</ph> parameter or to an empty string (""), if the <ph id="ph3">`name`</ph> parameter is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性<ph id="ph2">`name`</ph>參數或為空字串 ("")，如果<ph id="ph3">`name`</ph>參數是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%2CSystem.String%29&gt;</ph> constructor and adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%2CSystem.String%29&gt;</ph>建構函式並將它加入<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The example then writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> and writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">範例接著會寫入兩則訊息這<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>並將訊息寫入所有<ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">最後，清除，並關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">資料流為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that receives the output from the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 接收輸出的 <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">新執行個體的名稱。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</source>
          <target state="translated">使用指定的寫入器做為追蹤或偵錯之輸出的接收者，以指定的名稱初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%2CSystem.String%29&gt;</ph> constructor.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%2CSystem.String%29&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, then references the <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> when it creates the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, which it then adds to the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>，然後參考<ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph>當建立<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，然後將加入<ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">此範例會寫入兩個訊息至這個<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，然後將訊息寫入所有<ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">最後，清除，並關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The writer is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">writer 為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The name of the file the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 寫入的檔案名稱。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">新執行個體的名稱。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the file as the recipient of the debugging and tracing output.</source>
          <target state="translated">使用檔案做為偵錯和追蹤之輸出的接收者，以指定的名稱初始化 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to the <ph id="ph2">`name`</ph> parameter or to an empty string (""), if the <ph id="ph3">`name`</ph> parameter is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>屬性<ph id="ph2">`name`</ph>參數或為空字串 ("")，如果<ph id="ph3">`name`</ph>參數是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%2CSystem.String%29&gt;</ph> constructor, then adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">下列程式碼範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%2CSystem.String%29&gt;</ph>建構函式，然後將它加入至<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">此範例會寫入兩個訊息至這個<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>，然後將訊息寫入所有<ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>中的物件<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">最後，清除，並關閉<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">資料流為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>Closes the <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> so that it no longer receives tracing or debugging output.</source>
          <target state="translated">關閉 <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> 使其不再接收追蹤或偵錯的輸出。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>Calling a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A&gt;</ph> method after calling <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> automatically reopens the stream.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A&gt;</ph>方法之後呼叫<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph>會自動重新開啟資料流。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myTextListener`</ph>, which uses a <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph4">`myOutputWriter`</ph> to write to a file named <ph id="ph5">`TestFile.txt`</ph>.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>名為<ph id="ph2">`myTextListener`</ph>，它會使用<ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph>呼叫<ph id="ph4">`myOutputWriter`</ph>寫入到名為<ph id="ph5">`TestFile.txt`</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.</source>
          <target state="translated">此範例建立檔案、 串流和文字寫入器、 將一行文字寫入檔案，然後清除和關閉資料流。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release managed resources; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /&gt;</ph> has no effect.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 代表要釋放 Managed 資源；若為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，則 <ph id="ph3">&lt;see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /&gt;</ph> 沒有任何作用。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source>Disposes this <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> object.</source>
          <target state="translated">處置這個 <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class to release the managed resources of a <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> object.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph>方法<ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>類別，以釋放 managed 的資源的<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>Flushes the output buffer for the <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>.</source>
          <target state="translated">清除 <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> 的輸出緩衝區。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myTextListener`</ph>, which uses a <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph4">`myOutputWriter`</ph> to write to a file named <ph id="ph5">`TestFile.txt`</ph>.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>名為<ph id="ph2">`myTextListener`</ph>，它會使用<ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph>呼叫<ph id="ph4">`myOutputWriter`</ph>寫入到名為<ph id="ph5">`TestFile.txt`</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.</source>
          <target state="translated">此範例建立檔案、 串流和文字寫入器、 將一行文字寫入檔案，然後清除和關閉資料流。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>A message to write.</source>
          <target state="translated">要寫入的訊息。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>Writes a message to this instance's <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>.</source>
          <target state="translated">將訊息寫入這個執行個體的 <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myWriter`</ph> to write to the console screen.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>名為<ph id="ph2">`myWriter`</ph>寫入至主控台螢幕。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The example writes two lines to the console screen.</source>
          <target state="translated">此範例會將兩行寫入主控台螢幕。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>Note the second write appears on the same line as the first write.</source>
          <target state="translated">請注意第二個的寫入會出現在第一次寫入的同一行。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The example then flushes and closes the stream.</source>
          <target state="translated">此範例會排清，然後關閉資料流。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>A message to write.</source>
          <target state="translated">要寫入的訊息。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>Writes a message to this instance's <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> followed by a line terminator.</source>
          <target state="translated">將訊息寫入這個執行個體的 <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>，後面接著行結束字元。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The default line terminator is a carriage return followed by a line feed (\r\n).</source>
          <target state="translated">預設行結束字元為後面接著換行符號 (\r\n) 的歸位字元。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myWriter`</ph> to write to the console screen.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>名為<ph id="ph2">`myWriter`</ph>寫入至主控台螢幕。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The example writes two lines to the console screen.</source>
          <target state="translated">此範例會將兩行寫入主控台螢幕。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>Note the second write appears on the same line as the first write.</source>
          <target state="translated">請注意第二個的寫入會出現在第一次寫入的同一行。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The example then flushes and closes the stream.</source>
          <target state="translated">此範例會排清，然後關閉資料流。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>Gets or sets the text writer that receives the tracing or debugging output.</source>
          <target state="translated">取行或設定接收追蹤或偵錯之輸出的文字寫入器。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that represents the writer that receives the tracing or debugging output.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>，表示接收追蹤或偵錯之輸出的寫入器。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> that writes to the console screen.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>寫入至主控台螢幕。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>Then the code adds the new trace listener to the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> in the trace class.</source>
          <target state="translated">然後程式碼會加入新的追蹤接聽程式加入<ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>追蹤類別中。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>