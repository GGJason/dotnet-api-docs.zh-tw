<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e7c430292f5bde89284edc93f9c899f101a1805" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51901733" /></Metadata><TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示事件記錄檔項目的語言中立資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventInstance>寫入事件記錄檔項目使用的資源識別碼，而不是字串值。 若要寫入事件記錄檔項目，初始化<xref:System.Diagnostics.EventInstance.InstanceId%2A>屬性，並傳遞要的執行個體<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 事件檢視器會尋找並顯示對應的字串，根據目前的語言設定的當地語系化的資源檔中使用的執行個體識別碼。 在您撰寫使用資源識別碼的事件之前，您必須註冊事件來源與對應的資源檔。  
  
 當寫入事件時，您可以設定<xref:System.Diagnostics.EventInstance.EntryType%2A>屬性來指定 事件檢視器顯示之項目的圖示。 您也可以指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>屬性來指定 事件檢視器顯示之項目的類別目錄。  
  
 事件檢視器會使用要寫入的事件來源篩選事件的類別目錄。 事件檢視器可以顯示類別目錄做為數值，或它可以做為資源識別項使用的類別，來顯示的當地語系化類別目錄字串。  
  
 若要顯示在事件檢視器中的當地語系化類別目錄字串，您必須使用事件來源類別資源檔，以設定和設定<xref:System.Diagnostics.EventInstance.CategoryId%2A>分類資源檔中的資源識別碼。 如果事件來源並沒有設定的分類資源檔，或指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>索引中的分類資源檔，然後按一下 事件檢視器的字串是否顯示該項目的數值分類值。 設定的分類資源檔，以及類別目錄中的字串數目資源檔案中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>類別。  
  
 您必須使用之前註冊的事件記錄檔的來源<xref:System.Diagnostics.EventInstance>撰寫的事件<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 來源必須設定當地語系化的項目寫入記錄檔和來源必須定義至少一個訊息資源檔。  
  
 在您的應用程式的安裝期間建立新的事件來源。 這可讓作業系統重新整理其已註冊的事件來源的清單和其設定的時間。 如果作業系統不重新整理其事件來源的清單，而您嘗試寫入新的來源的事件寫入作業將會失敗。 您可以設定新的來源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 您必須建立新的事件來源電腦上具有系統管理權限。  
  
 如定義事件訊息及建置事件記錄檔資源檔案的相關詳細資訊，請參閱 「 訊息編譯器 」 主題中的平台 SDK 文件，網址[ http://msdn.microsoft.com ](https://msdn.microsoft.com)。  
  
   
  
## Examples  
 下列程式碼範例寫入資訊的事件項目，並再重複使用<xref:System.Diagnostics.EventInstance>將寫入現有的事件記錄檔的警告事件的項目。 事件訊息文字會指定訊息資源檔中使用的資源識別碼。 在程式碼範例假設已註冊的來源對應的訊息資源檔。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用語言中立資訊，初始化 <see cref="T:System.Diagnostics.EventInstance" /> 類別的新執行個體，以定義事件記錄檔項目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">資源識別項，其對應到事件來源的訊息資源檔內所定義的字串。</param>
        <param name="categoryId">資源識別項，其對應到事件來源的分類資源檔中定義的字串，或為零以指定沒有事件分類。</param>
        <summary>使用事件項目的當地語系化訊息和分類文字的指定資源識別項，初始化 <see cref="T:System.Diagnostics.EventInstance" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要將參考的項目寫入事件記錄檔，初始化<xref:System.Diagnostics.EventInstance>並將它傳遞給<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 設定`instanceId`事件訊息中對應的資源識別碼<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>來源的屬性。 設定`categoryId`數值類別目錄值，或事件類別目錄中的資源識別碼<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>來源的屬性; 組`categoryId`為零的任何事件類別目錄。 <xref:System.Diagnostics.EventInstance.EntryType%2A>的新執行個體的屬性設定為<xref:System.Diagnostics.EventLogEntryType.Information>預設。  
  
 事件檢視器會使用的資源識別碼，來顯示當地語系化的資源檔的來源中的對應字串。 您可以撰寫使用資源識別碼的事件之前，您必須註冊來源的相對應的資源檔。  
  
   
  
## Examples  
 下列程式碼範例寫入資訊的事件項目，並再重複使用<xref:System.Diagnostics.EventInstance>將寫入現有的事件記錄檔的警告事件的項目。 事件訊息文字會指定訊息資源檔中使用的資源識別碼。 在程式碼範例假設已註冊的來源對應的訊息資源檔。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> 參數是負值或大於 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
-或- 
<paramref name="categoryId" /> 參數是負值或大於 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">資源識別項，其對應到事件來源的訊息資源檔內所定義的字串。</param>
        <param name="categoryId">資源識別項，其對應到事件來源的分類資源檔中定義的字串，或為零以指定沒有事件分類。</param>
        <param name="entryType"><see cref="T:System.Diagnostics.EventLogEntryType" /> 值，表示事件型別。</param>
        <summary>使用事件項目的當地語系化訊息和分類文字的指定資源識別項，以及指定的事件記錄檔項目型別，初始化 <see cref="T:System.Diagnostics.EventInstance" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要將項目寫入事件記錄檔，初始化<xref:System.Diagnostics.EventInstance>並將它傳遞給<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 設定`instanceId`事件訊息中對應的資源識別碼<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>來源的屬性。 設定`categoryId`數值類別目錄值，或事件類別目錄中的資源識別碼<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>來源的屬性; 組`categoryId`為零的任何事件類別目錄。  
  
 事件檢視器會使用的資源識別碼，來顯示當地語系化的資源檔的來源中的對應字串。 您可以撰寫使用資源識別碼的事件之前，您必須註冊來源的相對應的資源檔。  
  
 設定`entryType`其中一種預先定義的項目類型。 事件檢視器會使用事件類型來決定要在事件記錄檔的清單檢視中顯示的圖示。  
  
   
  
## Examples  
 下列程式碼範例會寫入兩種稽核事件記錄檔的事件項目`myNewLog`。 如果不存在本機電腦上的程式碼範例會建立新的事件來源和新的事件記錄檔。 事件訊息文字被指定資源檔中使用的資源識別碼。  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="entryType" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> 是負值或大於 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
-或- 
 <paramref name="categoryId" /> 是負值或大於 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源識別項，指定應用程式定義的事件項目分類。</summary>
        <value>數值分類值或資源識別項，其對應到事件來源的分類資源檔中定義的字串。 預設值為零，表示將不對事件項目顯示任何分類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件記錄檔分類為應用程式定義的值，用來幫助篩選事件，或提供進一步的事件的相關資訊。 例如，您的應用程式可以定義不同的類別，針對不同的元件或不同的作業。  
  
 設定<xref:System.Diagnostics.EventInstance.CategoryId%2A>屬性來指定 事件檢視器顯示之項目的類別目錄。 事件檢視器可以顯示類別目錄做為數值，或使用<xref:System.Diagnostics.EventInstance.CategoryId%2A>做為資源来顯示的當地語系化類別目錄字串識別項，會根據目前的語言設定。  
  
 若要顯示在事件檢視器中的當地語系化類別目錄字串，您必須使用事件來源類別資源檔，以設定和設定<xref:System.Diagnostics.EventInstance.CategoryId%2A>分類資源檔中的資源識別碼。 如果事件來源並沒有設定的分類資源檔，或指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>索引中的分類資源檔，然後按一下 事件檢視器的字串是否顯示該項目的數值分類值。  
  
 在您撰寫使用資源識別碼的事件類別目錄之前，您必須註冊來源與對應的資源檔。 設定的分類資源檔，以及類別目錄中的字串數目資源檔案中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>類別。 定義類別目錄字串資源檔中，當必須連續 1 開始，最多設定編號的類別目錄資源識別元<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>屬性值。  
  
 事件類別目錄是選擇性的。 如果您的應用程式不會使用類別，請勿設定<xref:System.Diagnostics.EventInstance.CategoryId%2A>事件記錄檔項目。  
  
 如需定義事件訊息和建置事件的資源檔，詳細資訊，請參閱的 Platform SDK 文件中的 「 訊息編譯器 」 主題[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。 如需在資源檔中定義的事件類別目錄的詳細資訊，請參閱平台 SDK 中的 「 事件類別目錄 」 主題  
  
   
  
## Examples  
 下列程式碼範例寫入資訊的事件項目，並再重複使用<xref:System.Diagnostics.EventInstance>將寫入現有的事件記錄檔的警告事件的項目。 事件訊息文字會指定訊息資源檔中使用的資源識別碼。 在程式碼範例假設已註冊的來源對應的訊息資源檔。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性會設定為負數或設定為大於 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定事件記錄檔項目的事件型別。</summary>
        <value><see cref="T:System.Diagnostics.EventLogEntryType" /> 值，表示事件項目型別。 預設值是 <see cref="F:System.Diagnostics.EventLogEntryType.Information" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個事件是單一型別，表示應用程式時報告事件。 事件檢視器會使用事件類型來決定要在事件記錄檔的清單檢視中顯示的圖示。  
  
   
  
## Examples  
 下列程式碼範例寫入資訊的事件項目，並再重複使用<xref:System.Diagnostics.EventInstance>將寫入現有的事件記錄檔的警告事件的項目。 事件訊息文字會指定訊息資源檔中使用的資源識別碼。 在程式碼範例假設已註冊的來源對應的訊息資源檔。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">屬性未設定為有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源識別項，指定事件項目的訊息文字。</summary>
        <value>資源識別項，其對應到事件來源的訊息資源檔內所定義的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventInstance.InstanceId%2A>屬性可唯一識別設定的事件來源的事件項目。 訊息資源檔中定義的事件<xref:System.Diagnostics.EventInstance.InstanceId%2A>對應至訊息的文字檔案中的訊息定義欄位從編譯的資源識別碼。 您的應用程式可以寫入當地語系化的事件記錄檔項目，藉由設定<xref:System.Diagnostics.EventInstance.InstanceId%2A>資源識別項。 事件檢視器會使用<xref:System.Diagnostics.EventInstance.InstanceId%2A>目前語言設定為基礎的資源識別碼來尋找並顯示當地語系化的資源檔中的對應字串。 在您撰寫使用資源識別碼的事件之前，您必須註冊來源與對應的資源檔。  
  
 如定義事件訊息及建置事件記錄檔資源檔案的相關詳細資訊，請參閱 「 訊息編譯器 」 主題中的平台 SDK 文件，網址[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。 如需有關事件記錄檔識別碼的詳細資訊，請參閱 Platform SDK 中的 < 事件識別碼 > 主題。  
  
   
  
## Examples  
 下列程式碼範例寫入資訊的事件項目，並再重複使用<xref:System.Diagnostics.EventInstance>將寫入現有的事件記錄檔的警告事件的項目。 事件訊息文字會指定訊息資源檔中使用的資源識別碼。 在程式碼範例假設已註冊的來源對應的訊息資源檔。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性會設定為負數或設定為大於 <see cref="F:System.UInt32.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>