<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5dee81413f1eca24d18db1320164d7c7eca4132" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37767169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>將追蹤或偵錯輸出做為 XML 編碼資料導向 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />，例如做為 <see cref="T:System.IO.FileStream" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  您必須具備 unmanaged 程式碼建立的執行個體的權限<xref:System.Diagnostics.XmlWriterTraceListener>類別。  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>類別將追蹤和偵錯資訊的 XML 編碼的文字資料流。 後面的表格，會顯示 XML 輸出的描述。 您可以使用[Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129)來顯示 XML 輸出。  
  
 您可以啟用或停用<xref:System.Diagnostics.XmlWriterTraceListener>應用程式組態檔，然後使用已設定透過<xref:System.Diagnostics.XmlWriterTraceListener>應用程式中。 或者，您可以在其中建立<xref:System.Diagnostics.XmlWriterTraceListener>程式碼中。  
  
 若要設定<xref:System.Diagnostics.XmlWriterTraceListener>，編輯組態檔對應到您的應用程式的名稱。 在此檔案中，您可以新增或移除接聽程式、 設定接聽程式的屬性或移除接聽程式。 組態檔的格式應該類似下列的範例。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>類別會繼承<xref:System.Diagnostics.TraceListener.Filter%2A>屬性的基底類別從<xref:System.Diagnostics.TraceListener>。  <xref:System.Diagnostics.TraceListener.Filter%2A>屬性可讓一層額外的接聽程式在篩選的追蹤輸出。  如果有的話`Trace`追蹤接聽程式呼叫的方法<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>方法的篩選，以判斷是否要發出追蹤。  
  
> [!NOTE]
>  如果嘗試寫入檔案正在使用或無法使用，檔案名稱自動的前置詞的 GUID。  
  
> [!NOTE]
>  接聽程式的方法是由方法呼叫<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別。  接聽程式的方法不打算直接從應用程式程式碼呼叫。 <xref:System.Diagnostics.XmlWriterTraceListener>接聽程式主要是供<xref:System.Diagnostics.TraceSource>類別。 <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A>和<xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A>可以呼叫方法<xref:System.Diagnostics.Trace>並<xref:System.Diagnostics.Debug>類別和預設值，可供 XML 項目，<xref:System.Diagnostics.Trace>和<xref:System.Diagnostics.Debug>不提供的值。  
  
 下表描述的元素和屬性的 XML 輸出。  
  
|元素|屬性|輸出|注意|  
|-------------|----------------|------------|-----------|  
|`CallStack`|無|取決於是否存在<xref:System.Diagnostics.TraceOptions.Callstack>加上旗標在<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|特殊字元，例如 > 或 < 逸出序列就會被取代。 請參閱逸出的字元轉譯表格所示。|  
|`Computer`|無|永遠存在。|<xref:System.Environment.MachineName%2A> 屬性的值。|  
|`Correlation`|`ActivityID`|永遠存在|如果未指定，預設值是空的 GUID。|  
||`RelatedActivityID`|取決於是否存在`relatedActivityId`追蹤方法呼叫中的參數。|<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> 方法的 `relatedActivityId` 參數。|  
|`DataItem`|無|取決於`data`參數<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法。|這個項目可以包含在陣列的項目或一個項目，因此這些值寫入為一組`DataItem`下的節點`TraceData`項目。<br /><br /> 資料輸出使用`ToString`傳入的資料物件的方法。|  
|`EventID`|無|永遠存在。|參數的輸入 (`id`)。|  
|`Execution`|`ProcessName`|永遠存在。|從<xref:System.Diagnostics.TraceEventCache>。|  
||`ProcessID`|永遠存在。|從<xref:System.Diagnostics.TraceEventCache>。 在 Windows 98 和 Windows Me 作業系統中，如果`ProcessID`大於的 2,147,483,647 它是負數的正面表示法，並且應該轉換來取得正確的處理序識別碼。|  
||`ThreadID`|永遠存在。|從<xref:System.Diagnostics.TraceEventCache>。|  
|`Level`|無|永遠存在。|參數的輸入 (數值`eventType`)。 參數大於 255 的值會輸出為 255。|  
|`LogicalOperationStack`|無|取決於是否存在<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>加上旗標在<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|可以有一個以上的邏輯作業，因此這些值做為寫入`LogicalOperation`下的節點`LogicalOperationStack`項目。|  
|`Message`|無|必須要有的追蹤方法呼叫中的訊息。|如果提供格式化的引數，此元素會將格式化的訊息。|  
|`Source`|`Name`|永遠存在。|輸入的參數。|  
|`SubType`|`Name`|永遠存在。|輸入的參數。|  
|`TimeCreated`|`SystemTime`|永遠存在。|如果不存在於<xref:System.Diagnostics.TraceEventCache>，預設值是目前的時間。|  
|`TimeStamp`|無|取決於是否存在<xref:System.Diagnostics.TraceOptions.Timestamp>加上旗標在<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|從<xref:System.Diagnostics.TraceEventCache>。|  
|`Type`|無|永遠存在。|永遠值 3。|  
  
 下表會顯示在 XML 輸出逸出字元。 逸出發生中的所有項目和屬性除了`DataItem`項目，如果物件傳遞至未逸出`data`的參數<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法是<xref:System.Xml.XPath.XPathNavigator>物件。 如果<xref:System.Xml.XPath.XPathNavigator>使用於資料物件，<xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A>方法呼叫，且整個根節點追蹤做為未逸出的資料。  
  
|逸出的字元|值|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Diagnostics.XmlWriterTraceListener>逸出和非逸出的資料寫入檔案記錄的類別。  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，表示追蹤接聽程式所寫入的資料流。</param>
        <summary>使用指定的資料流做為偵錯和追蹤輸出的接收者，初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>屬性會初始化為空字串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" />，從追蹤接聽程式接收輸出。</param>
        <summary>使用指定的寫入器做為偵錯和追蹤輸出的接收者，初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>屬性會初始化為空字串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">要寫入的檔案名稱。</param>
        <summary>使用指定的檔案做為偵錯和追蹤輸出的接收者，初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化的新執行個體<xref:System.IO.StreamWriter>所指定的檔案，為指定的路徑上的類別使用<xref:System.Text.Encoding.UTF8%2A>編碼方式。 如果檔案存在，它會附加至。 如果檔案不存在，則會建立新的檔案。  
  
> [!NOTE]
>  若要減少例外狀況的機會，可能會使輸出的任何字元會取代"？"字元。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>屬性會初始化為空字串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，表示追蹤接聽程式所寫入的資料流。</param>
        <param name="name">新執行個體的名稱。</param>
        <summary>使用指定的資料流做為偵錯和追蹤輸出的接收者，以指定的名稱初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Diagnostics.TraceListener.Name%2A>屬性，以`name`參數值或空字串 ("") 如果`name`參數是`null`。 名稱可以當做索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以程式設計方式變更接聽程式的屬性集合。 例如，下列程式碼設定<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>執行個體的屬性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>屬性是 「 xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" />，從追蹤接聽程式接收輸出。</param>
        <param name="name">新執行個體的名稱。</param>
        <summary>使用指定的寫入器做為偵錯和追蹤輸出的接收者，以指定的名稱初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Diagnostics.TraceListener.Name%2A>屬性，以`name`參數值或空字串 ("") 如果`name`參數是`null`。 名稱可以當做索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以程式設計方式變更接聽程式的屬性集合。 例如，下列程式碼設定<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>執行個體的屬性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>屬性是 「 xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">要寫入的檔案名稱。</param>
        <param name="name">新執行個體的名稱。</param>
        <summary>使用指定的檔案做為偵錯和追蹤輸出的接收者，以指定的名稱初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化的新執行個體<xref:System.IO.StreamWriter>所指定的檔案，為指定的路徑上的類別使用<xref:System.Text.Encoding.UTF8%2A>編碼方式。 如果檔案存在，它會附加至。 如果檔案不存在，則會建立新的檔案。  
  
> [!NOTE]
>  若要減少例外狀況的機會，可能會使輸出的任何字元會取代"？"字元。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>屬性設定為`name`參數值或空字串 ("") 如果`name`參數是`null`。 名稱可以當做索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以程式設計方式變更接聽程式的屬性集合。 例如，下列程式碼設定<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>執行個體的屬性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>屬性是 「 xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉這個接聽程式的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />，使其不再接收追蹤或偵錯輸出。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的錯誤訊息。</param>
        <param name="detailMessage">要附加至錯誤訊息的詳細錯誤訊息。</param>
        <summary>寫入包括錯誤訊息的追蹤資訊，以及詳細的錯誤訊息至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設行為是以訊息和詳細的訊息顯示在訊息方塊中，在使用者介面模式中，以及執行應用程式時<xref:System.Diagnostics.TraceListener>執行個體在<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>集合。 根據預設，集合包含的執行個體<xref:System.Diagnostics.DefaultTraceListener>。 您可以藉由新增或移除自訂此行為<xref:System.Diagnostics.TraceListener>從集合。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將追蹤資料寫入輸出檔或資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" />，包含目前處理序 ID、執行緒 ID 和堆疊追蹤資訊。</param>
        <param name="source">來源名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="data">要發出的資料物件。</param>
        <summary>寫入追蹤資訊，及事件資訊至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`頁首和頁尾的追蹤會使用參數。 `id`參數會轉換成不帶正負號的整數寫入之前，因此負數`id`會寫成一個大型的正整數。 `data`參數以寫入`DataItem`中的節點`TraceData`項目。 `ToString`資料物件的方法用來將物件轉換為字串。  
  
> [!IMPORTANT]
>  這個方法不是直接由應用程式程式碼呼叫。  它會呼叫的方法<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤資料。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" />，包含目前處理序 ID、執行緒 ID 和堆疊追蹤資訊。</param>
        <param name="source">來源名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="data">要發出的資料物件陣列。</param>
        <summary>寫入追蹤資訊、資料物件，以及事件資訊至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`頁首和頁尾的追蹤會使用參數。 `id`參數會轉換成不帶正負號的整數寫入之前，因此負數`id`會寫成一個大型的正整數。 中的物件`data`參數陣列會做為寫入`DataItem`中的節點`TraceData`項目。 `ToString`的每個資料物件的方法用來將物件轉換為字串。  
  
> [!IMPORTANT]
>  這個方法不是直接由應用程式程式碼呼叫。  它會呼叫的方法<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤資料。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將事件追蹤資訊寫入輸出檔或資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" />，包含目前處理序 ID、執行緒 ID 和堆疊追蹤資訊。</param>
        <param name="source">來源名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="message">要寫入的訊息。</param>
        <summary>寫入追蹤資訊、訊息，以及事件資訊至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`頁首和頁尾的追蹤會使用參數。 `id`參數會轉換成不帶正負號的整數寫入之前，因此負數`id`會寫成一個大型的正整數。 `message`參數會撰寫為`Message`項目。  
  
> [!IMPORTANT]
>  這個方法不是直接由應用程式程式碼呼叫。  它會呼叫的方法<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤資料。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" />，包含目前處理序 ID、執行緒 ID 和堆疊追蹤資訊。</param>
        <param name="source">來源名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="format">包含零或多個格式項目的格式字串，這些項目與 <c>args</c> 陣列中的物件相對應。</param>
        <param name="args">物件陣列，包含零個或多個要格式化的物件。</param>
        <summary>寫入追蹤資訊、格式化訊息，以及事件資訊至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`頁首和頁尾的追蹤會使用參數。 `id`參數會轉換成不帶正負號的整數寫入之前，因此負數`id`會寫成一個大型的正整數。 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>呼叫方法時，傳入`format`字串並`args`陣列做為參數，來格式化`args`物件的陣列，做為`Message`項目。  
  
> [!IMPORTANT]
>  這個方法不是直接由應用程式程式碼呼叫。  它會呼叫的方法<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤資料。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" />，包含目前處理序 ID、執行緒 ID 和堆疊追蹤資訊。</param>
        <param name="source">來源名稱。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="message">要寫入的追蹤訊息。</param>
        <param name="relatedActivityId">
          <see cref="T:System.Guid" /> 結構，辨識相關活動。</param>
        <summary>寫入包含相關活動之識別的追蹤資訊、訊息，以及事件資訊至檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>方法適用於相關的追蹤的相互關聯。 `eventCache`， `source`， `id`，和`relatedActivityId`頁首和頁尾的追蹤會使用參數。 `id`參數會轉換成不帶正負號的整數寫入之前，因此負數`id`會寫成一個大型的正整數。 `message`參數會撰寫為`Message`項目。 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>方法呼叫以將轉換`relatedActivityId`"B"的值格式化字串，就會出現在標頭。 `SubTypeName`在頁尾中的項目會識別為追蹤事件類型<xref:System.Diagnostics.TraceEventType.Transfer>。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>方法不是由應用程式程式碼呼叫。  它可能是由呼叫<xref:System.Diagnostics.TraceSource>發出的追蹤資訊的物件及其<xref:System.Diagnostics.TraceSource.TraceTransfer%2A>方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <summary>寫入逐字規範訊息至檔案或資料流，不加任何其他內容資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法以包含內容資訊的記錄輸出。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要寫入的訊息。</param>
        <summary>寫入逐字規範訊息至檔案或資料流，不加任何其他內容資訊，後面附上目前的行結束字元。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法以包含內容資訊的記錄輸出。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供呼叫 unmanaged 程式碼的能力。 關聯的列舉型別：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>