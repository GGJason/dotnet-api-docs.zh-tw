<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="22f2dbe93f2e963c10ea8d98d4690040412dc5df" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880644" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示用於在本機電腦或遠端電腦上建立事件記錄檔來源的組態設定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData>類別，以設定當地語系化的項目寫入事件記錄檔的新來源。 您不需要使用這個類別來讀取事件記錄檔。  
  
 這個類別會定義新的事件來源和其相關聯的事件記錄檔的組態設定。 相關聯的事件記錄檔可以位於本機電腦或遠端電腦上。 若要建立新的或現有的事件記錄檔的新來源本機電腦上，設定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>並<xref:System.Diagnostics.EventSourceCreationData.Source%2A>的屬性<xref:System.Diagnostics.EventSourceCreationData>，並呼叫<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法。 這個方法會建立您在中指定的事件來源<xref:System.Diagnostics.EventSourceCreationData.Source%2A>屬性，並註冊其事件記錄檔中指定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>。 此行為會類似於使用<xref:System.Diagnostics.EventLogInstaller>類別，來註冊事件來源的事件記錄檔。  
  
 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>和<xref:System.Diagnostics.EventLog.WriteEntry%2A>將事件寫入事件記錄檔的方法。 您必須指定要寫入事件，事件來源您必須建立並設定事件來源寫入來源的第一個項目之前。  
  
 在您的應用程式的安裝期間建立新的事件來源。 這可讓作業系統重新整理其已註冊的事件來源的清單和其設定的時間。 如果作業系統不重新整理其事件來源的清單，而您嘗試寫入新的來源的事件寫入作業將會失敗。 您可以設定新的來源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 您必須建立新的事件來源電腦上具有系統管理權限。  
  
 您可以建立現有的事件記錄檔或新的事件記錄檔的事件來源。 當您建立新的事件記錄檔的新來源時，系統會註冊為該記錄檔中，來源，但直到第一個項目寫入至其中，才會建立記錄檔。  
  
 每個來源只能寫入一個事件記錄檔一次;不過，您的應用程式也可以使用多個來源，以寫入多個事件記錄檔。 例如，您的應用程式可能需要多個來源設定為不同的事件記錄檔或不同的資源檔。  
  
 若要變更現有的來源的設定詳細資料，您必須刪除來源，並再建立新的組態。 如果其他應用程式或元件使用現有的來源，請使用更新的組態，而不是刪除現有來源建立新的來源。  
  
 您可以在您的事件類別目錄和訊息字串的當地語系化資源註冊事件來源。 您的應用程式可以寫入事件記錄項目使用資源識別碼，而不是指定實際的字串。 事件檢視器會尋找並顯示目前語言設定為基礎的當地語系化的資源檔中的對應字串使用的資源識別碼。 您可以註冊個別的檔案，如事件類別目錄、 訊息和參數插入字串，或您可以註冊相同的資源檔，所有的三種類型的字串。 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>， <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>屬性來設定要當地語系化的項目寫入事件記錄檔的來源。 如果您的應用程式會將字串值，直接寫入事件記錄檔，您不需要設定這些屬性。  
  
 寫入當地語系化的項目或寫入的直接存取的字串，則必須設定的來源。 <xref:System.Diagnostics.EventLog.WriteEntry%2A>方法事件記錄檔中直接寫入指定的字串; 它不會使用可當地語系化的訊息資源檔。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>寫入使用當地語系化的訊息資源檔之事件的方法。  
  
 如果您的應用程式將使用的資源識別元和字串值的項目寫入，您必須註冊兩個不同的來源。 比方說，使用資源檔，設定一個來源，然後使用該來源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法寫入事件記錄檔的資源識別項的項目。 然後建立不同的來源，如果沒有資源檔，並使用該來源中的<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，將使用該來源的事件記錄檔中直接寫入字串。  
  
   
  
## Examples  
 下列程式碼範例會設定事件來源的組態屬性，從命令列引數。 輸入引數會指定事件來源名稱、 事件記錄檔名稱、 電腦名稱和事件訊息資源檔。 在程式碼範例會確認來源沒有與現有事件來源，衝突，並接著會建立新的事件來源，為指定的事件記錄檔。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">使用事件記錄檔登錄作為項目來源的名稱。</param>
        <param name="logName">來源中的項目要寫入的記錄檔名稱。</param>
        <summary>會利用指定的事件來源和事件記錄檔名稱，初始化 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要將項目寫入事件記錄檔中，您必須先建立事件記錄檔的事件來源。 若要註冊新的來源，初始化<xref:System.Diagnostics.EventSourceCreationData>執行個體，請設定您的應用程式，並呼叫的執行個體屬性<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法。 來源註冊之後，您可以從來源使用寫入項目<xref:System.Diagnostics.EventLog.WriteEvent%2A>或<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法。  
  
 您可以在您的事件類別目錄和訊息字串的當地語系化資源註冊事件來源。 您的應用程式可以寫入事件記錄項目使用資源識別碼，而不是指定實際的字串。 事件檢視器會尋找並顯示目前語言設定為基礎的當地語系化的資源檔中的對應字串使用的資源識別碼。 您可以註冊個別的檔案，如事件類別目錄、 訊息和參數插入字串，或您可以註冊相同的資源檔，所有的三種類型的字串。 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>， <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>屬性來設定要當地語系化的項目寫入事件記錄檔的來源。 如果您的應用程式會將字串值，直接寫入事件記錄檔，您不需要設定這些屬性。  
  
 寫入當地語系化的項目或寫入的直接存取的字串，則必須設定的來源。 如果您的應用程式將使用的資源識別元和字串值的項目寫入，您必須註冊兩個不同的來源。 比方說，使用資源檔，設定一個來源，然後使用該來源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法寫入事件記錄檔的資源識別項的項目。 然後建立不同的來源，如果沒有資源檔，並使用該來源中的<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，將字串直接寫入事件記錄檔。  
  
 下表顯示的初始屬性值的<xref:System.Diagnostics.EventSourceCreationData>。  
  
|屬性|初始值|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` 參數。|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` 參數。|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|在本機電腦 ("。")。|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|零|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (在 Visual Basic 中為 `Nothing`)。|  
  
   
  
## Examples  
 下列程式碼範例可讓您決定是否事件來源名為`SampleApplicationSource`登錄在本機電腦上。 如果事件來源不存在，此範例會設定為來源的訊息資源檔，並建立新的事件來源。 最後，程式碼範例會將設定事件記錄檔，使用中的資源識別碼值的當地語系化的顯示名稱`DisplayNameMsgId`中的資源檔路徑和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分類資源檔中的分類數目。</summary>
        <value>分類資源檔中的分類數目。 預設值是零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>屬性，以寫入事件的當地語系化類別目錄字串。 如果當您撰寫的事件時，會提供類別，事件檢視器會顯示事件項目的類別。 事件記錄檔分類是應用程式定義的字串，用來協助篩選事件，或提供事件的進一步資訊。 例如，您的應用程式可以定義不同的類別，針對不同的元件或不同的作業。  
  
 事件類別目錄都無所謂，如果您的應用程式不會使用類別，請勿設定<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>屬性。  
  
 如需定義事件訊息和建置事件的資源檔，詳細資訊，請參閱的 Platform SDK 文件中的 「 訊息編譯器 」 主題[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例可讓您決定是否事件來源名為`SampleApplicationSource`登錄在本機電腦上。 如果事件來源不存在，此範例會設定為來源的訊息資源檔，並建立新的事件來源。 最後，程式碼範例會將設定事件記錄檔，使用中的資源識別碼值的當地語系化的顯示名稱`DisplayNameMsgId`中的資源檔路徑和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性會設定為負數或設定為大於 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源檔路徑，這個資源檔包含來源的分類字串。</summary>
        <value>分類資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>屬性，以寫入事件的當地語系化類別目錄字串。 如果當您撰寫的事件時，會提供類別，事件檢視器會顯示事件項目的類別。 事件記錄檔分類是應用程式定義的字串，用來協助篩選事件，或提供事件的進一步資訊。 例如，您的應用程式可以定義不同的類別，針對不同的元件或不同的作業。  
  
 事件類別目錄都無所謂，如果您的應用程式不會使用類別，請勿設定<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>屬性。  
  
 如需定義事件訊息和建置事件的資源檔，詳細資訊，請參閱的 Platform SDK 文件中的 「 訊息編譯器 」 主題[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例可讓您決定是否事件來源名為`SampleApplicationSource`登錄在本機電腦上。 如果事件來源不存在，此範例會設定為來源的訊息資源檔，並建立新的事件來源。 最後，程式碼範例會將設定事件記錄檔，使用中的資源識別碼值的當地語系化的顯示名稱`DisplayNameMsgId`中的資源檔路徑和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要讓來源寫入項目的事件記錄檔名稱。</summary>
        <value>事件記錄檔的名稱。 這可以是應用程式、系統或自訂的記錄檔名稱。 預設值是「應用程式」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>屬性來識別您的應用程式以使用新的來源將項目寫入事件記錄檔。 事件記錄檔可以是新的記錄檔或現有的記錄檔。 應用程式和服務應該寫入應用程式記錄檔或自訂的記錄檔。 裝置驅動程式應該寫入至系統記錄檔。 如果您沒有明確設定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>屬性預設為應用程式記錄檔的事件記錄檔。  
  
> [!NOTE]
>  安全性記錄檔是唯讀的。  
  
 若要以新來源的現有記錄檔為目標，設定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>屬性設為現有的事件記錄檔名稱。 若要建立新的事件記錄檔的來源，您必須設定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>屬性。 事件記錄檔名稱必須由可列印字元組成，不得包括字元 '*'、'?' 或 '\\'。 事件記錄檔名稱的前 8 個字元必須是不同於現有的名稱指定的電腦上的事件記錄檔的前 8 個字元。  
  
 作業系統會將事件記錄檔儲存為檔案。 當您使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法用來建立新的事件記錄檔，相關聯的檔案會儲存在指定的電腦上的 %SystemRoot%\System32\Config 目錄。 檔案名稱由附加的前 8 個字元設定<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>".evt"副檔名的屬性。  
  
   
  
## Examples  
 下列程式碼範例會設定事件來源的組態屬性，從命令列引數。 輸入引數會指定事件來源名稱、 事件記錄檔名稱、 電腦名稱和事件訊息資源檔。 這個範例是針對提供之較大範例的一部分<xref:System.Diagnostics.EventSourceCreationData>類別。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要註冊事件來源的電腦名稱。</summary>
        <value>要註冊事件來源的系統名稱。 預設值是本機電腦 (".")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>值不可為空字串。 如果未明確設定的電腦名稱，則預設為本機電腦 ("。")。  
  
 註冊時在遠端電腦上的來源，您必須具有系統管理權限，具有足夠權限的登錄值寫入該電腦上。  
  
   
  
## Examples  
 下列程式碼範例會設定事件來源的組態屬性，從命令列引數。 輸入引數會指定事件來源名稱、 事件記錄檔名稱、 電腦名稱和事件訊息資源檔。 這個範例是針對提供之較大範例的一部分<xref:System.Diagnostics.EventSourceCreationData>類別。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">電腦名稱無效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定訊息資源檔路徑，這個資源檔包含來源的訊息格式化字串。</summary>
        <value>訊息資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>設定將當地語系化的事件訊息寫入事件記錄檔來源的屬性。 事件訊息會描述使用者事件的應用程式定義字串。  
  
 您的應用程式可以寫入事件記錄檔項目使用的資源識別項。 資源識別元編製索引中的訊息<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>。 事件檢視器會尋找並顯示目前語言設定為基礎的當地語系化的訊息資源檔中的對應字串使用的資源識別碼。  
  
 寫入當地語系化的項目或寫入的直接存取的字串，則必須設定事件來源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法，以撰寫當地語系化的項目，設定訊息資源檔的來源。  
  
 如果您的應用程式寫入事件的訊息字串直接管理，而不是使用的資源識別項在當地語系化的資源檔，請勿設定<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>屬性。  
  
 如需定義事件訊息和建置事件的資源檔，詳細資訊，請參閱的 Platform SDK 文件中的 「 訊息編譯器 」 主題[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例可讓您決定是否事件來源名為`SampleApplicationSource`登錄在本機電腦上。 如果事件來源不存在，此範例會設定為來源的訊息資源檔，並建立新的事件來源。 最後，程式碼範例會將設定事件記錄檔，使用中的資源識別碼值的當地語系化的顯示名稱`DisplayNameMsgId`中的資源檔路徑和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資源檔路徑，這個資源檔包含來源的訊息參數字串。</summary>
        <value>參數資源檔的路徑。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>設定以使用當地語系化的事件訊息寫入事件記錄檔來源的屬性插入參數字串。 指定在每個當地語系化的事件訊息<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>屬性可包含插入字串的預留位置。 這些預留位置會用來指定的位置和語言無關的字串，在事件訊息中的資源識別碼。 事件檢視器會填入預留位置使用中的對應字串<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>及格式化當地語系化的事件項目在事件記錄檔訊息。  
  
 例如，訊息的文字檔案的下列區段會定義的參數預留位置的字串：  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 在參數資源檔中，插入字串都必須定義資源識別項對應到預留位置，如下所示：  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 寫入當地語系化的項目或寫入的直接存取的字串，則必須設定事件來源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法，以撰寫當地語系化的項目，設定訊息資源檔的來源。  
  
 如果您的應用程式事件記錄檔中直接寫入事件的訊息字串，或如果您<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>屬性不包含使用參數插入替代符號的訊息，則不會設定<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>屬性。  
  
 如需定義事件訊息和建置事件的資源檔，詳細資訊，請參閱的 Platform SDK 文件中的 「 訊息編譯器 」 主題[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下列程式碼範例可讓您決定是否事件來源名為`SampleApplicationSource`登錄在本機電腦上。 如果事件來源不存在，此範例會設定為來源的訊息資源檔，並建立新的事件來源。 最後，程式碼範例會將設定事件記錄檔，使用中的資源識別碼值的當地語系化的顯示名稱`DisplayNameMsgId`中的資源檔路徑和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 在程式碼範例會使用下列的訊息文字檔案，內建資源庫 EventLogMsgs.dll。 訊息文字檔案是從其中建立訊息資源檔的來源。 訊息文字檔案定義的資源識別碼和類別目錄、 事件訊息和參數插入字串的文字。 具體而言，資源識別碼 1004年所定義的訊息會使用預留位置的資源識別碼 5002 所定義的參數字串。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要使用事件記錄檔登錄為事件來源的名稱。</summary>
        <value>使用事件記錄檔登錄作為項目來源的名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 來源名稱通常是應用程式名稱或大型應用程式內的元件名稱。 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法會使用<xref:System.Diagnostics.EventSourceCreationData.Source%2A>， <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>，和<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>屬性，以建立新的來源和其相關聯的事件記錄檔的目標電腦上的登錄值。 新的來源名稱不符合現有的來源名稱或在目標電腦上現有的事件記錄檔名稱。  
  
 建立來源的登錄值之後，您的應用程式可以使用來源設定的事件記錄檔中寫入項目。  
  
 每個來源只能寫入一個事件記錄檔一次;不過，您的應用程式也可以使用多個來源，以寫入多個事件記錄檔。 例如，您的應用程式可能需要多個來源設定為不同的事件記錄檔或不同的資源檔。  
  
   
  
## Examples  
 下列程式碼範例會設定事件來源的組態屬性，從命令列引數。 輸入引數會指定事件來源名稱、 事件記錄檔名稱、 電腦名稱和事件訊息資源檔。 這個範例是針對提供之較大範例的一部分<xref:System.Diagnostics.EventSourceCreationData>類別。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫的任何成員<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>