<Type Name="BuildProvider" FullName="System.Web.Compilation.BuildProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d499c9f89c7b0355944d2903e4f01091e6cc6b9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37608210" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BuildProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BuildProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.BuildProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BuildProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildProvider abstract" />
  <TypeSignature Language="F#" Value="type BuildProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在 ASP.NET 建置環境中定義一組用以產生原始程式碼的屬性和方法。 這個類別是抽象的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 建置環境使用<xref:System.Web.Compilation.BuildProvider>產生原始碼應用程式內的不同檔案類型的物件。 類別衍生自<xref:System.Web.Compilation.BuildProvider>主要提供原始程式碼檔案、 網頁、 資源和其他自訂項目。  
  
 一般而言，您未建立的執行個體<xref:System.Web.Compilation.BuildProvider>直接類別。 相反地，您可以實作衍生自的類別<xref:System.Web.Compilation.BuildProvider>，並設定<xref:System.Web.Compilation.BuildProvider>實作，以便使用於 ASP.NET 建置環境。  
  
 執行個體<xref:System.Web.Compilation.BuildProvider>類別會搭配<xref:System.Web.Compilation.AssemblyBuilder>編譯的組件內建一個或多個檔案的物件。 A<xref:System.Web.Compilation.BuildProvider>執行個體的個別檔案，而適當的語言產生原始程式碼和<xref:System.Web.Compilation.AssemblyBuilder>物件會結合每個所提供的來源<xref:System.Web.Compilation.BuildProvider>成單一組件的執行個體。  
  
 在 ASP.NET 建置環境使用的執行個體<xref:System.Web.Compilation.BuildProvider>類別來建立應用程式內的檔案。 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性<xref:System.Web.Compilation.BuildProvider>類別指示要建置的檔案路徑。 在應用程式內的每個檔案的副檔名被對應到相對應的組建提供者。 ASP.NET 建置環境初始化<xref:System.Web.Compilation.BuildProvider>執行個體根據副檔名，每個檔案，並使用<xref:System.Web.Compilation.BuildProvider>来產生來源檔案的程式碼的方法。 ASP.NET 建置環境傳遞<xref:System.Web.Compilation.AssemblyBuilder>物件會根據慣用的編譯器語言和檔案的內容<xref:System.Web.Compilation.BuildProvider>方法建立一或多個檔案的組件時，讓<xref:System.Web.Compilation.BuildProvider>執行個體可以參與其整體的組件檔案的原始程式碼。  
  
 若要定義自訂的建置動作，在 ASP.NET 應用程式的檔案類型，您必須衍生的類別<xref:System.Web.Compilation.BuildProvider>、 實作來建置的檔案類型，在衍生類別中的成員，以及設定相對應的副檔名的組建提供者在應用程式設定檔中。  
  
 指定支援的檔案的副檔名，以及組建提供者是否支援程式碼檔案、 Web 檔案、 資源檔或所有檔案。 使用`type`屬性來指定組建提供者實作的完整型別名稱。 使用<xref:System.Web.Compilation.BuildProviderAppliesToAttribute>類別，以指定組建提供者是否套用至 App_Code 目錄中的檔案、 Web 內容目錄，為全域或本機資源中的檔案或所有檔案。 使用`extension`屬性來指定用來識別的檔案副檔名的檔案<xref:System.Web.Compilation.BuildProvider>類別支援。 使用<xref:System.Web.Configuration.BuildProviderCollection>類別來檢查組建組態檔中的提供者。 如需有關如何設定組建提供者的詳細資訊，請參閱 < [buildProviders 項目 （ASP.NET 設定結構描述） 的](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 若要實作組建提供者所產生的自訂檔案類型的原始程式碼，衍生的類別<xref:System.Web.Compilation.BuildProvider>，並覆寫<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法來產生支援的檔案類型的原始程式碼。 產生的來源會加入至<xref:System.Web.Compilation.AssemblyBuilder>表單的 CodeDOM 圖表，或做為代表實體的原始程式碼檔案的內容中的物件。 如果組建提供者需要特定的程式設計語言，請覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>屬性，以傳回<xref:System.Web.Compilation.CompilerType>針對支援的程式設計語言的物件。 如果組建提供者不需要特定的程式設計語言，不會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>屬性; 請改用基底類別實作，這表示組建提供者可以使用任何.NET Framework 語言，例如 Visual Basic 或 C#。  
  
 若要實作組建提供者所產生的網頁內容的原始程式碼，衍生的類別<xref:System.Web.Compilation.BuildProvider>並覆寫<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法，以傳回<xref:System.Type>所產生的類別如<xref:System.Web.Compilation.BuildProvider>。 覆寫<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法來產生類型所支援的檔案提供的原始程式碼。  
  
> [!NOTE]
>  新增自訂<xref:System.Web.Compilation.BuildProvider>類別對 Web.config 檔案在 ASP.NET 網站上的運作方式，但不適用於 ASP.NET Web 應用程式專案。 在 Web 應用程式專案中，所產生的程式碼<xref:System.Web.Compilation.BuildProvider>類別不能包含在應用程式。 如需詳細資訊，請參閱 < [ASP.NET Web 應用程式專案先行編譯概觀](http://msdn.microsoft.com/library/b940abbd-178d-4570-b441-52914fa7b887)。  
  
   
  
## Examples  
 下列程式碼範例說明簡單的組建提供者實作，繼承了抽象<xref:System.Web.Compilation.BuildProvider>基底類別。 組建提供者會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基底類別成員。 此範例不包含實作`SampleClassGenerator`類別。 如需詳細資訊，請參閱<xref:System.CodeDom.CodeCompileUnit>類別概觀。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.CompilerType" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
    <altmember cref="T:System.Web.Configuration.BuildProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BuildProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BuildProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Compilation.BuildProvider" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為<xref:System.Web.Compilation.BuildProvider>類別是抽象的您無法建立的執行個體<xref:System.Web.Compilation.BuildProvider>直接使用建構函式。  
  
 當衍生自<xref:System.Web.Compilation.BuildProvider>類別中覆寫建構函式來實作您的組建提供者實作的自訂初始化動作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeCompilerType">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.CompilerType CodeCompilerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Compilation.CompilerType CodeCompilerType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodeCompilerType As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::Compilation::CompilerType ^ CodeCompilerType { System::Web::Compilation::CompilerType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompilerType : System.Web.Compilation.CompilerType" Usage="System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示組建提供者用來產生自訂檔案類型之原始程式碼的編譯器型別。</summary>
        <value>唯讀 <see cref="T:System.Web.Compilation.CompilerType" /> 表示用來建立虛擬路徑之原始程式碼的程式碼產生器、程式碼編譯器和編譯器設定。 基底類別會傳回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>屬性來編譯原始程式碼的實作，提供設定<xref:System.Web.Compilation.BuildProvider>。 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>屬性是`null`如果組建提供者不需要特定的程式碼語言來產生和編譯原始程式碼。  
  
 若要設定的值<xref:System.Web.Compilation.CompilerType>內的組建提供者實作，使用物件<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>或<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法。  
  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>屬性會指定<xref:System.CodeDom.Compiler.CodeDomProvider>實作，用來產生和編譯原始程式碼的組建提供者。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>屬性會定義用來將原始程式碼編譯成組件的設定。  
  
   
  
## Examples  
 下列程式碼範例說明簡單的組建提供者實作，繼承了抽象<xref:System.Web.Compilation.BuildProvider>基底類別。 組建提供者會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基底類別成員。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCode">
      <MemberSignature Language="C#" Value="public virtual void GenerateCode (System.Web.Compilation.AssemblyBuilder assemblyBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCode(class System.Web.Compilation.AssemblyBuilder assemblyBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCode(System::Web::Compilation::AssemblyBuilder ^ assemblyBuilder);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit&#xA;override this.GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit" Usage="buildProvider.GenerateCode assemblyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyBuilder" Type="System.Web.Compilation.AssemblyBuilder" />
      </Parameters>
      <Docs>
        <param name="assemblyBuilder">組件建置器，參考組建提供者產生的原始程式碼。</param>
        <summary>產生組建提供者虛擬路徑的原始程式碼，並將原始程式碼加入到指定的組件建置器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要實作組建提供者所產生的自訂檔案類型的原始程式碼，衍生的類別<xref:System.Web.Compilation.BuildProvider>類別，並覆寫<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法來產生支援的檔案類型的原始程式碼。  
  
 一般而言，組建提供者<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>實作讀取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性，會剖析內容，並將產生的原始程式碼新增至指定<xref:System.Web.Compilation.AssemblyBuilder>物件。 您可以參與的表單中的組件原始程式碼<xref:System.IO.TextWriter>物件或 CodeDOM 圖表。 若要將透過組件的原始程式碼<xref:System.IO.TextWriter>物件，請使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。 若要在 CodeDOM 圖形中加入組件原始程式碼，請使用<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法。  
  
 如果組建提供者特定的程式設計語言產生原始程式碼，您必須覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>屬性，以傳回<xref:System.Web.Compilation.CompilerType>針對支援的程式設計語言的物件。  
  
   
  
## Examples  
 下列程式碼範例說明簡單的組建提供者實作，繼承了抽象<xref:System.Web.Compilation.BuildProvider>基底類別。 組建提供者會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基底類別成員。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCodeCompileUnit">
      <MemberSignature Language="C#" Value="protected internal virtual System.CodeDom.CodeCompileUnit GetCodeCompileUnit (out System.Collections.IDictionary linePragmasTable);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit GetCodeCompileUnit([out] class System.Collections.IDictionary&amp; linePragmasTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetCodeCompileUnit (ByRef linePragmasTable As IDictionary) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ GetCodeCompileUnit([Runtime::InteropServices::Out] System::Collections::IDictionary ^ % linePragmasTable);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeCompileUnit :  -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.GetCodeCompileUnit :  -&gt; System.CodeDom.CodeCompileUnit" Usage="buildProvider.GetCodeCompileUnit linePragmasTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linePragmasTable" Type="System.Collections.IDictionary&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="linePragmasTable">這個方法傳回時，會包含字典，其中包含原始程式碼所有關聯的行號和程式行 Pragmas。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>表示所產生 CodeDOM 圖形的容器。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.BuildProvider" /> 執行個體所產生之 CodeDOM 圖形的容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可透過<xref:System.Web.Compilation.ClientBuildManager>Visual Studio 中支援的語法反白顯示和設計工具類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomString">
      <MemberSignature Language="C#" Value="public virtual string GetCustomString (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCustomString(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomString (results As CompilerResults) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCustomString(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string&#xA;override this.GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string" Usage="buildProvider.GetCustomString results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">組建提供者之虛擬路徑的編譯結果。</param>
        <summary>產生要在已編譯之組件中保留的字串。</summary>
        <returns>要在組建環境中保留的字串，如果 <see cref="T:System.Web.Compilation.BuildProvider" /> 執行個體不實作 <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A>方法<xref:System.Web.Compilation.BuildManager>物件建立輸入虛擬路徑，並呼叫的組建提供者的執行個體<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法<xref:System.Web.Compilation.BuildProvider>物件。  
  
 基底<xref:System.Web.Compilation.BuildProvider>類別會傳回`null`for<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法，指出<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>未實作。  
  
 特定的組建提供者實作可實作<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>代替<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法。 A<xref:System.Web.Compilation.BuildProvider>物件通常會使用<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>返回<xref:System.Type>虛擬路徑的物件。 不過，<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法可以用來表示<xref:System.Web.Compilation.BuildProvider>物件可以產生多個型別，從虛擬路徑。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerType">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerType () As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerType();" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerType : unit -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回應用程式中預設語言的編譯器設定。</summary>
        <returns>表示應用程式中預設語言之編譯器設定的 <see cref="T:System.Web.Compilation.CompilerType" />。 基底類別會根據應用程式組態檔傳回預設的編譯器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法來檢查組建提供者的預設編譯器型別。 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法來檢查設定中的特定語言名稱的組建提供者的編譯器型別。  
  
 基底<xref:System.Web.Compilation.BuildProvider>類別會決定預設編譯器型別使用`defaultLanguage`屬性應用程式組態檔的區段中的值。 如果沒有任何預設語言設定編譯區段中的，預設編譯器型別會設定使用<xref:Microsoft.VisualBasic.VBCodeProvider>語言提供者。  
  
 當衍生自<xref:System.Web.Compilation.BuildProvider>類別，您可以使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>若要設定<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>內實作的屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerTypeForLanguage">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerTypeForLanguage (language As String) As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerTypeForLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerTypeForLanguage : string -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerTypeForLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">程式碼語言名稱。</param>
        <summary>傳回根據指定語言之組建提供者的編譯器設定。</summary>
        <returns>表示根據指定語言之組建提供者編譯器設定的 <see cref="T:System.Web.Compilation.CompilerType" />。 基底類別會根據應用程式組態檔傳回預設的編譯器語言設定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法來檢查設定中的特定語言名稱的組建提供者的編譯器型別。 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法來檢查組建提供者的預設編譯器型別。  
  
 基底<xref:System.Web.Compilation.BuildProvider>類別會決定預設編譯器型別會使用<xref:System.Web.Configuration.Compiler>中的項目<xref:System.Web.Configuration.CompilationSection.Compilers%2A>屬性<xref:System.Web.Configuration.CompilationSection>組態檔的物件。 這就相當於檢查和設定檔的區段中的項目中的項目。 例如，對於`language`值 VB，基底類別方法會傳回<xref:System.Web.Compilation.CompilerType>物件，對應至所設定的設定執行個體<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>。  
  
 當您衍生自<xref:System.Web.Compilation.BuildProvider>類別，您可以使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>若要設定<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>實作所支援之語言的屬性值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Web.HttpException">
          <paramref name="language" /> 與組建提供者的組態編譯器不相符。</exception>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
        <altmember cref="P:System.Web.Configuration.CompilationSection.Compilers" />
        <altmember cref="T:System.Web.Configuration.Compiler" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneratedType">
      <MemberSignature Language="C#" Value="public virtual Type GetGeneratedType (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGeneratedType(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeneratedType (results As CompilerResults) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGeneratedType(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type&#xA;override this.GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type" Usage="buildProvider.GetGeneratedType results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">組建提供者之虛擬路徑的編譯結果。</param>
        <summary>傳回組建提供者從虛擬路徑產生的型別。</summary>
        <returns>組建提供者為虛擬路徑產生的型別。 基底類別會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要實作組建提供者所產生的 Web 內容，例如.aspx 檔案的原始程式碼，衍生的類別<xref:System.Web.Compilation.BuildProvider>類別並覆寫<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法來傳回組建提供者所產生的型別。  
  
 ASP.NET 建置系統會將檔案編譯每個組建提供者，並產生<xref:System.CodeDom.Compiler.CompilerResults>物件，傳遞至<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法。 一般而言，組建提供者<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>實作會使用<xref:System.Reflection.Assembly.GetType%2A>方法<xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A>屬性輸入`results`来傳回提供的型別物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="GetResultFlags">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.BuildProviderResultFlags GetResultFlags (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Web.Compilation.BuildProviderResultFlags GetResultFlags(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResultFlags (results As CompilerResults) As BuildProviderResultFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Compilation::BuildProviderResultFlags GetResultFlags(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags&#xA;override this.GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags" Usage="buildProvider.GetResultFlags results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildProviderResultFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">組建提供者之虛擬路徑的編譯結果。</param>
        <summary>傳回指示建立虛擬路徑需要之動作的值。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> 值指出在 ASP.NET 建置環境中建立虛擬路徑後需要的動作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>時使用的執行個體方法會使用 ASP.NET 建置環境<xref:System.Web.Compilation.BuildProvider>類別來建置的檔案，並載入已編譯的組件。  
  
 基底<xref:System.Web.Compilation.BuildProvider>類別方法會傳回<xref:System.Web.Compilation.BuildProviderResultFlags.Default>欄位值，指出建立虛擬路徑時，不需要任何特殊動作。  
  
 當衍生自<xref:System.Web.Compilation.BuildProvider>類別，您可以實作<xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>方法，以傳回不同<xref:System.Web.Compilation.BuildProviderResultFlags>為您的自訂檔案類型或虛擬路徑的值。 例如，如果重建您的虛擬路徑，必須將所屬<xref:System.AppDomain>重新載入，您可以傳回的物件<xref:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange>列舉值，從您<xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="T:System.Web.Compilation.BuildProviderResultFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReader">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟文字閱讀器以從虛擬路徑讀取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader();" />
      <MemberSignature Language="F#" Value="member this.OpenReader : unit -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開啟文字閱讀器，以從目前的組建提供者物件的虛擬路徑讀取。</summary>
        <returns>開啟的 <see cref="T:System.IO.TextReader" />，可以用來讀取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.TextReader.Read%2A>方法傳回<xref:System.IO.TextReader>物件來讀取的內容<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性<xref:System.Web.Compilation.BuildProvider>物件。  
  
 之後呼叫<xref:System.Web.Compilation.BuildProvider.OpenReader%2A>方法，則必須使用<xref:System.IO.TextReader.Close%2A>方法以關閉<xref:System.IO.TextReader>物件，並釋放相關聯的系統資源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader (virtualPath As String) As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenReader : string -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要讀取的虛擬路徑。</param>
        <summary>開啟文字閱讀器以從指定的虛擬路徑讀取。</summary>
        <returns>開啟的 <see cref="T:System.IO.TextReader" />，可以用來讀取指定虛擬路徑的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.TextReader.Read%2A>方法在傳回<xref:System.IO.TextReader>物件讀取的虛擬路徑的內容。  
  
 之後呼叫<xref:System.Web.Compilation.BuildProvider.OpenReader%2A>方法，則必須使用<xref:System.IO.TextReader.Close%2A>方法以關閉<xref:System.IO.TextReader>物件，並釋放相關聯的系統資源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStream">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟資料流以從虛擬路徑讀取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream();" />
      <MemberSignature Language="F#" Value="member this.OpenStream : unit -&gt; System.IO.Stream" Usage="buildProvider.OpenStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開啟資料流，以讀取目前的組建提供者物件的虛擬路徑。</summary>
        <returns>開啟的 <see cref="T:System.IO.Stream" />，可以用來讀取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Stream.Read%2A>方法傳回<xref:System.IO.Stream>物件來讀取的虛擬路徑的內容<xref:System.Web.Compilation.BuildProvider>物件。  
  
 之後呼叫<xref:System.Web.Compilation.BuildProvider.OpenStream%2A>方法，則必須使用<xref:System.IO.Stream.Close%2A>方法以關閉<xref:System.IO.Stream>物件，並釋放相關聯的系統資源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenStream : string -&gt; System.IO.Stream" Usage="buildProvider.OpenStream virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要讀取的虛擬路徑。</param>
        <summary>開啟資料流以從指定虛擬路徑讀取。</summary>
        <returns>開啟的 <see cref="T:System.IO.Stream" />，可以用來讀取指定虛擬路徑的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Stream.Read%2A>方法在傳回<xref:System.IO.Stream>物件讀取的虛擬路徑的內容。  
  
 之後呼叫<xref:System.Web.Compilation.BuildProvider.OpenStream%2A>方法，則必須使用<xref:System.IO.Stream.Close%2A>方法以關閉<xref:System.IO.Stream>物件，並釋放相關聯的系統資源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCompileErrors">
      <MemberSignature Language="C#" Value="public virtual void ProcessCompileErrors (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessCompileErrors(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessCompileErrors (results As CompilerResults)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessCompileErrors(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit&#xA;override this.ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit" Usage="buildProvider.ProcessCompileErrors results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">編譯器結果。</param>
        <summary>在衍生類別中覆寫時，可讓您檢閱編譯器錯誤訊息，以便於修改它們提供更多資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因此，為了讓使用者更有幫助的錯誤文字顯示之前，您可以修改編譯器錯誤，您通常覆寫這個方法。 這種的案例，其中您知道特定錯誤的內容，可提供資訊給使用者有關如何加以修正。 原始的編譯器錯誤訊息是通常特有的特定語言建構，而且可能不會對解決方案的真正原因很明顯的使用者。  
  
 您可以使用來存取錯誤<xref:System.CodeDom.Compiler.CompilerResults>傳遞給方法的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReferencedAssemblies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ICollection ^ ReferencedAssemblies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示使用組建提供者產生之原始碼編譯的組件。</summary>
        <value>可由組建提供者產生之原始程式碼參考的唯讀組件集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 建置環境初始化組件可供參考，組建提供者的集合。 組建提供者所產生的原始程式碼可以參考的組件中使用的公用型別。 參考的組件集合是由其他內建的 ASP.NET 應用程式的組件和組態檔中的項目中列出的組件所組成。  
  
 如果組建提供者會產生參考其他組件的原始程式碼，組建提供者會將新增使用其他組件<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法。 在 ASP.NET 建置環境會解析外部型別期間使用這兩個參考的組件所加入的組件編譯組建提供者和預設集合中的組件可供參考。  
  
 <xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A>集合不包含透過其他組建提供者所加入的參考的組件<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      </Docs>
    </Member>
    <Member MemberName="RegisterBuildProvider">
      <MemberSignature Language="C#" Value="public static void RegisterBuildProvider (string extension, Type providerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterBuildProvider(string extension, class System.Type providerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterBuildProvider (extension As String, providerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterBuildProvider(System::String ^ extension, Type ^ providerType);" />
      <MemberSignature Language="F#" Value="static member RegisterBuildProvider : string * Type -&gt; unit" Usage="System.Web.Compilation.BuildProvider.RegisterBuildProvider (extension, providerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
        <Parameter Name="providerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="extension">組建提供者適用的副檔名。</param>
        <param name="providerType">組建提供者類別。</param>
        <summary>註冊組建提供者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來註冊組建提供者，而不是在 Web.config 檔案中定義它們。 如需組建提供者的詳細資訊，請參閱<xref:System.Web.Compilation.BuildProvider>類別以及[buildProviders 項目 （ASP.NET 設定結構描述） 的](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="protected internal string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示此組建提供者實作要建立之檔案。</summary>
        <value>指定此組建提供者要編譯之檔案的虛擬路徑的唯讀字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虛擬路徑<xref:System.Web.Compilation.BuildProvider>物件是在編譯組建提供者檔案的路徑。 例如，如果您已設定自訂<xref:System.Web.Compilation.BuildProvider>類別來建立具有自訂延伸模組的.abc，網站中的所有檔案，WebSite1，名為您的網站，而且網站包含名為 Example.abc，<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性包含值`/WebSite1/Example.abc`.  
  
 在應用程式中的每個檔案的副檔名決定檔案類型，而對應的檔案類型的組建提供者。 ASP.NET 建置環境初始化<xref:System.Web.Compilation.BuildProvider>物件中每個檔案為基礎的檔案類型，並使用<xref:System.Web.Compilation.BuildProvider>方法，以產生每個檔案的來源。  
  
 如需有關如何設定組建提供者的詳細資訊，請參閱 < [buildProviders 項目 （ASP.NET 設定結構描述） 的](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPathDependencies">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection VirtualPathDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection VirtualPathDependencies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property VirtualPathDependencies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ VirtualPathDependencies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPathDependencies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示必須在組建提供者產生程式碼之前先建立的虛擬路徑集合。</summary>
        <value>字串的唯讀集合，表示組建提供者的這個執行個體所依賴之虛擬路徑。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A>屬性是集合，必須先編譯虛擬路徑的<xref:System.Web.Compilation.BuildProvider>執行個體會產生原始程式碼。 來自中的虛擬路徑的組件<xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A>會新增編譯參考為<xref:System.Web.Compilation.BuildProvider>執行個體。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
  </Members>
</Type>