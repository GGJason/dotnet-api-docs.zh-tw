<Type Name="AssemblyBuilder" FullName="System.Web.Compilation.AssemblyBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="456ad81232191490a81d464eda1ece8e505731bf" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52235291" /></Metadata><TypeSignature Language="C#" Value="public class AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AssemblyBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供容器，以便在 ASP.NET 專案中從一個或多個虛擬路徑建立組件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行個體<xref:System.Web.Compilation.AssemblyBuilder>類別會搭配<xref:System.Web.Compilation.BuildProvider>類別已編譯的組件內建一個或多個檔案的方法。  
  
 <xref:System.Web.Compilation.BuildProvider>類別會定義組建功能，針對個別的檔案，而<xref:System.Web.Compilation.AssemblyBuilder>類別將合併每個所提供的原始程式碼<xref:System.Web.Compilation.BuildProvider>成單一組件的執行個體。 ASP.NET 建置環境傳遞<xref:System.Web.Compilation.AssemblyBuilder>物件<xref:System.Web.Compilation.BuildProvider>方法時建置的組件，從一或多個檔案，因此，每個<xref:System.Web.Compilation.BuildProvider>執行個體可以參與整體的組件其檔案的原始程式碼。  
  
 在 ASP.NET 建置環境決定的語言和編譯器所需的檔案在專案中，根據<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType>屬性。 建置環境群組檔案取決於其的編譯器設定，並建置的組件檔案中需要相同的編譯器。  
  
 <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>屬性會指出<xref:System.CodeDom.Compiler.CodeDomProvider>編譯組件的原始程式碼中使用 ASP.NET 建置環境的實作提供每個<xref:System.Web.Compilation.BuildProvider>實作。  
  
 A<xref:System.Web.Compilation.BuildProvider>物件提供原始程式碼的 CodeDOM 圖形使用形式<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法。 A<xref:System.Web.Compilation.BuildProvider>物件提供原始程式碼儲存在實體檔案，使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。  
  
 在每個<xref:System.Web.Compilation.BuildProvider>物件提供使用適當的原始程式碼<xref:System.Web.Compilation.AssemblyBuilder>方法，ASP.NET 建置環境使用<xref:System.Web.Compilation.AssemblyBuilder>類別編譯為組件收集到的原始程式碼。  
  
   
  
## Examples  
 下列程式碼範例說明簡單的組建提供者實作，繼承了抽象<xref:System.Web.Compilation.BuildProvider>基底類別。 組建提供者會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基底類別成員。  
  
 在 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法實作，組建提供者會將產生的程式碼組件編譯使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。 此範例不包含實作`SampleClassGenerator`類別。 如需詳細資訊，請參閱<xref:System.CodeDom.CodeCompileUnit>。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
    <altmember cref="T:System.Web.Compilation.BuildManager" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
  </Docs>
  <Members>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (a As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : System.Reflection.Assembly -&gt; unit" Usage="assemblyBuilder.AddAssemblyReference a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">由程式碼編譯器單元，或包括在組件編譯中的來源檔案參考的組件。</param>
        <summary>增加為檔案產生之原始程式碼所參考的組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.Compilation.BuildProvider>實作會使用<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法時產生程式碼參考內輸入組件的型別。  
  
 ASP.NET 建置環境初始化預設集合，可用的組建提供者的參考的組件<xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A?displayProperty=nameWithType>屬性。 如果組建提供者會產生參考其他組件的原始程式碼，組建提供者會將新增使用其他組件<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法。 在 ASP.NET 建置環境會解析外部型別期間使用這兩個參考的組件所加入的組件編譯組建提供者和預設集合中的組件可供參考。  
  
 通常<xref:System.Web.Compilation.BuildProvider>物件加入至原始程式碼<xref:System.Web.Compilation.AssemblyBuilder>物件中<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法。 如果組建提供者會產生使用外部類型的原始程式碼，組建提供者將使用的型別之組件<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A?displayProperty=nameWithType>方法。  
  
 使用<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法來加入參考的組件所產生的原始程式碼中所需<xref:System.Web.Compilation.BuildProvider>特定檔案類型的執行個體。 使用[組件項目 （ASP.NET 設定結構描述）](https://msdn.microsoft.com/library/3811c448-af1c-498d-be2b-6ed2634c51e9)地在整個專案中的多個檔案類型設定參考的組件的組態項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.Web.Compilation.BuildProvider buildProvider, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.Web.Compilation.BuildProvider buildProvider, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::Web::Compilation::BuildProvider ^ buildProvider, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.Web.Compilation.BuildProvider * System.CodeDom.CodeCompileUnit -&gt; unit" Usage="assemblyBuilder.AddCodeCompileUnit (buildProvider, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="buildProvider">產生 <paramref name="compileUnit" /> 的組建提供者。</param>
        <param name="compileUnit">要包括在組件編譯中的程式碼編譯單元。</param>
        <summary>使用 CodeDOM 圖形格式，加入組件的原始程式碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.Compilation.BuildProvider>實作會呼叫<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法產生 CodeDOM 圖形的虛擬路徑時。 原始程式碼加<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>包含組件編譯中。  
  
 一般而言，組建提供者<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法實作會讀取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性，會剖析內容，然後將產生的原始程式碼新增至指定<xref:System.Web.Compilation.AssemblyBuilder>物件。 組建提供者會使用<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>CodeDOM 圖表中加入組件的原始程式碼的方法。 或者，可以使用組建提供者<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>當做實體檔案中加入組件的原始碼的方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
      </Docs>
    </Member>
    <Member MemberName="CodeDomProvider">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CodeDomProvider CodeDomProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CodeDomProvider CodeDomProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProvider As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::CodeDomProvider ^ CodeDomProvider { System::CodeDom::Compiler::CodeDomProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProvider : System.CodeDom.Compiler.CodeDomProvider" Usage="System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來將原始程式碼建立為組件的編譯器。</summary>
        <value>唯讀 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作是用來將每一個組建提供者所提供的原始程式碼編譯為組件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>屬性會指出<xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=nameWithType>編譯組件的原始程式碼中使用 ASP.NET 建置環境的實作提供每個<xref:System.Web.Compilation.BuildProvider>實作。  
  
 在 ASP.NET 建置環境決定的語言和編譯器所需的檔案在專案中，根據<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType>屬性。 建置環境群組檔案取決於其的編譯器設定，並建置的組件檔案中需要相同的編譯器。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
        <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="CreateCodeFile">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter CreateCodeFile (System.Web.Compilation.BuildProvider buildProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextWriter CreateCodeFile(class System.Web.Compilation.BuildProvider buildProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextWriter ^ CreateCodeFile(System::Web::Compilation::BuildProvider ^ buildProvider);" />
      <MemberSignature Language="F#" Value="member this.CreateCodeFile : System.Web.Compilation.BuildProvider -&gt; System.IO.TextWriter" Usage="assemblyBuilder.CreateCodeFile buildProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
      </Parameters>
      <Docs>
        <param name="buildProvider">產生程式碼來源檔案的組建提供者。</param>
        <summary>允許組建提供者建立暫時來源檔案，並將來源檔案包括在組件編譯中。</summary>
        <returns>可以用來將原始程式碼寫入到暫時檔案之開啟的 <see cref="T:System.IO.TextWriter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.Compilation.BuildProvider>實作會呼叫<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法產生的虛擬路徑的原始程式檔時。 原始程式碼加<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>包含組件編譯中。  
  
 一般而言，組建提供者<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法實作會讀取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>屬性，會剖析內容，然後將產生的原始程式碼新增至指定<xref:System.Web.Compilation.AssemblyBuilder>物件。 組建提供者會使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>當做實體檔案中加入組件的原始碼的方法。 或者，可以使用組建提供者<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>CodeDOM 圖表中加入組件的原始程式碼的方法。  
  
 之後呼叫<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>，組建提供者將使用所傳回的檔案內容寫入來源<xref:System.IO.TextWriter>物件。 撰寫原始程式檔之後，請<xref:System.Web.Compilation.BuildProvider>物件必須使用<xref:System.IO.TextWriter.Close%2A>方法以關閉<xref:System.IO.TextWriter>物件，並釋放相關聯的系統資源。  
  
   
  
## Examples  
 下列程式碼範例說明簡單的組建提供者實作，繼承了抽象<xref:System.Web.Compilation.BuildProvider>基底類別。 組建提供者會覆寫<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基底類別成員。  
  
 在 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法實作，組建提供者會將產生的程式碼組件編譯使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。 此範例不包含實作`SampleClassGenerator`類別。 如需詳細資訊，請參閱<xref:System.CodeDom.CodeCompileUnit>。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      </Docs>
    </Member>
    <Member MemberName="CreateEmbeddedResource">
      <MemberSignature Language="C#" Value="public System.IO.Stream CreateEmbeddedResource (System.Web.Compilation.BuildProvider buildProvider, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream CreateEmbeddedResource(class System.Web.Compilation.BuildProvider buildProvider, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ CreateEmbeddedResource(System::Web::Compilation::BuildProvider ^ buildProvider, System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.CreateEmbeddedResource : System.Web.Compilation.BuildProvider * string -&gt; System.IO.Stream" Usage="assemblyBuilder.CreateEmbeddedResource (buildProvider, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="buildProvider">產生資源的組建提供者。</param>
        <param name="name">要建立之資源檔案的名稱。</param>
        <summary>允許組建提供者建立要包括在組件編譯中的資源檔案。</summary>
        <returns>可以用來寫入要包括在組件編譯中之資源的開啟 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之後呼叫<xref:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource%2A>方法中，<xref:System.Web.Compilation.BuildProvider>物件寫入資源使用所傳回的檔案內容<xref:System.IO.Stream>物件。 例如，組建提供者可以撰寫使用的資源<xref:System.Resources.ResourceWriter>物件。 寫入資源檔之後, 的組建提供者必須使用<xref:System.IO.Stream.Close%2A>方法以關閉<xref:System.IO.Stream>物件，並釋放相關聯的系統資源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 不是有效的檔案名稱。</exception>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.Resources.ResourceWriter" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeFactory">
      <MemberSignature Language="C#" Value="public void GenerateTypeFactory (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GenerateTypeFactory(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GenerateTypeFactory (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GenerateTypeFactory(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GenerateTypeFactory : string -&gt; unit" Usage="assemblyBuilder.GenerateTypeFactory typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">要產生的型別名稱。</param>
        <summary>將型別的快速物件預設樣板插入到已編譯的組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.Compilation.BuildProvider>實作會呼叫<xref:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory%2A>方法，以最佳化效能，頻繁的建立的型別執行個體。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      </Docs>
    </Member>
    <Member MemberName="GetTempFilePhysicalPath">
      <MemberSignature Language="C#" Value="public string GetTempFilePhysicalPath (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTempFilePhysicalPath(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFilePhysicalPath (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFilePhysicalPath(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="member this.GetTempFilePhysicalPath : string -&gt; string" Usage="assemblyBuilder.GetTempFilePhysicalPath extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">使用於暫時檔案的檔案副檔名。</param>
        <summary>產生暫時檔案路徑。</summary>
        <returns>具有指定副檔名之暫時檔案的路徑。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.Compilation.BuildProvider>實作會呼叫<xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A>方法來取得編譯組件之後自動刪除暫存檔案路徑。  
  
 <xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A>方法會產生唯一的暫存檔案路徑，但不會建立該檔案。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
        <altmember cref="P:System.Web.Compilation.CompilerType.CompilerParameters" />
      </Docs>
    </Member>
  </Members>
</Type>