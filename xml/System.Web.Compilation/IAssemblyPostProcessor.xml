<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0252eeffff662891a4fb72718c963444a8ee8c6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37607966" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定義類別實作的方法，用來在已建置組件後處理組件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已編譯之後，實作此介面的類別可以存取組件。 <xref:System.Web.Compilation.AssemblyBuilder>類別會編譯組件，然後檢查是否<xref:System.Web.Compilation.IAssemblyPostProcessor>介面已註冊的 Web 組態檔中。 如果是的話<xref:System.Web.Compilation.AssemblyBuilder>執行個體呼叫<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>方法<xref:System.Web.Compilation.IAssemblyPostProcessor>介面來執行編譯後再載入組件的任何動作。 例如，分析工具可以實作這個介面來建立組件中的探查。  
  
 當<xref:System.Web.Compilation.IAssemblyPostProcessor>介面註冊、 ASP.NET 應用程式和其組件將一律會編譯偵錯模式中。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立實作<xref:System.Web.Compilation.IAssemblyPostProcessor>介面，並在 Web 應用程式的 Web.config 檔案中註冊它。  
  
 在程式碼範例的第一個部分會建立名為類別`Samples.Process.postProcessTest`實作<xref:System.Web.Compilation.IAssemblyPostProcessor>介面。 這個類別會執行寫入檔案的簡單動作時<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>呼叫方法。  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 將類別編譯成.dll 檔案，使用命令`csc /target:library postProcessTest.cs`。 將產生的.dll 檔案新增至 ASP.NET 應用程式的 Bin 資料夾，並在 Web.config 檔案中，登錄此.dll 檔，如下列程式碼所示。  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 當使用者造訪網站時，動態編譯的 Web 應用程式和檔案會以 C:\compile 寫入 MyTest.txt。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">組件的路徑。</param>
        <summary>在載入組件之前呼叫，以允許實作的類別修改組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.AssemblyBuilder>編譯組件之後，類別會呼叫這個方法。 要載入組件應該包含在這個方法之前採取任何動作。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立實作<xref:System.Web.Compilation.IAssemblyPostProcessor>介面，並在 Web 應用程式的 Web.config 檔案中註冊它。  
  
 在程式碼範例的第一個部分會建立名為類別`Samples.Process.postProcessTest`實作<xref:System.Web.Compilation.IAssemblyPostProcessor>介面。 這個類別會執行寫入檔案的簡單動作時<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>呼叫方法。  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 將類別編譯成.dll 檔案，使用命令`csc /target:library postProcessTest.cs`。 將產生的.dll 檔案新增至 ASP.NET 應用程式的 Bin 資料夾，並在 Web.config 檔案中，登錄此.dll 檔，如下列程式碼所示。  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 當使用者造訪網站時，動態編譯的 Web 應用程式和檔案會以 C:\compile 寫入 MyTest.txt。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>