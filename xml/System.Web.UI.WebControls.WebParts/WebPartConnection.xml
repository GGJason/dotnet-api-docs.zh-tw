<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d33323212fbf6275393a23d262fe4884aeb7fc1a" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59354437" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供讓兩個 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項建立連接的物件。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 組件控制項集合中，連線會是連結或兩個之間的關聯<xref:System.Web.UI.WebControls.WebParts.WebPart>（或其他伺服器或使用者） 可讓它們共用資料的控制項。 共用資料的這項功能可讓連接的控制項，用於超過提供的隔離控制功能的方式。 比方說，如果其中一個控制項提供郵遞區號的資料，而另一個控制項可以讀取該資料，並提供的郵遞區號為根據本地天氣資訊，然後連接兩個控制項的功能提供更多價值給使用者。 若要擴充此範例中，其他控制項可以建立也會顯示根據郵遞區號，例如地方新聞的連結控制項的資訊，以及所有郵遞區號的資料可以使用這些控制項可以提供的單一控制項都共用資料郵遞區號。 Web 組件的應用程式的終端使用者可以建立和管理所有這類相容控制項直接從 Web 瀏覽器中，使用提供的標準連接使用者介面 (UI) 之間的連線<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項，或使用所提供的自訂 UI開發人員。  
  
 這<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別概觀是一般陳述式的基本詳細資料，建立連接。 如需特定元件及建立連線時所涉及的需求詳細資訊，請參閱 < [Web 組件連接概觀](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))，或請參閱參考類別和程式碼在以下討論中所述的範例。 有數個基本層面的 Web 組件連接：  
  
-   兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 每個 Web 組件連接是由兩個控制項所組成。 可以同時加入多個連接的控制項，但每個單一連接是由兩個控制項所組成。 控制項可以直接衍生自<xref:System.Web.UI.WebControls.WebParts.WebPart>基底類別，也可以是其他伺服器控制項，包括 ASP.NET 控制項、 自訂伺服器控制項和使用者控制項。 控制項不是衍生自<xref:System.Web.UI.WebControls.WebParts.WebPart>類別，如果放在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，以自動包裝<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件，在執行階段，並讓它們繼承自<xref:System.Web.UI.WebControls.WebParts.WebPart>類別和函式執行階段為<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。  
  
-   位於控制項<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域。 兩者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項和任何其他類型的伺服器控制項必須位於<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>能夠參與 Web 組件連接 （和其他大部分的 Web 組件功能） 的區域。  
  
-   消費者和提供者。 在每個 Web 組件連接中，有兩個控制項： 資料和資料的取用者的提供者。 提供者會提供給取用者的資料，透過介面的形式傳回資料的指定的回呼方法。 （如需如何建立和指定的回呼方法的範例，請參閱本主題的範例 > 一節）。此回呼方法就是所謂的提供者連接點。 這個連接點 （「 易記 」 名稱、 識別碼和傳回的介面的型別） 的詳細資料包含在<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>與提供者控制項相關聯的物件。 取用者接收的資料，透過可接受介面的執行個體的指定方法。 這個方法稱為消費者連接點，而且連接點 （名稱、 識別碼和介面的型別） 的詳細資料包含在<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>消費者控制項相關聯的物件。  
  
-   相容的控制項或有效的轉換程式。 工作的連接，提供者與取用者必須是相容 （表示指定的連接點方法，可以使用相同類型的介面） 或有必須是<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件能夠轉譯所提供的型別到了解取用者的型別提供者。  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 物件。 連接存在，必須是執行個體<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別，其中包含提供者和消費者控制項，以及其連接點的詳細資料的參考。 如果提供者和取用者不相容，並改為使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件來連接，連接參考轉換程式。  
  
-   建立連接的方法。 已正確連線點方法在設計及放置在區域中，相容的消費者和提供者控制項之後，<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件是否使用、 最後一個必要的基本步驟來起始連線。 這種情形的其中一個方法是建立透過使用者介面連線的使用者。 如果您將`<asp:connectionszone>`項目] 頁面上，以及其他需要連接的元件會就地的情況下，在執行階段，使用者可以將網頁切換成連接顯示模式，按一下 [連接動詞命令功能表中的動詞提供者或取用者並連接 UI (根據<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項) 會出現。 透過此 UI 中，使用者可以起始連線。 若要起始連線的另一個方法是以程式設計的方式。 在任一情況下，是否透過 UI 或以程式設計的方式，基礎的方法，啟動連線都相同。 應用程式會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法 (或<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法，如果使用轉換程式) 上<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，提供者、 消費者和其各自的連接點物件，傳遞給它，然後此方法會傳回<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別會定義封裝之間的連線兩個必要的詳細資訊的物件<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 類別幾乎完全包含與特定連接的詳細資料相關的屬性。 數個屬性是關於連接之中消費者控制項。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性會參考本身的消費者控制項和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性參考取用者的識別碼。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>取用者的參考物件，其中包含消費者連接點的詳細資料，<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性參考 ID 的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 所有這些取用者相關連接屬性必須有值，指派給它們，以建立連線。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別也有數個在連接中，提供者控制項相關的屬性，這些會對應至屬性的用戶。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性會參考提供者控制項本身，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性會參考其識別碼。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性參考<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性所參照的提供者的連接點的 ID。  
  
 數個屬性是關於連線狀態。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性會指出連接是否主動 （目前交換資料） 」 或 「 非作用中 （仍已連接但不是會積極地共用資料）。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性會指出連接是否共用 （可在頁面上的所有使用者） 或使用者特定的連接，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性會指出控制項是否靜態 （宣告在網頁標記中，因此永久） 或動態 （以程式設計方式建立，這表示它可以已刪除）。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立兩個之間的簡單連接<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 此範例示範三種方式建立連接： 以宣告方式，是藉由將連接的標記放在網頁中; 標記以程式設計方式在程式碼中建立連線並透過 UI，藉由放置<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在頁面上，可讓使用者建立的連線。  
  
 在程式碼範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面和控制項的原始程式碼。 原始程式檔包含一個簡單的介面，名為`IZipCode`。 另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並做為提供者控制項。 其`ProvideIZipCode`方法是實作介面的唯一成員的回呼方法。 此方法只會傳回介面的執行個體。 請注意，方法標示為`ConnectionProvider`其中繼資料中的屬性。 這是將方法識別提供者的連接點的回呼方法的機制。 另<xref:System.Web.UI.WebControls.WebParts.WebPart>類別會命名為`WeatherWebPart`，並作為連線取用者。 這個類別具有一個名為方法`GetZipCode`所取得的執行個體`IZipCode`從提供者控制項的介面。 請注意，這個方法會標示為取用者的連接點方法`ConnectionConsumer`其中繼資料中的屬性。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 頁面頂端附近`Register`使用者控制項和自訂指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 因為此範例假設動態編譯的控制項，控制項的原始程式碼應該在 App_Code 子資料夾中;`Register`頁面中的標記會參考只任意標記前置詞和控制項的命名空間。 自訂<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （提供者和取用者） 網頁內宣告`<asp:webpartzone>`元素內，`<zonetemplate>`項目。  
  
 頁面會提供三種方式可建立自訂控制項之間的連接。 第一種方法是宣告式。 在頁面中，標記中 <`StaticConnections>`項目宣告，而且在`<asp:WebPartConnections>`項目，各種不同的取用者和提供者詳細資料，來做為屬性指定的連接。 這是一種方式建立連線，請藉由宣告直接在網頁上，特別是在`<asp:WebPartManager>`項目。 這個靜態的連線，因為建立立即第一次頁面載入兩個自訂控制項之間的連線。  
  
 建立控制項之間連接的第二個方法由提供`<asp:connectionszone>`頁面中的項目。 如果使用者切換成連接顯示模式的頁面，在執行階段，然後按一下其中一個自訂的控制項上的 connect 動詞命令`<asp:connectionszone>`項目自動呈現建立連線的使用者介面。  
  
 此頁面也會示範建立連線，也就是以程式設計的方式的第三種方法。 在 `Button1_Click`方法中，程式碼會建立<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件提供者控制項，並擷取其連接點的詳細說明藉由呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法。 它會執行類似工作的消費者控制項中，呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法。 最後，它會建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 載入網頁瀏覽器中之後，第一個連接已經存在，是因為在宣告`<StaticConnections>`項目。 輸入一些文字，在**ZIP 程式碼提供者**控制項，以及它將會顯示在消費者控制項。 接下來，中斷連線的兩個控制項。 使用**顯示模式**下拉式清單控制項中，變更連接顯示模式的頁面。 按一下 （標題列中的向下箭號表示） 的動詞命令功能表的每個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並請注意，每個有**Connect**選項。 這是連接動詞命令，就會出現在動詞命令功能表只有當頁面處於連接模式。 按一下 連接動詞命令，在其中一個控制項，並連接所提供的 UI<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項就會出現。 按一下 **中斷連線**結束靜態控制項之間連接的按鈕。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。 再試一次，輸入提供者中的一些新的文字，並記下控制項已中斷連線，因為消費者控制項中要更新失敗的文字。  
  
 接下來，使用與上述相同的方法，將頁面切換成連接顯示模式。 按一下控制項的其中一個連接動詞命令。 按一下 **建立的連線**連結，並使用所提供的 UI<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項來建立控制項之間的連線。 這是建立連接的第二個方法。 請注意，形成連線時，最後一個字串您輸入提供者控制項 （也就無法出現，因為控制項已中斷連線） 中突然出現在取用者，因為已經重新建立連線。 按一下 [**中斷連線**] 按鈕以結束目前您剛才建立的連線。 傳回至瀏覽模式的頁面。 輸入一些新的文字，來示範，文字將不會更新，以及控制項一次中斷連接的提供者中。  
  
 傳回連接顯示模式的頁面。 而不是按一下連接動詞命令，請按一下**連接 WebPart 控制項**按鈕，以說明建立連接的第三個方法。 這個方法會以程式設計方式在一個簡單的步驟中的控制項連線而不需要使用<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。 請注意，建立連接時，突然進入提供者的最後一個字串會出現在消費者控制項。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web 組件連線概觀</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>建構函式是公用的以便在網頁標記中宣告連接時，ASP.NET 剖析器可以建立執行個體，這個建構函式不是用於開發人員程式碼。  
  
 當您想要建立<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件以程式設計的方式，您應該使用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>或<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>方法中提供<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 這些方法會處理許多詳細資料，建立連接，然後傳回<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>建構函式<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別設定的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>並<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性，以`true`。 因此新的連接的預設狀態將是靜態 （亦即，它在包含網頁的標記中宣告），並且共用 （頁面的所有使用者看見）。 在典型的案例中，新增的連線所宣告的頁面標記中的連線時就會發生的情況`<asp:webpartconnection>`項目。 不過，在其他情況下連線將會有不同的值，這些屬性。 例如，當您新增連線以程式設計方式建立連接物件中的程式碼，且使用者在檢視中的預設使用者個人化範圍的頁面，連線會建立為動態的每個-user(visible only to the specific user)連接。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>並<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性是唯讀的並判斷連線的本質，這些屬性在內部設定<xref:System.Web.UI.WebControls.WebParts.WebPartManager>根據連接的建立方式的控制項 (以宣告方式在頁面標記中，或以程式設計方式透過您的程式碼或使用者介面）。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之中消費者控制項的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 物件。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />，表示做為連接之中消費者的 Web 組件控制項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個 Web 組件連接是由兩個共用資料的控制項所組成。 一個控制項做為資料提供者，而另一個控制項做為消費者接收和處理來自提供者的資料。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性取得的參考<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為連接的關聯性中的消費者。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。  
  
 在程式碼範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是原始碼的兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者，連接和連接點所用的介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是裝載控制項，並示範如何使用之 Web 網頁的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。 頁面的頁面頂端附近`Register`使用者控制項和自訂控制項的指示詞。 由於此範例使用動態編譯`Register`原始程式檔的指示詞不需要參考組件名稱，其中包括只有任意標記前置詞和控制項的命名空間。 在 `Button2_Click`方法中，程式碼存取的連接物件，透過<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，並取得的消費者控制項的參考。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面以連線模式下的下拉式清單控制項。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 使用**連接 WebPart 控制項** 按鈕或提供的連接使用者介面 (UI)，建立兩個控制項之間的連線。 按一下 **顯示取用者資訊**按鈕，以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> 屬性的長度為零。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之中消費者控制項連接點的物件。</summary>
        <value>與連接之中消費者控制項關聯的 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其中一個所需的步驟建立兩個連線<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項是建立每個控制項連接點。 消費者連接點是物件，包含有關如何連接至做為消費者控制項的資訊。 取用者在原始程式碼中，其中一種方法必須用來識別`ConnectionConsumer`屬性。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>消費者控制項相關聯的物件包含方法和屬性，包括方法，在使用者介面 (UI) 中使用的顯示名稱的識別碼詳細資料，而哪種類型的介面的方法可以擷取。 這組取用者的相關資訊，其方法形成連線和它了解，介面的型別共同形成消費者連接點。  
  
 根據預設，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件可以連接到只有一個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件一次。 取用者可能會有多個方法視為可能的消費者連接點，但是消費者只能參與一個是取用者以連線 （因此，只有一個取用者連接點可以是現用項目） 一次。 相反地，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>可以連線到任何數目的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 可以藉由覆寫變更此預設行為<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>屬性上的<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是原始碼的兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者，連接和連接點所用的介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是裝載控制項，並示範如何使用之 Web 網頁的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。 在 `Button1_Click`方法，來建立連接所需的所有物件會都建立，包括<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這些物件會傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法用來建立連接。 在 `Button2_Click`方法，將程式碼會存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性，並顯示某些的連接點的詳細資料。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面以連線模式下的下拉式清單控制項。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 使用**連接 WebPart 控制項** 按鈕或提供的連接使用者介面，建立兩個控制項之間的連線。 按一下  **ConnectionPoint 詳細資料**按鈕，以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之消費者連接點的物件 ID。</summary>
        <value>字串，包含消費者連接點的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於 Web 網頁標記中宣告靜態的連線，開發人員可以指定哪些消費者連接點將用於連線的指派值給`ConsumerConnectionPointID`屬性上`<asp:webpartconnection>`項目。 如果值不會指派給屬性，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
 當您建立動態的 （以程式設計方式） 連線時，通常您不應將值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。 您可以只呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制、 將傳遞給它的取用者和消費者連接點物件 （以及其他必要的參數），以及該方法會判斷正確的識別碼，以使用於取用者的連線點。 同樣地，當您中斷連線，您可以呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>方法，而不需要指定<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性值。  
  
> [!NOTE]
>  可判斷消費者連接點的識別碼，當您指定<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項，以取用者身分。 您必須識別取用者所擷取的提供者控制項或轉換程式所提供的介面執行個體中的方法。 若要識別的方法，將它與標示`ConnectionConsumer`code 屬性。 當您新增這個屬性時，您可以新增選擇性的字串值參數做為識別碼的取用者的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 如果您提供選擇性的 ID 參數的值，該值會變成值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>連接的屬性。 如果您未提供識別碼值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 請注意，連接宣告在頁面標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 連線宣告包含所需`ConsumerConnectionPointID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用消費者控制項中所定義的連接點。 然後，在`Button2_Click`方法，將程式碼會存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連線已存在靜態網頁中宣告的連線。 在提供者控制項中，輸入一些文字，並請注意，它會顯示因為連線取用者。 接下來，中斷連接的控制項。 使用**顯示模式**下拉式清單控制項中，切換頁面，即可連接模式。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 按一下 [**中斷連線**] 按鈕。 使用**連接 WebPart 控制項**按鈕以重新建立兩個控制項之間的連線。 按一下  **ConnectionPoint 詳細資料**按鈕，以執行存取的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性值。 在 [標籤] 控制項下方，值會寫出。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之消費者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項的 ID。</summary>
        <value>字串，包含做為連接之中消費者控制項的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性值時，必須建立之間的連線<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 如果值不指派給屬性，會擲回例外狀況時<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試在啟動連線。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 請注意，連接宣告在頁面標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 連線宣告包含所需`ConsumerID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用消費者控制項中所定義的連接點。 然後，在`Button2_Click`方法，將程式碼會存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連線已存在靜態網頁中宣告的連線。 在提供者控制項中，輸入一些文字，並請注意，它會顯示因為連線取用者。 接下來，中斷連接的控制項。 使用**顯示模式**下拉式清單控制項中，切換頁面，即可連接模式。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 按一下 [**中斷連線**] 按鈕。 使用**連接 WebPart 控制項**按鈕以重新建立兩個控制項之間的連線。 按一下 **取用者詳細資料**按鈕，以執行存取的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件的 ID。</summary>
        <value>字串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每隔<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件具有唯一的值指派給其<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性。 這是為了確保沒有區分多個連線的方式。  
  
 如果您建立宣告的靜態連接`<asp:webpartconnection>`元素在網頁上，而且您不會指派值給`ID`屬性進行連接，例外狀況時擲回<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試在啟動連線。  
  
 當<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項建立新的動態連接，它會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>方法來產生連線的唯一識別碼。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 請注意，連接宣告在頁面標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 連線宣告包含所需`ID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用消費者控制項中所定義的連接點。 在這裡，ID 屬性不是必要的因為連接是動態的而<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項連接至指派的識別碼。 在 `Button2_Click`方法，將程式碼會存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連線已存在靜態網頁中宣告的連線。 在提供者控制項中，輸入一些文字，並請注意，它會顯示因為連線取用者。 接下來，中斷連接的控制項。 使用**顯示模式**下拉式清單控制項中，切換頁面，即可連接模式。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 按一下 [**中斷連線**] 按鈕。 使用**連接 WebPart 控制項**按鈕以重新建立兩個控制項之間的連線。 按一下 **連線詳細資料**按鈕，以執行存取的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指出目前是否已建立 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件，並且其提供者和消費者控制項之間是否可以交換資料的值。</summary>
        <value><see langword="true" /> 如果連線是作用中;否則， <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性會指出狀態<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。 當連線處於此狀態時，提供者和消費者控制項連接中的也會通訊，而且能夠透過通用介面交換資料或<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。  
  
 當使用者檢視呈現的網頁，其中包含一般的瀏覽模式的已建立的連線時，連線通常是作用中 （除非它無法載入頁面時，因為某些衝突或其他問題啟用）。 在頁面和控制項的生命週期的早期階段，屬性值是`false`。 連接啟動之後<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>上的事件<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，就會引發。 具體而言，連接後，會啟用取用者已從提供者擷取的指定介面的執行個體或<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。  
  
 您最好知道連線是否作用中的情況下，可能會有衝突或同步處理的問題，因為多個頁面上的連接。 例如，如果沒有某種類型的兩個連線，衝突<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項有不啟動其中一個連線的選項，以避免衝突。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性。  
  
 此範例包含三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 在程式碼範例的第一個部分是在介面中，與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第二個部分是網頁。 頂端附近`Register`指示詞參考兩個動態編譯的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接`<StaticConnections>`頁面上的項目。 內`<script>`項目是四個事件處理常式。 每個事件處理常式會檢查的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性為靜態的連線，並將訊息寫入至<xref:System.Web.UI.WebControls.Label>指出連線在網頁和控制項的生命週期的狀態是否為作用中或非使用中的控制項。 此範例示範在哪個時間點的連線變成使用中，它仍然使用中頁面之後會呈現。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 將網頁瀏覽器中的載入。 已建立靜態的連線，並已經寫入訊息標籤，顯示是否連線為作用中的各個點上頁面和控制項的生命週期中。 按一下 **連線詳細資料**按鈕，並請注意，連線不在使用中，但連線就會重新啟動後每次<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>事件，且其為仍在作用中 （且會維持不變） 之後<xref:System.Web.UI.Control.PreRender>頁面的事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件對所有使用者或只對目前使用者為可見。</summary>
        <value><see langword="true" /> 如果共用的連線;，否則， <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 就像個人<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件可以是共用或每位使用者執行個體。 共用的執行個體表示連線的網頁的所有使用者顯示，且每位使用者執行個體表示連接是只有特定使用者才能看見。  
  
 一般情況下，連接加入至頁面的方式會決定是否為共用連接。 如果連接在網頁標記中宣告，則連線會共用並<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值是`true`。 此外，如果網頁在共用的個人化範圍內時加入連接，也被共用的連線。 一般而言，當使用者使用`<asp:connectionszone>`新增連接時，頁面的使用者介面 (UI) 是使用者個人化範圍，因此不會共用連接並<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值是`false`。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性。  
  
 在程式碼範例包含五個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   在 Web.config 檔案，才能執行此範例中的項目。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 在 `Button2_Click`方法，它會檢查<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>現有的連接屬性，並顯示結果頁面上。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在程式碼範例的第四個部分是所需的使用者帳戶，將會執行能夠編輯共用個人化範圍中的網頁範例 Web.config 檔案中的項目。 若要這麼做，您必須有一個項目內的 Web.config 檔案中`<system.web>`區段，如下列範例所示。  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**，將頁面連線顯示模式切換的下拉式清單控制項。 按一下 **連接 WebPart 控制項**按鈕以建立連接。 接下來，按一下**連線詳細資料** 按鈕以顯示連接是否為共用。 如果您在預設使用者個人化範圍內，頁面建立連線<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值應為`false`連接。  
  
 其中一個的動詞命令功能表上<xref:System.Web.UI.WebControls.WebParts.WebPart>（標題列中向下箭頭所指示） 的控制項，按一下 connect 動詞命令。 連接 UI 出現時，按一下**中斷連線** 按鈕以結束連接。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。  
  
 在 [**顯示模式**控制項中，選取**共用**] 選項，切換至頁面共用個人化範圍。 請遵循相同的步驟，以建立連線，再次按一下上述**連線詳細資料** 按鈕以顯示連接是否為共用。 在此案例中的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性應該是`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件是在網頁標記中宣告，還是以程式設計方式建立的。</summary>
        <value><see langword="true" /> 如果連接是靜態的;否則， <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件控制項之間的連線可以是靜態或動態。 在網頁標記中宣告靜態連接使用`<asp:WebPartConnection>`項目。 以程式設計方式建立動態的連接，或當使用者建立透過使用者介面 (UI) 所定義的連接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。  
  
 靜態連接是共用的物件，表示它們為供所有使用者的網頁。 此外，它們是永久基本上是因為，例如靜態<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，無法永久刪除它們。  
  
> [!NOTE]
>  無法永久刪除靜態連接物件，它可以是永久中斷連線。 在此案例中，中斷連接的物件會存在於伺服器上，但使用者永遠不會察覺在網頁中的物件存在。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性。  
  
 在程式碼範例有三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   若要裝載控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 在程式碼範例的第一個部分是在介面中，與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第二個部分是網頁。 頂端附近`Register`指示詞參考兩個動態編譯的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接`<StaticConnections>`頁面上的項目。 `Button1_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>来檢查連線是否為靜態屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 將網頁瀏覽器中的載入。 已建立靜態連接。 在提供者控制項中，輸入一些文字，並記下 消費者控制項中，會顯示文字。 按一下 [**連線詳細資料**] 按鈕以顯示的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為 Web 組件連接之中提供者的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />，做為資料提供者。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個 Web 組件連接包含兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項-取用者和提供者--和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性會傳回在連接中的提供者控制項的參考。  
  
 連接 （消費者控制項） 中其對應項目，例如提供者控制項，才能建立連線。 不論您是以程式設計的方式，或藉由宣告以頁面保存格式建立連接，您必須指定做為連線提供者的控制項。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性。  
  
 在程式碼範例有三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   若要裝載控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 在程式碼範例的第一個部分是在介面中，與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第二個部分是網頁。 頂端附近`Register`指示詞參考兩個動態編譯的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接`<StaticConnections>`頁面上的項目。 請注意，在`<asp:webpartconnection>`項目，`ProviderID`屬性已指派給它的提供者控制項的 ID。 這是識別所需的靜態連接的提供者。 `Button1_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性並將其詳細資料的一些寫入的標籤。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 將網頁瀏覽器中的載入。 已建立靜態連接。 在提供者控制項中，輸入一些文字，並記下 消費者控制項中，會顯示文字。 按一下 **提供者詳細資料**按鈕以顯示透過存取的屬性值的部分<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> 屬性值的長度為零。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之提供者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項連接點的物件。</summary>
        <value>與連接之中提供者控制項關聯的 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其中一個所需的步驟建立兩個連線<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項是建立每個控制項連接點。 提供者連接點是物件，包含如何連接至做為提供者的控制項的相關資訊。 在 提供者的原始程式碼，其中一種方法必須用來識別`ConnectionProvider`屬性。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>也就是相關聯的提供者控制項包含方法和屬性，包括方法，在使用者介面 (UI) 中使用的顯示名稱識別碼的詳細和哪種類型的介面執行個體方法可以傳回給取用者控制項。 這組提供者的相關資訊，其方法形成連線，並提供的介面的型別共同構成提供者連接點。  
  
 根據預設，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>可以連線到只有一個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件一次。 取用者可能會有多個方法視為可能的消費者連接點，但是消費者只能參與一個是取用者以連線 （因此，只有一個取用者連接點可以是現用項目） 一次。 相反地，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>可以連線到任何數目的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>預設的物件。 比方說，提供郵遞區號的提供者控制項無法連線到多個使用郵遞區號，來建立各種類型的資料是根據郵遞區號，例如天氣資料、 新聞和等等的消費者控制項。 可以藉由覆寫變更此預設行為<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>屬性上的<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是原始碼的兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者，連接和連接點所用的介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是裝載控制項，並示範如何使用之 Web 網頁的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。 在 `Button1_Click`方法，來建立連接所需的所有物件會都建立，包括<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。 請注意在呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 各種建立的物件會傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法用來建立連接。 在 `Button2_Click`方法，將程式碼會存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性，並顯示某些的連接點的詳細資料。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面以連線模式下的下拉式清單控制項。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 使用**連接 WebPart 控制項** 按鈕或提供的連接使用者介面，建立兩個控制項之間的連線。 按一下  **ConnectionPoint 詳細資料**按鈕，以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之提供者連接點的物件 ID。</summary>
        <value>字串，包含提供者連接點物件的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於 Web 網頁標記中宣告靜態的連線，開發人員可以指定哪些提供者連接點將用於連線的指派值給`ProviderConnectionPointID`屬性上`<asp:webpartconnection>`項目。 如果值不會指派給屬性，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
 當您建立動態的 （以程式設計方式） 連線時，通常您不應將值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。 您可以只呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制、 將傳遞給它的提供者和提供者連接點物件 （以及其他必要的參數），以及該方法會判斷正確的識別碼，用於提供者的連線點。 同樣地，當您中斷連線，您可以呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>方法，而不需要指定<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性值。  
  
> [!NOTE]
>  您可以判斷提供者連接點的識別碼，當您指定<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項，做為提供者。 您必須識別提供者，可包含資料的取用者介面的執行個體中的回呼方法。 若要識別的方法，將它與標示`ConnectionProvider`code 屬性。 當您新增這個屬性時，您可以新增選擇性的字串值參數可提供的 識別碼提供者的<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。 如果您提供選擇性的 ID 參數的值，該值會變成值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>連接的屬性。 如果您未提供識別碼值<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制在建立物件時，會將指派預設識別碼。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 請注意，連接宣告在頁面標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 連線宣告包含所需`ProviderConnectionPointID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，在其中的程式碼會建立新的連接，透過的連接點 （和識別碼） 提供者控制項中定義。 然後，在`Button2_Click`方法，將程式碼會存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連線已存在靜態網頁中宣告的連線。 在提供者控制項中，輸入一些文字，並請注意，它會顯示因為連線取用者。 接下來，中斷連接的控制項。 使用**顯示模式**下拉式清單控制項中，切換頁面，即可連接模式。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 按一下 [**中斷連線**] 按鈕。 使用**連接 WebPart 控制項**按鈕以重新建立兩個控制項之間的連線。 按一下  **ConnectionPoint 詳細資料**按鈕，以執行存取的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性值。 在 [標籤] 控制項下方，值會寫出。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之提供者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項的 ID。</summary>
        <value>包含提供者控制項 ID 的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性值時，必須建立兩個連接<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 如果值不指派給屬性，會擲回例外狀況時<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試在啟動連線。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 請注意，連接宣告在頁面標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 連線宣告包含所需`ProviderID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用消費者控制項中所定義的連接點。 然後，在`Button2_Click`方法，將程式碼會存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連線已存在靜態網頁中宣告的連線。 在提供者控制項中，輸入一些文字，並請注意，它會顯示因為連線取用者。 接下來，中斷連接的控制項。 若要這樣做，請使用**顯示模式**切換頁面以連線模式下的下拉式清單控制項。 按一下 動詞命令功能表 （以標題列中的向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下 connect 動詞命令。 按一下 **中斷連線**按鈕和控制項都已中斷連線。 接下來，使用**連接 WebPart 控制項**按鈕以重新建立兩個控制項之間的連線。 按一下 **取用者詳細資料**按鈕，以執行存取的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>覆寫繼承的 <see cref="M:System.Object.ToString" /> 方法，並傳回連接物件的簡短型別名稱。</summary>
        <returns>字串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 的簡短 (不完整) 型別名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用控制項設計工具主要是為了方便起見。 它可以改善連線物件如何出現在 [設計] 檢視中使用較短的型別名稱，而不是完整限定的類型名稱。 不過，可以呼叫方法在任何時間點在程式碼中您要知道的連接物件的型別名稱。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法傳回的簡短的型別名稱<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 在程式碼範例有三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   若要裝載控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 在程式碼範例的第一個部分是在介面中，與消費者和提供者控制項的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第二個部分是網頁。 頂端附近`Register`指示詞參考兩個動態編譯的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接`<StaticConnections>`頁面上的項目。 `Button1_Click`方法呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法，將連接的型別名稱寫入的標籤。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 將網頁瀏覽器中的載入。 已建立靜態連接。 在提供者控制項中，輸入一些文字，並記下 消費者控制項中，會顯示文字。 按一下 **連線詳細資料**按鈕以執行<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 物件，這個物件是用來轉換 Web 組件連接之中兩個不相容連接點的資料。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 組件連接中，有兩種方式中的連線提供者和消費者控制項可以連接。 直接連接到其各自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件和了解這兩個控制項的介面類型。 或者，如果它們不相容時，他們可以連線，間接使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>從提供者的介面執行個體轉換為取用者所了解類型的物件。  
  
 轉換程式需要連接的一部分時<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>屬性提供參考<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。 您可以藉由新增自訂轉換器 （或其中一個 Web 組件控制集所提供的轉換） 的標記加入轉換程式的網頁，以宣告方式在標記中連接內`<asp:WebPartConnection>`項目。 您也可以加入轉換程式以程式設計的方式，在您的程式碼中建立它的執行個體，然後呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>來建立連線，將轉換程式物件，以及其他必要的參數傳遞給它的控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 Web 組件控制集內部使用的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 物件集合。</summary>
        <value>包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> 物件的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>屬性永遠不會是用於開發人員。 若要存取與連接相關聯的轉換程式，開發人員應該一律使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>屬性供內部設定為讓網頁開發人員，來宣告轉換程式項目內的 Web 組件控制項`<asp:webpartconnection>`Web 網頁標記中的項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 組件控制項</related>
      </Docs>
    </Member>
  </Members>
</Type>