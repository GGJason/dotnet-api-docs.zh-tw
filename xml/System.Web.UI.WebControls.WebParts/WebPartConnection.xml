<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99b712d129d3cb28502a4cc5a10761afa7fd6f97" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36584855" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供讓兩個 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項建立連接的物件。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件控制項集合中，連接是連結或兩個關聯<xref:System.Web.UI.WebControls.WebParts.WebPart>（或其他伺服器或使用者） 控制項，讓它們共用資料。 共用資料的這項功能可讓連接超過隔離控制項所提供之功能的方式使用的控制項。 例如，如果一個控制項提供郵遞區號的資料，而另一個控制項可以讀取該資料，並提供本地天氣資訊根據郵遞區號，然後連接兩個控制項的功能提供更多的值給使用者。 若要擴充此範例中，其他控制項可以建立同時也會顯示根據郵遞區號，例如本機新聞，連結控制項的資訊和所有郵遞區號資料可以使用這些控制項可以提供單一控制項與都共用資料郵遞區號。 Web 組件的應用程式的一般使用者可以建立和管理所有這類相容控制項直接從 Web 瀏覽器中，使用所提供的標準連接使用者介面 (UI) 之間的連接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項，或使用所提供的自訂 UI開發人員。  
  
 這<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別概觀是一般的基本詳細資料，建立連接的陳述式。 如需特定的元件和需求建立連線所涉及的詳細資訊，請參閱[Web 組件連接概觀](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b)，或請參閱 < 參考類別和程式碼範例所述，在下列的討論。 有數個基本層面 Web 組件連接：  
  
-   兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 Web 組件中的每個連接是由兩個控制項所組成。 控制項同時參與多個連接可能會但每個單一連接兩個控制項所組成。 控制項可以直接衍生自<xref:System.Web.UI.WebControls.WebParts.WebPart>基底類別，也可以是其他伺服器控制項，包括 ASP.NET 控制項、 自訂的伺服器控制項和使用者控制項。 控制項不是衍生自<xref:System.Web.UI.WebControls.WebParts.WebPart>類別，如果放在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，會自動以包裝<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件在執行階段，讓他們能夠繼承自<xref:System.Web.UI.WebControls.WebParts.WebPart>類別和函式做為執行時期<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。  
  
-   控制項位於<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域。 同時<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項和其他的伺服器控制項的類型必須位於<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>能夠參與 Web 組件連接 （及大部分其他 Web 組件的功能） 的區域。  
  
-   消費者和提供者。 在每個 Web 組件連接中，有兩個控制項： 資料和資料的取用者的提供者。 提供者會提供資料給取用者，透過介面的形式，傳回資料的指定的回呼方法。 （如需如何建立和指定的回呼方法的範例，請參閱本主題的範例 > 一節）。這個回呼方法就是所謂的提供者連接點。 此連接點 （其 「 易記 」 名稱、 識別碼和傳回介面的型別） 的詳細資料包含在<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>與提供者控制項相關聯的物件。 取用者接收資料，透過指定的方法可接受的介面的執行個體。 這個方法就所謂的消費者連接點，並連接點 （名稱、 識別碼和介面的型別） 的詳細資料包含在<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>消費者控制項相關聯的物件。  
  
-   相容的控制項或有效的轉換程式。 工作的連接，消費者和提供者必須是相容 （表示其指定的連接點方法，可以使用相同類型的介面） 或有必須<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件能夠轉譯所提供的類型到取用者所了解的型別提供者。  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 物件。 連接存在，必須是執行個體<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別，其中包含提供者和消費者的控制項，以及其連接點的詳細資料的參考。 如果提供者和消費者不相容，並改用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件連接，連接參考轉換程式。  
  
-   建立連接的方式。 相容的消費者和提供者的控制項有正確的連接點方法來設計及放置在區域中之後, 和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件使用，為最後一個必要的基本步驟來起始連線。 這種情形的一個方式是讓使用者能夠建立連接，透過 UI。 如果您將放入`<asp:connectionszone>`元素在頁面上，以及其他需要連線的元件會適當地在執行階段，使用者可以將頁面切換成連接的顯示模式，按一下 連接動詞命令功能表中的動詞命令的提供者或取用者並連接 UI (根據<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項) 會出現。 透過此 UI 中，使用者就會起始連線。 若要起始的連線的另一個方法是以程式設計的方式。 在任一情況下，是否透過 UI 或以程式設計的方式，基礎方法，啟動連線是相同的。 應用程式會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法 (或<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法，如果使用轉換程式) 上<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制傳遞給它來提供者，取用者，以及其各自的連接點物件，而且方法會傳回<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別會定義封裝之間的連線兩個必要的詳細資訊的物件<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 類別幾乎已完全包含與特定連接的詳細資料相關的屬性。 數個屬性的消費者控制項有關中連接。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性會參考在取用者控制項本身，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性參考取用者的識別碼。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>取用者所參考物件，其中包含消費者連接點的詳細資料，<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性參考 ID 的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 所有這些取用者相關的連接屬性值必須是指派給它們，以建立連接。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別也有數個與在連接中，提供者控制項相關聯的屬性和這些對應的取用者屬性。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性會參考在提供者控制項本身，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性會參考其識別碼。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性參考<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>內容參照的提供者的連接點識別碼。  
  
 數個屬性有關連接的狀態。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性會指出連接是否作用中 （目前交換資料）] 或 [非作用中 （仍連線，但不是會主動共用的資料）。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性會指出連接是否共用 （適用於網頁的所有使用者） 或特定使用者連接，而<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性會指出控制項是否靜態 （宣告在網頁標記中，因此永久） 或動態 （以程式設計方式建立，這表示它可以被刪除）。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立兩個之間的簡單連接<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 此範例示範三種方式建立連接： 以宣告方式，透過將連接的標記放在網頁中; 的標記以程式設計的方式，是藉由在程式碼; 建立連線並透過 UI，放入<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在頁面上，可讓使用者建立的連接。  
  
 程式碼範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面和控制項的原始程式碼。 來源檔案包含一個簡單的介面，名為`IZipCode`。 另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並且會做為提供者控制。 其`ProvideIZipCode`方法是實作介面的唯一成員的回呼方法。 方法只會傳回介面的執行個體。 請注意，方法標示為`ConnectionProvider`中它的中繼資料屬性。 這是將方法識別提供者的連接點的回呼方法的機制。 其他<xref:System.Web.UI.WebControls.WebParts.WebPart>類別的名稱為`WeatherWebPart`，並作為連接取用者。 這個類別具有名為的方法`GetZipCode`所取得的執行個體`IZipCode`介面從提供者控制。 請注意，這個方法標示為與取用者的連接點方法`ConnectionConsumer`中它的中繼資料屬性。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 頁面頂端附近`Register`使用者控制和自訂指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 這個範例假設控制項的動態編譯，因為控制項的原始程式碼應該在 App_Code 子資料夾。`Register`標記中的頁面參考只任意的標記前置詞和命名空間的控制項。 自訂<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （提供者和消費者） 宣告的網頁內`<asp:webpartzone>`元素內，`<zonetemplate>`項目。  
  
 頁面會提供三種方式來建立自訂控制項之間的連接。 第一個方法是宣告式。 在網頁的標記 <`StaticConnections>`項目宣告，並在`<asp:WebPartConnections>`項目與做為屬性指定的連接各種消費者和提供者詳細資料。 這是一種方式建立的連接，特別是在宣告直接在網頁上，`<asp:WebPartManager>`項目。 這個靜態連接，因為兩個自訂控制項之間的連接會建立立即第一次載入頁面。  
  
 建立控制項之間連接的第二個方法由`<asp:connectionszone>`網頁中的項目。 如果使用者在執行階段，切換成連接顯示模式的頁面，按一下 connect 上的動詞命令的自訂控制項，`<asp:connectionszone>`項目會自動轉譯的 UI 建立連接。  
  
 此頁面也會示範建立連線，也就是以程式設計的方式的第三個方法。 在`Button1_Click`方法的程式碼建立<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件提供者的控制項，並擷取其連接點詳細資料，藉由呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法。 它會執行類似工作取用者控制項，呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法。 最後，它會建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 載入網頁瀏覽器中之後，第一個連接已經存在，是因為在宣告了`<StaticConnections>`項目。 輸入某些文字**郵遞區號提供者**控制項，以及它將會顯示在取用者控制。 接下來，中斷連接兩個控制項。 使用**顯示模式**下拉式清單控制項中，變更頁面可連接的顯示模式。 按一下每個 （由標題列中的向下箭號表示） 的動詞命令功能表<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並請注意，每個有**連接**選項。 這是連接的動詞命令，它會出現在動詞命令功能表只當頁面是在連接模式。 按一下其中一個控制項，以及連接 UI 所提供的連接動詞命令<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項就會出現。 按一下**中斷連線** 按鈕以結束控制項之間的靜態連接。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。 請嘗試一些新的文字提供者中再次輸入，並記下的控制項已中斷連接，因為更新在消費者控制項失敗文字。  
  
 接下來，使用與上面相同的方法，將頁面切換成連接顯示模式。 按一下控制項的其中一個連接動詞命令。 按一下**建立連接**連結，並使用所提供的 UI<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項來建立控制項之間的連接。 這是建立連接的第二個方法。 請注意，一旦形成連接時，最後一個字串您輸入的提供者控制項 （未出現，因為控制項已中斷連線） 中突然出現在取用者，因為已經重新建立連線。 按一下**中斷連線** 按鈕以結束目前您剛才建立的連接。 傳回的頁面，即可瀏覽模式。 輸入要示範文字未更新，以及控制項再次中斷連線的提供者中的一些新文字。  
  
 傳回頁面可連接的顯示模式。 除了按一下連接的動詞命令，請按一下**連接 web 組件控制項**按鈕，以說明建立連接的第三個方法。 這種方式連接以程式設計方式在一個簡單的步驟中的控制項，而不需要使用<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。 請注意，建立連接時，取用者控制項中顯示您突然輸入提供者中的最後一個字串。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>建構函式是公用的以便在網頁標記中宣告的連線時，ASP.NET 剖析器可以建立執行個體，這個建構函式不是以用於開發人員程式碼。  
  
 當您想要建立<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件以程式設計的方式，您應該使用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>或<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>方法中提供<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 這些方法會處理許多詳細資料，建立連接，然後傳回<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>建構函式<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別設定的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性`true`。 因此新的連接的預設狀態將是靜態的 （表示它在包含網頁的標記中宣告），並且共用 （[] 頁面上的所有使用者可看見）。 當您藉由宣告的頁面中標記的連線新增在典型的案例中，連線就會發生的情況`<asp:webpartconnection>`項目。 不過，在其他情況下連接將會有不同的值，這些屬性。 例如，當您新增連線以程式設計方式所建立的連接物件中的程式碼，且使用者在檢視頁面的預設使用者個人化範圍中，連接會建立為動態的每個-user(visible only to the specific user)連接。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性是唯讀的並會在內部設定這些屬性，判斷連接的性質<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項根據建立連接的方式 (以宣告方式在網頁標記中，或以程式設計方式透過您的程式碼或使用者介面）。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之中消費者控制項的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 物件。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />，表示做為連接之中消費者的 Web 組件控制項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件中的每個連接是由兩個共用資料的控制項所組成。 一個控制項可當做資料提供者，並另一個控制項做為消費者接收和處理來自提供者的資料。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性取得的參考<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為連線關聯性中的取用者。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。  
  
 程式碼範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是兩個的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者和連接和連接點使用介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁，裝載控制項，並示範如何使用程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。 接近頁面頂端會`Register`使用者控制項的自訂控制項的指示詞。 這個範例會使用動態編譯，因為`Register`參考組件名稱不需要對原始程式檔的指示詞; 它包含只任意的標記前置詞和命名空間的控制項。 在`Button2_Click`方法，程式碼存取的連接物件，透過<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，然後取得消費者控制項的參考。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面，即可連接模式下的下拉式清單控制項。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 使用**連接 web 組件控制項** 按鈕或提供的連接使用者介面 (UI)，建立兩個控制項之間的連接。 按一下**顯示取用者資訊** 按鈕以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> 屬性的長度為零。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之中消費者控制項連接點的物件。</summary>
        <value>與連接之中消費者控制項關聯的 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其中一個所需的步驟建立兩個連接的<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項為建立每個控制項的連接點。 消費者連接點是包含有關如何連接至控制項作為消費者之資訊的物件。 取用者在原始程式碼中，其中一種方法必須用來識別`ConnectionConsumer`屬性。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>消費者控制項相關聯的物件包含方法和屬性，包括識別碼方法，在使用者介面 (UI) 中使用的顯示名稱詳細資料，哪種類型的介面方法進行擷取。 這組取用者的相關資訊，其方法來建立連接和其了解，介面的型別共同形成消費者連接點。  
  
 根據預設，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件可以連接到一個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件一次。 消費者可以有多個方法識別為可能的消費者連接點，但取用者只能參與一個連接取用者 （因此，只有一個取用者連接點可以是現用） 一次。 相反地，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>可以連接到任何數目的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 可以變更此預設行為，藉由覆寫<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>屬性<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是兩個的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者和連接和連接點使用介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁，裝載控制項，並示範如何使用程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。 在`Button1_Click`方法，建立連接所需的所有物件會都建立，包括<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這些物件會傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法來建立連接。 在`Button2_Click`方法時，程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性，並顯示某些的連接點的詳細資料。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面，即可連接模式下的下拉式清單控制項。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 使用**連接 web 組件控制項** 按鈕或提供的連接 UI，以建立兩個控制項之間的連接。 按一下**ConnectionPoint 詳細資料** 按鈕以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之消費者連接點的物件 ID。</summary>
        <value>字串，包含消費者連接點的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於靜態網頁標記中宣告的連線，開發人員可以指定連接所指派值給使用哪些消費者連接點`ConsumerConnectionPointID`屬性`<asp:webpartconnection>`項目。 如果不指定給屬性的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
 當您建立動態 （以程式設計方式） 的連接時，通常您不應該設定值的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。 您可以直接呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，將傳遞至它的取用者和消費者連接點物件 （以及其他必要的參數），以及該方法會判斷要用於消費者連接的正確識別碼點。 同樣地，當您中斷連線，您可以呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>方法，而不需要指定<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性值。  
  
> [!NOTE]
>  當您指定時，您可以判斷消費者連接點識別碼<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項，取用者。 您必須識別取用者的擷取執行個體的提供者控制或轉換程式所提供的介面中的方法。 若要識別的方法，將它與標示`ConnectionConsumer`code 屬性。 當您加入此屬性時，您可以加入做為識別碼，取用者的選擇性字串值參數<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 如果您提供選擇性的 ID 參數的值，該值會成為的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>連接屬性。 如果您未提供的識別碼值、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
   
  
## Examples  
 下列程式碼範例示範如何宣告式和以程式設計方式使用的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 請注意，連接宣告在網頁標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 包含所需的連接宣告`ConsumerConnectionPointID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用在取用者控制項中定義的連接點。 然後，在`Button2_Click`方法時，程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連接已存在由於網頁中宣告的靜態連接。 在提供者的控制項中，輸入一些文字，並注意它會顯示在取用者，因為連線。 接下來，中斷連接控制項。 使用**顯示模式**下拉式清單控制項中，將頁面切換至連接模式。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 按一下**中斷連線** 按鈕。 使用**連接 web 組件控制項**按鈕來重新建立兩個控制項之間的連接。 按一下**ConnectionPoint 詳細資料**按鈕執行的程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>屬性值。 在控制項下方的標籤中，值會寫出。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之消費者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項的 ID。</summary>
        <value>字串，包含做為連接之中消費者控制項的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性值在您建立之間的連線時需要<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 如果值不指派給屬性，例外狀況時擲回<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試啟動連線。  
  
   
  
## Examples  
 下列程式碼範例示範如何宣告式和以程式設計方式使用的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 請注意，連接宣告在網頁標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 包含所需的連接宣告`ConsumerID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用在取用者控制項中定義的連接點。 然後，在`Button2_Click`方法時，程式碼存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連接已存在由於網頁中宣告的靜態連接。 在提供者的控制項中，輸入一些文字，並注意它會顯示在取用者，因為連線。 接下來，中斷連接控制項。 使用**顯示模式**下拉式清單控制項中，將頁面切換至連接模式。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 按一下**中斷連線** 按鈕。 使用**連接 web 組件控制項**按鈕來重新建立兩個控制項之間的連接。 按一下**取用者詳細資料**按鈕執行的程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件的 ID。</summary>
        <value>字串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件具有唯一的值指派給其<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性。 這是為了確保能夠區別多個連接。  
  
 如果您藉由宣告建立靜態連接`<asp:webpartconnection>`元素在網頁上，而且您不會指派值給`ID`屬性進行連接，發生例外狀況時擲回<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試啟動連線。  
  
 當<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項建立新的動態連接，它會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>方法來產生連線的唯一識別碼。  
  
   
  
## Examples  
 下列程式碼範例示範如何宣告式和以程式設計方式使用的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 請注意，連接宣告在網頁標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 包含所需的連接宣告`ID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用在取用者控制項中定義的連接點。 在這裡，識別碼屬性不是必要項目，因為連接是動態的而<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制指派給連接的識別碼。 在`Button2_Click`方法時，程式碼存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連接已存在由於網頁中宣告的靜態連接。 在提供者的控制項中，輸入一些文字，並注意它會顯示在取用者，因為連線。 接下來，中斷連接控制項。 使用**顯示模式**下拉式清單控制項中，將頁面切換至連接模式。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 按一下**中斷連線** 按鈕。 使用**連接 web 組件控制項**按鈕來重新建立兩個控制項之間的連接。 按一下**連接詳細資料**按鈕執行的程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>屬性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指出目前是否已建立 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件，並且其提供者和消費者控制項之間是否可以交換資料的值。</summary>
        <value>如果連接在作用中，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性指示的狀態為<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。 在連接中的提供者和消費者控制項處於此狀態的連線時，會通訊，以及是否可以透過通用介面交換資料或<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。  
  
 當使用者檢視轉譯的頁面，其中包含一般的瀏覽模式中建立的連接時，連接是使用中 （除非它無法載入頁面時，因為某些衝突或其他問題啟動）。 在網頁和控制項的生命週期的早期階段，屬性值是`false`。 連接啟動之後<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>事件<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，就會引發。 具體而言，連接後，會啟用取用者從提供者擷取指定之介面的執行個體或<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。  
  
 它是很有幫助是否作用中的情況下連接其中可能有衝突或同步處理的問題，因為多個頁面上的連接。 例如，如果有兩個連接，發生衝突的某種<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項具有未啟動其中一個連接的選項，以避免衝突。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性。  
  
 此範例包含三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 程式碼範例的第一個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第二個部分是 Web 網頁。 最上方是`Register`指的是兩個動態編譯的程式碼的指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接了`<StaticConnections>`頁面上的元素。 內`<script>`項目是四個事件處理常式。 每個事件處理常式會檢查的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>屬性上的靜態連接，並將訊息寫入至<xref:System.Web.UI.WebControls.Label>指出連接是否使用中或非使用中狀態的頁面和控制項的生命週期的控制項。 這點，連線會變成作用中，將示範並保持使用中畫面之後會呈現。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 載入瀏覽器中。 已經建立靜態連接，並已經標籤，顯示是否連線為作用中的各個點上網頁和控制項的生命週期中寫入訊息。 按一下**連接詳細資料**按鈕，並記下的連接不在作用中的同時，但連線就會重新啟動後每次<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>事件，並且它仍在作用中 （且會維持不變） 之後<xref:System.Web.UI.Control.PreRender>頁面的事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件對所有使用者或只對目前使用者為可見。</summary>
        <value>如果連接是共用的，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如同個別<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件可以是共用或每個使用者執行個體。 共用執行個體表示連線的網頁，所有使用者可見，且每個使用者執行個體表示的連線是只對特定使用者可見的。  
  
 一般情況下，連接會加入至頁面的方式會決定是否為共用連接。 如果連接在網頁標記中宣告，則連線共用和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值是`true`。 此外，如果網頁被共用的個人化範圍中時加入連接，連接也被共用。 一般而言，當使用者使用`<asp:connectionszone>`新增連線時，頁面使用者介面 (UI) 是使用者個人化範圍，因此不會共用連線和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值是`false`。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性。  
  
 程式碼範例包含五個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   將 Web.config 檔案中，才能執行此範例中的項目。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 在`Button2_Click`方法，它會檢查<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>現有的連接屬性，並在頁面上顯示結果。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 程式碼範例的第四個部分是所要執行範例，以進行編輯共用個人化範圍中的網頁的使用者帳戶的 Web.config 檔案中的項目。 若要啟用此功能，您必須擁有項目中的 Web.config 檔案`<system.web>`區段，如下列範例所示。  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**下拉式清單控制項以將頁面切換至連接的顯示模式。 按一下**連接 web 組件控制項**按鈕來建立連接。 接下來，按一下**連接詳細資料** 按鈕以顯示連接是否為共用。 如果您建立連線預設使用者個人化範圍中的網頁<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性值應為`false`連接。  
  
 其中一個的動詞命令功能表<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （由標題列中的向下箭頭），按一下 連接的動詞命令。 連接 UI 出現時，按一下**中斷連線**按鈕以結束連接。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。  
  
 在**顯示模式**控制項中，選取**共用**選項可將頁面切換成共用個人化範圍。 遵循相同的步驟來建立連線，再次按一下上述**連接詳細資料** 按鈕以顯示連接是否為共用。 在此情況下，值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>屬性應該是`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 物件是在網頁標記中宣告，還是以程式設計方式建立的。</summary>
        <value>如果連接是靜態的，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件控制項之間的連接可以是靜態或動態。 在網頁標記中宣告靜態連接使用`<asp:WebPartConnection>`項目。 以程式設計方式建立動態的連接，或當使用者建立的連接，透過使用者介面 (UI) 所定義<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。  
  
 靜態連接是共用的物件，表示它們為網頁上的所有使用者使用。 此外，它們是永久基本上，因為要靜態<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，它們不會永久刪除。  
  
> [!NOTE]
>  靜態連接物件不會永久刪除，而它可以是永久中斷連線。 在此情況下，中斷連接的物件不會在伺服器上，有存在，但在終端使用者永遠不會察覺在網頁中的物件存在。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性。  
  
 程式碼範例包含三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   主控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 程式碼範例的第一個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第二個部分是 Web 網頁。 最上方是`Register`指的是兩個動態編譯的程式碼的指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接了`<StaticConnections>`頁面上的元素。 `Button1_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>檢查連接是否為靜態屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 載入瀏覽器中。 已建立靜態連接。 在提供者的控制項中，輸入一些文字，並注意的文字會顯示在消費者控制項。 按一下**連接詳細資料**按鈕顯示的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為 Web 組件連接之中提供者的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />，做為資料提供者。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件中的每個連接都包含兩個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項消費者和提供者--和<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性會傳回連接的提供者控制項的參考。  
  
 連接 （取用者控制項） 中其對應項目，例如提供者控制項，才能建立連接。 不論您是以程式設計的方式，或藉由宣告頁面持續性格式建立連接，您必須指定做為連接的提供者的控制項。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性。  
  
 程式碼範例包含三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   主控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 程式碼範例的第一個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第二個部分是 Web 網頁。 最上方是`Register`指的是兩個動態編譯的程式碼的指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接了`<StaticConnections>`頁面上的元素。 請注意，在`<asp:webpartconnection>`項目，`ProviderID`屬性已指派給它的提供者控制項的 ID。 這是識別所需的靜態連接的提供者。 `Button1_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性，並將其詳細資料部份寫入到某個標籤。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 載入瀏覽器中。 已建立靜態連接。 在提供者的控制項中，輸入一些文字，並注意的文字會顯示在消費者控制項。 按一下**提供者詳細資料** 按鈕以顯示透過存取的屬性值的某些<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> 屬性值的長度為零。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得做為連接之提供者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項連接點的物件。</summary>
        <value>與連接之中提供者控制項關聯的 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其中一個所需的步驟建立兩個連接的<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項為建立每個控制項的連接點。 提供者連接點是包含如何連接至做為提供者控制資訊的物件。 提供者在原始程式碼中，其中一種方法必須用來識別`ConnectionProvider`屬性。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>也就是相關聯的提供者與控制項包含方法和屬性，包括識別碼方法，在使用者介面 (UI) 中使用的顯示名稱的詳細和哪種類型的介面執行個體方法可以傳回給取用者控制項。 這組提供者的相關資訊，其方法來建立連線，並提供的介面的型別共同形成提供者連接點。  
  
 根據預設，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>可以連接到一個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件一次。 消費者可以有多個方法識別為可能的消費者連接點，但取用者只能參與一個連接取用者 （因此，只有一個取用者連接點可以是現用） 一次。 相反地，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>可以連接到任何數目的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>預設物件。 例如，提供者提供的控制項，郵遞區號無法連接到多個取用者控制項用來建立各種類型的資料是根據郵遞區號，例如天氣資料、 新聞等等的郵遞區號。 可以變更此預設行為，藉由覆寫<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>屬性<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是兩個的原始程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>做為取用者和連接和連接點使用介面的提供者的控制項。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁，裝載控制項，並示範如何使用程式碼<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。 在`Button1_Click`方法，建立連接所需的所有物件會都建立，包括<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。 請注意呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 建立不同的物件會傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法來建立連接。 在`Button2_Click`方法時，程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性，並顯示某些的連接點的詳細資料。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請使用**顯示模式**切換頁面，即可連接模式下的下拉式清單控制項。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 使用**連接 web 組件控制項** 按鈕或提供的連接 UI，以建立兩個控制項之間的連接。 按一下**ConnectionPoint 詳細資料** 按鈕以執行程式碼，示範<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之提供者連接點的物件 ID。</summary>
        <value>字串，包含提供者連接點物件的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於靜態網頁標記中宣告的連線，開發人員可以指定連接所指派值給使用的提供者連接點`ProviderConnectionPointID`屬性`<asp:webpartconnection>`項目。 如果不指定給屬性的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>使用屬性值。  
  
 當您建立動態 （以程式設計方式） 的連接時，通常您不應該設定值的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。 您可以直接呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項，將傳遞至它的提供者和提供者連接點物件 （以及其他必要的參數），以及該方法會判斷要使用的提供者連線的正確識別碼點。 同樣地，當您中斷連線，您可以呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>方法，而不需要指定<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性值。  
  
> [!NOTE]
>  您可以判斷提供者的連接點的識別碼，當您指定<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項，做為提供者。 您必須識別提供者可包含資料的取用者介面的執行個體中的回呼方法。 若要識別的方法，將它與標示`ConnectionProvider`code 屬性。 當您加入此屬性時，您可以加入做為 ID 提供者的選擇性字串值參數<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。 如果您提供選擇性的 ID 參數的值，該值會成為的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>連接屬性。 如果您未提供的識別碼值、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制在建立物件時，會將指派預設識別碼。  
  
   
  
## Examples  
 下列程式碼範例示範如何宣告式和以程式設計方式使用的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 請注意，連接宣告在網頁標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 包含所需的連接宣告`ProviderConnectionPointID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，在程式碼會建立新的連接，其中使用的連接點 （與識別碼） 之提供者控制項中定義。 然後，在`Button2_Click`方法時，程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連接已存在由於網頁中宣告的靜態連接。 在提供者的控制項中，輸入一些文字，並注意它會顯示在取用者，因為連線。 接下來，中斷連接控制項。 使用**顯示模式**下拉式清單控制項中，將頁面切換至連接模式。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 按一下**中斷連線** 按鈕。 使用**連接 web 組件控制項**按鈕來重新建立兩個控制項之間的連接。 按一下**ConnectionPoint 詳細資料**按鈕執行的程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>屬性值。 在控制項下方的標籤中，值會寫出。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定連接上的屬性值，這個屬性會參考做為此連接之提供者 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控制項的 ID。</summary>
        <value>包含提供者控制項 ID 的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性值時，需要您建立兩個連接<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 如果值不指派給屬性，例外狀況時擲回<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項嘗試啟動連線。  
  
   
  
## Examples  
 下列程式碼範例示範如何宣告式和以程式設計方式使用的<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 請注意，連接宣告在網頁標記中，使用`<StaticConnections>`和`<asp:WebPartsConnection>`項目。 包含所需的連接宣告`ProviderID`屬性。 建立連接的第二個方法會出現在`Button1_Click`方法，其中的程式碼會建立新的連接，並使用在取用者控制項中定義的連接點。 然後，在`Button2_Click`方法時，程式碼存取的值<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性並將它顯示在標籤中。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，連接已存在由於網頁中宣告的靜態連接。 在提供者的控制項中，輸入一些文字，並注意它會顯示在取用者，因為連線。 接下來，中斷連接控制項。 若要這樣做，請使用**顯示模式**切換頁面，即可連接模式下的下拉式清單控制項。 按一下動詞命令功能表 （標題列中向下箭號表示） 上的其中一個<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，並按一下連接的動詞命令。 按一下**中斷連線**按鈕和控制項已中斷連接。 接下來，使用**連接 web 組件控制項**按鈕來重新建立兩個控制項之間的連接。 按一下**取用者詳細資料**按鈕執行的程式碼存取<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>覆寫繼承的 <see cref="M:System.Object.ToString" /> 方法，並傳回連接物件的簡短型別名稱。</summary>
        <returns>字串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 的簡短 (不完整) 型別名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法使用主要是為了方便起見控制項設計工具。 可提升如何連線物件會出現在 [設計] 檢視中使用較短的型別名稱，而不是完整限定的類型名稱。 不過，呼叫此方法會在您的程式碼中的任何時間點您要知道連接物件的型別名稱。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法傳回的簡短的型別名稱<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 程式碼範例包含三個部分：  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   主控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 程式碼範例的第一個部分是介面，並控制在消費者和提供者的原始程式碼。 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第二個部分是 Web 網頁。 最上方是`Register`指的是兩個動態編譯的程式碼的指示詞<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 在宣告靜態連接了`<StaticConnections>`頁面上的元素。 `Button1_Click`方法呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法，將寫入標籤的連線類型名稱。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 載入瀏覽器中。 已建立靜態連接。 在提供者的控制項中，輸入一些文字，並注意的文字會顯示在消費者控制項。 按一下**連接詳細資料**按鈕以執行<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 物件，這個物件是用來轉換 Web 組件連接之中兩個不相容連接點的資料。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。 預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 組件連接中，有兩種方式連接中的提供者和消費者控制項可以在其中連接。 直接連接到其各自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件和了解這兩個控制項的介面型別。 或者，如果它們是不相容，就可連線，間接使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>將從提供者介面執行個體轉換成取用者所了解類型的物件。  
  
 轉換程式需要連接的一部分時<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>屬性提供的參考<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件。 您可以新增一個標記的自訂轉換器 （或其中一個提供的 Web 組件控制項集合的轉換） 加入轉換程式的網頁，以宣告方式在標記中連接內`<asp:WebPartConnection>`項目。 您也可以加入轉換程式以程式設計的方式，在您的程式碼中建立它的執行個體，然後呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項來建立連接，並傳遞給它來轉換程式物件，以及其他必要的參數。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 Web 組件控制集內部使用的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 物件集合。</summary>
        <value>包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> 物件的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>屬性永遠不會是用於開發人員。 若要存取與連接相關聯的轉換程式，開發人員應該一律使用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>屬性供內部設定，讓網頁開發人員宣告轉換程式項目內的 Web 組件控制項`<asp:webpartconnection>`網頁標記中的項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>