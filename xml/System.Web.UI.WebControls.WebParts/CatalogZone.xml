<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ac797ca5cb0e02dfd4694a9427b5c2b87bff48f" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48743459" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>作為在網頁上裝載 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控制項之網頁組件控制項集合中的主要控制項。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 組件控制項集合中，區域是包含 Web 組件控制項的網頁上的區域。 Web 組件區域由區域控制項，也就是類型的<xref:System.Web.UI.WebControls.CompositeControl>設計成包含其他控制項。 區域的主要功能是它包含，控制項的版面配置設定，並為這些控制項提供常見的使用者介面 (UI)。 如需區域以及如何在 Web 組件的應用程式中使用它們的一般資訊，請參閱基底<xref:System.Web.UI.WebControls.WebParts.WebZone>類別，並[Web 組件控制集概觀](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668)。  
  
 Web 組件控制項的主要功能是它們根據其喜好設定，讓使用者修改 （或個人化） 網頁，並將其個人化的設定儲存為未來的瀏覽器工作階段。 修改 Web 組件頁面的其中一個層面包括能夠加入<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項或其他伺服器控制項加入 Web 組件頁面。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項提供的清單或目錄的使用者可以加入至網頁的控制項。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項是其中一個基本 Web 組件控制項集合中的控制項。 它衍生自<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>類別和其行為大多繼承自該類別。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別基本上是將基底類別在區域樣板，也就是實作的<xref:System.Web.UI.ITemplate>介面。 在區域樣板可讓開發人員以宣告方式新增<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項以頁面保存格式中的區域。  
  
> [!IMPORTANT]
>  A<xref:System.Web.UI.WebControls.WebParts.CatalogZone>只能包含區域<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項，反之亦然，<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項只可位於區域衍生自<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>類別，例如<xref:System.Web.UI.WebControls.WebParts.CatalogZone>。  
  
 A<xref:System.Web.UI.WebControls.WebParts.CatalogZone>就會看到控制項只有當使用者切換網頁至目錄顯示模式 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>)。 目錄可以包含數種<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項。 每個<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項是一種容器，其中包含使用者可以加入至網頁伺服器控制項。 <xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項，則根據它們包含伺服器控制項出處而有所不同。 下表摘要說明<xref:System.Web.UI.WebControls.WebParts.CatalogPart>提供何種伺服器控制項，它包含與 Web 組件控制項集合，每個控制項，可控制。  
  
|控制項|描述|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|會維護 頁面已關閉的控制項的參考。 這些控制項可以由使用者重新開啟 （已的重新新增到網頁）。|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|包含控制項中的 Web 組件類別目錄，在網頁標記中宣告的參考。 這些控制項可以加入網頁的使用者。|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|提供 UI，讓使用者上傳的定義檔 (具有的 XML 檔案。Web 組件延伸模組和指定的格式，其中包含狀態資訊） 至目錄中，控制項的控制項可以加入至網頁。|  
  
 因為<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別將只在區域樣板加入至其基底類別的行為，它會有較少的成員。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>建構函式的預設建構函式，有了它，您可以初始化的新執行個體<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>屬性取得或設定參考<xref:System.Web.UI.ITemplate>物件，包含區域的控制項。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法很重要。 它會覆寫基底的方法，以建立集合的所有<xref:System.Web.UI.WebControls.WebParts.CatalogPart>在區域樣板中所包含的控制項。  
  
> [!NOTE]
>  中的按鈕<xref:System.Web.UI.WebControls.WebParts.CatalogZone>UI 需要用戶端指令碼才能正常運作。 如果瀏覽器中停用指令碼，使用者將無法執行動作，透過<xref:System.Web.UI.WebControls.WebParts.CatalogZone>UI。  
  
## <a name="accessibility"></a>協助工具選項  
 根據預設，此控制項所呈現的標記，也可能不符合協助工具標準，例如 Web 內容的指導方針 1.0 (WCAG) 優先權 1 指導方針。 如需有關此控制項的協助工具支援的詳細資訊，請參閱 < [ASP.NET 控制項和協助工具](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)。  
  
   
  
## Examples  
 下列程式碼範例示範宣告式和以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項。 在程式碼範例包含四個部分：  
  
-   使用者控制項，可讓您變更網頁上的顯示模式。  
  
-   自訂檔案的原始程式碼<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.WebPart>已匯入全文檢索目錄，並加入至網頁的控制項。  
  
-   宣告使用者控制項，而且自訂的網頁<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項。  
  
-   如何執行範例的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 在程式碼範例的第二個部分包含自訂程式碼<xref:System.Web.UI.WebControls.WebParts.CatalogZone>和<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 程式碼<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制將示範如何繼承自<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別，並自訂其屬性的建構函式中設定一些預設屬性值。 原始碼也會示範如何建立自訂<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`TextDisplayWebPart`。 這是與相關聯的控制項。您將匯入這個程式碼範例的一部分的 web 組件描述檔案。 使用匯入描述檔案之後<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制項在網頁上，您可以新增`TextDisplayWebPart`頁面上，完全預先設定為指定 description 檔案中的控制項。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯，因此如果您想要執行此範例，如此一來，將檔案命名為來源的程式碼並將它新增至 Web 應用程式的根目錄中的 [App_Code] 子資料夾。 如需示範這兩種編譯方法的逐步解說，請參閱 <<c0> [ 逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 在程式碼範例的第三個部分是包含控制項之 Web 網頁。 它包含`Register`使用者控制項，和另一個用於原始程式檔的自訂控制項指示詞。 請注意，在第二個指示詞，它未命名的組件，因為此範例不使用組件，它會使用動態編譯放在 App_Code 子資料夾中的原始程式碼。 網頁會宣告<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控制項和其子系內`<zonetemplate>`元素，它會宣告<xref:System.Web.UI.WebControls.BulletedList>控制項。 雖然這是標準的 ASP.NET 控制項，它會有完整的 Web 組件功能在執行階段，因為<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制任何伺服器控制項放在包裝<xref:System.Web.UI.WebControls.WebParts.WebPartZone>使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件，使其他伺服器控制項可以參與 Web組件的應用程式。 也在此區域中宣告為 custom<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，名為`TextDisplayWebPart`。 請注意，此控制項有屬性`ExportMode="All"`宣告它。 這可讓您匯出。Web 組件描述檔，其中包含可以匯入其他使用者用來將預先設定的控制項加入至其他網頁的控制項的屬性值。  
  
> [!NOTE]
>  若要讓 Web 組件之應用程式匯出的描述檔案的使用者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，您也必須啟用 Web 應用程式中的匯出功能，加上`enableExport="true"`屬性設定為`<webParts>`項目 (這是子系`<system.web>`項目) 的 Web.config 檔案中。 預設會停用匯出，所以如果您還不會啟用應用程式的匯出，編輯 Web.config 檔案，現在執行它。  
  
 網頁也會宣告自訂<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項並在其中，`<zonetemplate>`元素，其中包含<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制項。 使用者將使用此控制項在執行階段匯入。自訂網頁組件描述檔<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 現在執行的程式碼範例。 載入網頁瀏覽器中。 第一個步驟是匯出。Web 組件的描述檔案`TextDisplayWebPart`控制項。 按一下 （標題列中向下箭號表示），在自訂控制項上的動詞命令功能表，然後按一下**匯出**。 請依照下列指示來儲存控制項的說明檔案。 開啟。Web 組件描述在編輯器中，檔案，並編輯 標題屬性文字的值。 尋找`<property>`具有屬性的項目`name="Title"`，並編輯 標題文字的開頭和結尾之間包含`<property>`標記。 現在關閉網頁，並編輯網頁原始檔編輯器中。 刪除`<aspSample:TextDisplayWebPart>`控制宣告的項目，然後儲存並關閉檔案。  
  
 載入網頁瀏覽器中，一次。 `TextDisplayWebPart`控制項應該會出現，因為您已經將它移除。 使用**顯示模式**下拉式清單控制項，然後選取**目錄**切換至目錄模式的頁面。 請注意，自訂<xref:System.Web.UI.WebControls.WebParts.CatalogZone>會顯示控制項，以及與<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制項。 按一下 **瀏覽**按鈕來尋找。匯出的網頁組件描述檔`TextDisplayWebPart`控制項。 您可以按一下**上傳**，選取匯入控制 旁邊的核取方塊，然後按一下**新增**將它新增至頁面。 按一下 **關閉目錄**頁面返回標準瀏覽模式。 匯入的控制項現在應該會出現在頁面中，並會出現在標題列控制項的標題應該是您加入的標題文字。Web 組件描述檔案。  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">用於裝載環境中的作業。 要求值：<see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />，權限值：<see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /></permission>
    <block subset="none" type="overrides">
      <para>您可以建立自訂<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />類別，如果您想要更充分掌控轉譯與目錄 UI 的行為。 如果您不需要提供控制項的使用者能夠新增<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />以宣告方式，控制，則您可以直接繼承自<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />類別。 如果您想要啟用以宣告方式新增的控制項，simples 方法是繼承自<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />類別，因為它提供基本的區域樣板。  
  
如果您繼承自<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />類別，您可以覆寫<see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />方法和用法來新增自訂方法<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />控制項新增至<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />，如果您想要更有效地將以程式設計方式控制自訂<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />控制項加入您的區域.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
    <related type="Article" href="http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668">Web 組件控制集概觀</related>
    <related type="Article" href="http://msdn.microsoft.com/library/7dc34f74-52aa-4082-b98d-2bcf9e07e320">Web 組件個人化</related>
    <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 組件頁面</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項實作在區域樣板中，通常以宣告方式使用和您很少需要建立新的執行個體的類別使用<xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>建構函式。 不過，如果您繼承自<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別來建立自訂的區域中，您可能想要使用的建構函式來初始化它的某些屬性值，並自訂其外觀。  
  
   
  
## Examples  
 下列程式碼範例示範如何以程式設計方式使用<xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>建構函式，在自訂<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項。 建構函式用來初始化控制項的一些預設屬性值。 下列程式碼顯示自訂<xref:System.Web.UI.WebControls.WebParts.CatalogZone>頂端附近宣告建構函式類別。 如完整的程式碼和指示，才能設定及執行此範例中，請參閱 < 範例 > 一節中的<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別概觀。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 組件頁面</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立區域中宣告之每個 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 型別的執行個體。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />，其中含有區域中所有 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控制項的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法是一個重要的方法，因為當使用者切換至目錄顯示模式的頁面，此方法會建立所有<xref:System.Web.UI.WebControls.WebParts.CatalogPart>組成 Web 組件類別目錄的控制項。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法中的<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別提供與 Web 組件控制集可以建立繼承自任何伺服器控制項<xref:System.Web.UI.WebControls.WebParts.CatalogPart>類別。 因此，如果您建立自訂<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項，並將它宣告內的頁面<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制項，當使用者切換到目錄模式的頁面這個方法會建立您的控制項。  
  
 不過，基於各種原因您可能想要控制針對<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法。 您可能想要建立僅特定<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項。 例如，假設您建立一組自訂的<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制項，會有一致的外觀，並且隸屬於單一產品或組織。 如果您想要限制為在目錄中，使用這些自訂控制項的網頁開發人員，則您應該繼承自<xref:System.Web.UI.WebControls.WebParts.CatalogZone>類別中覆寫<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法，並允許的方法，以建立相同的型別，為您的自訂控制項的控制項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控制項並沒有 ID。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 組件頁面</related>
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定樣板，以頁面保存格式將子控制項包含在 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 控制項之中。</summary>
        <value>
          <see cref="T:System.Web.UI.ITemplate" />，做為區域中子控制項的容器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>屬性會參考類型的範本<xref:System.Web.UI.ITemplate>用來包含<xref:System.Web.UI.WebControls.WebParts.CatalogPart>區域中的控制項。 在區域樣板可讓網頁開發人員以宣告<xref:System.Web.UI.WebControls.WebParts.CatalogPart>他們想要用於保存格式，而不需要以程式設計方式建立的所有控制項的控制項。  
  
 Set 存取子<xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>屬性呼叫<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A>方法，它會強制集合<xref:System.Web.UI.WebControls.WebParts.CatalogPart>在區域樣板中宣告，重新整理頁面的控制項。 這可確保由區域所參考的控制項集合會保留目前每當使用者變更實際頁面上，以宣告範本內的控制項。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果您想要建立自訂<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />區域，但您想要建立<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />以程式設計方式控制，而不允許宣告它們的網頁開發人員，您執行不需要區域範本支援，您可以直接繼承自<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />類別。</para>
        </block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 組件頁面</related>
      </Docs>
    </Member>
  </Members>
</Type>