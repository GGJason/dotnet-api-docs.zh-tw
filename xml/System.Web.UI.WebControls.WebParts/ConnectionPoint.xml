<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="933a91474069425f37e5a116c1e3cdb3be8d6f67" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585345" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <TypeSignature Language="F#" Value="type ConnectionPoint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>做為定義連接點物件的基底類別，這些物件可讓 Web 組件連接中的消費者控制項和提供者控制項共用資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個 Web 組件連接兩個共用資料的伺服器控制項所組成： 一個控制項是消費者，另一個方法是提供者。 如需 Web 組件連接，以及連接物件本身的基本元件的討論，請參閱<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別概觀。 Web 組件中的每個連接都需要連接點。 提供者和消費者控制項必須具有至少一個定義<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>可以共用 （每個 （選擇性） 可以有多個連接點） 的物件，其中包含如何將控制項可以連線到另一個控制項的資料類型它的詳細資料。 在實際的連線，該提供者有它自己的連接點物件類型 (衍生自基底<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別)、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>執行個體，而且取用者有它自己的物件，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>執行個體。  
  
 若要建立提供者連接點，開發人員必須加入回呼方法會傳回實作的介面執行個體的取用者的提供者。 它們必須標示的回呼方法，在原始程式碼與`ConnectionProvider`code 屬性 (請參閱<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別)。 同樣地，若要建立消費者連接點，開發人員必須將方法加入至取用者接收介面執行個體，而他們必須將標記與該方法`ConnectionConsumer`屬性 (請參閱<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>類別)。  
  
 當開發人員在網頁上建立連線時，也可以建立與靜態或動態的連接。 在網頁標記中宣告靜態連接。 宣告靜態連接時，開發人員可以將指定的連接點由消費者和提供者指派值給`ProviderConnectionPointID`和`ConsumerConnectionPointID`屬性內`<asp:webpartconnection>`項目標記。 這個方法是特別有用，如果有多個連接點定義內的消費者和提供者的控制項，因為它可讓靜態連線來識別要用於連線的連接點。  
  
 由開發人員的程式碼或由使用者透過使用者介面 (UI) 所提供以程式設計的方式，建立動態連接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。 若要在程式碼中建立的連接，開發人員必須取得的執行個體<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 呼叫這個方法之前，開發人員必須消費者和提供者伺服器控制項和其各自的連接點物件的參考。 若要取得提供者和消費者控制項的連接點的參考，開發人員先呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。 這些方法會傳回適當的連接點物件，接著可以傳遞給建立連接的方法。  
  
 當提供者和消費者連接點物件都使用相同類型的介面，它們相容而且可用以構成直接連線至共用資料。 如果無法使用相同的介面型別，<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來轉譯成的型別，取用者可以使用從提供者介面執行個體。  
  
 抽象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別提供基底由消費者和提供者的控制項所共用的連接點的詳細資料。 多個屬性會包含這些詳細資料。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性會指出連接點是否可以參與多個連線一次。 根據預設，提供者連接點可以參與多個連接，而消費者連接點不能。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性會指出伺服器控制項的連接點相關聯的類型。 請注意，並非只有<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項可以形成連線; 任何伺服器控制項，可以參與連接，如果放在啟用 ASP.NET 控制項、 自訂控制項，或使用者控制項，<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性會提供可顯示在 UI，以協助使用者建立連接的連接點的易記名稱。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性做為本身的連接點物件的字串識別項。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性指示了解哪些類型的介面執行個體的連接點。 指定的連接點會提供或取用該介面的執行個體是否取決於它是否<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>或<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別有一個方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法會傳回布林值，指出是否目前能夠參與連線的連接點。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別也有一個公用欄位， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。 此欄位會包含用來識別連接中的預設連接點的值。  
  
> [!NOTE]
>  指定連接點方法具有只能有一個必要的參數屬性`displayName`，因此可以建立預設的連接點屬性但未指定的識別碼。 在這種情況下，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位提供要使用的基底值。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立包含所需的 Web 組件連接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件。 因為<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別是抽象基底類別，它的子類別-的執行個體<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-是用來建立連接的實際物件。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面和控制項的原始程式碼。 來源檔案包含一個簡單的介面，名為`IZipCode`。 另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並且會做為提供者控制。 其`ProvideIZipCode`方法是實作介面的唯一成員的回呼方法。 方法只會傳回介面的執行個體。 請注意，方法標示為`ConnectionProvider`中它的中繼資料屬性。 這是將方法識別提供者的連接點的回呼方法的機制。 其他<xref:System.Web.UI.WebControls.WebParts.WebPart>類別的名稱為`WeatherWebPart`，並作為連接取用者。 這個類別具有名為的方法`GetZipCode`所取得的執行個體`IZipCode`介面從提供者控制。 請注意，這個方法標示為與取用者的連接點方法`ConnectionConsumer`中它的中繼資料屬性。 這是識別取用者控制項中的連接點方法的機制。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 頁面頂端附近`Register`指示詞，若要註冊連接的自訂控制項和使用者控制項，可讓使用者變更網頁上顯示模式。 連接本身以宣告方式內建立`<staticconnections>`頁面上的元素。 您也可以透過程式設計的方式; 建立連線包含執行的程式碼`Button1_Click`方法。 以宣告方式或以程式設計方式建立連接時，是否提供者和取用者必須一律指定連接點。 `Button2_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件提供者和取用者，並將部分及其屬性值寫入頁面中的標籤。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請按一下**連接點的詳細資料** 按鈕。 宣告式的連接中所建立的提供者和消費者連接點相關的資訊會出現。 接下來，使用**顯示模式**切換到頁面的下拉式清單控制項的連接模式。 其中一個的動詞命令功能表<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （由標題列中的向下箭號表示），按一下 連接的動詞命令。 自動的連接 UI 出現時，建立`<asp:connectionszone>`控制項在頁面中宣告。 按一下**中斷連線**終止現有的連接 按鈕。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。 接下來，按一下**動態連接** 按鈕，以程式設計方式建立的連接。 按一下**連接點的詳細資料** 按鈕，指出兩個連接點物件的相關詳細資料。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleConnections : bool" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出連接點是否支援多個同時連接。</summary>
        <value>如果連接點支援多個連接，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 物件具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性值設定為`true`(由<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別)，因為預設的 Web 組件控制項可讓提供者連接點至多位取用者建立連接。  
  
 相反地，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性值設定為`false`(由<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>類別) 因為預設的 Web 組件控制項可讓取用者連接點，以連接到在只有一個提供者時間。  
  
 您可以變更預設行為有關多個連線，藉由指定不同的值給<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>屬性 （針對提供者） 或<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>屬性 （消費者） 對這兩個<xref:System.Attribute>使用連接屬性的類別。 如果您啟用在同一時間連接至多個提供者的消費者連接點，您的程式碼必須處理任何產生的同步處理問題。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>上兩個屬性<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這個程式碼範例示範只包含程式碼存取的屬性; 的 Web 網頁若要執行範例所需的完整程式碼，請參閱 < 範例 > 一節的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別概觀。  
  
 中的程式碼`Button2_Click`方法的網頁存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性在每個連接點物件，並將每個值寫入至標籤。 執行程式碼，即可**連接點的詳細資料**按鈕之後在瀏覽器中載入的頁面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與連接點關聯之伺服器控制項的 <see cref="T:System.Type" />。</summary>
        <value>
          <see cref="T:System.Type" />，表示控制項型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性通常是<xref:System.Web.UI.WebControls.WebParts.WebPart>型別。 不過，因為使用者控制項或伺服器控制項的任何類型可以參與連線已正確啟用並放在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性可以傳回這些其他伺服器控制項類型的其中一個。  
  
 當伺服器不控制<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項置於<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，它們會包裝與<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件在執行階段，讓它們可以當做<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項並加入連接中。 這類控制項牽涉到在 [連線] 時，但<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性值不會傳回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>輸入; 它會傳回的型別<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件的子控制項，也就是伺服器或使用者控制項的類型。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>上兩個屬性<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這個程式碼範例示範只包含程式碼存取的屬性; 的 Web 網頁若要執行範例所需的完整程式碼，請參閱 < 範例 > 一節的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別概觀。  
  
 中的程式碼`Button2_Click`方法的網頁存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性在每個連接點物件，並將每個值寫入至標籤。 執行程式碼，即可**連接點的詳細資料**按鈕之後在瀏覽器中載入的頁面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示字串，用來識別與伺服器控制項關聯之連接點集合中的預設連接點。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立的連接點時，很可能在取用者或提供者的原始程式碼中指定的連接點識別碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，請使用<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性。 不過，當屬性加入至原始程式碼中的連接點`ID`參數是選擇性的。 如果未指定 ID 屬性中<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位會提供用來識別預設連接點的字串。  
  
 如果取用者或提供者中定義多個連接點，則必須指定每個連接點識別碼，以便建立連接時，就可以識別連接點。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得字串，此字串在使用者介面 (UI) 做為表示連接點的易記顯示名稱。</summary>
        <value>字串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> 物件的易記顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立 Web 組件的連接，連接的提供者和消費者控制項必須每個指定至少一個連接點，讓他們能夠通訊及共用資料的方法。 若要識別這些連接點方法，開發人員會在選取的方法上指定的屬性。 提供者`ConnectionProvider`屬性設定於所選的回呼方法，並在取用者，`ConnectionConsumer`接收包含資料提供者介面的執行個體的方法上設定屬性。 對於這兩個屬性，永遠是必要項，不論哪一個多載宣告若要建立屬性的一個參數是`displayName`參數。 開發人員必須指派要當做連接點的易記顯示名稱的字串，該字串成為的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>使用者建立連接時，將會顯示網頁的 UI 中的屬性值。 例如，當<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項會加入至頁面上，它會建立 UI，讓使用者能夠建立控制項之間的連接。 使用者將頁面切換成連接顯示模式，然後按一下連接的動詞命令之後<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，即會出現 UI 的連線。 連接可參與的每個控制項列在 UI 中，而每個控制項旁會顯示其可用的連接點的易記名稱的下拉式清單控制項中。 使用者必須選取至少一個連接點來建立連接。 連接點的清單中顯示的值取自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性。 如果開發人員建立自訂的 UI 建立連接，則可以使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>類似的方式，來提供表示的連接點的易記名稱的屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetEnabled : System.Web.UI.Control -&gt; bool&#xA;override this.GetEnabled : System.Web.UI.Control -&gt; bool" Usage="connectionPoint.GetEnabled control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">與連接點關聯的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 或其他伺服器控制項。</param>
        <summary>傳回值，指出連接點是否可以參與連接。</summary>
        <returns>如果控制項可以建立參與連接的連接點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法的基底中<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別一律會傳回`true`，但在衍生的類別可以覆寫這個方法傳回`true`或`false`不同的時間為基礎的狀態`control`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>上兩個方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這個程式碼範例示範只包含程式碼存取的屬性; 的 Web 網頁若要執行範例所需的完整程式碼，請參閱 < 範例 > 一節的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別概觀。  
  
 中的程式碼`Button2_Click`方法的網頁存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法在每個連接點物件，並將每個值寫入至標籤。 執行程式碼，即可**連接點的詳細資料**按鈕之後在瀏覽器中載入的頁面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得字串，其中包含連接點的識別項。</summary>
        <value>字串，包含連接點的識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當開發人員會宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性上控制項的原始程式碼中的方法，使方法可用來當做連接點，它不需要宣告`ID`連接點屬性的參數。 只有所需的屬性`displayName`參數。 預設識別碼指派給連接點，使用中的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。  
  
 如果只有一個方法正在做為連接點所用的控制項，則不需要指定的連接點的識別碼。 如果有多個方法指定為連接點，您必須指定每個; 識別碼否則，會擲回例外狀況。 藉由指派 ID 給每個連接點，您也能讓指定的宣告中網頁的連線，或在程式碼中建立時要使用的連接點。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>上兩個屬性<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這個程式碼範例示範只包含程式碼存取的屬性; 的 Web 網頁若要執行範例所需的完整程式碼，請參閱 < 範例 > 一節的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別概觀。  
  
 中的程式碼`Button2_Click`方法的網頁存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性在每個連接點物件，並將每個值寫入至標籤。 執行程式碼，即可**連接點的詳細資料**按鈕之後在瀏覽器中載入的頁面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InterfaceType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得連接點所使用的介面型別。</summary>
        <value>
          <see cref="T:System.Type" />，對應到控制項所提供或使用的介面型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性會指出哪些類型的介面連接點會使用。 這可協助判斷兩個控制項是否相容，並且能夠建立連接。 如果提供者連接點<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>不同的消費者連接點<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>，則兩個控制項不相容 （亦即，它們無法直接連線至沒有轉換程式），和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須可用來建立連接。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>上兩個屬性<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 這個程式碼範例示範只包含程式碼存取的屬性; 的 Web 網頁若要執行範例所需的完整程式碼，請參閱 < 範例 > 一節的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別概觀。  
  
 中的程式碼`Button2_Click`方法的網頁存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性在每個連接點物件，並將每個值寫入至標籤。 執行程式碼，即可**連接點的詳細資料**按鈕之後在瀏覽器中載入的頁面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
  </Members>
</Type>