<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a906fef29cb08b4b1a7448d724be44cee8213f6c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386160" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定義連接點物件，讓做為消費者之伺服器控制項建立與提供者的連接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在兩個伺服器控制項之間的每個 Web 組件連接，每個控制項必須 （還有其他需求） 相關聯的連接點物件，可讓它連接至其他控制項，並提供或取用資料，取決於是否控制項指定為提供者或消費者連接。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件通常包含如何將控制項可以連接到另一個控制項，它可以共用的資料類型的詳細資料。 做為取用者在連接中的控制項，其連接點必須<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。 Web 組件連接和連接點的詳細資訊，參閱 < 另請參閱下一節中所列的主題。  
  
 若要建立<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件時，還有數個步驟：  
  
1.  可讓取用者控制項參考介面執行個體。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項 (任何類型的伺服器控制項，就會加入至<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>可用區域) 必須能夠取用資料的特定介面的執行個體。 控制項必須實作的介面。提供者必須實作它。 取用者可以是使用提供者所提供的正確介面類型或它不存在，<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件可以用來將資料轉換從提供者的介面型別為取用者所了解的類型。 若要啟用消費者的典型方式是宣告私用欄位來包含所需的介面類型的參考。  
  
2.  識別回呼方法。 取用者中的方法，必須識別為回呼方法，以建立與提供者的連線。 這個方法會擷取執行個體，提供者會實作，並指派 （例如） 的私用欄位以建立第一個步驟中的介面。 識別回呼方法的消費者中的 Web 組件方法是加入`ConnectionConsumer`中繼資料屬性 (由<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>類別) 來接收介面執行個體的方法。 當加入屬性時，唯一的必要的參數是要用於消費者連接點的顯示名稱。 選擇性參數也會新增，例如識別碼。  
  
3.  程序並輸出介面執行個體中的資料。 視需要在資料上，執行任何內部的處理，然後通常消費者控制項將呈現頁面的資料。 執行此動作的常見方式是覆寫控制項的<xref:System.Web.UI.Control.OnPreRender%2A>方法。  
  
    > [!NOTE]
    >  一項同步要求，在取用者應該要求資料直接從提供者期間或之後立即<xref:System.Web.UI.Control.PreRender>事件。 期間的非同步要求，如果提供者的回呼方法不在任何時間點呼叫在呈現期間，開發人員可以假設沒有任何資料已傳送至取用者。  
  
 控制項已具備做為取用者之後，此控制項可以參與連接 （假設提供者控制項也有能力和可用）。 若要建立靜態、 宣告式連接的網頁標記中，開發人員可以使用`<asp:webpartconnection>`項目。 如果`ConnectionConsumer`中識別回呼方法的消費者原始程式碼屬性指定連接點的識別碼，則該值必須指派給`ConsumerConnectionPointID`屬性`<asp:webpartconnection>`頁面上的元素。 開發人員可能會指定識別碼的消費者連接點的原因是如果有多個取用者控制項中定義的連接點。 如果取用者控制項中的消費者連接點不指定的 ID，值沒有指派給`ConsumerConnectionPointID`頁面中，屬性，因為連接將使用預設值取自建立<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。  
  
 若要在程式碼中建立的連接，開發人員必須建立新<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法並傳遞給它的取用者控制項，以及識別碼或索引的定義識別碼<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>消費者控制項中的物件。 傳回<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>以及消費者控制項的參考物件的參照的提供者控制項，以及對應<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，全部都是傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法來建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 雖然開發人員可以使用以宣告方式或以程式設計方式建立連接的消費者連接點，使用者也可以互動與消費者連接點來建立連接，透過使用者介面 (UI)。 如果開發人員宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在網頁上，它會提供執行階段的 UI，讓使用者能夠建立連接。 如果使用者選擇提供者控制項做為建立連接，即可起點其連接動詞命令 （也可以選擇取用者; 沒有任何差異，產生的連線中），它們會在 UI 中看到的下拉式清單控制項顯示名稱 可用消費者連接點 （或如果多個點） 的提供者可傳送資料。 使用者必須選取建立的連接消費者連接點。  
  
 A<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件直接關聯的特定取用者控制項，並將連線的相關詳細資料儲存在它所繼承自基底屬性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。 例如，在繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性，消費者連接點會保留它所使用的介面的型別。 如果提供者和取用者在連接中的同時了解介面的型別，這些控制項是相容，並且能夠建立直接連接。 如果提供者和消費者不能使用相同的介面類型，它們不相容，而且必須使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件翻譯的提供者連接點<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>到取用者可以使用類型的屬性。 另一個重要的繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性，提供易記的名稱，以顯示在 UI，讓使用者選擇的消費者連接點，當建立連接。 顯示名稱是必要的參數，當開發人員將`ConnectionConsumer`屬性設定為取用者控制項的回呼方法。 繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性也很有用，如前文所述，，因為它提供的唯一識別碼的消費者連接點，取用者有多個連接點。 取用者可以有多個<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件定義中，並在此情況下，當開發人員將`ConnectionConsumer`屬性給方法時，他們應該指定區別每一個連接點識別碼值。 其中一個其他值得注意繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性，指出消費者連接點是否可同時連接到多個提供者。 這個屬性值`false`消費者連接點的預設 (而其預設值為`true`對於提供者連接點)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別會加入數個唯一的方法它所繼承的成員從<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法會叫用的取用者自己定義回呼方法，以從提供者擷取介面執行個體。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法會傳回布林值，指出是否能夠建立連接，取用者相關聯的控制項的目前狀態為基礎的連接點。  
  
   
  
## Examples  
 下列程式碼範例顯示簡單的方法來以宣告方式建立的連接，以程式設計方式或透過 UI，在每個案例中使用的消費者連接點。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制做為提供者和消費者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 這個程式碼範例的第一個部分是使用者控制項，可讓使用者變更網頁上的顯示模式。 將下列來源的程式碼儲存至.ascx 檔案中，指派給檔案名稱`Src`屬性`Register`指示詞的這個使用者控制項，這是主控網頁頂端附近。 如需詳細資料會顯示此控制項中模式和原始碼的說明，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 程式碼範例的第二個部分是介面和控制項的原始程式碼。 來源檔案包含一個簡單的介面，名為`IZipCode`。 另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並且會做為提供者控制。 其他<xref:System.Web.UI.WebControls.WebParts.WebPart>類別的名稱為`WeatherWebPart`，並作為連接取用者。 這個類別具有名為的方法`GetZipCode`所取得的執行個體`IZipCode`介面從提供者控制。 請注意，這個方法標示為與取用者的連接點方法`ConnectionConsumer`中它的中繼資料屬性。 這是識別取用者控制項中的連接點方法的機制。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確地進行編譯，並將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您的網站 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 這個程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱[逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 程式碼範例的第三個部分是 Web 網頁。 頁面頂端附近`Register`指示詞，若要註冊連接的自訂控制項和使用者控制項，可讓使用者變更網頁上顯示模式。 連接本身以宣告方式內建立`<staticconnections>`頁面上的元素。 這示範了一種方式建立連接的-注意`ConsumerConnectionPointID`屬性`<asp:webpartconnection>`項目。 您也可以透過程式設計的方式; 建立連線針對執行的程式碼位於`Button1_Click`方法。 在此情況下，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件已建立，然後傳遞給建立實際連線的方法。 以宣告方式或以程式設計方式建立連接時，是否提供者和取用者必須一律指定連接點。 `Button2_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件提供者和取用者，並將部分及其屬性值寫入頁面中的標籤。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請按一下**連接點的詳細資料** 按鈕。 宣告式的連接中所建立的提供者和消費者連接點相關的資訊會出現。 接下來，使用**顯示模式**切換到頁面的下拉式清單控制項的連接模式。 上的動詞命令功能表**郵遞區號提供者**<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （由標題列中的向下箭號表示），按一下 連接的動詞命令。 自動的連接 UI 出現時，建立`<asp:connectionszone>`控制項在頁面中宣告。 這是另一種建立連線 （透過 UI)，以及先前所討論的宣告式和程式設計方法。 按一下**中斷連線**終止現有的靜態連接 按鈕。 按一下**建立消費者連接**連結。 UI 現在會顯示列出消費者連接點的顯示名稱的下拉式清單控制項。 在下拉式清單中，選取 連接點，然後按一下**連接**完成連線。 接下來，按一下**中斷連線**一次。 按一下**動態連接** 按鈕，以程式設計方式建立的連接。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。 按一下**連接點的詳細資料** 按鈕，以指出的相關詳細資料的消費者連接點物件一次多。  
  
 此範例示範建立連線，並使用下列三種方法的消費者連接點： 靜態連接標記中宣告的網頁。使用的程式碼中建立的連線<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件，並透過連線 UI 使用者所建立的連線。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">消費者控制項中的方法，傳回介面執行個體至消費者以建立連接。</param>
        <param name="interfaceType">消費者從提供者接收之介面的 <see cref="T:System.Type" />。</param>
        <param name="controlType">與消費者連接點關聯之消費者控制項的 <see cref="T:System.Type" />。</param>
        <param name="displayName">消費者連接點的易記顯示名稱，在連接使用者介面 (UI) 中向使用者顯示。</param>
        <param name="id">消費者連接點的唯一識別項。</param>
        <param name="allowsMultipleConnections">布林值，指出消費者連接點是否可以同時連接到多個提供者。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>建構函式<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別只會呼叫基底建構函式，將各種不同的參數傳遞給它，並初始化基底類別。  
  
 基底類別建構函式會檢查幾個連接點的參數，並可能會擲回某些例外狀況。 如需可能的例外狀況的清單，請參閱例外狀況 > 一節。  
  
 您可以呼叫<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>建構函式來建立您自己的執行個體<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別。 不過，如果您只建立連線，並不會擴充類別，您應該呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法來傳回提供者連接點物件。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別來建立自訂提供者連接點。  
  
 程式碼範例包含三個部分：  
  
-   包含提供者的原始程式檔<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，取用者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。  
  
-   裝載控制項中的靜態連接的網頁。  
  
-   如何執行範例程式碼的說明。  
  
 程式碼範例的第一個部分是提供者和消費者的來源<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別，名為`TableConsumerConnectionPoint`。 請注意，建構函式`TableConsumerConnectionPoint`類別會呼叫基底的建構函式，將其傳遞必要的參數，參數 > 一節所示。 也請注意，在`TableConsumer`類別`SetConnectionInterface`方法指定為回呼方法，以進行連線，而`ConnectionConsumer`屬性宣告自訂`TableConsumerConnectionPoint`做為參數。 這示範了如何建立自訂的消費者連接點，並將與消費者控制項產生關聯。 這個範例假設，動態編譯的原始程式碼，所以您應將原始程式碼檔放在 Web 應用程式的 App_Code 子資料夾。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 程式碼範例的第二個部分是靜態的 Web 組件連接中的自訂控制項裝載的網頁。 在頁面頂端`Register`指示詞來宣告前置詞和自訂控制項的命名空間。 宣告可透過連接`<asp:webpartconnection>`控制項項目，以及提供者和消費者中宣告了`<asp:webpartzone>`項目。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 載入瀏覽器中。 已經控制項之間的連線存在，並取用者顯示的資料提供者，因為連接已宣告為靜態連接頁面中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> 為 <see langword="null" />。  \- 或 -  <paramref name="interfaceType" /> 為 <see langword="null" />。  \- 或 -  <paramref name="controlType" /> 為 <see langword="null" />。  \- 或 -  <paramref name="displayName" /> 為 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> 不是和消費者控制項相同的型別 (或從它衍生的有效類別)。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">與消費者連接點關聯的消費者控制項。</param>
        <param name="data">從提供者控制項傳回的介面執行個體。</param>
        <summary>叫用消費者控制項的回呼方法，並從提供者控制項擷取介面執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會接收來自包含消費者控制項的資料提供者介面執行個體。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法透過呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件正在啟動連線時。 這是重要的步驟初始化連線和啟用共用資料的兩個控制項的一部分。  
  
 取用者中的控制項的連接必須能夠使用的相同介面的型別為提供者。 如果不存在，會不相容的控制項和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來建立連接。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">與 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 關聯的消費者控制項。</param>
        <param name="secondaryInterfaces">任何參與連接之次要介面的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</param>
        <summary>判斷消費者連接點目前是否可以建立連接。</summary>
        <returns>如果連接點目前可以建立連接，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法實作一律傳回`true`中的所有案例<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別。 此方法的目的是要進行檢查的狀態`control`和`secondaryInterfaces`來判斷特定關鍵點是否<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件是目前無法建立連線。  
  
 可以是案例其中`control`正處於無法建立連接，或其中`secondaryInterfaces`必須先建立可以形成連線。 在這種情況下，開發人員可以繼承自<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>類別，並覆寫<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法，提供自訂的實作，以判斷何時可以開始支援連接的連接點。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>