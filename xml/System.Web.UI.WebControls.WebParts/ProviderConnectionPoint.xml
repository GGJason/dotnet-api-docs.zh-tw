<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e419a2aa9445ec2ef2780bf50f28cd405be42c6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37596216" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定義連接點物件，讓做為提供者的伺服器控制項建立與消費者之連接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在每個 Web 組件控制項之間連接兩個伺服器，每個控制項必須 （還有其他需求） 相關聯的連接點物件，可讓它連接到另一個控制項，並提供或取用資料，取決於是否控制項指定為提供者或取用者的連接。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件通常會包含控制項如何連線至另一個控制項，它可以共用的資料類型的詳細資料。 做為連接之提供者的控制項，其連接點必須是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。 如需 Web 組件連接和連接點的詳細資訊，請參閱 < 另請參閱下一節中所列的主題。  
  
 若要建立<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，則需要執行幾個步驟：  
  
1.  建立的介面。 當共用資料提供者與取用者時，它是藉由取得介面的執行個體，並將該執行個體傳回給取用者。  
  
2.  提供者中實作的介面。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項 (任何類型的伺服器控制項中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>可用區域)，它就會提供者必須實作第一個步驟中建立的介面。  
  
3.  識別回呼方法。 為回呼方法，以建立連線，必須識別提供者中的方法。 這個方法會傳回給取用者實作的介面的執行個體。 識別提供者中的回呼方法的 Web 組件方法是將`ConnectionProvider`中繼資料屬性 (由定義<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別) 來傳回介面執行個體的方法。 加入屬性時，唯一必要的參數時，若要使用的提供者連接點的顯示名稱。 可以加入選擇性參數也是，例如連接點識別碼。  
  
 控制項已有做為提供者的能力之後，控制項可以參與連線 （假設消費者控制項也有能力且可用）。 若要建立具有靜態、 宣告式連線的 Web 網頁標記中，開發人員可以使用`<asp:webpartconnection>`項目。 如果`ConnectionProvider`識別的回呼方法的提供者原始程式碼中的屬性會指定連接點 ID，則該值必須指派給`ProviderConnectionPointID`屬性中`<asp:webpartconnection>`頁面上的項目。 開發人員可能會指定提供者連接點識別碼的其中一個原因是提供者控制項中是否有多個連接點。 如果提供者控制項中的提供者連接點不指定的 ID，值就不需要指派給`ProviderConnectionPointID`頁面中，屬性，因為將會建立連線，使用預設值取自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。  
  
 若要在程式碼中建立的連線，開發人員必須建立新<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法並傳遞給它的提供者控制項，以及識別碼或索引的定義識別碼<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>提供者控制項中的物件。 傳回<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，提供者控制項的參考以及消費者控制項，和對應的參考<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件，都傳遞給<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法，以建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。  
  
 雖然開發人員可以使用提供者連接點，以宣告方式或以程式設計方式建立連線的使用者也可以在與提供者連接點，來建立連接，透過使用者介面 (UI) 互動。 如果開發人員宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在網頁上，它會提供執行階段 UI 建立連線的使用者。 如果使用者選擇的消費者控制項做為起點來建立連線，依序按一下其連接動詞命令 （他們也可以選擇提供者; 沒有任何差異，在產生的連接），在 UI 中，他們會看到下拉式清單控制項可用的提供者連接點 （或如果有多個點） 的顯示名稱。 使用者必須選取要建立的連線提供者連接點。  
  
 A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件直接使用特定提供者控制項，將關聯，並將連線的相關詳細資料儲存在它繼承自基底屬性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。 例如，在繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性，提供者連接點會提供者傳回的介面的型別。 如果提供者和取用者都使用相同的連接介面型別，這些控制項是相容，而且能夠建立直接連接。 如果提供者和取用者無法使用相同的介面型別，它們不相容，而且必須使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>要翻譯的提供者連接點物件<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>至類型，以取用者可以使用的值。 另一個重要的繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>建立連線時，點屬性，可供使用者選擇的提供者連接 UI 中顯示的易記名稱。 顯示名稱是必要的參數，當開發人員將`ConnectionProvider`屬性提供者控制項的回呼方法。 繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性也很有用，如上述，因為它提供唯一的識別項的提供者連接點，提供者有多個連接點。 提供者可以有多個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件定義，並在此情況下，當開發人員將`ConnectionProvider`屬性給方法時，他們應該指定識別碼值來區別每一個連接點。 其中一個其他值得注意繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性，指出提供者連接點是否可以同時連線至多位取用者。 這個屬性值`true`預設會針對提供者連接點 (而其預設值為`false`對於消費者連接點)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別會加入數個唯一的方法繼承自成員<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會擷取回呼方法會傳回給取用者介面的執行個體。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法會擷取屬於現有的連接，其他取用者介面，但不是介面用來建立連線。  
  
   
  
## Examples  
 下列程式碼範例顯示簡單的方法，以宣告方式建立的連線，請以程式設計方式或透過使用者介面，在每個案例中使用的提供者連接點。  
  
 此範例包含四個部分：  
  
-   使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。  
  
-   來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。  
  
-   裝載的所有控制項，並執行程式碼範例的網頁。  
  
-   如何執行範例頁面的說明。  
  
 此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。 將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。 For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說： 變更 Web 組件頁面上顯示的模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 在程式碼範例的第二個部分是介面和控制項的原始程式碼。 原始程式檔包含一個簡單的介面，名為`IZipCode`。 另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並做為提供者控制項。 其`ProvideIZipCode`方法是實作介面的唯一成員的回呼方法。 此方法只會傳回介面的執行個體。 請注意，方法標示為`ConnectionProvider`其中繼資料中的屬性。 這是將方法識別提供者的連接點的回呼方法的機制。 另<xref:System.Web.UI.WebControls.WebParts.WebPart>類別會命名為`WeatherWebPart`，並作為連線取用者。 這個類別具有一個名為方法`GetZipCode`所取得的執行個體`IZipCode`從提供者控制項的介面。 請注意，這個方法會標示為取用者的連接點方法`ConnectionConsumer`其中繼資料中的屬性。 這是用來識別的消費者控制項連接點方法的機制。  
  
 若要執行程式碼範例，您必須編譯這個原始程式碼。 您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。 或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。 此程式碼範例會使用動態編譯。 如需示範如何編譯的逐步解說，請參閱 <<c0> [ 逐步解說： 開發和使用自訂 Web 伺服器控制項](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 在程式碼範例的第三個部分是網頁。 頁面頂端附近`Register`指示詞來註冊自訂控制項的連接，並可讓使用者變更的使用者控制項的頁面上顯示模式。 以宣告方式內建立連線本身`<staticconnections>`頁面上的項目。 這示範了其中一種建立連線，請注意`ProviderConnectionPointID`屬性中`<asp:webpartconnection>`項目。 您也可以以程式設計的方式; 建立連線這麼做，程式碼位於`Button1_Click`方法。 在此情況下，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件已建立，然後傳遞給方法，以建立實際的連接。 以宣告方式或以程式設計方式建立連接時，是否一律必須指定連接點的提供者和取用者。 `Button2_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件的提供者和取用者，並將部分及其屬性值寫入頁面中的標籤。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 在瀏覽器頁面載入之後，請按一下**連接點的詳細資料** 按鈕。 建立宣告式的連接中的提供者和消費者連接點的相關資訊會出現。 接下來，使用**顯示模式**切換至頁面的下拉式清單控制項連接模式。 上的動詞命令功能表**郵遞區號消費者**<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （標題列中的向下箭號表示），按一下連接動詞命令。 自動建立 UI 出現後，連線`<asp:connectionszone>`網頁中宣告的控制項。 這可以是另一種建立連線 （透過 UI)，連同稍早所述的宣告式和程式設計方法。 按一下 **中斷連線**按鈕來終止現有的靜態連接。 按一下 **建立提供者的連線**連結。 UI 現在會顯示列出提供者連接點的顯示名稱的下拉式清單控制項。 在下拉式清單中，選取 連接點，然後按一下**Connect**完成連線。 接下來，按一下**中斷連線**一次。 然後，按一下**動態連接** 按鈕，以程式設計方式建立連接。 使用**顯示模式**返回頁面，即可瀏覽模式的控制項。 按一下 [**連線端點詳細資料**同樣地，一次表示提供者連接點物件的相關詳細資料] 按鈕。  
  
 此範例已示範建立連線，並使用三種方式的提供者連接點： 在網頁標記中，宣告為靜態連接使用程式碼中建立的連線<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，以及透過連接 UI 的使用者所建立的連線。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">提供者控制項中的方法，傳回介面執行個體至消費者以建立連接。</param>
        <param name="interfaceType">提供者為消費者所提供之介面的 <see cref="T:System.Type" />。</param>
        <param name="controlType">與提供者連接點關聯之提供者控制項的 <see cref="T:System.Type" />。</param>
        <param name="displayName">提供者連接點的易記顯示名稱，在連接使用者介面 (UI) 中向使用者顯示。</param>
        <param name="id">提供者連接點的唯一識別項。</param>
        <param name="allowsMultipleConnections">布林值，指出提供者連接點是否可以同時連接到多個消費者。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>建構函式<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別只會呼叫基底建構函式，將各種不同的參數傳遞給它，並初始化基底類別。  
  
 基底類別建構函式會檢查幾個連接點的參數，並可能會擲回的幾個例外狀況。 如需可能例外狀況的清單，請參閱例外狀況。  
  
 您可以呼叫<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>建構函式來建立您自己的執行個體<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別。 不過，在您可在此是只建立連線，且不擴充類別的情況下，您應該呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法，以從提供者傳回現有的連接點物件。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別來建立自訂提供者連接點。  
  
 在程式碼範例有三個部分：  
  
-   包含提供者的原始程式檔<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，消費者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。  
  
-   在靜態連接控制項裝載的網頁。  
  
-   如何執行範例程式碼的說明。  
  
 在程式碼範例的第一個部分是來源提供者和消費者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別，名為`TableProviderConnectionPoint`。 請注意，建構函式的`TableProviderConnectionPoint`類別會呼叫基底的建構函式，將它傳遞必要的參數，參數區段中所示。 也請注意，在`TableProviderWebPart`類別，`GetConnectionInterface`方法指定為回呼方法，對於連線，而`ConnectionProvider`屬性會宣告自訂`TableProviderConnectionPoint`做為參數。 這示範了如何建立自訂提供者連接點，然後將其關聯提供者控制項。 這個範例假設的以動態方式編譯的原始程式碼，因此您應該將原始程式碼檔放在您的 Web 應用程式中的 [App_Code] 子資料夾中。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 在程式碼範例的第二個部分是裝載在靜態 Web 組件連接中的自訂控制項的網頁。 在頁面頂端`Register`指示詞來宣告前置詞和自訂控制項的命名空間。 連線宣告可透過`<asp:webpartconnection>`內宣告項目，以及提供者和消費者控制項`<asp:webpartzone>`項目。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 將網頁瀏覽器中的載入。 已在控制項之間的連線存在，並取用者顯示的資料提供者，因為連線已宣告為靜態連接頁面中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> 為 <see langword="null" />。  \- 或 -  <paramref name="interfaceType" /> 為 <see langword="null" />。  \- 或 -  <paramref name="controlType" /> 為 <see langword="null" />。  \- 或 -  <paramref name="displayName" /> 為 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> 與提供者控制項 (或從它衍生的有效類別) 的類型不同。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">做為 Web 組件連接之提供者的控制項。</param>
        <summary>叫用提供者控制項的回呼方法，取得要傳回至消費者的介面執行個體。</summary>
        <returns>
          <see cref="T:System.Object" />，為提供者傳回至消費者的介面執行個體，用以建立連接。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法傳回的物件是用來建立連接的介面的執行個體提供者控制項。 物件的型別會實作介面的型別。 例如，兩個介面，實作 Web 組件控制項集合中的連線<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。 當<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>上呼叫方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，如果相關聯的提供者會實作這些介面之一，傳回的物件會屬於相同的型別。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件正在啟動連線時。 這是實際初始連線，並開始讓共用資料的兩個控制項的程序的重要步驟。  
  
 連接之中消費者控制項必須能夠使用相同介面的型別作為提供者。 如果不存在，會不相容的控制項和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來建立連線。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">做為 Web 組件連接之提供者的控制項。</param>
        <summary>取得提供者連接點所支援之次要介面的選擇性集合。</summary>
        <returns>做為提供者之控制項所提供之其他介面的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供者連接點物件一律有預設介面，用來建立與取用者的連線。 藉由呼叫擷取預設介面的執行個體<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。  
  
 不過，某些提供者控制項也會實作多個介面，取用者提供連接的一部分。 這些介面，不是用來建立連接的預設值，稱為次要介面。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法可用來傳回至次要的介面中，參考的集合，就如同<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法傳回的預設介面的參考。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />方法中的<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />類別包含任何實作，則傳回空集合之次要介面。若要實作這個方法，您必須繼承自<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />類別，並覆寫這個方法，從它傳回一組特定之次要介面。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>