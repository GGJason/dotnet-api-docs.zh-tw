<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b186bce22b03fda14da233681ff3d7453e893c88" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390231" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="acf04-101">定義連接點物件，讓做為提供者的伺服器控制項建立與消費者之連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf04-102">在每個 Web 組件控制項之間連接兩個伺服器，每個控制項必須 （還有其他需求） 相關聯的連接點物件，可讓它連接到另一個控制項，並提供或取用資料，取決於是否控制項指定為提供者或取用者的連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="acf04-103">A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件通常會包含控制項如何連線至另一個控制項，它可以共用的資料類型的詳細資料。</span><span class="sxs-lookup"><span data-stu-id="acf04-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="acf04-104">做為連接之提供者的控制項，其連接點必須是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="acf04-105">如需 Web 組件連接和連接點的詳細資訊，請參閱 < 另請參閱下一節中所列的主題。</span><span class="sxs-lookup"><span data-stu-id="acf04-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="acf04-106">若要建立<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，則需要執行幾個步驟：</span><span class="sxs-lookup"><span data-stu-id="acf04-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="acf04-107">建立的介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-107">Create an interface.</span></span> <span data-ttu-id="acf04-108">當共用資料提供者與取用者時，它是藉由取得介面的執行個體，並將該執行個體傳回給取用者。</span><span class="sxs-lookup"><span data-stu-id="acf04-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="acf04-109">提供者中實作的介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-109">Implement the interface in a provider.</span></span> <span data-ttu-id="acf04-110">A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項 (任何類型的伺服器控制項中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>可用區域)，它就會提供者必須實作第一個步驟中建立的介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="acf04-111">識別回呼方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-111">Identify a callback method.</span></span> <span data-ttu-id="acf04-112">為回呼方法，以建立連線，必須識別提供者中的方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="acf04-113">這個方法會傳回給取用者實作的介面的執行個體。</span><span class="sxs-lookup"><span data-stu-id="acf04-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="acf04-114">識別提供者中的回呼方法的 Web 組件方法是將`ConnectionProvider`中繼資料屬性 (由定義<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別) 來傳回介面執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="acf04-115">加入屬性時，唯一必要的參數時，若要使用的提供者連接點的顯示名稱。</span><span class="sxs-lookup"><span data-stu-id="acf04-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="acf04-116">可以加入選擇性參數也是，例如連接點識別碼。</span><span class="sxs-lookup"><span data-stu-id="acf04-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="acf04-117">控制項已有做為提供者的能力之後，控制項可以參與連線 （假設消費者控制項也有能力且可用）。</span><span class="sxs-lookup"><span data-stu-id="acf04-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="acf04-118">若要建立具有靜態、 宣告式連線的 Web 網頁標記中，開發人員可以使用`<asp:webpartconnection>`項目。</span><span class="sxs-lookup"><span data-stu-id="acf04-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="acf04-119">如果`ConnectionProvider`識別的回呼方法的提供者原始程式碼中的屬性會指定連接點 ID，則該值必須指派給`ProviderConnectionPointID`屬性中`<asp:webpartconnection>`頁面上的項目。</span><span class="sxs-lookup"><span data-stu-id="acf04-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="acf04-120">開發人員可能會指定提供者連接點識別碼的其中一個原因是提供者控制項中是否有多個連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="acf04-121">如果提供者控制項中的提供者連接點不指定的 ID，值就不需要指派給`ProviderConnectionPointID`頁面中，屬性，因為將會建立連線，使用預設值取自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。</span><span class="sxs-lookup"><span data-stu-id="acf04-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="acf04-122">若要在程式碼中建立的連線，開發人員必須建立新<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法並傳遞給它的提供者控制項，以及識別碼或索引的定義識別碼<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>提供者控制項中的物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="acf04-123">傳回<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，提供者控制項的參考以及消費者控制項，和對應的參考<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件，都傳遞給<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法，以建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="acf04-124">雖然開發人員可以使用提供者連接點，以宣告方式或以程式設計方式建立連線的使用者也可以在與提供者連接點，來建立連接，透過使用者介面 (UI) 互動。</span><span class="sxs-lookup"><span data-stu-id="acf04-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="acf04-125">如果開發人員宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在網頁上，它會提供執行階段 UI 建立連線的使用者。</span><span class="sxs-lookup"><span data-stu-id="acf04-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="acf04-126">如果使用者選擇的消費者控制項做為起點來建立連線，依序按一下其連接動詞命令 （他們也可以選擇提供者; 沒有任何差異，在產生的連接），在 UI 中，他們會看到下拉式清單控制項可用的提供者連接點 （或如果有多個點） 的顯示名稱。</span><span class="sxs-lookup"><span data-stu-id="acf04-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="acf04-127">使用者必須選取要建立的連線提供者連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="acf04-128">A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件直接使用特定提供者控制項，將關聯，並將連線的相關詳細資料儲存在它繼承自基底屬性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。</span><span class="sxs-lookup"><span data-stu-id="acf04-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="acf04-129">例如，在繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性，提供者連接點會提供者傳回的介面的型別。</span><span class="sxs-lookup"><span data-stu-id="acf04-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="acf04-130">如果提供者和取用者都使用相同的連接介面型別，這些控制項是相容，而且能夠建立直接連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="acf04-131">如果提供者和取用者無法使用相同的介面型別，它們不相容，而且必須使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>要翻譯的提供者連接點物件<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>至類型，以取用者可以使用的值。</span><span class="sxs-lookup"><span data-stu-id="acf04-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="acf04-132">另一個重要的繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>建立連線時，點屬性，可供使用者選擇的提供者連接 UI 中顯示的易記名稱。</span><span class="sxs-lookup"><span data-stu-id="acf04-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="acf04-133">顯示名稱是必要的參數，當開發人員將`ConnectionProvider`屬性提供者控制項的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="acf04-134">繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性也很有用，如上述，因為它提供唯一的識別項的提供者連接點，提供者有多個連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="acf04-135">提供者可以有多個<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件定義，並在此情況下，當開發人員將`ConnectionProvider`屬性給方法時，他們應該指定識別碼值來區別每一個連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="acf04-136">其中一個其他值得注意繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性，指出提供者連接點是否可以同時連線至多位取用者。</span><span class="sxs-lookup"><span data-stu-id="acf04-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="acf04-137">這個屬性值`true`預設會針對提供者連接點 (而其預設值為`false`對於消費者連接點)。</span><span class="sxs-lookup"><span data-stu-id="acf04-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="acf04-138"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別會加入數個唯一的方法繼承自成員<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別。</span><span class="sxs-lookup"><span data-stu-id="acf04-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="acf04-139"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會擷取回呼方法會傳回給取用者介面的執行個體。</span><span class="sxs-lookup"><span data-stu-id="acf04-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="acf04-140"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法會擷取屬於現有的連接，其他取用者介面，但不是介面用來建立連線。</span><span class="sxs-lookup"><span data-stu-id="acf04-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf04-141">下列程式碼範例顯示簡單的方法，以宣告方式建立的連線，請以程式設計方式或透過使用者介面，在每個案例中使用的提供者連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="acf04-142">此範例包含四個部分：</span><span class="sxs-lookup"><span data-stu-id="acf04-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="acf04-143">使用者控制項，可讓您變更 Web 組件 頁面上顯示模式。</span><span class="sxs-lookup"><span data-stu-id="acf04-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="acf04-144">來源介面和兩個程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項做為提供者和取用者連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="acf04-145">裝載的所有控制項，並執行程式碼範例的網頁。</span><span class="sxs-lookup"><span data-stu-id="acf04-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="acf04-146">如何執行範例頁面的說明。</span><span class="sxs-lookup"><span data-stu-id="acf04-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="acf04-147">此程式碼範例的第一個部分是可讓使用者變更顯示模式，在網頁上的使用者控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="acf04-148">將以下的原始碼儲存到.ascx 檔，提供檔案名稱指派給`Src`屬性的`Register`這個使用者控制項指示詞，也就是裝載的 Web 網頁的頂端附近。</span><span class="sxs-lookup"><span data-stu-id="acf04-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="acf04-149">For 詳細資料會顯示在此控制項模式和原始碼的描述，請參閱[逐步解說：變更顯示模式，在 Web 組件頁面](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。</span><span class="sxs-lookup"><span data-stu-id="acf04-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="acf04-150">在程式碼範例的第二個部分是介面和控制項的原始程式碼。</span><span class="sxs-lookup"><span data-stu-id="acf04-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="acf04-151">原始程式檔包含一個簡單的介面，名為`IZipCode`。</span><span class="sxs-lookup"><span data-stu-id="acf04-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="acf04-152">另外還有<xref:System.Web.UI.WebControls.WebParts.WebPart>名為類別`ZipCodeWebPart`，實作介面，並做為提供者控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="acf04-153">其`ProvideIZipCode`方法是實作介面的唯一成員的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="acf04-154">此方法只會傳回介面的執行個體。</span><span class="sxs-lookup"><span data-stu-id="acf04-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="acf04-155">請注意，方法標示為`ConnectionProvider`其中繼資料中的屬性。</span><span class="sxs-lookup"><span data-stu-id="acf04-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="acf04-156">這是將方法識別提供者的連接點的回呼方法的機制。</span><span class="sxs-lookup"><span data-stu-id="acf04-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="acf04-157">另<xref:System.Web.UI.WebControls.WebParts.WebPart>類別會命名為`WeatherWebPart`，並作為連線取用者。</span><span class="sxs-lookup"><span data-stu-id="acf04-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="acf04-158">這個類別具有一個名為方法`GetZipCode`所取得的執行個體`IZipCode`從提供者控制項的介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="acf04-159">請注意，這個方法會標示為取用者的連接點方法`ConnectionConsumer`其中繼資料中的屬性。</span><span class="sxs-lookup"><span data-stu-id="acf04-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="acf04-160">這是用來識別的消費者控制項連接點方法的機制。</span><span class="sxs-lookup"><span data-stu-id="acf04-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="acf04-161">若要執行程式碼範例，您必須編譯這個原始程式碼。</span><span class="sxs-lookup"><span data-stu-id="acf04-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="acf04-162">您可以明確編譯它，然後將產生的組件放在您的網站的 Bin 資料夾或全域組件快取。</span><span class="sxs-lookup"><span data-stu-id="acf04-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="acf04-163">或者，您可以將原始程式碼放在您網站的 App_Code 資料夾中，這樣就會在執行階段進行動態編譯。</span><span class="sxs-lookup"><span data-stu-id="acf04-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="acf04-164">此程式碼範例會使用動態編譯。</span><span class="sxs-lookup"><span data-stu-id="acf04-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="acf04-165">如需示範如何編譯的逐步解說，請參閱[逐步解說：開發和使用自訂 Web 伺服器控制項](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。</span><span class="sxs-lookup"><span data-stu-id="acf04-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="acf04-166">在程式碼範例的第三個部分是網頁。</span><span class="sxs-lookup"><span data-stu-id="acf04-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="acf04-167">頁面頂端附近`Register`指示詞來註冊自訂控制項的連接，並可讓使用者變更的使用者控制項的頁面上顯示模式。</span><span class="sxs-lookup"><span data-stu-id="acf04-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="acf04-168">以宣告方式內建立連線本身`<staticconnections>`頁面上的項目。</span><span class="sxs-lookup"><span data-stu-id="acf04-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="acf04-169">這示範了其中一種建立連線，請注意`ProviderConnectionPointID`屬性中`<asp:webpartconnection>`項目。</span><span class="sxs-lookup"><span data-stu-id="acf04-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="acf04-170">您也可以以程式設計的方式; 建立連線這麼做，程式碼位於`Button1_Click`方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="acf04-171">在此情況下，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件已建立，然後傳遞給方法，以建立實際的連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="acf04-172">以宣告方式或以程式設計方式建立連接時，是否一律必須指定連接點的提供者和取用者。</span><span class="sxs-lookup"><span data-stu-id="acf04-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="acf04-173">`Button2_Click`方法存取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件的提供者和取用者，並將部分及其屬性值寫入頁面中的標籤。</span><span class="sxs-lookup"><span data-stu-id="acf04-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="acf04-174">在瀏覽器頁面載入之後，請按一下**連接點的詳細資料** 按鈕。</span><span class="sxs-lookup"><span data-stu-id="acf04-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="acf04-175">建立宣告式的連接中的提供者和消費者連接點的相關資訊會出現。</span><span class="sxs-lookup"><span data-stu-id="acf04-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="acf04-176">接下來，使用**顯示模式**切換至頁面的下拉式清單控制項連接模式。</span><span class="sxs-lookup"><span data-stu-id="acf04-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="acf04-177">上的動詞命令功能表**郵遞區號消費者**<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項 （標題列中的向下箭號表示），按一下連接動詞命令。</span><span class="sxs-lookup"><span data-stu-id="acf04-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="acf04-178">自動建立 UI 出現後，連線`<asp:connectionszone>`網頁中宣告的控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="acf04-179">這可以是另一種建立連線 （透過 UI)，連同稍早所述的宣告式和程式設計方法。</span><span class="sxs-lookup"><span data-stu-id="acf04-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="acf04-180">按一下 **中斷連線**按鈕來終止現有的靜態連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="acf04-181">按一下 **建立提供者的連線**連結。</span><span class="sxs-lookup"><span data-stu-id="acf04-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="acf04-182">UI 現在會顯示列出提供者連接點的顯示名稱的下拉式清單控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="acf04-183">在下拉式清單中，選取 連接點，然後按一下**Connect**完成連線。</span><span class="sxs-lookup"><span data-stu-id="acf04-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="acf04-184">接下來，按一下**中斷連線**一次。</span><span class="sxs-lookup"><span data-stu-id="acf04-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="acf04-185">然後，按一下**動態連接** 按鈕，以程式設計方式建立連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="acf04-186">使用**顯示模式**返回頁面，即可瀏覽模式的控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="acf04-187">按一下 [**連線端點詳細資料**同樣地，一次表示提供者連接點物件的相關詳細資料] 按鈕。</span><span class="sxs-lookup"><span data-stu-id="acf04-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="acf04-188">此範例已示範建立連線，並使用三種方式的提供者連接點： 在網頁標記中，宣告為靜態連接使用程式碼中建立的連線<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，以及透過連接 UI 的使用者所建立的連線。</span><span class="sxs-lookup"><span data-stu-id="acf04-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="acf04-189">ASP.NET Web 組件頁面</span><span class="sxs-lookup"><span data-stu-id="acf04-189">ASP.NET Web Parts Pages</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b"><span data-ttu-id="acf04-190">Web 組件連線概觀</span><span class="sxs-lookup"><span data-stu-id="acf04-190">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="acf04-191">提供者控制項中的方法，傳回介面執行個體至消費者以建立連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-191">The method in the provider control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="acf04-192">提供者為消費者所提供之介面的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-192">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span></span></param>
        <param name="controlType"><span data-ttu-id="acf04-193">與提供者連接點關聯之提供者控制項的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-193">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="acf04-194">提供者連接點的易記顯示名稱，在連接使用者介面 (UI) 中向使用者顯示。</span><span class="sxs-lookup"><span data-stu-id="acf04-194">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="acf04-195">提供者連接點的唯一識別項。</span><span class="sxs-lookup"><span data-stu-id="acf04-195">A unique identifier for the provider connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="acf04-196">布林值，指出提供者連接點是否可以同時連接到多個消費者。</span><span class="sxs-lookup"><span data-stu-id="acf04-196">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span></span></param>
        <summary><span data-ttu-id="acf04-197">初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="acf04-197">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf04-198"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>建構函式<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別只會呼叫基底建構函式，將各種不同的參數傳遞給它，並初始化基底類別。</span><span class="sxs-lookup"><span data-stu-id="acf04-198">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="acf04-199">基底類別建構函式會檢查幾個連接點的參數，並可能會擲回的幾個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf04-199">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="acf04-200">如需可能例外狀況的清單，請參閱例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf04-200">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="acf04-201">您可以呼叫<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>建構函式來建立您自己的執行個體<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別。</span><span class="sxs-lookup"><span data-stu-id="acf04-201">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="acf04-202">不過，在您可在此是只建立連線，且不擴充類別的情況下，您應該呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法，以從提供者傳回現有的連接點物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-202">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf04-203">下列程式碼範例示範如何從衍生<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別來建立自訂提供者連接點。</span><span class="sxs-lookup"><span data-stu-id="acf04-203">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="acf04-204">在程式碼範例有三個部分：</span><span class="sxs-lookup"><span data-stu-id="acf04-204">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="acf04-205">包含提供者的原始程式檔<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，消費者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-205">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="acf04-206">在靜態連接控制項裝載的網頁。</span><span class="sxs-lookup"><span data-stu-id="acf04-206">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="acf04-207">如何執行範例程式碼的說明。</span><span class="sxs-lookup"><span data-stu-id="acf04-207">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="acf04-208">在程式碼範例的第一個部分是來源提供者和消費者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項，以及自訂<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別，名為`TableProviderConnectionPoint`。</span><span class="sxs-lookup"><span data-stu-id="acf04-208">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="acf04-209">請注意，建構函式的`TableProviderConnectionPoint`類別會呼叫基底的建構函式，將它傳遞必要的參數，參數區段中所示。</span><span class="sxs-lookup"><span data-stu-id="acf04-209">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="acf04-210">也請注意，在`TableProviderWebPart`類別，`GetConnectionInterface`方法指定為回呼方法，對於連線，而`ConnectionProvider`屬性會宣告自訂`TableProviderConnectionPoint`做為參數。</span><span class="sxs-lookup"><span data-stu-id="acf04-210">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="acf04-211">這示範了如何建立自訂提供者連接點，然後將其關聯提供者控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-211">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="acf04-212">這個範例假設的以動態方式編譯的原始程式碼，因此您應該將原始程式碼檔放在您的 Web 應用程式中的 [App_Code] 子資料夾中。</span><span class="sxs-lookup"><span data-stu-id="acf04-212">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="acf04-213">在程式碼範例的第二個部分是裝載在靜態 Web 組件連接中的自訂控制項的網頁。</span><span class="sxs-lookup"><span data-stu-id="acf04-213">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="acf04-214">在頁面頂端`Register`指示詞來宣告前置詞和自訂控制項的命名空間。</span><span class="sxs-lookup"><span data-stu-id="acf04-214">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="acf04-215">連線宣告可透過`<asp:webpartconnection>`內宣告項目，以及提供者和消費者控制項`<asp:webpartzone>`項目。</span><span class="sxs-lookup"><span data-stu-id="acf04-215">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="acf04-216">將網頁瀏覽器中的載入。</span><span class="sxs-lookup"><span data-stu-id="acf04-216">Load the page in a browser.</span></span> <span data-ttu-id="acf04-217">已在控制項之間的連線存在，並取用者顯示的資料提供者，因為連線已宣告為靜態連接頁面中。</span><span class="sxs-lookup"><span data-stu-id="acf04-217">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="acf04-218"><paramref name="callbackMethod" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-218"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="acf04-219">-或-</span><span class="sxs-lookup"><span data-stu-id="acf04-219">-or-</span></span> 
 <span data-ttu-id="acf04-220"><paramref name="interfaceType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-220"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="acf04-221">-或-</span><span class="sxs-lookup"><span data-stu-id="acf04-221">-or-</span></span> 
 <span data-ttu-id="acf04-222"><paramref name="controlType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-222"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="acf04-223">-或-</span><span class="sxs-lookup"><span data-stu-id="acf04-223">-or-</span></span> 
 <span data-ttu-id="acf04-224"><paramref name="displayName" /> 為 <see langword="null" /> 或空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="acf04-224"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="acf04-225"><paramref name="controlType" /> 與提供者控制項 (或從它衍生的有效類別) 的類型不同。</span><span class="sxs-lookup"><span data-stu-id="acf04-225"><paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="acf04-226">ASP.NET Web 組件頁面</span><span class="sxs-lookup"><span data-stu-id="acf04-226">ASP.NET Web Parts Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="acf04-227">做為 Web 組件連接之提供者的控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-227">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="acf04-228">叫用提供者控制項的回呼方法，取得要傳回至消費者的介面執行個體。</span><span class="sxs-lookup"><span data-stu-id="acf04-228">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span></span></summary>
        <returns><span data-ttu-id="acf04-229"><see cref="T:System.Object" />，為提供者傳回至消費者的介面執行個體，用以建立連接。</span><span class="sxs-lookup"><span data-stu-id="acf04-229">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf04-230">這個方法傳回的物件是用來建立連接的介面的執行個體提供者控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-230">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="acf04-231">物件的型別會實作介面的型別。</span><span class="sxs-lookup"><span data-stu-id="acf04-231">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="acf04-232">例如，兩個介面，實作 Web 組件控制項集合中的連線<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。</span><span class="sxs-lookup"><span data-stu-id="acf04-232">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="acf04-233">當<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>上呼叫方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，如果相關聯的提供者會實作這些介面之一，傳回的物件會屬於相同的型別。</span><span class="sxs-lookup"><span data-stu-id="acf04-233">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="acf04-234"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件正在啟動連線時。</span><span class="sxs-lookup"><span data-stu-id="acf04-234">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="acf04-235">這是實際初始連線，並開始讓共用資料的兩個控制項的程序的重要步驟。</span><span class="sxs-lookup"><span data-stu-id="acf04-235">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="acf04-236">連接之中消費者控制項必須能夠使用相同介面的型別作為提供者。</span><span class="sxs-lookup"><span data-stu-id="acf04-236">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="acf04-237">如果不存在，會不相容的控制項和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來建立連線。</span><span class="sxs-lookup"><span data-stu-id="acf04-237">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="acf04-238"><paramref name="control" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-238"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="acf04-239">做為 Web 組件連接之提供者的控制項。</span><span class="sxs-lookup"><span data-stu-id="acf04-239">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="acf04-240">取得提供者連接點所支援之次要介面的選擇性集合。</span><span class="sxs-lookup"><span data-stu-id="acf04-240">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span></span></summary>
        <returns><span data-ttu-id="acf04-241">做為提供者之控制項所提供之其他介面的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="acf04-241">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf04-242">提供者連接點物件一律有預設介面，用來建立與取用者的連線。</span><span class="sxs-lookup"><span data-stu-id="acf04-242">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="acf04-243">藉由呼叫擷取預設介面的執行個體<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。</span><span class="sxs-lookup"><span data-stu-id="acf04-243">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="acf04-244">不過，某些提供者控制項也會實作多個介面，取用者提供連接的一部分。</span><span class="sxs-lookup"><span data-stu-id="acf04-244">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="acf04-245">這些介面，不是用來建立連接的預設值，稱為次要介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-245">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="acf04-246"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法可用來傳回至次要的介面中，參考的集合，就如同<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法傳回的預設介面的參考。</span><span class="sxs-lookup"><span data-stu-id="acf04-246">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="acf04-247"><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />方法中的<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />類別包含任何實作，則傳回空集合之次要介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-247">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span></span> <span data-ttu-id="acf04-248">若要實作這個方法，您必須繼承自<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />類別，並覆寫這個方法，從它傳回一組特定之次要介面。</span><span class="sxs-lookup"><span data-stu-id="acf04-248">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>