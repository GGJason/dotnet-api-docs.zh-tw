<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c4607d8f3145d7baae6242847fae9c9eaa5ffb0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585128" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定義應用和擷取個人化狀態的其他管理能力。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了使用`Personalizable`屬性上的控制項屬性，控制項也可以實作<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>額外的管理功能的應用程式和個人化狀態的擷取。 例如，需要管理私用狀態資訊的控制項應該實作這個介面。 透過複雜的機制，例如自訂快取的解決方案、 大型主機，或 XML Web 服務的資料持續性存取個人化的資料的控制項也應該實作這個介面。  
  
> [!IMPORTANT]
>  您不應該將 App_Code 目錄中定義的類別為基礎的類型，並再依存於預設的二進位序列化機制。 因為，且可各自擁有其時間變更隨機時間點的組件名稱不一致的二進位序列化 App_Code 為基礎的成品。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>介面。 此範例包含參考名為 Web 組件控制項的.aspx 網頁`UrlListWebPart`。 下列程式碼是此範例的.aspx 檔案。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 下列程式碼是自訂的來源<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 這個檔案應該置於 App_Code 目錄中。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 載入瀏覽器中。 輸入的名稱表示 URL，然後將實際 URL 開頭`http://`，按一下**新增**按鈕即可加入 URL。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示控制項管理的自訂資料是否已變更。</summary>
        <value>如果由 <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> 介面管理的自訂資料已變更，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受控制的資料已變更，當控制項被視為 「 有所變更 」。 控制項應傳回`true`如果自訂資料，就會管理透過<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>介面已經變更。 當控制項傳回`true`從這個屬性，此控制項的<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>屬性值擷取期間會呼叫介面方法實作。  
  
> [!NOTE]
>  這個屬性會自動檢查個人化基礎結構處理 POST 要求的第二個階段。 不過，GET 要求傳回的值從<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>不會檢查屬性。 其他事件必須使控制項才會被視為 「 有所變更 」 的任何控制項的狀態--不只是資料管理的<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>-儲存。 如果控制項可以將本身為 「 中途 」 GET 要求期間或在某些特定界限的情況下的個人化基礎結構會考慮控制項 「 有所變更 」 期間 GET 要求，然後如果<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>一律進行呼叫。  
  
 控制項可以參考其相關聯<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制，並檢查<xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A>屬性來判斷目前的範圍。 控制項的自訂資料的 「 有所變更 」 狀態應該要適用於目前的範圍。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>屬性。 此範例的第一個部分是主控網頁<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 此範例的第二個部分是自訂的程式碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項稱為`UrlListWebPart`。 這個檔案應該置於 App_Code 目錄来執行此範例。 請注意，原始碼實作<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>屬性。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 載入瀏覽器中。 輸入的名稱表示 URL，然後將實際 URL 開頭`http://`，按一下**新增**按鈕即可加入 URL。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />，包含從基礎資料存放區載入的自訂範圍資料。</param>
        <summary>將自訂資料載入至控制項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允許以將其載入自訂資料本身的控制項上呼叫此方法。 它也可以傳回值，指出是否將控制項的自訂狀態必須重新寫入至基礎資料存放區，不論是否變更過的頁面上的其他個人化資料。 控制項可以設定自己的自訂屬性，以及執行其他內部邏輯，根據個人化字典中所包含的值。 這個方法會呼叫設定套用至控制項的個人化資料時的 Web 組件控制項。  
  
 您也應該知道的合併行為<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-範圍與<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>-範圍中所包含的屬性<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>物件。 `state`參數包含合併從基礎資料存放區載入的自訂資料表示法。 在<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>的範圍，請頁面本身已中時，先前加入的所有值<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>都範圍，就可以使用。 中<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>的範圍，請與關聯的值如果<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>個人化範圍已加入網頁中時的一個值<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>範圍，以及不同的值中的頁面時<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>範圍，則會在個人化基礎結構只包含<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-範圍值 (與<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>範圍值) 內`state`參數。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>中自訂方法<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 若要執行此範例所需的完整程式碼，請參閱 < 範例 > 一節<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>類別概觀。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />，包含從基礎資料存放區載入的自訂範圍資料。</param>
        <summary>將自訂屬性和內部狀態資料儲存在控制項的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> 物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 伺服器控制項可以儲存它自己的自訂屬性以及內部狀態資訊<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>中所指定`state`參數。 資訊會儲存為一系列的名稱/值組。 使用期間透過控制項所進行的後續呼叫，它可辨識的名稱/值組的控制項負責<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>方法。  
  
 控制項可以參考其相關聯<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制，並檢查<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>物件來判斷目前的範圍。 自訂狀態資訊應該要適用於目前的範圍。 請注意，每個<xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry>值加入至<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>物件應該是適當的範圍內的值，與相關聯，因為個人化基礎結構在合併時，要取決於這<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>和<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-範圍自訂資料之前將其傳遞至<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>方法。  
  
 當使用標準 ASP.NET 實作的 Web 組件，控制項必須確保狀態字典中的物件可以由 ASP.NET<xref:System.Web.UI.ObjectStateFormatter>類別。 在實務上，這表示下列各項：  
  
-   基本的.NET Framework 類型、 字串和集合導向.NET Framework 類型，例如陣列、 陣列清單、 雜湊表和 hybrid 字典時，會自動序列化。  
  
-   提供自己的自訂型別<xref:System.ComponentModel.TypeConverter>能夠以序列化和還原序列化字串類別會視為可序列化。  
  
-   可序列化的自訂型別<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>類別會被視為可序列化。  
  
> [!IMPORTANT]
>  您不應該將 App_Code 目錄中定義的類別為基礎的類型，並再依存於預設的二進位序列化機制。 因為，且可各自擁有其時間變更隨機時間點的組件名稱不一致的二進位序列化 App_Code 為基礎的成品。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>中自訂方法<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項。 若要執行此範例所需的完整程式碼，請參閱 < 範例 > 一節<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>類別概觀。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>