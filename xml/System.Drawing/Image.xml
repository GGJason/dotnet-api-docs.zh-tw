<Type Name="Image" FullName="System.Drawing.Image">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39e462697b994994f65a8d2433d98a35691fb92b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Image : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Image extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Image" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Image&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Image abstract : MarshalByRefObject, ICloneable, IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ImmutableObject(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ImageConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供功能給 <see cref="T:System.Drawing.Bitmap" /> 和 <see cref="T:System.Drawing.Imaging.Metafile" /> 子代類別的抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要繪製<xref:System.Drawing.Image>Windows 在表單上，您應該使用其中一個<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例被設計用於搭配 Windows Form 中。 是的處理常式<xref:System.Windows.Forms.Control.Paint>事件。 A<xref:System.Drawing.Graphics>物件傳遞給事件，以及用來在表單上繪製影像。 該程式碼執行下列動作：  
  
-   從名為 SampImag.jpg 檔案建立映像。 這個檔案必須位於與應用程式可執行檔相同的資料夾。  
  
-   建立要繪製影像的左上角的點。  
  
-   在表單上繪製無縮放的影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#55)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立這個 <see cref="T:System.Drawing.Image" /> 的完全相同複本。</summary>
        <returns>這個方法所建立的 <see cref="T:System.Drawing.Image" />，其轉型為物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放此 <see cref="T:System.Drawing.Image" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.Image.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.Image>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.Image> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放此 <see cref="T:System.Drawing.Image" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Drawing.Image.Dispose%2A>方法可讓所使用的資源<xref:System.Drawing.Image>都重新配置用於其他用途。  
  
 <xref:System.Drawing.Image.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Drawing.Image>。 <xref:System.Drawing.Image.Dispose%2A> 方法會將 <xref:System.Drawing.Image> 保留在無法使用的狀態。 在呼叫<xref:System.Drawing.Image.Dispose%2A>，您必須釋放所有參考<xref:System.Drawing.Image>讓記憶體回收行程可以回收記憶體的<xref:System.Drawing.Image>所佔用。 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.Image.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.Image>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.Image> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Drawing.Image" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.Image.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.Image>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.Image> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Image ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Image ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public int Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Flags" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Flags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Flags As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Flags { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 之像素資料的屬性旗標。</summary>
        <value>整數，表示這個 <see cref="T:System.Drawing.Imaging.ImageFlags" /> 之 <see cref="T:System.Drawing.Image" /> 的位元組合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從這個方法傳回的整數值會對應至的總和<xref:System.Drawing.Imaging.ImageFlags>下, 表中所述。  
  
|ImageFlag 值|整數表示法|  
|---------------------|----------------------------|  
|`ImageFlagsNone`|0|  
|`ImageFlagsScalable`|1|  
|`ImageFlagsHasAlpha`|2|  
|`ImageFlagsHasTranslucent`|4|  
|`ImageFlagsPartiallyScalable`|8|  
|`ImageFlagsColorSpaceRGB`|16|  
|`ImageFlagsColorSpaceCMYK`|32|  
|`ImageFlagsColorSpaceGRAY`|64|  
|`ImageFlagsColorSpaceYCBCR`|128|  
|`ImageFlagsColorSpaceYCCK`|256|  
|`ImageFlagsHasRealDPI`|4096|  
|`ImageFlagsHasRealPixelSize`|8192|  
|`ImageFlagsReadOnly`|65536|  
|`ImageFlagsCaching`|131072|  
  
 例如，如果<xref:System.Drawing.Image.Flags%2A>映像的屬性傳回 77960，<xref:System.Drawing.Imaging.ImageFlags>映像會是<xref:System.Drawing.Imaging.ImageFlags.ReadOnly>， <xref:System.Drawing.Imaging.ImageFlags.HasRealDpi>， <xref:System.Drawing.Imaging.ImageFlags.HasRealPixelSize>， <xref:System.Drawing.Imaging.ImageFlags.ColorSpaceYcbcr>，和<xref:System.Drawing.Imaging.ImageFlags.PartiallyScalable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameDimensionsList">
      <MemberSignature Language="C#" Value="public Guid[] FrameDimensionsList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid[] FrameDimensionsList" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.FrameDimensionsList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FrameDimensionsList As Guid()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Guid&gt; ^ FrameDimensionsList { cli::array &lt;Guid&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 GUID 的陣列，表示這個 <see cref="T:System.Drawing.Image" /> 中的框架 (Frame) 維度 (Dimension)。</summary>
        <value>GUID 的陣列，指定這個 <see cref="T:System.Drawing.Image" /> 中從最大顯著性到最小顯著性的框架維度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回多重框架影像，有兩種樣式的相關資訊： 多個網頁和多個解決方式。  
  
 多頁影像是包含多個映像。 每個頁面包含單一的 「 影像 」 （或稱 「 框架 」）。 通常，這些頁面 （或映像或框架） 會顯示在連續以產生動畫的順序，例如動畫的.gif 檔案。  
  
 多個高解析度影像是影像的包含多個複本不同解析度。 這通常會使用其中顯示的影像的大小會決定用於繪製影像的解析度 MIP 對應方式。 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 可支援任意數目的頁面 （或映像或框架），以及任意數量的解決方式。 定義的維度是屬性<xref:System.Drawing.Imaging.FrameDimension>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromFile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的檔案建立 <see cref="T:System.Drawing.Image" /> 物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image FromFile (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image FromFile(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFile (filename As String) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ FromFile(System::String ^ filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">字串，包含從其中建立 <see cref="T:System.Drawing.Image" /> 之檔案的名稱。</param>
        <summary>從指定的檔案建立 <see cref="T:System.Drawing.Image" /> 物件。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Image" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed GDI + 具有內建編碼器和解碼器支援下列檔案類型：  
  
-   BMP  
  
-   GIF  
  
-   JPEG  
  
-   PNG  
  
-   TIFF  
  
 檔案仍會鎖定，直到<xref:System.Drawing.Image>處置。  
  
 如果檔案沒有有效的影像格式或者[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]不支援的像素格式的檔案，這個方法會擲回<xref:System.OutOfMemoryException>例外狀況。  
  
> [!NOTE]
>  <xref:System.Drawing.Image>類別不支援 alpha 透明點陣圖中。 若要啟用 alpha 透明，使用每像素 32 位元中的 PNG 影像。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Image.FromFile%2A><xref:System.Drawing.Image.GetPropertyItem%2A>和<xref:System.Drawing.Image.SetPropertyItem%2A>方法。 這個範例被為了搭配 Windows Form。 若要執行此範例中，將它貼到表單，並處理表單的<xref:System.Windows.Forms.Control.Paint>藉由呼叫事件`DemonstratePropertyItem`方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.ImageExample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ImageExample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ImageExample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">檔案沒有有效的影像格式。  
  
 -或-  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 不支援檔案的像素格式。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定的檔案不存在。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="filename" /> 為 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image FromFile (string filename, bool useEmbeddedColorManagement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image FromFile(string filename, bool useEmbeddedColorManagement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromFile(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFile (filename As String, useEmbeddedColorManagement As Boolean) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ FromFile(System::String ^ filename, bool useEmbeddedColorManagement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="useEmbeddedColorManagement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filename">字串，包含從其中建立 <see cref="T:System.Drawing.Image" /> 之檔案的名稱。</param>
        <param name="useEmbeddedColorManagement">若要使用內嵌在影像檔的色彩管理資訊，則設定為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>使用指定之檔案中的內嵌色彩管理資訊，從該檔案建立 <see cref="T:System.Drawing.Image" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Image" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed GDI + 具有內建編碼器和解碼器支援下列檔案類型：  
  
-   BMP  
  
-   GIF  
  
-   JPEG  
  
-   PNG  
  
-   TIFF  
  
 如果檔案沒有有效的影像格式或者[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]不支援的像素格式的檔案，這個方法會擲回<xref:System.OutOfMemoryException>例外狀況。  
  
 檔案仍會鎖定，直到<xref:System.Drawing.Image>處置。  
  
 `useEmbeddedColorManagement`參數會指定是否新<xref:System.Drawing.Image>套用色彩修正根據映像檔中內嵌的色彩管理資訊。 國際色彩協會 」 (ICC) 設定檔、 gamma 值及色度資訊，可以包含內嵌的資訊。  
  
> [!NOTE]
>  <xref:System.Drawing.Image>類別不支援 alpha 透明點陣圖中。 若要啟用 alpha 透明，使用每像素 32 位元中的 PNG 影像。  
  
   
  
## Examples  
 下列程式碼範例示範如何取得新的點陣圖使用<xref:System.Drawing.Image.FromFile%2A>方法。 它也會示範<xref:System.Drawing.TextureBrush>。  
  
 這個範例被為了搭配 Windows Form。 建立包含名為按鈕的表單`Button2`。 程式碼貼到表單，並將關聯`Button2_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.ImageExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ImageExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ImageExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">檔案沒有有效的影像格式。  
  
 -或-  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 不支援檔案的像素格式。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定的檔案不存在。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="filename" /> 為 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHbitmap">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從 Windows 控制代碼建立 <see cref="T:System.Drawing.Bitmap" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHbitmap">
      <MemberSignature Language="C#" Value="public static System.Drawing.Bitmap FromHbitmap (IntPtr hbitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Bitmap FromHbitmap(native int hbitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromHbitmap(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHbitmap (hbitmap As IntPtr) As Bitmap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Bitmap ^ FromHbitmap(IntPtr hbitmap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hbitmap" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hbitmap">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 點陣圖控制代碼，從其中建立 <see cref="T:System.Drawing.Bitmap" />。</param>
        <summary>從 GDI 點陣圖控制代碼建立 <see cref="T:System.Drawing.Bitmap" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Bitmap" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image.FromHbitmap%2A>方法會建立一份[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]點陣圖; 因此您可以釋放傳入[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]點陣圖使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]`DeleteObject`方法之後立即建立新<xref:System.Drawing.Image>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHbitmap">
      <MemberSignature Language="C#" Value="public static System.Drawing.Bitmap FromHbitmap (IntPtr hbitmap, IntPtr hpalette);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Bitmap FromHbitmap(native int hbitmap, native int hpalette) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromHbitmap(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHbitmap (hbitmap As IntPtr, hpalette As IntPtr) As Bitmap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Bitmap ^ FromHbitmap(IntPtr hbitmap, IntPtr hpalette);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hbitmap" Type="System.IntPtr" />
        <Parameter Name="hpalette" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hbitmap">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 點陣圖控制代碼，從其中建立 <see cref="T:System.Drawing.Bitmap" />。</param>
        <param name="hpalette">如果在 <c>hBitmap</c> 參數中指定的點陣圖不是與裝置無關的點陣圖 (DIB)，則會使用 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 調色盤控制代碼定義點陣圖色彩。</param>
        <summary>從 GDI 點陣圖控制代碼和 GDI 調色盤控制代碼建立 <see cref="T:System.Drawing.Bitmap" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Bitmap" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image.FromHbitmap%2A>方法會建立一份[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]點陣圖; 因此您可以釋放傳入[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]點陣圖使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]`DeleteObject`方法之後立即建立新<xref:System.Drawing.Image>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromStream">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的資料流建立 <see cref="T:System.Drawing.Image" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image FromStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image FromStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ FromStream(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，包含這個 <see cref="T:System.Drawing.Image" /> 的資料。</param>
        <summary>從指定的資料流建立 <see cref="T:System.Drawing.Image" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Image" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須維持資料流開啟的存留期<xref:System.Drawing.Image>。  
  
 資料流是重設為零，如果相同的資料流的連續呼叫此方法。  
  
> [!NOTE]
>  <xref:System.Drawing.Image>類別不支援 alpha 透明點陣圖中。 若要啟用 alpha 透明，使用每像素 32 位元中的 PNG 影像。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">資料流沒有有效的影像格式  
  
 -或-  
  
 <paramref name="stream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image FromStream (System.IO.Stream stream, bool useEmbeddedColorManagement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image FromStream(class System.IO.Stream stream, bool useEmbeddedColorManagement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromStream(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ FromStream(System::IO::Stream ^ stream, bool useEmbeddedColorManagement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="useEmbeddedColorManagement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，包含這個 <see cref="T:System.Drawing.Image" /> 的資料。</param>
        <param name="useEmbeddedColorManagement">
          <see langword="true" /> 表示使用內嵌在資料流的色彩管理資訊，否則為 <see langword="false" />。</param>
        <summary>選擇性地使用指定之資料流中的內嵌色彩管理資訊，從該資料流建立 <see cref="T:System.Drawing.Image" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Image" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須維持資料流開啟的存留期<xref:System.Drawing.Image>。  
  
 `useEmbeddedColorManagement`參數會指定是否新<xref:System.Drawing.Image>套用色彩修正根據內嵌資料流中的色彩管理資訊。 國際色彩協會 」 (ICC) 設定檔、 gamma 值及色度資訊，可以包含內嵌的資訊。  
  
 資料流是重設為零，如果相同的資料流的連續呼叫此方法。  
  
> [!NOTE]
>  <xref:System.Drawing.Image>類別不支援 alpha 透明點陣圖中。 若要啟用 alpha 透明，使用每像素 32 位元中的 PNG 影像。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">資料流沒有有效的影像格式  
  
 -或-  
  
 <paramref name="stream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image FromStream (System.IO.Stream stream, bool useEmbeddedColorManagement, bool validateImageData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image FromStream(class System.IO.Stream stream, bool useEmbeddedColorManagement, bool validateImageData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.FromStream(System.IO.Stream,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ FromStream(System::IO::Stream ^ stream, bool useEmbeddedColorManagement, bool validateImageData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="useEmbeddedColorManagement" Type="System.Boolean" />
        <Parameter Name="validateImageData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，包含這個 <see cref="T:System.Drawing.Image" /> 的資料。</param>
        <param name="useEmbeddedColorManagement">
          <see langword="true" /> 表示使用內嵌在資料流的色彩管理資訊，否則為 <see langword="false" />。</param>
        <param name="validateImageData">
          <see langword="true" /> 表示驗證影像資料，否則為 <see langword="false" />。</param>
        <summary>選擇性地使用内嵌色彩管理資訊並驗證影像資料，從指定的資料流建立 <see cref="T:System.Drawing.Image" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Image" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `useEmbeddedColorManagement`參數會指定是否新<xref:System.Drawing.Image>套用色彩修正根據內嵌資料流中的色彩管理資訊。 國際色彩協會 」 (ICC) 設定檔、 gamma 值及色度資訊，可以包含內嵌的資訊。  
  
> [!NOTE]
>  <xref:System.Drawing.Image>類別不支援 alpha 透明點陣圖中。 若要啟用 alpha 透明，使用每像素 32 位元中的 PNG 影像。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">資料流沒有有效的影像格式。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetBounds (ref System.Drawing.GraphicsUnit pageUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetBounds(valuetype System.Drawing.GraphicsUnit&amp; pageUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetBounds(System.Drawing.GraphicsUnit@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBounds (ByRef pageUnit As GraphicsUnit) As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::RectangleF GetBounds(System::Drawing::GraphicsUnit % pageUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageUnit" Type="System.Drawing.GraphicsUnit&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pageUnit">其中一個 <see cref="T:System.Drawing.GraphicsUnit" /> 值，指示周框的測量單位。</param>
        <summary>取得使用指定單位之影像的界限。</summary>
        <returns>
          <see cref="T:System.Drawing.RectangleF" />，表示影像的界限 (使用指定的單位)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何載入點陣圖，以從<xref:System.Drawing.Icon>處理，請使用<xref:System.Drawing.GraphicsUnit>列舉型別，以及如何使用<xref:System.Drawing.Rectangle.Round%2A>繪製點陣圖的矩形界限的方法。  
  
 這個範例被為了搭配 Windows Form。 建立表單，其中包含名為按鈕`Button2`。 程式碼貼入表單，並將這個方法與按鈕產生關聯<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.BitmapMembers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.BitmapMembers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CS/form1.cs#1)]
 [!code-vb[System.Drawing.BitmapMembers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BitmapMembers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncoderParameterList">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.EncoderParameters GetEncoderParameterList (Guid encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Imaging.EncoderParameters GetEncoderParameterList(valuetype System.Guid encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetEncoderParameterList(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEncoderParameterList (encoder As Guid) As EncoderParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Imaging::EncoderParameters ^ GetEncoderParameterList(Guid encoder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.EncoderParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="encoder">指定影像編碼器的 GUID。</param>
        <summary>傳回指定的影像編碼器支援的參數資訊。</summary>
        <returns>
          <see cref="T:System.Drawing.Imaging.EncoderParameters" />，包含 <see cref="T:System.Drawing.Imaging.EncoderParameter" /> 物件的陣列。 每個 <see cref="T:System.Drawing.Imaging.EncoderParameter" /> 包含與指定的影像編碼器支援之其中一個參數有關的資訊。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFrameCount">
      <MemberSignature Language="C#" Value="public int GetFrameCount (System.Drawing.Imaging.FrameDimension dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFrameCount(class System.Drawing.Imaging.FrameDimension dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetFrameCount(System.Drawing.Imaging.FrameDimension)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFrameCount (dimension As FrameDimension) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFrameCount(System::Drawing::Imaging::FrameDimension ^ dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Drawing.Imaging.FrameDimension" />
      </Parameters>
      <Docs>
        <param name="dimension">
          <see cref="T:System.Drawing.Imaging.FrameDimension" />，指定維度型別的識別 (Identity)。</param>
        <summary>傳回指定維度的框架數。</summary>
        <returns>指定維度中的框架數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回多重框架影像，有兩種樣式的相關資訊： 多個網頁和多個解決方式。  
  
 多頁影像是包含多個映像。 每個頁面包含單一的 「 影像 」 （或稱 「 框架 」）。 通常，這些頁面 （或映像或框架） 會顯示在連續以產生動畫的順序，例如動畫的.gif 檔案。  
  
 多個高解析度影像是影像的包含多個複本不同解析度。 這通常會使用其中顯示的影像的大小會決定用於繪製影像的解析度 MIP 對應方式。 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 可支援任意數目的頁面 （或映像或框架），以及任意數量的解決方式。 定義的維度是屬性<xref:System.Drawing.Imaging.FrameDimension>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixelFormatSize">
      <MemberSignature Language="C#" Value="public static int GetPixelFormatSize (System.Drawing.Imaging.PixelFormat pixfmt);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetPixelFormatSize(valuetype System.Drawing.Imaging.PixelFormat pixfmt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetPixelFormatSize(System.Drawing.Imaging.PixelFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPixelFormatSize (pixfmt As PixelFormat) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetPixelFormatSize(System::Drawing::Imaging::PixelFormat pixfmt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixfmt" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="pixfmt">
          <see cref="T:System.Drawing.Imaging.PixelFormat" /> 成員，指定用來尋找大小的格式。</param>
        <summary>傳回指定之像素格式的色彩深度 (單位為每像素的位元數)。</summary>
        <returns>指定像素格式的色彩深度。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyItem">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.PropertyItem GetPropertyItem (int propid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Imaging.PropertyItem GetPropertyItem(int32 propid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetPropertyItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyItem (propid As Integer) As PropertyItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Imaging::PropertyItem ^ GetPropertyItem(int propid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.PropertyItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propid">要取得的屬性項目 ID。</param>
        <summary>從這個 <see cref="T:System.Drawing.Image" /> 取得指定的屬性項目。</summary>
        <returns>這個方法所取得的 <see cref="T:System.Drawing.Imaging.PropertyItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需屬性的項目 Id 與連結的詳細資訊，請參閱<xref:System.Drawing.Imaging.PropertyItem.Id%2A>。  
  
 因為很難設定屬性項目，<xref:System.Drawing.Imaging.PropertyItem>類別具有沒有公用建構函式。 若要解決這項限制的一種方式為取得<xref:System.Drawing.Imaging.PropertyItem>藉由擷取<xref:System.Drawing.Image.PropertyItems%2A>屬性值或呼叫<xref:System.Drawing.Image.GetPropertyItem%2A>方法<xref:System.Drawing.Image>已有此屬性項目。 然後您可以設定的欄位<xref:System.Drawing.Imaging.PropertyItem>並將它傳遞給<xref:System.Drawing.Image.SetPropertyItem%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Image.GetPropertyItem%2A>和<xref:System.Drawing.Image.SetPropertyItem%2A>方法。 這個範例會呼叫<xref:System.Drawing.Image.GetPropertyItem%2A>傳遞的識別碼值。 針對 ID 的清單值，請參閱<xref:System.Drawing.Imaging.PropertyItem.Id%2A>。 這個範例被為了搭配 Windows Form。 若要執行此範例中，將它貼到表單，並處理表單的<xref:System.Windows.Forms.Control.Paint>藉由呼叫事件`DemonstratePropertyItem`方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.ImageExample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ImageExample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ImageExample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此影像的影像格式不支援屬性項目。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetThumbnailImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetThumbnailImage (int thumbWidth, int thumbHeight, System.Drawing.Image.GetThumbnailImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetThumbnailImage(int32 thumbWidth, int32 thumbHeight, class System.Drawing.Image/GetThumbnailImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetThumbnailImage (thumbWidth As Integer, thumbHeight As Integer, callback As Image.GetThumbnailImageAbort, callbackData As IntPtr) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetThumbnailImage(int thumbWidth, int thumbHeight, System::Drawing::Image::GetThumbnailImageAbort ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbWidth" Type="System.Int32" />
        <Parameter Name="thumbHeight" Type="System.Int32" />
        <Parameter Name="callback" Type="System.Drawing.Image+GetThumbnailImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="thumbWidth">要求的縮圖影像的寬度 (單位為像素)。</param>
        <param name="thumbHeight">要求的縮圖影像的高度 (單位為像素)。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" /> 委派 (Delegate)。  
  
 **注意**：您必須建立委派，並將委派的參考當作 <c>callback</c> 參數傳遞，而不使用該委派。</param>
        <param name="callbackData">必須是 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>傳回這個 <see cref="T:System.Drawing.Image" /> 的縮圖。</summary>
        <returns>
          <see cref="T:System.Drawing.Image" />，表示縮圖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Drawing.Image>包含內嵌縮圖影像，這個方法會擷取內嵌縮圖和縮放為要求的大小。 如果<xref:System.Drawing.Image>不包含內嵌的縮圖影像，這個方法會藉由調整主要映像建立縮圖影像。  
  
 <xref:System.Drawing.Image.GetThumbnailImage%2A>方法非常適合要求的縮圖影像時有大約 120x120 像素為單位的大小。 如果您要從要求的大型縮圖影像 (例如，300 x 300)<xref:System.Drawing.Image>包含內嵌的縮圖，可能會明顯遺失中的縮圖影像品質。 可能是較好的方式調整的主要映像 （而不是調整內嵌縮圖），藉由呼叫<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會建立，並顯示縮圖影像。 絕不會呼叫這個委派。  
  
 [!code-csharp[System.Drawing.Misc3#GetThumbnail](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#getthumbnail)]
 [!code-vb[System.Drawing.Misc3#GetThumbnail](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#getthumbnail)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的高度 (單位為像素)。</summary>
        <value>這個 <see cref="T:System.Drawing.Image" /> 的高度 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建構新的點陣圖檔案，從使用<xref:System.Drawing.Bitmap.GetPixel%2A>和<xref:System.Drawing.Bitmap.SetPixel%2A>方法，以將影像重新著色。 它也會使用<xref:System.Drawing.Image.PixelFormat%2A>和<xref:System.Drawing.Image.Height%2A>屬性。  
  
 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.Label>， <xref:System.Windows.Forms.PictureBox>，和<xref:System.Windows.Forms.Button>名為`Label1`， `PictureBox1`，和`Button1`分別。 程式碼貼到表單，並將關聯`Button1_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.ImageExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ImageExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ImageExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalResolution">
      <MemberSignature Language="C#" Value="public float HorizontalResolution { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HorizontalResolution" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.HorizontalResolution" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HorizontalResolution As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float HorizontalResolution { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的水平解析度 (單位為每英吋的像素)。</summary>
        <value>這個 <see cref="T:System.Drawing.Image" /> 的水平解析度 (單位為每英吋的像素)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAlphaPixelFormat">
      <MemberSignature Language="C#" Value="public static bool IsAlphaPixelFormat (System.Drawing.Imaging.PixelFormat pixfmt);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAlphaPixelFormat(valuetype System.Drawing.Imaging.PixelFormat pixfmt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAlphaPixelFormat (pixfmt As PixelFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAlphaPixelFormat(System::Drawing::Imaging::PixelFormat pixfmt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixfmt" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="pixfmt">要測試的 <see cref="T:System.Drawing.Imaging.PixelFormat" />。</param>
        <summary>傳回值，指示這個 <see cref="T:System.Drawing.Image" /> 的像素格式是否包含 Alpha 資訊。</summary>
        <returns>
          如果 <paramref name="pixfmt" /> 包含 Alpha 資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCanonicalPixelFormat">
      <MemberSignature Language="C#" Value="public static bool IsCanonicalPixelFormat (System.Drawing.Imaging.PixelFormat pixfmt);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCanonicalPixelFormat(valuetype System.Drawing.Imaging.PixelFormat pixfmt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCanonicalPixelFormat (pixfmt As PixelFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsCanonicalPixelFormat(System::Drawing::Imaging::PixelFormat pixfmt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixfmt" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="pixfmt">要測試的 <see cref="T:System.Drawing.Imaging.PixelFormat" />。</param>
        <summary>傳回值，指示像素格式是否為每像素 32 位元。</summary>
        <returns>
          如果 <paramref name="pixfmt" /> 符合標準，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準的像素格式表示每像素 32 位元的像素格式。 此格式會指定 24 位元色彩深度和 8 位元 alpha 色板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExtendedPixelFormat">
      <MemberSignature Language="C#" Value="public static bool IsExtendedPixelFormat (System.Drawing.Imaging.PixelFormat pixfmt);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExtendedPixelFormat(valuetype System.Drawing.Imaging.PixelFormat pixfmt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsExtendedPixelFormat (pixfmt As PixelFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsExtendedPixelFormat(System::Drawing::Imaging::PixelFormat pixfmt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixfmt" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="pixfmt">要測試的 <see cref="T:System.Drawing.Imaging.PixelFormat" /> 列舉型別。</param>
        <summary>傳回值，指示像素格式是否為每像素 64 位元。</summary>
        <returns>
          如果 <paramref name="pixfmt" /> 是為擴充的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Palette">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.ColorPalette Palette { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Imaging.ColorPalette Palette" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Palette" />
      <MemberSignature Language="VB.NET" Value="Public Property Palette As ColorPalette" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Imaging::ColorPalette ^ Palette { System::Drawing::Imaging::ColorPalette ^ get(); void set(System::Drawing::Imaging::ColorPalette ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.ColorPalette</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用於這個 <see cref="T:System.Drawing.Image" /> 的調色盤。</summary>
        <value>
          <see cref="T:System.Drawing.Imaging.ColorPalette" />，表示用於這個 <see cref="T:System.Drawing.Image" /> 的調色盤。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回一份<xref:System.Drawing.Imaging.ColorPalette>物件所使用<xref:System.Drawing.Image>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PhysicalDimension">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF PhysicalDimension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF PhysicalDimension" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.PhysicalDimension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PhysicalDimension As SizeF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::SizeF PhysicalDimension { System::Drawing::SizeF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個影像的寬度和高度。</summary>
        <value>
          <see cref="T:System.Drawing.SizeF" /> 結構，表示這個 <see cref="T:System.Drawing.Image" /> 的寬度和高度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果影像是點陣圖，高度與寬度會傳回像素為單位。 如果映像中繼檔，高度與寬度會以 0.01 公釐為單位傳回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelFormat">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.PixelFormat PixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Imaging.PixelFormat PixelFormat" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.PixelFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PixelFormat As PixelFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Imaging::PixelFormat PixelFormat { System::Drawing::Imaging::PixelFormat get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.PixelFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的像素格式。</summary>
        <value>
          <see cref="T:System.Drawing.Imaging.PixelFormat" />，表示這個 <see cref="T:System.Drawing.Image" /> 的像素格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建構新的點陣圖檔案，從使用<xref:System.Drawing.Bitmap.GetPixel%2A>和<xref:System.Drawing.Bitmap.SetPixel%2A>方法，以將影像重新著色。 它也會使用<xref:System.Drawing.Image.PixelFormat%2A>屬性。  
  
 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.Label>，<xref:System.Windows.Forms.PictureBox>和<xref:System.Windows.Forms.Button>名為`Label1`， `PictureBox1`，和`Button1`分別。 程式碼貼到表單，並將關聯`Button1_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.ImageExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ImageExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ImageExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyIdList">
      <MemberSignature Language="C#" Value="public int[] PropertyIdList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PropertyIdList" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.PropertyIdList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyIdList As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PropertyIdList { cli::array &lt;int&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得儲存在這個 <see cref="T:System.Drawing.Image" /> 中的屬性項目 ID。</summary>
        <value>屬性 ID 的陣列，存放在這個影像中的每一個屬性項目各有一個 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果影像沒有任何屬性項目，或影像格式不支援屬性項目，<xref:System.Drawing.Image.PropertyIdList%2A>屬性會傳回空陣列 （也就是陣列的長度為零）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyItems">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.PropertyItem[] PropertyItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Imaging.PropertyItem[] PropertyItems" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.PropertyItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyItems As PropertyItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Drawing::Imaging::PropertyItem ^&gt; ^ PropertyItems { cli::array &lt;System::Drawing::Imaging::PropertyItem ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.PropertyItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得儲存在這個 <see cref="T:System.Drawing.Image" /> 中的所有屬性項目 (中繼資料的各個項目)。</summary>
        <value>
          <see cref="T:System.Drawing.Imaging.PropertyItem" /> 物件的陣列，針對影像中存放的每個屬性項目所組成的一個陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果影像沒有任何屬性項目，或影像格式不支援屬性項目，<xref:System.Drawing.Image.PropertyItems%2A>傳回空陣列 （也就是陣列的長度為零）。  
  
   
  
## Examples  
 下列程式碼範例示範如何讀取和顯示中繼資料，在映像檔案使用<xref:System.Drawing.Imaging.PropertyItem?displayProperty=nameWithType>類別和<xref:System.Drawing.Image.PropertyItems%2A>屬性。  
  
 這個範例設計為使用匯入的 Windows Form<xref:System.Drawing.Imaging?displayProperty=nameWithType>命名空間。 程式碼貼入表單，並將路徑變更為`fakePhoto.jpg`以指向您的系統上的影像檔。 呼叫`ExtractMetaData`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.ImageExample#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ImageExample#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ImageExample#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawFormat">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.ImageFormat RawFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Imaging.ImageFormat RawFormat" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.RawFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawFormat As ImageFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Imaging::ImageFormat ^ RawFormat { System::Drawing::Imaging::ImageFormat ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.ImageFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的檔案格式。</summary>
        <value>
          <see cref="T:System.Drawing.Imaging.ImageFormat" />，代表這個 <see cref="T:System.Drawing.Image" /> 的檔案格式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyItem">
      <MemberSignature Language="C#" Value="public void RemovePropertyItem (int propid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyItem(int32 propid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.RemovePropertyItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemovePropertyItem (propid As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemovePropertyItem(int propid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propid">要移除的屬性項目 ID。</param>
        <summary>將指定的屬性項目從這個 <see cref="T:System.Drawing.Image" /> 中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為很難設定屬性項目，<xref:System.Drawing.Imaging.PropertyItem>類別具有沒有公用建構函式。 若要解決這項限制的一種方式為取得<xref:System.Drawing.Imaging.PropertyItem>藉由擷取<xref:System.Drawing.Image.PropertyItems%2A>屬性值或呼叫<xref:System.Drawing.Image.GetPropertyItem%2A>方法<xref:System.Drawing.Image>已有此屬性項目。 然後您可以設定的欄位<xref:System.Drawing.Imaging.PropertyItem>並將它傳遞給<xref:System.Drawing.Image.SetPropertyItem%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">影像不包含要求的屬性項目。  
  
 -或-  
  
 這個影像的影像格式不支援屬性項目。</exception>
      </Docs>
    </Member>
    <Member MemberName="RotateFlip">
      <MemberSignature Language="C#" Value="public void RotateFlip (System.Drawing.RotateFlipType rotateFlipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateFlip(valuetype System.Drawing.RotateFlipType rotateFlipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.RotateFlip(System.Drawing.RotateFlipType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateFlip(System::Drawing::RotateFlipType rotateFlipType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rotateFlipType" Type="System.Drawing.RotateFlipType" />
      </Parameters>
      <Docs>
        <param name="rotateFlipType">
          <see cref="T:System.Drawing.RotateFlipType" /> 成員，指定要套用至影像的旋轉和翻轉類型。</param>
        <summary>旋轉、翻轉或者同時旋轉和翻轉 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image.RotateFlip%2A>方法會旋轉順時針旋轉的映像。  
  
 如果您想要繪製影像上，一旦已旋轉，您應該一律擷取新的圖形物件從映像，否則可能發生例外狀況。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫<xref:System.Drawing.Image.RotateFlip%2A>方法<xref:System.Drawing.Image>和<xref:System.Drawing.RotateFlipType>列舉型別。  
  
 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.PictureBox>名為`PictureBox1`和名為按鈕`Button1`。 程式碼貼到表單中，呼叫`InitializeBitmap`從表單的建構函式，並關聯`Button1_Click`按鈕之<xref:System.Windows.Forms.Control.Click>事件。 確定您的系統上的點陣圖的檔案路徑無效。  
  
 [!code-cpp[System.Drawing.BitmapMembers#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.BitmapMembers#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CS/form1.cs#3)]
 [!code-vb[System.Drawing.BitmapMembers#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BitmapMembers/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個影像以指定的格式儲存至指定的資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">字串，包含要儲存這個 <see cref="T:System.Drawing.Image" /> 之目的檔案的名稱。</param>
        <summary>儲存這個 <see cref="T:System.Drawing.Image" /> 至指定的檔案或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有編碼器存在的映像的檔案格式，則會使用可攜式網路圖形 (PNG) 編碼器。 當您使用<xref:System.Drawing.Image.Save%2A>方法，將圖形影像儲存為 Windows 中繼檔格式 (WMF) 或增強型中繼檔格式 (EMF) 檔案時，所產生的檔案會另存為可攜式網路圖形 (PNG) 檔。 這是因為[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]元件[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]沒有編碼器可讓您將檔案儲存為.wmf 或.emf 檔案。  
  
 不允許將影像儲存至所建構的相同檔案，並擲回例外狀況。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫<xref:System.Drawing.Image.Save%2A>方法。 這個範例被為了搭配 Windows Form。 建立表單，其中包含名為按鈕`Button5`。 程式碼貼到表單，並將方法關聯按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.ImageExample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ImageExample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ImageExample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> 是 <see langword="null." /></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException">使用了錯誤的影像格式儲存影像。  
  
 -或-  
  
 影像已儲存至建立它時所使用的檔案中。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Drawing.Imaging.ImageFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, class System.Drawing.Imaging.ImageFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Drawing::Imaging::ImageFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="format" Type="System.Drawing.Imaging.ImageFormat" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，其中將會儲存影像。</param>
        <param name="format">
          <see cref="T:System.Drawing.Imaging.ImageFormat" />，指定儲存之影像的格式。</param>
        <summary>將這個影像以指定的格式儲存至指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該避免將影像儲存到相同的資料流，用來建構它。 如此一來可能會損害資料流。  
  
 影像必須儲存至零位移處的資料流。 如果任何其他資料寫入資料流儲存映像之前，將會損毀映像中的資料流。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException">使用了錯誤的影像格式儲存影像。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename, System.Drawing.Imaging.ImageFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename, class System.Drawing.Imaging.ImageFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String, format As ImageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename, System::Drawing::Imaging::ImageFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="format" Type="System.Drawing.Imaging.ImageFormat" />
      </Parameters>
      <Docs>
        <param name="filename">字串，包含要儲存這個 <see cref="T:System.Drawing.Image" /> 之目的檔案的名稱。</param>
        <param name="format">這個 <see cref="T:System.Drawing.Imaging.ImageFormat" /> 的 <see cref="T:System.Drawing.Image" />。</param>
        <summary>將這個 <see cref="T:System.Drawing.Image" /> 以指定的格式儲存至指定的檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建構點陣圖，以從型別，以及如何使用<xref:System.Drawing.Image.Save%2A>方法。 若要執行此範例中，貼在 Windows Form 中的程式碼。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件和呼叫`ConstructFromResourceSaveAsGif`方法，傳遞`e`為 <xref:System.Windows.Forms.PaintEventArgs>  
  
 [!code-cpp[System.Drawing.BmpCtorAndSave#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.BmpCtorAndSave#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/CS/form1.cs#1)]
 [!code-vb[System.Drawing.BmpCtorAndSave#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> 或 <paramref name="format" /> 是 <see langword="null." />。</exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException">使用了錯誤的影像格式儲存影像。  
  
 -或-  
  
 影像已儲存至建立它時所使用的檔案中。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, class System.Drawing.Imaging.ImageCodecInfo encoder, class System.Drawing.Imaging.EncoderParameters encoderParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Drawing::Imaging::ImageCodecInfo ^ encoder, System::Drawing::Imaging::EncoderParameters ^ encoderParams);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoder" Type="System.Drawing.Imaging.ImageCodecInfo" />
        <Parameter Name="encoderParams" Type="System.Drawing.Imaging.EncoderParameters" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />，其中將會儲存影像。</param>
        <param name="encoder">這個 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" /> 的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="encoderParams">
          <see cref="T:System.Drawing.Imaging.EncoderParameters" />，指定由影像編碼器使用的參數。</param>
        <summary>使用指定的編碼器和影像編碼器參數，將此影像儲存至指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要儲存至相同的資料流，用於建構映像的映像。 如此一來可能會損害資料流。  
  
 影像必須儲存至零位移處的資料流。 如果任何其他資料寫入資料流儲存映像之前，將會損毀映像中的資料流。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException">使用了錯誤的影像格式儲存影像。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename, class System.Drawing.Imaging.ImageCodecInfo encoder, class System.Drawing.Imaging.EncoderParameters encoderParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String, encoder As ImageCodecInfo, encoderParams As EncoderParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename, System::Drawing::Imaging::ImageCodecInfo ^ encoder, System::Drawing::Imaging::EncoderParameters ^ encoderParams);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="encoder" Type="System.Drawing.Imaging.ImageCodecInfo" />
        <Parameter Name="encoderParams" Type="System.Drawing.Imaging.EncoderParameters" />
      </Parameters>
      <Docs>
        <param name="filename">字串，包含要儲存這個 <see cref="T:System.Drawing.Image" /> 之目的檔案的名稱。</param>
        <param name="encoder">這個 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" /> 的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="encoderParams">要用於這個 <see cref="T:System.Drawing.Imaging.EncoderParameters" /> 的 <see cref="T:System.Drawing.Image" />。</param>
        <summary>使用指定的編碼器和影像編碼器參數，將此 <see cref="T:System.Drawing.Image" /> 儲存至指定的檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不允許將影像儲存至所建構的相同檔案，並擲回例外狀況。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Drawing.Bitmap>BMP 檔案中的物件。 程式碼會將點陣圖儲存至三個 JPEG 檔案，各有不同的品質等級。  
  
 [!code-cpp[System.Drawing.ClassicImagingEndcoder3#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImagingEndcoder3/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicImagingEndcoder3#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImagingEndcoder3/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicImagingEndcoder3#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImagingEndcoder3/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> 或 <paramref name="encoder" /> 是 <see langword="null." />。</exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException">使用了錯誤的影像格式儲存影像。  
  
 -或-  
  
 影像已儲存至建立它時所使用的檔案中。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveAdd">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定之 <see cref="T:System.Drawing.Image" /> 中的資訊加入至這個 <see cref="T:System.Drawing.Image" />。 指定的 <see cref="T:System.Drawing.Imaging.EncoderParameters" /> 會決定新資訊結合到現有影像的方式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveAdd">
      <MemberSignature Language="C#" Value="public void SaveAdd (System.Drawing.Imaging.EncoderParameters encoderParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAdd(class System.Drawing.Imaging.EncoderParameters encoderParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.SaveAdd(System.Drawing.Imaging.EncoderParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAdd (encoderParams As EncoderParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAdd(System::Drawing::Imaging::EncoderParameters ^ encoderParams);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoderParams" Type="System.Drawing.Imaging.EncoderParameters" />
      </Parameters>
      <Docs>
        <param name="encoderParams">
          <see cref="T:System.Drawing.Imaging.EncoderParameters" />，保留儲存 - 加入作業使用的影像編碼器所需的參數。</param>
        <summary>將框架加入至先前的 <see cref="Overload:System.Drawing.Image.Save" /> 方法呼叫所指定的檔案或資料流。 使用這個方法以從多重框架影像儲存選取框架至另一個多重框架影像。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAdd">
      <MemberSignature Language="C#" Value="public void SaveAdd (System.Drawing.Image image, System.Drawing.Imaging.EncoderParameters encoderParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAdd(class System.Drawing.Image image, class System.Drawing.Imaging.EncoderParameters encoderParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.SaveAdd(System.Drawing.Image,System.Drawing.Imaging.EncoderParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAdd(System::Drawing::Image ^ image, System::Drawing::Imaging::EncoderParameters ^ encoderParams);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="encoderParams" Type="System.Drawing.Imaging.EncoderParameters" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" />，包含要加入的框架。</param>
        <param name="encoderParams">
          <see cref="T:System.Drawing.Imaging.EncoderParameters" />，保留儲存 - 加入作業使用的影像編碼器所需的參數。</param>
        <summary>將框架加入至先前的 <see cref="Overload:System.Drawing.Image.Save" /> 方法呼叫所指定的檔案或資料流。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectActiveFrame">
      <MemberSignature Language="C#" Value="public int SelectActiveFrame (System.Drawing.Imaging.FrameDimension dimension, int frameIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SelectActiveFrame(class System.Drawing.Imaging.FrameDimension dimension, int32 frameIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.SelectActiveFrame(System.Drawing.Imaging.FrameDimension,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectActiveFrame (dimension As FrameDimension, frameIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SelectActiveFrame(System::Drawing::Imaging::FrameDimension ^ dimension, int frameIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Drawing.Imaging.FrameDimension" />
        <Parameter Name="frameIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">
          <see cref="T:System.Drawing.Imaging.FrameDimension" />，指定維度型別的識別 (Identity)。</param>
        <param name="frameIndex">作用中框架的索引。</param>
        <summary>選取由維度和索引所指定的框架。</summary>
        <returns>一律傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能值`dimensionID`參數都是屬性的<xref:System.Drawing.Imaging.FrameDimension>。 這些可以用來識別映像的時間、 解析度或頁碼。  
  
 呼叫這個方法會導致對上一個畫面格，捨棄所有變更。 選取另一個畫面格之前, 儲存所有變更對目前的框架，包括變更像素值和屬性。 如果呼叫<xref:System.Drawing.Image.SelectActiveFrame%2A>方法是否成功 （未發生例外狀況），則方法會傳回 0。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyItem">
      <MemberSignature Language="C#" Value="public void SetPropertyItem (System.Drawing.Imaging.PropertyItem propitem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyItem(class System.Drawing.Imaging.PropertyItem propitem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.SetPropertyItem(System.Drawing.Imaging.PropertyItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPropertyItem (propitem As PropertyItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPropertyItem(System::Drawing::Imaging::PropertyItem ^ propitem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propitem" Type="System.Drawing.Imaging.PropertyItem" />
      </Parameters>
      <Docs>
        <param name="propitem">要儲存的 <see cref="T:System.Drawing.Imaging.PropertyItem" />。</param>
        <summary>在這個 <see cref="T:System.Drawing.Image" /> 中儲存屬性項目 (中繼資料的項目)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果映像格式不支援屬性項目，這個方法會擲回<xref:System.ArgumentException>訊息 「 屬性不支援 」。 如果影像格式支援屬性項目，但不支援您嘗試設定的特定屬性，這個方法會忽略該嘗試，但不會擲回例外狀況。  
  
 因為很難設定屬性項目，<xref:System.Drawing.Imaging.PropertyItem>類別具有沒有公用建構函式。 若要解決這項限制的一種方式為取得<xref:System.Drawing.Imaging.PropertyItem>藉由擷取<xref:System.Drawing.Image.PropertyItems%2A>屬性值或呼叫<xref:System.Drawing.Image.GetPropertyItem%2A>方法<xref:System.Drawing.Image>已有此屬性項目。 然後您可以設定的欄位<xref:System.Drawing.Imaging.PropertyItem>並將它傳遞給<xref:System.Drawing.Image.SetPropertyItem%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Image.GetPropertyItem%2A>和<xref:System.Drawing.Image.SetPropertyItem%2A>方法。 這個範例被為了搭配 Windows Form。 若要執行此範例中，將它貼到表單，並處理表單的<xref:System.Windows.Forms.Control.Paint>藉由呼叫事件`DemonstratePropertyItem`方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.ImageExample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ImageExample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ImageExample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此影像的影像格式不支援屬性項目。</exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得影像的寬度和高度，單位為像素。</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> 結構，表示這個影像的寬度和高度 (單位為像素)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Image.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
        <summary>將序列化目標物件所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，該物件提供影像的其他相關資料。</summary>
        <value>提供影像之其他相關資料的 <see cref="T:System.Object" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalResolution">
      <MemberSignature Language="C#" Value="public float VerticalResolution { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VerticalResolution" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.VerticalResolution" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VerticalResolution As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float VerticalResolution { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的垂直解析度 (單位為每英吋的像素)。</summary>
        <value>這個 <see cref="T:System.Drawing.Image" /> 的垂直解析度 (單位為每英吋的像素)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Image.Width" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Image" /> 的寬度 (單位為像素)。</summary>
        <value>這個 <see cref="T:System.Drawing.Image" /> 的寬度 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建構新<xref:System.Drawing.Bitmap>從檔案、 使用<xref:System.Drawing.Bitmap.GetPixel%2A>和<xref:System.Drawing.Bitmap.SetPixel%2A>方法，以將影像重新著色。 它也會使用<xref:System.Drawing.Image.PixelFormat%2A>， <xref:System.Drawing.Image.Width%2A>，和<xref:System.Drawing.Image.Height%2A>屬性。  
  
 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.Label>，<xref:System.Windows.Forms.PictureBox>和<xref:System.Windows.Forms.Button>名為`Label1`，`PictureBox1`和`Button1`分別。 程式碼貼到表單，並將關聯`Button1_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.ImageExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ImageExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ImageExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>