<Type Name="Font" FullName="System.Drawing.Font">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71f6dfb728a4ff8e3675a178340a5096df561f76" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410612" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Font : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Font extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Font" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Font&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Font sealed : MarshalByRefObject, ICloneable, IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義文字的特定格式，包括字體、大小和樣式屬性 (Attribute)。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需如何建構字型的詳細資訊，請參閱[How to： 建構字型系列和字型](~/docs/framework/winforms/advanced/how-to-construct-font-families-and-fonts.md)。 Windows Form 應用程式支援 TrueType 字型，而且具有有限的 OpenType 字型支援。 如果您嘗試使用不支援字型或字型未安裝在執行應用程式的電腦上，將會取代 Microsoft Sans Serif 字型。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>屬性。 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.ComboBox>名為`ComboBox1`，會填入字串 「 大於 」 和 「 小 」 和<xref:System.Windows.Forms.Label>名為`Label1`。 將下列程式碼貼到表單，並將關聯`ComboBox1_SelectedIndexChanged`方法<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控制項。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化使用指定之現有 <see cref="T:System.Drawing.Font" /> 與 <see cref="T:System.Drawing.FontStyle" /> 的新 <see cref="T:System.Drawing.Font" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.Font prototype, System.Drawing.FontStyle newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Font prototype, valuetype System.Drawing.FontStyle newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (prototype As Font, newStyle As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::Font ^ prototype, System::Drawing::FontStyle newStyle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.Drawing.Font" />
        <Parameter Name="newStyle" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="prototype">用來建立新 <see cref="T:System.Drawing.Font" /> 的現有 <see cref="T:System.Drawing.Font" />。</param>
        <param name="newStyle">要套用至新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontStyle" />。 <see cref="T:System.Drawing.FontStyle" /> 列舉的多個值可以與 <see langword="OR" /> 運算子相結合。</param>
        <summary>初始化使用指定之現有 <see cref="T:System.Drawing.Font" /> 與 <see cref="T:System.Drawing.FontStyle" /> 列舉的新 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當地語系化的應用程式為基礎的[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]和舊版本中，指定的字型`prototype`當該字型尚未安裝用來建置您的應用程式的電腦上，將導致要使用的 Microsoft Sans Serif 字型改為。 如果這個行為取決於您的應用程式，您必須重新編譯您的應用程式的.NET Framework 3.0，您應該指定的 Microsoft Sans Serif 字型`prototype`。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Drawing.Color.op_Inequality%2A>運算子，<xref:System.Drawing.Font.%23ctor%2A>建構函式，而<xref:System.Drawing.Font.Bold%2A>屬性。 這個範例為了搭配 Windows Form 包含名為按鈕`Button2`。 將下列程式碼貼到您的表單，並將關聯`Button2_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小 (以點計算)。</param>
        <summary>使用指定的大小，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Style%2A>屬性設定為<xref:System.Drawing.FontStyle.Regular>及其<xref:System.Drawing.Font.Unit%2A>屬性設定為<xref:System.Drawing.GraphicsUnit.Point>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小 (以點計算)。</param>
        <summary>使用指定的大小，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Style%2A>屬性設定為<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>及其<xref:System.Drawing.Font.Unit%2A>屬性設定為<xref:System.Drawing.GraphicsUnit.Point?displayProperty=nameWithType>。 Windows Form 應用程式支援 TrueType 字型，而且具有有限的 OpenType 字型支援。 如果`familyName`參數會指定字型執行應用程式的電腦上未安裝或不支援，Microsoft Sans Serif 取代。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式。 這個範例為了搭配 Windows Form 並需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件。  
  
 [!code-csharp[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#constructfontwithstring)]
 [!code-vb[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#constructfontwithstring)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小 (以點計算)。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <summary>使用指定的大小和樣式，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Unit%2A>屬性設定為<xref:System.Drawing.GraphicsUnit.Point>。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Drawing.Font>屬性的新粗體樣式的按鈕<xref:System.Drawing.Font>。 這個範例為了搭配 Windows Form 包含名為按鈕`Button1`。 將下列程式碼貼到您的表單，並將關聯`Button1_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>使用指定大小和單位，初始化新的 <see cref="T:System.Drawing.Font" />。 將樣式設為 <see cref="F:System.Drawing.FontStyle.Regular" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Style%2A>屬性設定為<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小 (以點計算)。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <summary>使用指定的大小和樣式，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Unit%2A>屬性設定為<xref:System.Drawing.GraphicsUnit.Point>。 Windows Form 應用程式支援 TrueType 字型，而且具有有限的 OpenType 字型支援。 如果`familyName`參數會指定字型執行應用程式的電腦上未安裝或不支援，Microsoft Sans Serif 取代。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>使用指定大小和單位，初始化新的 <see cref="T:System.Drawing.Font" />。 樣式設定為 <see cref="F:System.Drawing.FontStyle.Regular" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生字型有其<xref:System.Drawing.Font.Style%2A>屬性設定為<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>使用指定大小、樣式和單位，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>使用指定大小、樣式和單位，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows Form 應用程式支援 TrueType 字型，而且具有有限的 OpenType 字型支援。 如果`familyName`參數會指定字型執行應用程式的電腦上未安裝或不支援，Microsoft Sans Serif 取代。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式。 這個範例被為了搭配 Windows Form。 若要執行此範例中，將此程式碼貼到表單，其中包含名為按鈕`Button2`，並將關聯`Button2_Click`方法<xref:System.Windows.Forms.Control.Click>按鈕的事件。  
  
 [!code-cpp[System.Drawing.FontsExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#3)]
 [!code-csharp[System.Drawing.FontsExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.FontsExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">
          <see cref="T:System.Byte" />，指定  
  
 用於新字型的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字元集。</param>
        <summary>使用指定大小、樣式、單位和字元集，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`參數會使用 Windows SDK 的標頭檔 WinGDI.h 中定義之清單中的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">
          <see cref="T:System.Byte" />，指定要用於這個字型的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字元集。</param>
        <summary>使用指定大小、樣式、單位和字元集，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`參數會使用 Windows SDK 的標頭檔 WinGDI.h 中定義之清單中的值。 Windows Form 應用程式支援 TrueType 字型，而且具有有限的 OpenType 字型支援。 如果`familyName`參數會指定字型執行應用程式的電腦上未安裝或不支援，Microsoft Sans Serif 取代。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="family">新 <see cref="T:System.Drawing.Font" /> 的 <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">
          <see cref="T:System.Byte" />，指定  
  
 用於此字型的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字元集。</param>
        <param name="gdiVerticalFont">布林值，表示新字型是否衍生自 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 垂直字型。</param>
        <summary>使用指定大小、樣式、單位和字元集，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`參數會使用 Windows SDK 的標頭檔 WinGDI.h 中定義之清單中的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> 是 <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="familyName">新 <see cref="T:System.Drawing.Font" /> 之 <see cref="T:System.Drawing.FontFamily" /> 的字串表示。</param>
        <param name="emSize">新字型的 Em 大小，以 <c>unit</c> 參數所指定的單位計算。</param>
        <param name="style">新字型的 <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新字型的 <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">
          <see cref="T:System.Byte" />，指定要用於這個字型的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字元集。</param>
        <param name="gdiVerticalFont">布林值，表示新的 <see cref="T:System.Drawing.Font" /> 是否衍生自 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 垂直字型。</param>
        <summary>使用指定大小、樣式、單位和字元集，初始化新的 <see cref="T:System.Drawing.Font" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`參數會使用 Windows SDK 的標頭檔 WinGDI.h 中定義之清單中的值。 如果`familyName`參數會指定字型執行應用程式的電腦上未安裝或不支援，Microsoft Sans Serif 取代。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 小於或等於 0、評估為無限，或為無效數字。</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="Bold">
      <MemberSignature Language="C#" Value="public bool Bold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bold" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Bold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bold As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Bold { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示這個 <see cref="T:System.Drawing.Font" /> 是否為粗體。</summary>
        <value>
          如果這個 <see cref="T:System.Drawing.Font" /> 為粗體，則為<see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範<xref:System.Drawing.Color.op_Inequality%2A>運算子，<xref:System.Drawing.Font.%23ctor%2A>建構函式，而<xref:System.Drawing.Font.Bold%2A>屬性。 這個範例為了搭配 Windows Form 包含名為按鈕`Button2`。 將下列程式碼貼到您的表單，並將關聯`Button2_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立這個 <see cref="T:System.Drawing.Font" /> 的完全相同複本。</summary>
        <returns>這個方法所建立的 <see cref="T:System.Drawing.Font" />，它轉換為 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼複製品<xref:System.Drawing.Font>和繪製文字的字型。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放此 <see cref="T:System.Drawing.Font" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Drawing.Font.Dispose%2A>允許所使用的資源<xref:System.Drawing.Font>都重新配置用於其他用途。  
  
 <xref:System.Drawing.Font.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Drawing.Font>。 <xref:System.Drawing.Font.Dispose%2A> 方法會將 <xref:System.Drawing.Font> 保留在無法使用的狀態。 在呼叫<xref:System.Drawing.Font.Dispose%2A>，您必須釋放所有參考<xref:System.Drawing.Font>讓記憶體回收行程可以回收記憶體的<xref:System.Drawing.Font>所佔用。 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.Font.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.Font>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.Font> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要測試的物件。</param>
        <summary>表示指定的物件是否為 <see cref="T:System.Drawing.Font" />，而且是否具有與這個 <see cref="T:System.Drawing.Font" /> 相同的 <see cref="P:System.Drawing.Font.FontFamily" />、<see cref="P:System.Drawing.Font.GdiVerticalFont" />、<see cref="P:System.Drawing.Font.GdiCharSet" />、<see cref="P:System.Drawing.Font.Style" />、<see cref="P:System.Drawing.Font.Size" /> 與 <see cref="P:System.Drawing.Font.Unit" /> 屬性值。</summary>
        <returns>
          如果 <paramref name="obj" /> 參數為 <see cref="T:System.Drawing.Font" /> 而且具有與這個 <see cref="T:System.Drawing.Font" /> 相同的 <see cref="P:System.Drawing.Font.FontFamily" />、<see cref="P:System.Drawing.Font.GdiVerticalFont" />、<see cref="P:System.Drawing.Font.GdiCharSet" />、<see cref="P:System.Drawing.Font.Style" />、<see cref="P:System.Drawing.Font.Size" /> 與 <see cref="P:System.Drawing.Font.Unit" /> 屬性值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會建立兩個<xref:System.Drawing.Font>物件，然後測試是否相等。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Font ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Font ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Drawing.FontFamily FontFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontFamily ^ FontFamily { System::Drawing::FontFamily ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個 <see cref="T:System.Drawing.FontFamily" /> 關聯的 <see cref="T:System.Drawing.Font" />。</summary>
        <value>與這個 <see cref="T:System.Drawing.FontFamily" /> 相關聯的 <see cref="T:System.Drawing.Font" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.FontFamily>代表一組類似的字體，但可能會有不同的大小和樣式 （例如，Arial，新細明體，和新細明體） 的字型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">裝置內容的控制代碼。</param>
        <summary>從裝置內容的指定 Windows 控制代碼建立 <see cref="T:System.Drawing.Font" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法才能執行，`hdc`參數必須包含選取字型的裝置內容控制代碼。 這個方法無法與`hdc`從取得的控制代碼[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics>物件，因為`hdc`控制代碼沒有所選取的字型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定之裝置内容的字型不是 TrueType 字型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromHfont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHfont (IntPtr hfont);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHfont(native int hfont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHfont(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHfont (hfont As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHfont(IntPtr hfont);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hfont" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hfont">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字型的 Windows 控制代碼。</param>
        <summary>從指定的 Windows 控制代碼建立 <see cref="T:System.Drawing.Font" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   取得的控制代碼[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]字型。  
  
-   建立<xref:System.Drawing.Font>從該控制代碼。  
  
-   使用新的螢幕上繪製文字<xref:System.Drawing.Font>。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="hfont" /> 指向不是 TrueType 字型的物件。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的 GDI 邏輯字型 (<c>LOGFONT</c>) 結構建立 <see cref="T:System.Drawing.Font" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Object" />，表示從其中建立 <see cref="T:System.Drawing.Font" /> 的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" /> 結構。</param>
        <summary>從指定的 GDI 邏輯字型 (<c>LOGFONT</c>) 結構建立 <see cref="T:System.Drawing.Font" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`，或邏輯的字型是包含 14 屬性，描述特定字型的結構。 如需詳細資訊，請參閱 <"的邏輯字型 」 中的 Windows 開發文件[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf, IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf, native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object, hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf, IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Object" />，表示從其中建立 <see cref="T:System.Drawing.Font" /> 的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" /> 結構。</param>
        <param name="hdc">含有 <c>lf</c> 結構相關額外資訊的裝置內容控制代碼。</param>
        <summary>從指定的 GDI 邏輯字型 (<c>LOGFONT</c>) 結構建立 <see cref="T:System.Drawing.Font" />。</summary>
        <returns>這個方法建立的 <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`，或邏輯的字型是包含 14 屬性，描述特定字型的結構。 如需詳細資訊，請參閱 <"的邏輯字型 」 中的 Windows 開發文件[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">字型不是 TrueType 字型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GdiCharSet">
      <MemberSignature Language="C#" Value="public byte GdiCharSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 GdiCharSet" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiCharSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiCharSet As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte GdiCharSet { System::Byte get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指定這個 <see cref="T:System.Drawing.Font" /> 使用之 GDI 字元集的位元組值。</summary>
        <value>位元組值，指定這個 <see cref="T:System.Drawing.Font" /> 使用的 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字元集。 預設為 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回 1，除非指定不同的字元集<xref:System.Drawing.Font.%23ctor%28System.String%2CSystem.Single%2CSystem.Drawing.FontStyle%2CSystem.Drawing.GraphicsUnit%2CSystem.Byte%29>建構函式。 這個屬性會使用 Windows SDK 的標頭檔 WinGDI.h 中定義之清單中的值。 下表詳列的字元集和位元組值。  
  
|字元集|值|  
|-------------------|-----------|  
|ANSI|0|  
|DEFAULT|1|  
|符號|2|  
|SHIFTJIS|128|  
|韓文|129|  
|韓文|129|  
|GB2312|134|  
|CHINESEBIG5|136|  
|OEM|255|  
|JOHAB|130|  
|希伯來文|177|  
|阿拉伯文|178|  
|希臘文|161|  
|土耳其文|162|  
|越南文|163|  
|泰文|222|  
|EASTEUROPE|238|  
|俄文|204|  
|MAC|77|  
|波羅的海文|186|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdiVerticalFont">
      <MemberSignature Language="C#" Value="public bool GdiVerticalFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GdiVerticalFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiVerticalFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiVerticalFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GdiVerticalFont { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得布林值，指示這個 <see cref="T:System.Drawing.Font" /> 是否衍生自 GDI 垂直字型。</summary>
        <value>
          如果這個 <see cref="T:System.Drawing.Font" /> 衍生自 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 垂直字型，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性來判斷是否與非 Unicode 平台上的原生 Win32 控制項的字型。  
  
 <xref:System.Drawing.Font.GdiVerticalFont%2A> 只會傳回`true`如果從傳統 GDI 建立這種字型  
  
 字型定義，例如 LOGFONT 或 HFONT。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的雜湊碼。</summary>
        <returns>這個 <see cref="T:System.Drawing.Font" /> 的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Font>。  
  
-   取得字型的雜湊碼。  
  
-   顯示訊息方塊具有值的雜湊碼。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHeight">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回這個字型的行距。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個字型的行距 (單位為像素)。</summary>
        <returns>這個字型的行距 (單位為像素)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距<xref:System.Drawing.Font>是兩連續文字行基準線間的垂直距離。 因此，行距包含以及字元本身的高度行間的空白空間。  
  
 如果<xref:System.Drawing.Font.Unit%2A>以外之字型的屬性設定為任何項目<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用在螢幕上顯示的垂直解析度計算的高度 （以像素為單位）。 例如，假設字型單位是英吋，並將字型大小為 0.3。 也假設對應的字型系列，其 em 高度為 2048年，行距是 2355年。 螢幕顯示的垂直解析度為 96 dpi，您可以計算高度，如下所示：  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" />，其保留顯示裝置的垂直解析度 (單位為 DPI) 以及頁面單位和頁面縮放的設定。</param>
        <summary>傳回這個字型的行距 (單位是指定之 <see cref="T:System.Drawing.Graphics" /> 的目前單位)。</summary>
        <returns>這個字型的行距 (單位為像素)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距<xref:System.Drawing.Font>是兩連續文字行基準線間的垂直距離。 因此，行距包含以及字元本身的高度行間的空白空間。  
  
 如果<xref:System.Drawing.Font.Unit%2A>以外之字型的屬性設定為任何項目<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用指定的垂直解析度導出高度，單位為像素<xref:System.Drawing.Graphics>物件。 例如，假設字型單位是英吋，並將字型大小為 0.3。 也假設對應的字型系列，其 em 高度為 2048年，行距是 2355年。 如果<xref:System.Drawing.Graphics>物件具有<xref:System.Drawing.Font.Unit%2A>屬性值為<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>和<xref:System.Drawing.Graphics.DpiY%2A>96 dpi，高度屬性值的計算方式如下：  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 繼續進行相同的範例，假設<xref:System.Drawing.Font.Unit%2A>屬性<xref:System.Drawing.Graphics>物件設定為<xref:System.Drawing.GraphicsUnit.Millimeter?displayProperty=nameWithType>而不是<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>。 然後 （使用 1 英吋 = 25.4 公釐為單位） 的高度，以公釐為單位，計算方式如下：  
  
 2355*(0.3/2048)25.4 = 8.762256  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Font>。  
  
-   繪製到螢幕，並使用新的一行文字<xref:System.Drawing.Font>。  
  
-   取得字型的高度。  
  
-   繪製文字正下方的第一行的第二行。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (float dpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(float32 dpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight (dpi As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(float dpi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dpi">用來計算字型高度的垂直解析度 (單位為 DPI)。</param>
        <summary>傳回這個 <see cref="T:System.Drawing.Font" /> 在使用指定之垂直解析度繪製至裝置時的高度 (單位為像素)。</summary>
        <returns>這個 <see cref="T:System.Drawing.Font" /> 的高度 (單位為像素)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Drawing.Font.Unit%2A>以外之字型的屬性設定為任何項目<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用在螢幕上顯示的垂直解析度計算的高度 （以像素為單位）。 例如，假設字型單位是英吋，並將字型大小為 0.3。 也假設對應的字型系列，其 em 高度為 2048年，行距是 2355年。 如果指定的垂直解析度為 96 dpi，高度的計算方式如下：  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個字型的行距。</summary>
        <value>這個字型的行距 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距是兩連續文字行基準線間的垂直距離。 因此，行距包含以及字元本身的高度行間的空白空間。  
  
 如果<xref:System.Drawing.Font.Unit%2A>以外之字型的屬性設定為任何項目<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用在螢幕上顯示的垂直解析度計算的高度 （以像素為單位）。 例如，假設字型單位是英吋，並將字型大小為 0.3。 也假設對應的字型系列，其 em 高度為 2048年，行距是 2355年。 螢幕顯示的垂直解析度為 96 dpi，您可以計算高度，如下所示：  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 所傳回的值<xref:System.Drawing.Font.GetHeight%2A>方法，可 33.11719，和所傳回的值<xref:System.Drawing.Font.Height%2A>屬性應為 34。 <xref:System.Drawing.Font.Height%2A>屬性是所傳回的值<xref:System.Drawing.Font.GetHeight%2A>，四捨五入到最接近的整數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemFont">
      <MemberSignature Language="C#" Value="public bool IsSystemFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.IsSystemFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSystemFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSystemFont { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指示字型是否為 <see cref="T:System.Drawing.SystemFonts" /> 的成員。</summary>
        <value>
          如果字型是 <see cref="T:System.Drawing.SystemFonts" /> 的成員，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當使用者變更，為系統字型<xref:System.Drawing.Font.IsSystemFont%2A>屬性無法傳回`true`，即使的字型不是實際系統字型。 若要避免此情況下，，如果您使用系統字型應用程式中，您應該追蹤使用者喜好設定變更處理<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging>或<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Italic">
      <MemberSignature Language="C#" Value="public bool Italic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Italic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Italic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Italic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Italic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示此字型是否已套用斜體樣式。</summary>
        <value>
          <see langword="true" /> 表示此字型已套用斜體樣式，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Drawing.Font.Style" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的字樣名稱。</summary>
        <value>這個 <see cref="T:System.Drawing.Font" /> 之字樣名稱的字串表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>， <xref:System.Drawing.Font.Name%2A>， <xref:System.Drawing.Font.Style%2A>，和<xref:System.Drawing.Font.Unit%2A>屬性。 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.ComboBox>名為`ComboBox1`，會填入字串 「 大於 」 和 「 小 」。 將下列程式碼貼到表單，並將關聯`ComboBox1_SelectedIndexChanged`方法<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控制項。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalFontName">
      <MemberSignature Language="C#" Value="public string OriginalFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.OriginalFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OriginalFontName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得原本指定之字型的名稱。</summary>
        <value>表示原本指定之字型名稱的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 原始的字型名稱與實際的字型名稱可能會不同。 系統需求，可能會導致使用非原本指定之字型的字型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public float Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Size { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的 Em 大小，此大小是以 <see cref="P:System.Drawing.Font.Unit" /> 屬性指定的單位來測量的。</summary>
        <value>這個 <see cref="T:System.Drawing.Font" /> 的 Em 大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>屬性。 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.ComboBox>名為`ComboBox1`，會填入字串 「 大於 」 和 「 小 」。 將下列程式碼貼到表單，並將關聯`ComboBox1_SelectedIndexChanged`方法<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控制項。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeInPoints">
      <MemberSignature Language="C#" Value="public float SizeInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SizeInPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SizeInPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SizeInPoints As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float SizeInPoints { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的 Em 大小 (單位為點)。</summary>
        <value>這個 <see cref="T:System.Drawing.Font" /> 的 Em 大小 (單位為點)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>屬性。 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.ComboBox>名為`ComboBox1`，會填入字串 「 大於 」 和 「 小 」。 將下列程式碼貼到表單，並將關聯`ComboBox1_SelectedIndexChanged`方法<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控制項。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikeout">
      <MemberSignature Language="C#" Value="public bool Strikeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strikeout" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Strikeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strikeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Strikeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示這個 <see cref="T:System.Drawing.Font" /> 是否指定字型中有水平線貫穿。</summary>
        <value>
          如果這個 <see cref="T:System.Drawing.Font" /> 具有貫穿它的水平線，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Drawing.FontStyle Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.FontStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Style" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Style As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontStyle Style { System::Drawing::FontStyle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的樣式資訊。</summary>
        <value>
          <see cref="T:System.Drawing.FontStyle" /> 列舉，包含這個 <see cref="T:System.Drawing.Font" /> 的樣式資訊。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Drawing.Font>新粗體字使用按鈕的屬性<xref:System.Drawing.FontStyle>列舉型別。 這個範例被為了搭配 Windows Form。 建立包含名為按鈕的表單`Button1`並貼入下列程式碼。 關聯`Button1_Click`方法按鈕之<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
        <summary>將序列化目標物件所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontName">
      <MemberSignature Language="C#" Value="public string SystemFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SystemFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemFontName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果 <see cref="P:System.Drawing.Font.IsSystemFont" /> 屬性傳回 <see langword="true" />，則取得系統字型的名稱。</summary>
        <value>如果 <see cref="P:System.Drawing.Font.IsSystemFont" /> 傳回 <see langword="true" />，則為系統字型的名稱；否則為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的名稱<xref:System.Drawing.Font.SystemFontName%2A>屬性會是其中一個成員<xref:System.Drawing.SystemFonts>，轉換為字串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHfont">
      <MemberSignature Language="C#" Value="public IntPtr ToHfont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int ToHfont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToHfont" />
      <MemberSignature Language="VB.NET" Value="Public Function ToHfont () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr ToHfont();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Drawing.Font" /> 的控制代碼。</summary>
        <returns>這個 <see cref="T:System.Drawing.Font" /> 的 Windows 控制代碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法時，您必須處置產生`Hfont`使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]`DeleteObject`方法，以確保資源釋出。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Drawing.Font>然後取得的控制代碼， <xref:System.Drawing.Font>。 範例為了搭配 Windows Form 使用而設計，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">作業失敗。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從這個 <see cref="T:System.Drawing.Font" /> 建立 GDI 邏輯字型 (<c>LOGFONT</c>) 結構。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToLogFont (logFont As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="logFont">
          <see cref="T:System.Object" />，表示這個方法所建立的 <see langword="LOGFONT" /> 結構。</param>
        <summary>從這個 <see cref="T:System.Drawing.Font" /> 建立 GDI 邏輯字型 (<c>LOGFONT</c>) 結構。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定`logFont`參數字型轉換的結果。 如需邏輯字型的詳細資訊，請參閱[LOGFONT 結構](http://msdn.microsoft.com/library/dd145037.aspx)。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="logFont">
          <see cref="T:System.Object" />，表示這個方法所建立的 <see langword="LOGFONT" /> 結構。</param>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" />，提供 <see langword="LOGFONT" /> 結構的額外資訊。</param>
        <summary>從這個 <see cref="T:System.Drawing.Font" /> 建立 GDI 邏輯字型 (<c>LOGFONT</c>) 結構。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定`logFont`參數字型轉換的結果。 如需邏輯字型的詳細資訊，請參閱[LOGFONT 結構](http://msdn.microsoft.com/library/dd145037.aspx)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Drawing.Font" /> 的人們可解讀的字串表示。</summary>
        <returns>表示這個 <see cref="T:System.Drawing.Font" /> 的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的字串的格式如下：  
  
 [Font: Name=*fontName*, Size=*size*, Units=*units*, GDiCharSet=*gdiCharSet*, GdiVerticalFont=*boolean*]  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Font>。  
  
-   取得字串，表示字型。  
  
-   在訊息方塊中顯示的字串。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public bool Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Underline" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Underline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Underline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Underline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示這個 <see cref="T:System.Drawing.Font" /> 是否有底線。</summary>
        <value>
          如果這個 <see cref="T:System.Drawing.Font" /> 加上了底線，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit Unit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit Unit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Unit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit Unit { System::Drawing::GraphicsUnit get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontUnitConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Font" /> 的測量單位。</summary>
        <value>
          <see cref="T:System.Drawing.GraphicsUnit" />，表示這個 <see cref="T:System.Drawing.Font" /> 的測量單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Font.%23ctor%2A>建構函式和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>屬性。 這個範例為了搭配 Windows Form 包含<xref:System.Windows.Forms.ComboBox>名為`ComboBox1`，會填入字串 「 大於 」 和 「 小 」。 將下列程式碼貼到表單，並將關聯`ComboBox1_SelectedIndexChanged`方法<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控制項。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>