<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cebe4384e5215400e3718cf0dc794274c63580a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30409992" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供建立圖形緩衝區的方法，該緩衝區可用於雙重緩衝 (Double Buffering)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext>類別可讓您實作自訂雙重緩衝的圖形。 使用雙重緩衝的圖形可以減少或消除閃爍因重繪顯示介面的。  
  
> [!NOTE]
>  使用雙重緩衝的最簡單方式是設定<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制樣式旗標控制使用<xref:System.Windows.Forms.Control.SetStyle%2A>方法。 設定<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制項的控制項樣式旗標將所有繪製控制項的預設圖形緩衝區中，透過重新都導向而不需要任何額外的程式碼。 若要設定此旗標`true`預設。  
  
 <xref:System.Drawing.BufferedGraphicsContext>類別會提供用於建立及設定圖形緩衝區的方法。 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法會建立<xref:System.Drawing.BufferedGraphics>，即也提供的方法來寫入緩衝區以及轉譯其內容至輸出裝置，您可以使用圖形緩衝區的包裝函式。  
  
 您可以擷取<xref:System.Drawing.BufferedGraphicsContext>目前應用程式定義域靜態<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>屬性。 等動畫大量繪圖功能的應用程式，您可以建立專用<xref:System.Drawing.BufferedGraphicsContext>使用建構函式，但大部分的應用程式<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>屬性會是足夠。  
  
 如需有關繪圖已緩衝的圖形和緩衝處理的自訂實作的詳細資訊，請參閱[雙重緩衝的圖形](~/docs/framework/winforms/advanced/double-buffered-graphics.md)和[How to： 手動管理已緩衝的圖形](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何取得<xref:System.Drawing.BufferedGraphicsContext>目前的應用程式定義域。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.BufferedGraphicsContext" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等動畫大量繪圖功能的應用程式，您有時可以改善效能使用專用<xref:System.Drawing.BufferedGraphicsContext>而不是所提供的預設執行個體<xref:System.Drawing.BufferedGraphicsManager>。 這可讓您建立及管理個別的圖形緩衝區。  
  
> [!NOTE]
>  您應該一律呼叫<xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>當您完成使用專用<xref:System.Drawing.BufferedGraphicsContext>。  
  
 如需專用的圖形緩衝區的詳細資訊，請參閱[How to： 手動管理已緩衝的圖形](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立圖形緩衝區。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">要與新緩衝區的像素格式相符之 <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="targetRectangle">
          <see cref="T:System.Drawing.Rectangle" />，指出要建立的緩衝區大小。</param>
        <summary>使用指定 <see cref="T:System.Drawing.Graphics" /> 的像素格式，建立指定大小的圖形緩衝區。</summary>
        <returns>
          <see cref="T:System.Drawing.BufferedGraphics" />，可用於繪製到指定維度的緩衝區。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法，其大小超過此值以矩形的<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>屬性、 暫存<xref:System.Drawing.BufferedGraphicsContext>是用來配置緩衝區，並提供暫時的內容緩衝區。 新<xref:System.Drawing.BufferedGraphicsContext>不同<xref:System.Drawing.BufferedGraphicsContext>應用程式網域和它會自動公開當<xref:System.Drawing.BufferedGraphics>傳回<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>處置方法。  
  
   
  
## Examples  
 下列程式碼範例將示範如何建立使用圖形緩衝區<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">一個指到裝置內容的 <see cref="T:System.IntPtr" />，要與新緩衝區的像素格式相符。</param>
        <param name="targetRectangle">
          <see cref="T:System.Drawing.Rectangle" />，指出要建立的緩衝區大小。</param>
        <summary>使用指定 <see cref="T:System.Drawing.Graphics" /> 的像素格式，建立指定大小的圖形緩衝區。</summary>
        <returns>
          <see cref="T:System.Drawing.BufferedGraphics" />，可用於繪製到指定維度的緩衝區。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法，其大小超過此值以矩形的<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>屬性、 暫存<xref:System.Drawing.BufferedGraphicsContext>是用來配置緩衝區，並提供暫時的內容緩衝區。 新<xref:System.Drawing.BufferedGraphicsContext>不同<xref:System.Drawing.BufferedGraphicsContext>應用程式網域和它會自動公開當<xref:System.Drawing.BufferedGraphics>傳回<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>處置方法。  
  
   
  
## Examples  
 下列程式碼範例將示範如何建立使用圖形緩衝區<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.Drawing.BufferedGraphicsContext" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Drawing.BufferedGraphicsContext>。 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 方法會將 <xref:System.Drawing.BufferedGraphicsContext> 保留在無法使用的狀態。 在呼叫<xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>，您必須釋放所有參考<xref:System.Drawing.BufferedGraphicsContext>讓記憶體回收行程可以回收記憶體的<xref:System.Drawing.BufferedGraphicsContext>所佔用。 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.BufferedGraphicsContext>。 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Object.Finalize%2A>方法<xref:System.Drawing.BufferedGraphicsContext>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>處置目前的圖形緩衝區，如果已配置緩衝區但尚未處置的話。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果正在使用中的圖形緩衝區，它會被標示為處置只要是完全免費。否則，它會處置立即。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要使用之緩衝區的大小上限。</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> 指出緩衝區維度的最大值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可讓您取得或設定應該保留在記憶體中緩衝區的最大維度。 可讓您配置的緩衝區大小，不過任何維度大於緩衝區<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>大小會暫時使用後即捨棄時<xref:System.Drawing.BufferedGraphics>釋放物件。  
  
   
  
## Examples  
 下列範例會示範設定的緩衝區大小上限<xref:System.Drawing.BufferedGraphicsContext>。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">大小的高度或寬度小於或等於零。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">允許使用者存取權給所有視窗。 相關的列舉： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>