<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="81630206751234c2b84b3c64d955c647613ce6ff" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36492696" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>封裝 GDI+ 繪圖介面。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics>類別提供方法給顯示裝置繪圖物件。 A<xref:System.Drawing.Graphics>與特定裝置內容相關聯。  
  
 您可以取得<xref:System.Drawing.Graphics>藉由呼叫物件<xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType>方法繼承自物件上的<xref:System.Windows.Forms.Control?displayProperty=nameWithType>，或藉由處理控制項的<xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType>事件及存取<xref:System.Windows.Forms.PaintEventArgs.Graphics%2A>屬性<xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType>類別。 您也可以建立<xref:System.Drawing.Graphics>物件從映像使用<xref:System.Drawing.Graphics.FromImage%2A>方法。 如需有關建立<xref:System.Drawing.Graphics>物件，請參閱[How to： 建立繪製的圖形物件](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)。  
  
 您可以藉由繪製許多不同的圖案和線條<xref:System.Drawing.Graphics>物件。 如需如何繪製線條和圖案的詳細資訊，請參閱特定`Draw` *GraphicalElement*行或您想要繪製的圖形的方法。 這些方法包括<xref:System.Drawing.Graphics.DrawLine%2A>， <xref:System.Drawing.Graphics.DrawArc%2A>， <xref:System.Drawing.Graphics.DrawClosedCurve%2A>， <xref:System.Drawing.Graphics.DrawPolygon%2A>，和<xref:System.Drawing.Graphics.DrawRectangle%2A>。 如需如何繪製線條和圖案的詳細資訊，請參閱[使用畫筆繪製線條和圖案](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md)和[使用筆刷填滿圖形](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md)。  
  
 您也可以藉由繪製影像和圖示<xref:System.Drawing.Graphics.DrawImage%2A>和<xref:System.Drawing.Graphics.DrawIcon%2A>方法，分別。 在畫面上執行之繪圖介面的色彩資料位元區塊傳輸<xref:System.Drawing.Graphics>物件，請參閱<xref:System.Drawing.Graphics.CopyFromScreen%2A>。 如需有關如何繪製影像<xref:System.Drawing.Graphics>物件，請參閱[使用影像、 點陣圖、 圖示和中繼檔](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md)。  
  
 此外，您可以在此操作所使用的座標系統<xref:System.Drawing.Graphics>物件。 如需有關座標系統以及如何操作的詳細資訊，請參閱[座標系統和轉換](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md)。  
  
   
  
## Examples  
 下列程式碼範例為了搭配 Windows Form 使用而設計，而且需要<xref:System.Windows.Forms.PaintEventArgs>物件。 <xref:System.Windows.Forms.PaintEventArgs>物件命名為`e`的參數和<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案建立映像。 檔案為 SampImag.jpg，並使用的範例資料夾中。  
  
-   建立要繪製影像的左上角的點。  
  
-   藉由將未縮放的影像繪製至畫面<xref:System.Drawing.Graphics>物件。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">包含註解的位元組陣列。</param>
        <summary>將註解加入至目前的 <see cref="T:System.Drawing.Imaging.Metafile" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法適用於只有當此<xref:System.Drawing.Graphics>聯<xref:System.Drawing.Imaging.Metafile>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式，以及`thisForm`、<xref:System.Windows.Forms.Form>範例。 該程式碼執行下列動作：  
  
-   會建立暫存<xref:System.Drawing.Graphics>建立中繼檔和取得`hdc`，其裝置內容控制代碼。  
  
-   建立新的中繼檔使用`hdc`。  
  
-   建立<xref:System.Drawing.Graphics>顯示中繼檔從<xref:System.Drawing.Imaging.Metafile>。  
  
-   中繼檔繪製的矩形。  
  
-   中繼檔中加入註解。  
  
-   處置<xref:System.Drawing.Graphics>的的中繼檔關閉中繼檔。  
  
-   處置中繼檔。  
  
-   釋放暫存`hdc`。  
  
-   處置暫存<xref:System.Drawing.Graphics>。  
  
-   從先前建立的檔案中建立第二個中繼檔。  
  
-   將中繼檔繪製到螢幕。  
  
-   處置中繼檔。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以這個 <see cref="T:System.Drawing.Graphics" /> 的目前狀態儲存圖形容器，並開啟及使用新的圖形容器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以這個 <see cref="T:System.Drawing.Graphics" /> 的目前狀態儲存圖形容器，並開啟及使用新的圖形容器。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />，表示在方法呼叫時這個 <see cref="T:System.Drawing.Graphics" /> 的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法加<xref:System.Drawing.Graphics.EndContainer%2A>方法，以建立巢狀的圖形容器。 圖形容器保留圖形的狀態，例如轉換、 裁剪區域和呈現屬性。  
  
 當您呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.BeginContainer%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsContainer>可識別該資訊區塊。 當您識別物件傳遞至<xref:System.Drawing.Graphics.EndContainer%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 可以是巢狀容器。也就是說，您可以呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsContainer>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.EndContainer%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsContainer>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.BeginContainer%2A>方法。 就像<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫<xref:System.Drawing.Graphics.Restore%2A>方法呼叫搭配<xref:System.Drawing.Graphics.Save%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。  
  
 所建立的圖形狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法包含預設的圖形狀態的呈現品質，則任何現有的呼叫方法時的呈現品質狀態變更會重設為預設值。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   會開啟新的圖形容器，並儲存舊的容器。  
  
-   將轉譯的容器中的全局座標。  
  
-   會以紅色矩形填滿 (已轉換的座標) 新的容器。  
  
-   關閉新的容器，並還原已儲存的容器。  
  
-   填滿儲存容器的綠色矩形 （至未轉換的座標）。  
  
 結果會是大小的綠色矩形，這個矩形相同的紅色矩形覆疊。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，和 <c>srcrect</c> 參數一起指定容器的縮放變換。</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，和 <c>dstrect</c> 參數一起指定容器的縮放變換。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉型別的成員，指定容器的測量單位。</param>
        <summary>使用這個 <see cref="T:System.Drawing.Graphics" /> 的目前狀態儲存圖形容器，並使用指定之縮放變換開啟和使用新的圖形容器。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />，表示在方法呼叫時這個 <see cref="T:System.Drawing.Graphics" /> 的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法加<xref:System.Drawing.Graphics.EndContainer%2A>方法，以建立巢狀的圖形容器。 圖形容器保留圖形的狀態，例如轉換、 裁剪區域和呈現屬性。  
  
 當您呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.BeginContainer%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsContainer>可識別該資訊區塊。 當您識別物件傳遞至<xref:System.Drawing.Graphics.EndContainer%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 可以是巢狀容器。也就是說，您可以呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsContainer>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.EndContainer%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsContainer>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.BeginContainer%2A>方法。 就像<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫<xref:System.Drawing.Graphics.Restore%2A>方法呼叫搭配<xref:System.Drawing.Graphics.Save%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。  
  
 這個方法會指定與新的圖形容器的縮放變換`dstrect`和`srcrect`參數。 小數位數等於轉換，當套用至`srcrect`，導致`dstrect`。  
  
 所建立的圖形狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法包含預設的圖形狀態的呈現品質，則任何現有的呼叫方法時的呈現品質狀態變更會重設為預設值。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立兩個矩形來指定新容器的縮放變換。  
  
-   會開啟新的圖形容器，並儲存舊的容器。  
  
-   填入紅色矩形 (縮放座標) 新的容器。  
  
-   關閉新的容器，並還原已儲存的容器。  
  
-   填滿綠色矩形 （至縮放座標中） 的已儲存的容器。  
  
 結果會是綠色矩形，這個矩形覆疊較小的紅色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，和 <c>srcrect</c> 參數一起指定新圖形容器的縮放變換。</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，和 <c>dstrect</c> 參數一起指定新圖形容器的縮放變換。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉型別的成員，指定容器的測量單位。</param>
        <summary>使用這個 <see cref="T:System.Drawing.Graphics" /> 的目前狀態儲存圖形容器，並使用指定之縮放變換開啟和使用新的圖形容器。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />，表示在方法呼叫時這個 <see cref="T:System.Drawing.Graphics" /> 的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法加<xref:System.Drawing.Graphics.EndContainer%2A>方法，以建立巢狀的圖形容器。 圖形容器保留圖形的狀態，例如轉換、 裁剪區域和呈現屬性。  
  
 當您呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.BeginContainer%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsContainer>可識別該資訊區塊。 當您識別物件傳遞至<xref:System.Drawing.Graphics.EndContainer%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 可以是巢狀容器。也就是說，您可以呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsContainer>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.EndContainer%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsContainer>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.BeginContainer%2A>方法。 就像<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫<xref:System.Drawing.Graphics.Restore%2A>方法呼叫搭配<xref:System.Drawing.Graphics.Save%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由`Save`方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。  
  
 這個方法會指定與新的圖形容器的縮放變換`dstrect`和`srcrect`參數。 小數位數等於轉換，當套用至`srcrect`，導致`dstrect`。  
  
 所建立的圖形狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法包含預設的圖形狀態的呈現品質，則任何現有的呼叫方法時的呈現品質狀態變更會重設為預設值。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立兩個矩形來指定新容器的縮放變換。  
  
-   會開啟新的圖形容器，並儲存舊的容器。  
  
-   填入紅色矩形 (縮放座標) 新的容器。  
  
-   關閉新的容器，並還原已儲存的容器。  
  
-   填滿綠色矩形 （至縮放座標中） 的已儲存的容器。  
  
 結果會是綠色矩形，這個矩形覆疊較小的紅色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> 結構，表示繪圖介面的背景色彩。</param>
        <summary>清除整個繪圖介面，並使用指定的背景色彩填滿它。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A>方法清除圖形物件的狀態，並不應該呼叫時的圖形物件無法更新。 例如，如果<xref:System.Drawing.Graphics.Clear%2A>安全桌面上呼叫方法中的終端機伺服器工作階段中，<xref:System.Runtime.InteropServices.ExternalException>可能會發生，離開<xref:System.Drawing.Graphics>不一致的狀態物件。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會清除之繪圖介面的<xref:System.Drawing.Graphics>和系統定莪 teal 色彩設定的背景色彩。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Drawing.Region" />，它會限制這個 <see cref="T:System.Drawing.Graphics" /> 的繪圖區域。</summary>
        <value>
          <see cref="T:System.Drawing.Region" />，它會限制這個 <see cref="T:System.Drawing.Graphics" /> 目前可用於繪圖的部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 修改<xref:System.Drawing.Region>所傳回物件<xref:System.Drawing.Graphics.Clip%2A>屬性不會影響後續的繪圖<xref:System.Drawing.Graphics>物件。 若要變更的裁剪區域，取代<xref:System.Drawing.Graphics.Clip%2A>屬性值與新<xref:System.Drawing.Region>物件。 若要判斷是否為無限的裁剪區域，擷取<xref:System.Drawing.Graphics.Clip%2A>屬性並呼叫其<xref:System.Drawing.Region.IsInfinite%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Graphics.Clip%2A>屬性。 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`SetAndFillClip`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Drawing.RectangleF" /> 結構，此結構會框住這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域。</summary>
        <value>
          <see cref="T:System.Drawing.RectangleF" /> 結構，表示這個 <see cref="T:System.Drawing.Graphics" /> 之裁剪區域的周框。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生的矩形的單位由所指定<xref:System.Drawing.Graphics.PageUnit%2A>屬性。 預設單位為像素。 A<xref:System.Drawing.Graphics>通常與控制項相關聯的來源矩形將會相對於該控制項的用戶端區域。  
  
 裁剪區域是無限的如果<xref:System.Drawing.Graphics.ClipBounds%2A>屬性會傳回一個無意義的大矩形。 若要判斷是否為無限的裁剪區域，擷取<xref:System.Drawing.Graphics.Clip%2A>屬性並呼叫其<xref:System.Drawing.Region.IsInfinite%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指定如何將複合影像繪製至這個 <see cref="T:System.Drawing.Graphics" />。</summary>
        <value>這個屬性指定 <see cref="T:System.Drawing.Drawing2D.CompositingMode" /> 列舉型別的成員。 預設值為 <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合模式決定是否從來源映像素為單位覆寫，或會結合背景像素為單位。  
  
> [!NOTE]
>  您不應該使用<xref:System.Drawing.Graphics.CompositingMode%2A>屬性值為<xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy>時<xref:System.Drawing.Graphics.TextRenderingHint%2A>屬性設定為<xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>。 無法在發生例外狀況或映像可能無法正確呈現。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定繪製至這個 <see cref="T:System.Drawing.Graphics" /> 之複合影像的呈現品質。</summary>
        <value>這個屬性指定 <see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> 列舉型別的成員。 預設值為 <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合品質決定之複合影像的呈現品質等級。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>執行從畫面到 <see cref="T:System.Drawing.Graphics" /> 之繪圖介面的色彩資料位元區塊傳輸。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">來源矩形左上角的點。</param>
        <param name="upperLeftDestination">目的矩形左上角的點。</param>
        <param name="blockRegionSize">要傳輸的區域大小。</param>
        <summary>執行從畫面到 <see cref="T:System.Drawing.Graphics" /> 之繪圖介面的色彩資料位元區塊傳輸，與像素矩形相對應。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A>方法可用於分層之上另一個映像。 若要指定來源和目的地的色彩混合的方式，使用其中一種<xref:System.Drawing.Graphics.CopyFromScreen%2A>方法，取得<xref:System.Drawing.CopyPixelOperation>參數。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 方法。 若要執行這個範例，請將其貼入 Windows Form 中。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件和呼叫`CopyPixels1`方法從<xref:System.Windows.Forms.Control.Paint>事件處理方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">作業失敗。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於存取所有的視窗。 相關的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">來源矩形左上角的點。</param>
        <param name="upperLeftDestination">目的矩形左上角的點。</param>
        <param name="blockRegionSize">要傳輸的區域大小。</param>
        <param name="copyPixelOperation">其中一個 <see cref="T:System.Drawing.CopyPixelOperation" /> 值。</param>
        <summary>執行從畫面到 <see cref="T:System.Drawing.Graphics" /> 之繪圖介面的色彩資料位元區塊傳輸，與像素矩形相對應。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A>方法可用於分層之上另一個映像。 `copyPixelOperation`參數可讓您可以指定如果及來源色彩應該如何混合使用之目標區域中的色彩。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 方法。 若要執行這個範例，請將其貼入 Windows Form 中。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件和呼叫`CopyPixels2`方法從<xref:System.Windows.Forms.Control.Paint>事件處理方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> 不是 <see cref="T:System.Drawing.CopyPixelOperation" /> 的成員。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">作業失敗。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於存取所有的視窗。 相關的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">來源矩形左上角之點的 X 座標。</param>
        <param name="sourceY">來源矩形左上角之點的 Y 座標。</param>
        <param name="destinationX">目的矩形左上角之點的 X 座標。</param>
        <param name="destinationY">目的矩形左上角之點的 Y 座標。</param>
        <param name="blockRegionSize">要傳輸的區域大小。</param>
        <summary>執行從畫面到 <see cref="T:System.Drawing.Graphics" /> 之繪圖介面的色彩資料位元區塊傳輸，與像素矩形相對應。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A>方法可用於分層之上另一個映像。 若要指定來源和目的地的色彩混合的方式，使用其中一種<xref:System.Drawing.Graphics.CopyFromScreen%2A>方法，取得<xref:System.Drawing.CopyPixelOperation>參數。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Graphics.CopyFromScreen%2A>列印一份目前的表單。  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">作業失敗。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於存取所有的視窗。 相關的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">來源矩形左上角之點的 X 座標。</param>
        <param name="sourceY">來源矩形左上角之點的 Y 座標。</param>
        <param name="destinationX">目的矩形左上角之點的 X 座標。</param>
        <param name="destinationY">目的矩形左上角之點的 Y 座標。</param>
        <param name="blockRegionSize">要傳輸的區域大小。</param>
        <param name="copyPixelOperation">其中一個 <see cref="T:System.Drawing.CopyPixelOperation" /> 值。</param>
        <summary>執行從畫面到 <see cref="T:System.Drawing.Graphics" /> 之繪圖介面的色彩資料位元區塊傳輸，與像素矩形相對應。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A>方法可用於分層之上另一個映像。 `copyPixelOperation`參數可讓您可以指定如果及來源色彩應該如何混合使用之目標區域中的色彩。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 方法。 若要執行這個範例，請將其貼入 Windows Form 中。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件和呼叫`CopyPixels4`方法從<xref:System.Windows.Forms.Control.Paint>事件處理方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> 不是 <see cref="T:System.Drawing.CopyPixelOperation" /> 的成員。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">作業失敗。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於存取所有的視窗。 相關的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放此 <see cref="T:System.Drawing.Graphics" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Drawing.Graphics.Dispose%2A>允許所使用的資源<xref:System.Drawing.Graphics>都重新配置用於其他用途。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立<xref:System.Drawing.Image>從圖形檔案 SampImag.jpg 範例目錄中。  
  
-   建立<xref:System.Drawing.Graphics>從<xref:System.Drawing.Image>。  
  
-   來填滿的矩形中變更該影像。  
  
-   繪製<xref:System.Drawing.Image>至螢幕。  
  
-   釋放建立<xref:System.Drawing.Graphics>。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Graphics" /> 的水平解析度。</summary>
        <value>這個 <see cref="T:System.Drawing.Graphics" /> 所支援的水平解析度的值，以 DPI 為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關建立高解析度的應用程式的詳細資訊，請參閱  
  
 [高 DPI](http://go.microsoft.com/fwlink/?LinkId=159804)。  
  
   
  
## Examples  
 下列方法將示範如何使用<xref:System.Drawing.Graphics.DpiX%2A>和<xref:System.Drawing.Graphics.DpiY%2A>屬性。 這個範例是針對搭配 Windows Form 使用而設計的。 若要執行此範例中，將它貼到表單，其中包含<xref:System.Windows.Forms.ListBox>命名 listBox1 並從表單的建構函式呼叫這個方法。  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Graphics" /> 的垂直解析度。</summary>
        <value>這個 <see cref="T:System.Drawing.Graphics" /> 所支援的垂直解析度的值，以 DPI 為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關建立高解析度的應用程式的詳細資訊，請參閱  
  
 [高 DPI](http://go.microsoft.com/fwlink/?LinkId=159804)。  
  
   
  
## Examples  
 下列方法將示範如何使用<xref:System.Drawing.Graphics.DpiX%2A>和<xref:System.Drawing.Graphics.DpiY%2A>屬性。 這個範例是針對搭配 Windows Form 使用而設計的。 若要執行此範例中，將它貼到表單，其中包含<xref:System.Windows.Forms.ListBox>命名 listBox1 並從表單的建構函式呼叫這個方法。  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製弧形，表示由一對座標、寬度和高度所指定的橢圓形的一部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定弧形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，定義橢圓形的邊界。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到弧形結束點所測量的角度。</param>
        <summary>繪製弧形，表示由 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的橢圓形的一部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製弧形，是周邊的橢圓形的一部分。 定義橢圓形的矩形界限。 弧線是部分之間的橢圓形周邊`startAngle`參數和`startAngle`  +  `sweepAngle`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立繫結橢圓形的矩形。  
  
-   定義開始 （45 度為單位） 和 （270 度） 掃掠角度。  
  
-   繪製橢圓形弧線至畫面。  
  
 結果是遺漏之間的線段的部分橢圓形 + 和-45 度的 x 軸。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定弧形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，定義橢圓形的邊界。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到弧形結束點所測量的角度。</param>
        <summary>繪製弧形，表示由 <see cref="T:System.Drawing.RectangleF" /> 結構所指定的橢圓形的一部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製弧形，是周邊的橢圓形的一部分。 定義橢圓形的矩形界限。 弧線是部分之間的橢圓形周邊`startAngle`參數和`startAngle`  +  `sweepAngle`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立繫結橢圓形的矩形。  
  
-   定義開始 （45 度為單位） 和 （270 度） 掃掠角度。  
  
-   繪製橢圓形弧線至畫面。  
  
 結果是遺漏之間的線段的部分橢圓形 + 和-45 度的 x 軸。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 是 <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定弧形的色彩、寬度和樣式。</param>
        <param name="x">矩形左上角的 X 座標，這個矩形定義橢圓形。</param>
        <param name="y">矩形左上角的 Y 座標，這個矩形定義橢圓形。</param>
        <param name="width">定義橢圓形的矩形的寬度。</param>
        <param name="height">定義橢圓形的矩形的高度。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到弧形結束點所測量的角度。</param>
        <summary>繪製弧形，表示由一對座標、寬度和高度所指定的橢圓形的一部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製弧形，是周邊的橢圓形的一部分。 定義橢圓形的矩形界限。 弧線是部分之間的橢圓形周邊`startAngle`參數和`startAngle`  +  `sweepAngle`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立位置和要繫結橢圓形的矩形的大小。  
  
-   定義開始 （45 度為單位） 和 （270 度） 掃掠角度。  
  
-   繪製橢圓形弧線至畫面。  
  
 結果是遺漏之間的線段的部分橢圓形 + 和-45 度的 x 軸。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> 是長度為零的陣列。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定弧形的色彩、寬度和樣式。</param>
        <param name="x">矩形左上角的 X 座標，這個矩形定義橢圓形。</param>
        <param name="y">矩形左上角的 Y 座標，這個矩形定義橢圓形。</param>
        <param name="width">定義橢圓形的矩形的寬度。</param>
        <param name="height">定義橢圓形的矩形的高度。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到弧形結束點所測量的角度。</param>
        <summary>繪製弧形，表示由一對座標、寬度和高度所指定的橢圓形的一部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製弧形，是周邊的橢圓形的一部分。 定義橢圓形的矩形界限。 弧線是部分之間的橢圓形周邊`startAngle`參數和`startAngle`  +  `sweepAngle`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立位置和要繫結橢圓形的矩形的大小。  
  
-   定義開始 （45 度為單位） 和 （270 度） 掃掠角度。  
  
-   繪製橢圓形弧線至畫面。  
  
 結果是遺漏之間的線段的部分橢圓形 + 和-45 度的 x 軸。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由四個 <see cref="T:System.Drawing.Point" /> 結構定義的貝茲曲線。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> 結構，決定曲線的色彩、寬度和樣式。</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> 結構，表示曲線的開始點。</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> 結構，表示曲線的第一個控制點。</param>
        <param name="pt3">
          <see cref="T:System.Drawing.Point" /> 結構，表示曲線的第二個控制點。</param>
        <param name="pt4">
          <see cref="T:System.Drawing.Point" /> 結構，表示曲線的結束點。</param>
        <summary>繪製由四個 <see cref="T:System.Drawing.Point" /> 結構定義的貝茲曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第四個點會從第一個點繪製貝茲曲線。 第二個和第三個點都控制點，決定曲線的形狀。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立開始、 結束與曲線的兩個控制點。  
  
-   將貝茲曲線繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> 結構，表示曲線的開始點。</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> 結構，表示曲線的第一個控制點。</param>
        <param name="pt3">
          <see cref="T:System.Drawing.PointF" /> 結構，表示曲線的第二個控制點。</param>
        <param name="pt4">
          <see cref="T:System.Drawing.PointF" /> 結構，表示曲線的結束點。</param>
        <summary>繪製由四個 <see cref="T:System.Drawing.PointF" /> 結構定義的貝茲曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第四個點會從第一個點繪製貝茲曲線。 第二個和第三個點都控制點，決定曲線的形狀。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立開始、 結束與曲線的兩個控制點。  
  
-   將貝茲曲線繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="x1">曲線開始點的 X 軸座標。</param>
        <param name="y1">曲線開始點的 Y 軸座標。</param>
        <param name="x2">曲線第一個控制點的 X 座標。</param>
        <param name="y2">曲線第一個控制點的 Y 座標。</param>
        <param name="x3">曲線第二個控制點的 X 座標。</param>
        <param name="y3">曲線第二個控制點的 Y 座標。</param>
        <param name="x4">曲線結束點的 X 座標。</param>
        <param name="y4">曲線結束點的 Y 座標。</param>
        <summary>繪製貝茲曲線，該曲線是由表示各點的四個座標排序配對所定義。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第四個點會從第一個點繪製貝茲曲線。 第二個和第三個點都控制點，決定曲線的形狀。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立開始、 結束和曲線的兩個控點的座標。  
  
-   將貝茲曲線繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從 <see cref="T:System.Drawing.Point" /> 結構陣列繪製一系列的貝茲曲線。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，此結構表示決定曲線的點。 在這個陣列中的點數應該是 3 的倍數加 1，例如 4、7 或 10。</param>
        <summary>從 <see cref="T:System.Drawing.Point" /> 結構陣列繪製一系列的貝茲曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 陣列中的點數應該是 3 的倍數加 1，因為第一個曲線需要有 4 個點，而且任何其他曲線需要 3 點。 第一個貝茲曲線的點陣列中的第四個點會繪製從第一個點。 第二個和第三個點都控制點，決定曲線的形狀。 每個後續的曲線需要正好是三個的多個點： 兩個控制點和結束點。 前一個曲線的結束點作為起始點，為每個額外的曲線。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立開始、 結束和第一個曲線和端點的兩個控制點，第二個曲線的兩個控制點。  
  
-   繪製到螢幕的後續的貝茲曲線。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，此結構表示決定曲線的點。 在這個陣列中的點數應該是 3 的倍數加 1，例如 4、7 或 10。</param>
        <summary>從 <see cref="T:System.Drawing.PointF" /> 結構陣列繪製一系列的貝茲曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 陣列中的點數應該是 3 的倍數加 1，因為第一個曲線需要有 4 個點，而且任何其他曲線需要 3 點。 貝茲曲線的第一個會從第一個點繪製的點陣列中的第四個點。 第二個和第三個點都控制點，決定曲線的形狀。 每個後續的曲線需要正好是三個的多個點： 兩個控制點和結束點。 前一個曲線的結束點作為起始點，為每個額外的曲線。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立開始、 結束和第一個曲線和端點的兩個控制點，第二個曲線的兩個控制點。  
  
-   繪製到螢幕的後續的貝茲曲線。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由 <see cref="T:System.Drawing.Point" /> 結構陣列定義的封閉的基本曲線。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和高度。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <summary>繪製由 <see cref="T:System.Drawing.Point" /> 結構陣列定義的封閉的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製通過陣列中的每個點的封閉基本曲線。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點表示關閉圖形的第一個點。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要關閉的多邊形的七個點之間繪製七個紅色的直線。  
  
-   繪製封閉的綠色曲線，透過七個點。  
  
 此方法會使用預設張力為 0.5。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和高度。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <summary>繪製由 <see cref="T:System.Drawing.PointF" /> 結構陣列定義的封閉的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製通過陣列中的每個點的封閉基本曲線。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.PointF>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要關閉的多邊形的七個點之間繪製七個紅色的直線。  
  
-   繪製封閉的綠色曲線，透過七個點。  
  
 此方法會使用預設張力為 0.5。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和高度。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。 這個參數是必要的，但是會被忽略。</param>
        <summary>使用指定的張力，繪製由 <see cref="T:System.Drawing.Point" /> 結構定義的封閉基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製通過陣列中的每個點的封閉基本曲線。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要建立多邊形七個點之間畫出了七個紅色的直線。  
  
-   建立的張力，填滿模式設定。  
  
-   繪製封閉的綠色曲線，透過七個點。  
  
 方法使用 1.0 的張力，填滿模式設定為`FillMode.Alternate`。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和高度。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。 這個參數是必要的，但是會被忽略。</param>
        <summary>使用指定的張力，繪製由 <see cref="T:System.Drawing.PointF" /> 結構定義的封閉基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製通過陣列中的每個點的封閉基本曲線。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.PointF>結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要建立多邊形七個點之間畫出了七個紅色的直線。  
  
-   建立的張力，填滿模式設定。  
  
-   繪製封閉的綠色曲線，透過七個點。  
  
 方法使用 1.0 的張力，填滿模式設定為`FillMode.Alternate`。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製穿過指定陣列的 <see cref="T:System.Drawing.Point" /> 結構的基本曲線。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和高度。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <summary>繪製穿過指定陣列的 <see cref="T:System.Drawing.Point" /> 結構的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.Point>曲線要繪製的結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   繪製穿過七個點的開啟綠色曲線。  
  
 此方法會使用預設張力為 0.5。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <summary>繪製穿過指定陣列的 <see cref="T:System.Drawing.PointF" /> 結構的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.PointF>曲線要繪製的結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   繪製穿過七個點的開啟綠色曲線。  
  
 此方法會使用預設張力為 0.5。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的張力，繪製穿過指定陣列的 <see cref="T:System.Drawing.Point" /> 結構的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.Point>曲線要繪製的結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   建立張力設定。  
  
-   繪製穿過七個點的開啟綠色封閉的曲線。  
  
 此方法會使用 1.0 的張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，此結構表示定義曲線的點。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的張力，繪製穿過指定陣列的 <see cref="T:System.Drawing.PointF" /> 結構的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.PointF>曲線要繪製的結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   建立張力設定。  
  
-   繪製穿過七個點的開啟綠色封閉的曲線。  
  
 此方法會使用 1.0 的張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <param name="offset">從 <c>points</c> 參數陣列第一個項目到曲線開始點的位移。</param>
        <param name="numberOfSegments">要在曲線中包括的開始點後的線段數目。</param>
        <summary>繪製穿過指定陣列的 <see cref="T:System.Drawing.PointF" /> 結構的基本曲線。 會從陣列開頭位移開始繪製。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.PointF>曲線要繪製的結構。  
  
 值`offset`參數指定要在陣列中略過的項目數目。 已略過的項目之後的第一個項目代表曲線開始點。  
  
 值`numberOfSegments`參數之後的起點，若要在曲線中繪製指定的區段數目。 值`numberOfSegments`參數必須至少為 1。 值`offset`參數加上值`numberOfSegments`參數必須是少於陣列中的項目數目`points`參數。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   定義起始點的位移和的區段數目。  
  
-   繪製的開啟綠色曲線 （從第三個點開始） 透過最後五個點。  
  
 此方法會使用預設張力為 0.5。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <param name="offset">從 <c>points</c> 參數陣列第一個項目到曲線開始點的位移。</param>
        <param name="numberOfSegments">要在曲線中包括的開始點後的線段數目。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的張力，繪製穿過指定陣列的 <see cref="T:System.Drawing.Point" /> 結構的基本曲線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.Point>曲線要繪製的結構。  
  
 值`offset`參數指定要在陣列中略過的項目數目。 已略過的項目之後的第一個項目代表曲線開始點。  
  
 值`numberOfSegments`參數之後的起點，若要在曲線中繪製指定的區段數目。 值`numberOfSegments`參數必須至少為 1。 值`offset`參數加上值`numberOfSegments`參數必須是少於陣列中的項目數目`points`參數。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   定義起始點的位移和的區段數目。  
  
-   定義張力。  
  
-   繪製的開啟綠色曲線 （從第三個點開始） 透過最後五個點。  
  
 方法會設定為 1.0 的張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定曲線的色彩、寬度和樣式。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <param name="offset">從 <c>points</c> 參數陣列第一個項目到曲線開始點的位移。</param>
        <param name="numberOfSegments">要在曲線中包括的開始點後的線段數目。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的張力，繪製穿過指定陣列的 <see cref="T:System.Drawing.PointF" /> 結構的基本曲線。 會從陣列開頭位移開始繪製。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製在通過陣列中每個點的基本曲線。  
  
 點陣列必須包含至少三個<xref:System.Drawing.PointF>曲線要繪製的結構。  
  
 值`offset`參數指定要在陣列中略過的項目數目。 已略過的項目之後的第一個項目代表曲線開始點。  
  
 值`numberOfSegments`參數之後的起點，若要在曲線中繪製指定的區段數目。 值`numberOfSegments`參數必須至少為 1。 值`offset`參數加上值`numberOfSegments`參數必須是少於陣列中的項目數目`points`參數。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立紅色和綠色的畫筆。  
  
-   會建立七個點來定義曲線。  
  
-   若要不完整的多邊形七個點之間繪製六個紅色的直線。  
  
-   定義起始點的位移和的區段數目。  
  
-   定義張力。  
  
-   繪製的開啟綠色曲線 （從第三個點開始） 透過最後五個點。  
  
 方法會設定為 1.0 的張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由一對座標、高度和寬度所指定的週框定義的橢圓形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定橢圓形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，定義橢圓形的邊界。</param>
        <summary>繪製由界限 <see cref="T:System.Drawing.Rectangle" /> 結構指定的橢圓形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由指定的周框所定義的橢圓形`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立繫結橢圓形的矩形。  
  
-   繪製橢圓形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定橢圓形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，定義橢圓形的邊界。</param>
        <summary>繪製由界限 <see cref="T:System.Drawing.RectangleF" /> 定義的橢圓形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由指定的周框所定義的橢圓形`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立繫結橢圓形的矩形。  
  
-   繪製橢圓形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定橢圓形的色彩、寬度和樣式。</param>
        <param name="x">週框左上角的 X 軸座標，這個週框定義橢圓形。</param>
        <param name="y">週框左上角的 Y 軸座標，這個週框定義橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義橢圓形。</param>
        <param name="height">週框的高度，這個週框定義橢圓形。</param>
        <summary>繪製由矩形左上角、高度和寬度的座標指定之週框所定義的橢圓形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製所描述之周框所定義的橢圓形`x`， `y`， `width`，和`height`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立位置和要繫結橢圓形的矩形的大小。  
  
-   繪製橢圓形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定橢圓形的色彩、寬度和樣式。</param>
        <param name="x">週框左上角的 X 軸座標，這個週框定義橢圓形。</param>
        <param name="y">週框左上角的 Y 軸座標，這個週框定義橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義橢圓形。</param>
        <param name="height">週框的高度，這個週框定義橢圓形。</param>
        <summary>繪製由一對座標、高度和寬度所指定的週框定義的橢圓形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製所描述之周框所定義的橢圓形`x`， `y`， `width`，和`height`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立位置和要繫結橢圓形的矩形的大小。  
  
-   繪製橢圓形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在指定的座標處，繪製由指定之 <see cref="T:System.Drawing.Icon" /> 所表示的影像。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">要繪製的 <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定在顯示介面上產生影像的位置和大小。 包含在 <c>icon</c> 參數中的影像會縮放為這個矩形區域的尺寸。</param>
        <summary>在 <see cref="T:System.Drawing.Rectangle" /> 結構指定的區域中，繪製由指定之 <see cref="T:System.Drawing.Icon" /> 表示的影像。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從標準的 Windows 圖示檔 SampIcon.ico 範例資料夾中建立的圖示。  
  
-   建立在其中繪製圖示的矩形。  
  
-   繪製至畫面的圖示。  
  
 矩形的位置找出圖示在畫面上，並繪製圖示的縮放比例的矩形的大小決定。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">要繪製的 <see cref="T:System.Drawing.Icon" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <summary>在指定的座標處，繪製由指定之 <see cref="T:System.Drawing.Icon" /> 所表示的影像。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從標準的 Windows 圖示檔 SampIcon.ico 範例資料夾中建立的圖示。  
  
-   建立要繪製圖示左上角的座標。  
  
-   繪製至畫面的圖示。  
  
 繪製的圖示是未縮放。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">要繪製的 <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定產生影像的位置和大小。 影像不會縮放以符合這個矩形，而是保留它的原始大小。 如果影像比矩形大，則它會裁剪以適合置入此矩形。</param>
        <summary>繪製由指定之 <see cref="T:System.Drawing.Icon" /> 表示的影像，但不縮放影像。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從標準的 Windows 圖示檔 SampIcon.ico 範例資料夾中建立的圖示。  
  
-   建立在其中繪製圖示的矩形。  
  
-   繪製至畫面的圖示。  
  
 矩形的位置圖示會放置在畫面上，並繪製的圖示是縮放且未裁剪。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以原始大小，在指定之位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> 結構，指定繪製影像的左上角位置。</param>
        <summary>使用原始的實體大小，在指定位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 這個方法會繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫此方法以繪製該映像的裝置解析度為 96 dpi 上時，所呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點。  
  
-   無縮放的影像繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列。</param>
        <summary>以指定的形狀和大小，在指定之位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 所表示的影像`image`參數可調整且修剪來符合所指定的平行四邊形的圖形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   將影像繪製至螢幕。  
  
 平行四邊形的位置影像的畫面上，以及原始映像大小和大小與形狀的平行四邊形決定調整和修剪繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> 結構，表示繪製影像的左上角。</param>
        <summary>使用原始的實體大小，在指定位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 這個方法會繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫此方法以繪製該映像的裝置解析度為 96 dpi 上時，所呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點。  
  
-   無縮放的影像繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <summary>以指定的形狀和大小，在指定之位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 所表示的影像`image`物件是調整及修剪來符合所指定的平行四邊形的圖形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   將影像繪製至螢幕。  
  
 平行四邊形的位置影像的畫面上，以及原始映像大小和大小與形狀的平行四邊形決定調整和修剪繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。</param>
        <summary>以指定的大小，在指定的位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所表示的影像`image`物件會調整的尺寸為`rect`矩形。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立在其中繪製影像的矩形。  
  
-   將影像繪製至螢幕。  
  
 矩形的位置影像的畫面上，以及原始映像的大小和矩形的大小會決定所繪製影像的縮放比例。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定繪製影像的位置和大小。</param>
        <summary>以指定的大小，在指定的位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所表示的影像`image`物件會調整的尺寸為`rect`矩形。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立在其中繪製影像的矩形。  
  
-   將影像繪製至螢幕。  
  
 矩形的位置影像的畫面上，以及原始映像的大小和矩形的大小會決定所繪製影像的縮放比例。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <summary>使用原始的實體大小將指定的影像繪製於座標對所指定的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 <xref:System.Drawing.Graphics.DrawImage%2A>方法繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫<xref:System.Drawing.Graphics.DrawImage%2A>解析度為 96 dpi 的裝置上繪製該映像，呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例 SampImag.jpg 資料夾中的範例中的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點的座標。  
  
-   無縮放的影像繪製。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <summary>使用原始的實體大小，在指定位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 這個方法會繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫此方法以繪製該映像的裝置解析度為 96 dpi 上時，所呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點的座標。  
  
-   無縮放的影像繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將影像繪製至螢幕。  
  
 平行四邊形的位置找出的映像在畫面上，並矩形和大小的大小和形狀的平行四邊形的決定調整和修剪繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地平行四邊形的點。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 映像會放置在螢幕上的目的地平行四邊形的位置，來源矩形和大小的大小和形狀目的平行四邊形判斷的縮放和修剪繪製影像，並決定矩形的大小原始的映像的哪些部分會繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的地矩形。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 影像會放置在螢幕上目的地矩形的位置、 來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的地矩形。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 影像會放置在螢幕上目的地矩形的位置、 來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <summary>在指定的位置，繪製指定之 <see cref="T:System.Drawing.Image" /> 的指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整平行四邊形，映像會放置在畫面上，位置以及矩形和大小的大小和形狀的平行四邊形的決定的縮放和修剪繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地平行四邊形的點。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 原始、 未調整目的地平行四邊形的位置上螢幕、 來源矩形的大小和大小的映像以及目的地的平行四邊形的圖形會決定縮放和修剪繪製的影像，以及的大小矩形判斷原始映像的哪個部分要繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>將影像的一部分繪製於指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，像素寬度 360 和每 72 英吋的水平解析度的影像具有實體寬度為 5 英吋。 類似的備註適用於像素高度和實體的高度。  
  
 這個方法會繪製影像使用的實體大小，因此影像部分會有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數） 的一部分。 例如，假設影像部分有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫這個方法的裝置解析度為 96 dpi 上繪製影像部分時，所呈現的影像部分的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角座標。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 來源矩形的大小會決定哪些部分未縮放的原始影像繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <param name="width">繪製影像的寬度。</param>
        <param name="height">繪製影像的高度。</param>
        <summary>以指定的大小，在指定的位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所定義的矩形`x`， `y`， `width`，和`height`參數會決定所繪製影像的大小與位置。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立在其中繪製影像的矩形的大小與位置。  
  
-   將影像繪製至螢幕。  
  
 矩形的位置影像的畫面上，以及原始映像的大小和矩形的大小會決定所繪製影像的縮放比例。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定要繪製之 <see cref="T:System.Drawing.Image" /> 的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <summary>將影像的一部分繪製於指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，像素寬度 360 和每 72 英吋的水平解析度的影像具有實體寬度為 5 英吋。 類似的備註適用於像素高度和實體的高度。  
  
 這個方法會繪製影像使用的實體大小，因此影像部分會有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數） 的一部分。 例如，假設影像部分有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫這個方法的裝置解析度為 96 dpi 上繪製影像部分時，所呈現的影像部分的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角座標。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 來源矩形的大小會決定哪些部分未縮放的原始影像繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <param name="width">繪製影像的寬度。</param>
        <param name="height">繪製影像的高度。</param>
        <summary>以指定的大小，在指定的位置繪製指定的 <see cref="T:System.Drawing.Image" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所定義的矩形`x`， `y`， `width`，和`height`參數會決定所繪製影像的大小與位置。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立在其中繪製影像的矩形的大小與位置。  
  
-   將影像繪製至螢幕。  
  
 矩形的位置影像的畫面上，以及原始映像的大小和矩形的大小會決定所繪製影像的縮放比例。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 方法。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
 具有這個多載`callback`參數提供的方式，一旦啟動根據應用程式所決定的準則就會停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整平行四邊形，映像會放置在畫面上，位置以及矩形和大小的大小和形狀的平行四邊形的決定的縮放和修剪繪製影像。  
  
 由於這個範例會使用多載未通過`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`true`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法結束時，和包含在此範例中的例外狀況處理程式碼會列印出例外狀況文字，而非繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 方法。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
 具有這個多載`callback`參數提供的方式，一旦啟動根據應用程式所決定的準則就會停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整平行四邊形，映像會放置在畫面上，位置以及矩形和大小的大小和形狀的平行四邊形的決定的縮放和修剪繪製影像。  
  
 由於這個範例會使用多載未通過`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`true`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法結束時，和包含在此範例中的例外狀況處理程式碼會列印出例外狀況文字，而非繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 方法。</param>
        <param name="callbackData">數值，指定 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派在檢查是否停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 方法時要使用的額外資料。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
 具有這個多載`callback`和`callbackData`參數提供的方式，根據準則和資料取決於應用程式啟動之後停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整平行四邊形，映像會放置在畫面上，位置以及矩形和大小的大小和形狀的平行四邊形的決定的縮放和修剪繪製影像。  
  
 由於這個範例會使用傳遞的多載`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`false`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法，若要繼續，與範例調整的影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">定義平行四邊形之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定 <c>image</c> 物件要繪製的部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定 <c>srcRect</c> 參數所使用的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 方法。</param>
        <param name="callbackData">數值，指定 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派在檢查是否停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 方法時要使用的額外資料。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。  
  
 `srcRect`參數指定的矩形部分`image`繪製的物件。 這個部分會調整及修剪來配合所指定的平行四邊形`destPoints`參數。  
  
 具有這個多載`callback`和`callbackData`參數提供的方式，根據準則和資料取決於應用程式啟動之後停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的`Pa`<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的平行四邊形的點。  
  
-   建立矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的額外的平行四邊形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整平行四邊形，映像會放置在畫面上，位置以及矩形和大小的大小和形狀的平行四邊形的決定的縮放和修剪繪製影像。  
  
 由於這個範例會使用傳遞的多載`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`false`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法，若要繼續，與範例調整的影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的地矩形。  
  
-   建立要從中擷取映像的一部分的來源矩形的座標。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 在畫面上，目的地矩形的位置找出的映像來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的矩形的座標。  
  
-   建立來源矩形要從中擷取映像的一部分。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將影像繪製至螢幕。  
  
 影像會放置在螢幕上目的地矩形的位置、 來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的地矩形。  
  
-   建立要從中擷取映像的一部分的來源矩形的座標。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，會放置位置之映像在畫面上，來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始的映像會繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要在其中繪製影像的目的地矩形。  
  
-   建立要從中擷取映像的一部分的來源矩形的座標。  
  
-   設定來源矩形的測量的單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，會放置位置之映像在畫面上，來源和目的地矩形的大小會決定所繪製影像，縮放和來源矩形的大小會決定哪些部分原始的映像會繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 方法。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`物件。  
  
 具有這個多載`callback`參數提供的方式，一旦啟動根據應用程式所決定的準則就會停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地矩形的點。  
  
-   建立來源矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他目的地矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，影像會放置在畫面上，位置和來源矩形和大小的大小和目的地矩形的圖形會決定所繪製影像的縮放比例。  
  
 由於這個範例會使用多載未通過`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`true`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法結束時，和包含在此範例中的例外狀況處理程式碼會列印出例外狀況文字，而非繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 方法。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
 具有這個多載`callback`參數提供的方式，一旦啟動根據應用程式所決定的準則就會停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地矩形的點。  
  
-   建立來源矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他目的地矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，影像會放置在畫面上，位置和來源矩形和大小的大小和目的地矩形的圖形會決定所繪製影像的縮放比例。  
  
 由於這個範例會使用多載未通過`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`true`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法結束時，和包含在此範例中的例外狀況處理程式碼會列印出例外狀況文字，而非繪製影像。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> 方法。</param>
        <param name="callbackData">數值，指定 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派在檢查是否停止執行 <see langword="DrawImage" /> 方法時要使用的額外資料。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
 具有這個多載`callback`和`callbackData`參數提供的方式，根據準則和資料取決於應用程式啟動之後停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地矩形的點。  
  
-   建立來源矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他目的地矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，影像會放置在畫面上，位置和來源矩形和大小的大小和目的地矩形的圖形會決定所繪製影像的縮放比例。  
  
 由於這個範例會使用傳遞的多載`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`false`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法，若要繼續，與範例調整的影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定繪製影像的位置和大小。 縮放影像來符合矩形。</param>
        <param name="srcX">要繪製之來源影像部分左上角的 X 座標。</param>
        <param name="srcY">要繪製之來源影像部分左上角的 Y 座標。</param>
        <param name="srcWidth">要繪製之來源影像部分的寬度。</param>
        <param name="srcHeight">要繪製之來源影像部分的高度。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷來源矩形的測量單位。</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定 <c>image</c> 物件的重新著色和 Gamma 資訊。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派，在繪製影像期間指定要呼叫的方法。 這個方法會經常被呼叫，以檢查是否要根據應用程式所決定的準則來停止執行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> 方法。</param>
        <param name="callbackData">數值，指定 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 委派在檢查是否停止執行 <see langword="DrawImage" /> 方法時要使用的額外資料。</param>
        <summary>以指定的大小，在指定的位置繪製所指定 <see cref="T:System.Drawing.Image" /> 之指定部分。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`， `srcY`， `srcWidth`，和`srcHeight`參數指定矩形的部分，`image`繪製的物件。 矩形是相對於來源影像的左上角。 這個部分會調整為適合所指定的矩形內`destRect`參數。  
  
 具有這個多載`callback`和`callbackData`參數提供的方式，根據準則和資料取決於應用程式啟動之後停止映像的繪圖。 例如，應用程式無法在繪製大型影像，使用者可能會捲動超出螢幕，在其中應用程式可能會停止繪製影像。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 程式碼會先定義回呼方法，以便<xref:System.Drawing.Graphics.DrawImageAbort>委派; 定義是最簡單，而且只是測試以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法會呼叫它具有 null`callBackData`參數。 此範例的主要本文會執行下列動作：  
  
-   建立的執行個體<xref:System.Drawing.Graphics.DrawImageAbort>回呼方法。  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立定義要在其中繪製影像的目的地矩形的點。  
  
-   建立來源矩形來選取要繪製之影像的一部分。  
  
-   設定圖形的繪製單位為像素。  
  
-   將原始的影像繪製至螢幕。  
  
-   建立要在其中繪製調整的影像的其他目的地矩形。  
  
-   建立並設定為具有較大比一般的 gamma 值調整影像的屬性。  
  
-   已調整的影像繪製至螢幕。  
  
 針對原始、 未調整目的地矩形，影像會放置在畫面上，位置和來源矩形和大小的大小和目的地矩形的圖形會決定所繪製影像的縮放比例。  
  
 由於這個範例會使用傳遞的多載`callBackData`參數，<xref:System.Drawing.Graphics.DrawImageAbort>回呼傳回`false`，這會導致<xref:System.Drawing.Graphics.DrawImage%2A>方法，若要繼續，與範例調整的影像繪製至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用原始的實體大小將指定的影像繪製於座標對所指定的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> 結構，指定繪製影像的左上角。</param>
        <summary>使用原始的實體大小將指定影像繪製於指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A>方法繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫<xref:System.Drawing.Graphics.DrawImageUnscaled%2A>解析度為 96 dpi 的裝置上繪製該映像，呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案 SampImag.jpg 範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點。  
  
-   使用的實體大小將整個影像繪製。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" />，指定繪製影像的左上角。 矩形的 X 和 Y 屬性指定左上角。 Width 和 Height 屬性會被忽略。</param>
        <summary>使用原始的實體大小將指定影像繪製於指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A>方法繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫<xref:System.Drawing.Graphics.DrawImageUnscaled%2A>解析度為 96 dpi 的裝置上繪製該映像，呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <summary>使用原始的實體大小將指定的影像繪製於座標對所指定的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A>方法繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫<xref:System.Drawing.Graphics.DrawImageUnscaled%2A>解析度為 96 dpi 的裝置上繪製該映像，呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   從 JPEG 檔案、 SampImag.jpg，在此範例的資料夾中建立的映像。  
  
-   建立要繪製影像的左上角的點。  
  
-   使用的實體大小將整個影像繪製。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">繪製影像左上角的 X 座標。</param>
        <param name="y">所繪製影像左上角的 Y 座標。</param>
        <param name="width">未使用。</param>
        <param name="height">未使用。</param>
        <summary>使用原始的實體大小將指定影像繪製於指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image>儲存值，以像素寬度和水平解析度 （每英吋點數） 的值。 實體的寬度，以英吋，映像的單位是像素寬度除以水平解析度。 例如，216 像素寬度和水平解析度每 72 英吋的映像有實體 3 英吋的寬度。 類似的備註適用於像素高度和實體的高度。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A>方法繪製影像使用的實體大小，讓映像將會擁有正確的大小是以英吋，不論顯示裝置的解析度 （每英吋點數）。 例如，假設映像有 216 像素寬度和水平解析度 72 每英吋的點數。 如果您呼叫<xref:System.Drawing.Graphics.DrawImageUnscaled%2A>解析度為 96 dpi 的裝置上繪製該映像，呈現影像的像素寬度會 (216/72) * 96 = 288。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">要繪製的 <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">要在其中繪製影像的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>必要時，繪製指定的影像，而不需要加以縮放或裁剪以容納在指定的矩形中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何使用 <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> 方法。 若要執行這個範例，請將其貼入 Windows Form 中。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件和呼叫`DrawImageUnscaled`方法從<xref:System.Windows.Forms.Control.Paint>事件處理方法，傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製連接由座標對所指定的兩個點之直線。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定直線的色彩、寬度和樣式。</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> 結構，表示要連接的第一個點。</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> 結構，表示要連接的第二個點。</param>
        <summary>繪製連接兩個 <see cref="T:System.Drawing.Point" /> 結構的直線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立點線條的端點。  
  
-   將線條繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定直線的色彩、寬度和樣式。</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> 結構，表示要連接的第一個點。</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> 結構，表示要連接的第二個點。</param>
        <summary>繪製連接兩個 <see cref="T:System.Drawing.PointF" /> 結構的直線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製連接兩個點所指定的線條`pt1`和 p`2`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立點線條的端點。  
  
-   將線條繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定直線的色彩、寬度和樣式。</param>
        <param name="x1">第一點的 X 座標。</param>
        <param name="y1">第一點的 Y 座標。</param>
        <param name="x2">第二點的 X 座標。</param>
        <param name="y2">第二點的 Y 座標。</param>
        <summary>繪製連接由座標對所指定的兩個點之直線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製連接兩個點所指定的線條`x1`， `y1`， `x2`，和`y2`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立線條的端點的座標。  
  
-   將線條繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定直線的色彩、寬度和樣式。</param>
        <param name="x1">第一點的 X 座標。</param>
        <param name="y1">第一點的 Y 座標。</param>
        <param name="x2">第二點的 X 座標。</param>
        <param name="y2">第二點的 Y 座標。</param>
        <summary>繪製連接由座標對所指定的兩個點之直線。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製連接兩個點所指定的線條`x1`， `y1`， `x2`，和`y2`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立線條的端點的座標。  
  
-   將線條繪製至螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製連接 <see cref="T:System.Drawing.Point" /> 結構陣列的一系列直線線段。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定線段的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，此結構表示要連接的點。</param>
        <summary>繪製連接 <see cref="T:System.Drawing.Point" /> 結構陣列的一系列直線線段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製一系列的連接線的結束點陣列。 陣列中的前兩個點指定的第一行。 每個額外的點指定直線線段的起點是先前的直線線段的結束點的結束。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立直線線段的點陣列。  
  
-   繪製之連接的直線線段至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定線段的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，此結構表示要連接的點。</param>
        <summary>繪製連接 <see cref="T:System.Drawing.PointF" /> 結構陣列的一系列直線線段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製一系列的連接線的結束點陣列。 陣列中的前兩個點指定的第一行。 每個額外的點指定直線線段的起點是先前的直線線段的結束點的結束。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   程式碼會建立黑色的畫筆。  
  
-   建立直線線段的點陣列。  
  
-   繪製之連接的直線線段至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定路徑的色彩、寬度和樣式。</param>
        <param name="path">要繪製的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>繪製 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 圖形內容中目前的轉換套用至<xref:System.Drawing.Drawing2D.GraphicsPath>繪製之前。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立圖形路徑物件，並加入至其中的橢圓形。  
  
-   建立黑色畫筆。  
  
-   繪製至畫面的圖形路徑。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="path" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由橢圓形所定義的派形，該橢圓形是由座標對、寬度、高度和兩條放射線所指定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定派形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示定義派形的來源橢圓形之周框。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形的第二個邊所測量的角度。</param>
        <summary>繪製由 <see cref="T:System.Drawing.Rectangle" /> 結構和兩條放射線指定的橢圓形所定義的派形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由橢圓形和兩條放射線交集的弧形弧線的端點定義的派形。周框定義橢圓形。 包含的兩條放射線所定義的派形`startAngle`和`sweepAngle`參數，以及這些放射線橢圓形交集之間的弧度。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立住完整橢圓形的矩形。  
  
-   定義要繪圖 （相對於 x 軸） 的開始角度和，以繪製 （順時針方向兩者）。  
  
-   繪製到螢幕的派形區段。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定派形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，表示定義派形的來源橢圓形之周框。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形的第二個邊所測量的角度。</param>
        <summary>繪製由 <see cref="T:System.Drawing.RectangleF" /> 結構和兩條放射線指定的橢圓形所定義的派形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由橢圓形和兩條放射線交集的弧形弧線的端點定義的派形。周框定義橢圓形。 包含的兩條放射線所定義的派形`startAngle`和`sweepAngle`參數，以及這些放射線橢圓形交集之間的弧度。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立住完整橢圓形的矩形。  
  
-   定義要繪圖 （相對於 x 軸） 的開始角度和，以繪製 （順時針方向兩者）。  
  
-   繪製到螢幕的派形區段。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定派形的色彩、寬度和樣式。</param>
        <param name="x">週框左上角的 X 座標，這個週框定義派形的來源橢圓形。</param>
        <param name="y">週框左上角的 X 座標，這個週框定義派形的來源橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義派形的來源橢圓形。</param>
        <param name="height">週框的高度，這個週框定義派形的來源橢圓形。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形的第二個邊所測量的角度。</param>
        <summary>繪製由橢圓形所定義的派形，該橢圓形是由座標對、寬度、高度和兩條放射線所指定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由橢圓形和兩條放射線交集的弧形弧線的端點定義的派形。所描述的週框定義橢圓形`x`， `y`， `width`，和`height`參數。 包含的兩條放射線所定義的派形`startAngle`和`sweepAngle`參數，以及這些放射線橢圓形交集之間的弧度。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立的位置和大小住完整橢圓形的矩形。  
  
-   定義要繪圖 （相對於 x 軸） 的開始角度和，以繪製 （順時針方向兩者）。  
  
-   繪製到螢幕的派形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定派形的色彩、寬度和樣式。</param>
        <param name="x">週框左上角的 X 座標，這個週框定義派形的來源橢圓形。</param>
        <param name="y">週框左上角的 X 座標，這個週框定義派形的來源橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義派形的來源橢圓形。</param>
        <param name="height">週框的高度，這個週框定義派形的來源橢圓形。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形的第二個邊所測量的角度。</param>
        <summary>繪製由橢圓形所定義的派形，該橢圓形是由座標對、寬度、高度和兩條放射線所指定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會繪製由橢圓形和兩條放射線交集的弧形弧線的端點定義的派形。所描述的週框定義橢圓形`x`， `y`， `width`，和`height`參數。 包含的兩條放射線所定義的派形`startAngle`和`sweepAngle`參數，以及這些放射線橢圓形交集之間的弧度。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立的位置和大小住完整橢圓形的矩形。  
  
-   定義要繪圖 （相對於 x 軸） 的開始角度和，以繪製 （順時針方向兩者）。  
  
-   繪製到螢幕的派形區段。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由 <see cref="T:System.Drawing.Point" /> 結構陣列定義的多邊形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定多邊形的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，表示多邊形的頂點。</param>
        <summary>繪製由 <see cref="T:System.Drawing.Point" /> 結構陣列定義的多邊形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 陣列中的兩個連續點的每一對指定的側邊的多邊形。 此外，如果不重疊的最後一個點和陣列的第一個點，它們會指定最後一個的側邊的多邊形。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立七個點的多邊形頂點的陣列。  
  
-   繪製多邊形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定多邊形的色彩、寬度和樣式。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，表示多邊形的頂點。</param>
        <summary>繪製由 <see cref="T:System.Drawing.PointF" /> 結構陣列定義的多邊形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 陣列中的兩個連續點的每一對指定的側邊的多邊形。 此外，如果最後一個點和點陣列的第一個不一致，它們會指定最後一個的側邊的多邊形。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立七個點的多邊形頂點的陣列。  
  
-   繪製多邊形至畫面。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由座標對、寬度和高度所指定的矩形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定矩形的色彩、寬度和樣式。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示要繪製的矩形。</param>
        <summary>繪製由 <see cref="T:System.Drawing.Rectangle" /> 結構指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需如何繪製<xref:System.Drawing.RectangleF>，請參閱<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立的矩形。  
  
-   將矩形繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定矩形的色彩、寬度和樣式。</param>
        <param name="x">要繪製之矩形左上角的 X 座標。</param>
        <param name="y">要繪製之矩形左上角的 Y 座標。</param>
        <param name="width">要繪製的矩形的寬度。</param>
        <param name="height">要繪製的矩形的高度。</param>
        <summary>繪製由座標對、寬度和高度所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需如何繪製<xref:System.Drawing.RectangleF>，請參閱<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立的位置和大小的矩形。  
  
-   將矩形繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定矩形的色彩、寬度和樣式。</param>
        <param name="x">要繪製之矩形左上角的 X 座標。</param>
        <param name="y">要繪製之矩形左上角的 Y 座標。</param>
        <param name="width">要繪製的矩形的寬度。</param>
        <param name="height">要繪製的矩形的高度。</param>
        <summary>繪製由座標對、寬度和高度所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需如何繪製<xref:System.Drawing.RectangleF>，請參閱<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立的位置和大小的矩形。  
  
-   將矩形繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繪製由 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的一系列矩形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定矩形外框的色彩、寬度和樣式。</param>
        <param name="rects">
          <see cref="T:System.Drawing.Rectangle" /> 結構的陣列，表示要繪製的矩形。</param>
        <summary>繪製由 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的一系列矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立三個矩形的陣列。  
  
-   將矩形繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="rects" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> 是長度為零的陣列。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" />，決定矩形外框的色彩、寬度和樣式。</param>
        <param name="rects">
          <see cref="T:System.Drawing.RectangleF" /> 結構的陣列，表示要繪製的矩形。</param>
        <summary>繪製由 <see cref="T:System.Drawing.RectangleF" /> 結構所指定的一系列矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立黑色畫筆。  
  
-   建立三個矩形的陣列。  
  
-   將矩形繪製到螢幕。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> 為 <see langword="null" />。  -或-  <paramref name="rects" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> 是長度為零的陣列。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，將指定的文字字串繪製於指定的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> 結構，指定繪製文字的左上角。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，將指定的文字字串繪製於指定的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心、 黑色的筆刷，來繪製。  
  
-   建立要繪製文字左上角的點。  
  
-   繪製到螢幕使用的字型、 筆刷和目的地點的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定繪製文字的位置。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，將指定的文字字串繪製在指定的矩形中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所代表的文字`s`參數所表示的矩形內繪製`layoutRectangle`參數。 如果文字不符合置於矩形內，它會截斷在最接近的字。 若要進一步操作字串將矩形內部的繪製方式<xref:System.Drawing.Graphics.DrawString%2A>採用多載<xref:System.Drawing.StringFormat>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心、 黑色的筆刷，來繪製。  
  
-   建立在其中繪製文字的矩形。  
  
-   將矩形繪製到螢幕。  
  
-   繪製到螢幕使用的字型、 筆刷和目的地矩形的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> 結構，指定繪製文字的左上角。</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" />，指定套用到所繪製文字的格式化屬性，例如，行距和對齊。</param>
        <summary>使用指定之 <see cref="T:System.Drawing.StringFormat" /> 的格式化屬性，以指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，在指定之位置繪製指定的文字字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心、 黑色的筆刷，來繪製。  
  
-   建立要繪製文字左上角的點。  
  
-   設定要垂直地繪製之字串的格式。  
  
-   繪製到螢幕使用的字型、 筆刷、 目的地點和格式的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定繪製文字的位置。</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" />，指定套用到所繪製文字的格式化屬性，例如，行距和對齊。</param>
        <summary>使用指定之 <see cref="T:System.Drawing.StringFormat" /> 的格式化屬性，以指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，在指定之矩形內繪製指定的文字字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所代表的文字`s`參數所表示的矩形內繪製`layoutRectangle`參數。 如果文字無法容納置於矩形內，則會截斷在最接近的字，除非另有指定`format`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心、 黑色的筆刷，來繪製。  
  
-   建立在其中繪製文字的矩形。  
  
-   將矩形繪製到螢幕。  
  
-   設定要置矩形內的字串格式。  
  
-   繪製到螢幕使用的字型、 筆刷和目的地矩形的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="x">繪製文字左上角的 X 座標。</param>
        <param name="y">繪製文字左上角的 Y 座標。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，將指定的文字字串繪製於指定的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心黑色筆刷繪製的。  
  
-   建立要繪製文字左上角的點。  
  
-   繪製到螢幕使用的字型、 筆刷和目的地點的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">要繪製的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定所繪製文字的色彩和紋理。</param>
        <param name="x">繪製文字左上角的 X 座標。</param>
        <param name="y">繪製文字左上角的 Y 座標。</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" />，指定套用到所繪製文字的格式化屬性，例如，行距和對齊。</param>
        <summary>使用指定之 <see cref="T:System.Drawing.StringFormat" /> 的格式化屬性，以指定的 <see cref="T:System.Drawing.Brush" /> 和 <see cref="T:System.Drawing.Font" /> 物件，在指定之位置繪製指定的文字字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要繪製的文字字串。  
  
-   定義之字型為 Arial (16pt)。  
  
-   建立實心、 黑色的筆刷，來繪製。  
  
-   建立點要繪製文字左上角的座標。  
  
-   設定要垂直地繪製的字串格式  
  
-   繪製到螢幕使用的字型、 筆刷、 目的地點和格式的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="s" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />，表示這個方法還原的容器。</param>
        <summary>關閉目前的圖形容器，並將這個 <see cref="T:System.Drawing.Graphics" /> 的狀態還原成藉由呼叫 <see cref="M:System.Drawing.Graphics.BeginContainer" /> 方法所儲存的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法加<xref:System.Drawing.Graphics.BeginContainer%2A>方法，以建立巢狀的圖形容器。 圖形容器保留圖形的狀態，例如轉換、 裁剪區域和呈現屬性。  
  
 當您呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.BeginContainer%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsContainer>可識別該資訊區塊。 當您識別物件傳遞至<xref:System.Drawing.Graphics.EndContainer%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 可以是巢狀容器。也就是說，您可以呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsContainer>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.EndContainer%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsContainer>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.BeginContainer%2A>方法。 就像<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫<xref:System.Drawing.Graphics.Restore%2A>方法呼叫搭配<xref:System.Drawing.Graphics.Save%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   會開啟新的圖形容器，並儲存舊的容器。  
  
-   將轉譯的容器中的全局座標。  
  
-   會以紅色矩形填滿 (已轉換的座標) 新的容器。  
  
-   關閉新的容器，並還原已儲存的容器。  
  
-   填滿儲存容器的綠色矩形 （至未轉換的座標）。  
  
 結果會是大小的綠色矩形，這個矩形相同的紅色矩形覆疊。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 下列程式碼範例會建立的表單具有<xref:System.Drawing.Imaging.Metafile>做為其中一個私用成員。 <xref:System.Windows.Forms.Control.OnPaint%2A>方法呼叫<xref:System.Drawing.Graphics.EnumerateMetafile%2A>，呼叫表單的`MetafileCallback`中繼檔中的每一筆記錄的方法。 `MetafileCallback` 方法會呼叫 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 方法。 請注意，`MetafileCallback`方法會接收記錄資料，做為<xref:System.IntPtr>，但<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法預期的記錄資料的位元組陣列。 若要呼叫<xref:System.Runtime.InteropServices.Marshal.Copy%2A>將記錄資料複製到位元組陣列，以便將它傳遞至<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>。  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所指定 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的資料錄一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須藉由呼叫此方法的特定執行<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 中的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將指定之 <see cref="T:System.Drawing.Imaging.Metafile" /> 的記錄一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="srcUnit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <summary>將所選取矩形中的資料錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以便在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形中的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.Point" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形中的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.Point>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> 結構，指定所繪製中繼檔的左上角位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形中的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的點上顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">定義平行四邊型之三個 <see cref="T:System.Drawing.PointF" /> 結構的陣列，會決定所繪製中繼檔的大小和位置。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形中的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的平行四邊形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 `destPoints`參數會指定三個平行四邊形的點。 三個<xref:System.Drawing.PointF>結構代表平行四邊形左上角、 右上角和左下角。 第四個點會從前前三個以形成平行四邊形。 所繪製中繼檔是調整，而且修剪來符合平行四邊形。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">要列舉的 <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定所繪製中繼檔的位置和大小。</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定與其左上角相關且要繪製之中繼檔部分。</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> 列舉的成員，指定用來判斷由 <c>srcRect</c> 參數指定的矩形所包含之中繼檔部分的測量單位。</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 委派，指定中繼檔記錄被傳送至的方法。</param>
        <param name="callbackData">必要但被忽略的內部指標。 您可以為這個參數傳入 <see cref="F:System.IntPtr.Zero" />。</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" />，指定所繪製影像的影像屬性資訊。</param>
        <summary>將選取之矩形的記錄從 <see cref="T:System.Drawing.Imaging.Metafile" /> 一次一筆地傳送至回呼方法，以使用指定之影像屬性在指定的矩形中顯示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會列舉包含指定的中繼檔中的記錄。 每一筆記錄會個別傳送至回呼方法所指定`callback`參數。 一般而言，回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>來 「 播放 」，或繪製、 記錄方法。  
  
 如果回呼方法會呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>，它必須這麼做藉由呼叫<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>方法的特定<xref:System.Drawing.Imaging.Metafile>正在列舉。  
  
 任何繪製發生外部所指定的矩形`srcRect`參數已忽略。  
  
 指定的映像屬性`imageAttr`參數所指定中繼檔已寫入時的取代。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>更新這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，以排除由 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的區域。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，指定要從裁剪區域排除的矩形。</param>
        <summary>更新這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，以排除由 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的區域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會排除所指定的區域`rect`為目前裁剪區域中的參數，並指派至產生的區域<xref:System.Drawing.Graphics.Clip%2A>屬性這<xref:System.Drawing.Graphics>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立 100 像素 x 100 像素矩形的左上角位於座標 （100，100）。  
  
-   建立之矩形所定義的區域。  
  
-   設定要排除的矩形區域的裁剪區域。  
  
-   填入 300 像素 x 300 像素矩形，其左上角位於座標 （0，0） 與實心藍色筆刷。  
  
 結果是缺少朝著右下角的方形區域藍色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" />，指定要從裁剪區域排除的區域。</param>
        <summary>更新這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，以排除由 <see cref="T:System.Drawing.Region" /> 所指定的區域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會排除所指定的區域`region`為目前裁剪區域中的參數，並指派至產生的區域<xref:System.Drawing.Graphics.Clip%2A>屬性這<xref:System.Drawing.Graphics>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立 100 像素 x 100 像素矩形的左上角位於座標 （100，100）。  
  
-   設定裁剪區域排除的矩形。  
  
-   填入 300 像素 x 300 像素矩形，其左上角位於座標 （0，0） 與實心藍色筆刷。  
  
 結果是缺少朝著右下角的正方形區域藍色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由 <see cref="T:System.Drawing.Point" /> 結構陣列所定義之封閉的基本曲線內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <summary>填滿由 <see cref="T:System.Drawing.Point" /> 結構陣列所定義之封閉的基本曲線內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿曲線的螢幕上。  
  
 曲線有預設值為 0.5 張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <summary>填滿由 <see cref="T:System.Drawing.PointF" /> 結構陣列所定義之封閉的基本曲線內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.PointF>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿曲線的螢幕上。  
  
 曲線有預設值為 0.5 張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。</param>
        <summary>使用指定的填滿模式，填滿 <see cref="T:System.Drawing.Point" /> 結構陣列所定義之封閉式基本曲線的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   填滿曲線的螢幕上。  
  
 曲線有預設值為 0.5 張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。</param>
        <summary>使用指定的填滿模式，填滿 <see cref="T:System.Drawing.PointF" /> 結構陣列所定義之封閉式基本曲線的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 這個方法會使用預設張力為 0.5。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   填滿曲線的螢幕上。  
  
 曲線有預設值為 0.5 張力。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.Point" /> 結構陣列。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的填滿模式和張力，填滿 <see cref="T:System.Drawing.Point" /> 結構陣列所定義之封閉式基本曲線的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   設定張力為 1.0。  
  
-   填滿曲線的螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">定義曲線的 <see cref="T:System.Drawing.PointF" /> 結構陣列。</param>
        <param name="fillmode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉的成員，決定填滿曲線的方法。</param>
        <param name="tension">大於或等於 0.0F 的值，指定曲線的張力。</param>
        <summary>使用指定的填滿模式和張力，填滿 <see cref="T:System.Drawing.PointF" /> 結構陣列所定義之封閉式基本曲線的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入通過陣列中的每個點的封閉基本曲線內部。 如果最後一個點不符合第一個點，會將額外的曲線線段加入的最後一個點的第一個點，以將它關閉。  
  
 點陣列必須包含至少 4 個<xref:System.Drawing.Point>結構。  
  
 `tension`參數會決定曲線的形狀。 如果值`tension`參數是 0.0，這個方法會繪製的直線線段連接的點。 通常，`tension`參數小於或等於 1.0 f。 透過 1.0 f 的值不會產生不尋常的結果。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   會建立四個點來定義曲線的陣列。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   設定張力為 1.0。  
  
-   填滿曲線的螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由座標對、寬度和高度指定的週框所定義的橢圓形內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示定義橢圓形的周框。</param>
        <summary>填滿由 <see cref="T:System.Drawing.Rectangle" /> 結構指定的周框所定義的橢圓形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入與的橢圓形內部<xref:System.Drawing.Brush>。 所代表的週框定義橢圓形`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立橢圓形的矩形。  
  
-   填滿橢圓形螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，表示定義橢圓形的周框。</param>
        <summary>填滿由 <see cref="T:System.Drawing.RectangleF" /> 結構指定的周框所定義的橢圓形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入與的橢圓形內部<xref:System.Drawing.Brush>。 所代表的週框定義橢圓形`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立橢圓形的矩形。  
  
-   填滿橢圓形螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">週框左上角的 X 軸座標，這個週框定義橢圓形。</param>
        <param name="y">週框左上角的 Y 軸座標，這個週框定義橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義橢圓形。</param>
        <param name="height">週框的高度，這個週框定義橢圓形。</param>
        <summary>填滿由座標對、寬度和高度指定的週框所定義的橢圓形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入與的橢圓形內部<xref:System.Drawing.Brush>。 所代表的週框定義橢圓形`x`， `y`， `width`，和`height`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立的位置和大小的橢圓形的矩形。  
  
-   填滿橢圓形螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">週框左上角的 X 軸座標，這個週框定義橢圓形。</param>
        <param name="y">週框左上角的 Y 軸座標，這個週框定義橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義橢圓形。</param>
        <param name="height">週框的高度，這個週框定義橢圓形。</param>
        <summary>填滿由座標對、寬度和高度指定的週框所定義的橢圓形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入與的橢圓形內部<xref:System.Drawing.Brush>。 所代表的週框定義橢圓形`x`， `y`， `width`，和`height`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立的位置和大小的橢圓形的矩形。  
  
-   填滿橢圓形螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />，表示要填滿的路徑。</param>
        <summary>填滿 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Drawing2D.GraphicsPath>直線和曲線線段的一系列所組成。 如果路徑以表示`path`參數未關閉，額外的區段加入的最後一個點来關閉路徑的第一個點。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立圖形路徑物件。  
  
-   將圖形路徑橢圓形。  
  
-   填滿螢幕上的路徑。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="path" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由座標對、寬度、高度和兩條放射線指定的橢圓形所定義的派形區域內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示定義派形區段的來源橢圓形之周框。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形區段的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形區段的第二個邊所測量的角度。</param>
        <summary>填滿由 <see cref="T:System.Drawing.RectangleF" /> 結構和兩條放射線指定的橢圓形所定義的派形區段的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法填滿橢圓形和兩條放射線交集的弧形弧線的端點所定義的派形區域內部。周框定義橢圓形。 包含的兩條放射線所定義的派形區段`startAngle`和`sweepAngle`參數和之間交集的那些放射線橢圓形弧線。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立橢圓形的矩形。  
  
-   定義 （相對於 x 軸） 的開始角度和掃掠角度 （順時針方向兩者）。  
  
-   填滿的派形區域在螢幕上的橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">週框左上角的 X 座標，這個週框定義派形區段的來源橢圓形。</param>
        <param name="y">週框左上角的 X 座標，這個週框定義派形區段的來源橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義派形區段的來源橢圓形。</param>
        <param name="height">週框的高度，這個週框定義派形區段的來源橢圓形。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形區段的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形區段的第二個邊所測量的角度。</param>
        <summary>填滿由座標對、寬度、高度和兩條放射線指定的橢圓形所定義的派形區域內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法填滿橢圓形和兩條放射線交集的弧形弧線的端點所定義的派形區域內部。周框定義橢圓形。 包含的兩條放射線所定義的派形區段`startAngle`和`sweepAngle`參數和之間交集的那些放射線橢圓形弧線。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立的位置和大小的橢圓形的矩形。  
  
-   定義 （相對於 x 軸） 的開始角度和掃掠角度 （順時針方向兩者）。  
  
-   填滿的派形區域在螢幕上的橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">週框左上角的 X 座標，這個週框定義派形區段的來源橢圓形。</param>
        <param name="y">週框左上角的 X 座標，這個週框定義派形區段的來源橢圓形。</param>
        <param name="width">週框的寬度，這個週框定義派形區段的來源橢圓形。</param>
        <param name="height">週框的高度，這個週框定義派形區段的來源橢圓形。</param>
        <param name="startAngle">以度為單位，依順時針方向測量之從 X 軸到派形區段的第一個邊的角度。</param>
        <param name="sweepAngle">以度為單位，依順時針方向從 <c>startAngle</c> 參數到派形區段的第二個邊所測量的角度。</param>
        <summary>填滿由座標對、寬度、高度和兩條放射線指定的橢圓形所定義的派形區域內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法填滿橢圓形和兩條放射線交集的弧形弧線的端點所定義的派形區域內部。周框定義橢圓形。 包含的兩條放射線所定義的派形區段`startAngle`和`sweepAngle`參數，以及這些放射線橢圓形交集之間的弧度。  
  
 如果`sweepAngle`參數大於 360 度或小於-360 度，它會被視為分別是 360 度或-360 度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心的紅色筆刷。  
  
-   建立的位置和大小的橢圓形的矩形。  
  
-   定義 （相對於 x 軸） 的開始角度和掃掠角度 （順時針方向兩者）。  
  
-   填滿的派形區域在螢幕上的橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由 <see cref="T:System.Drawing.Point" /> 結構指定的點陣列所定義的多邊形內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，表示要填滿的多邊形的頂點。</param>
        <summary>填滿由 <see cref="T:System.Drawing.Point" /> 結構指定的點陣列所定義的多邊形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個陣列中的兩個連續點指定多邊形的一邊。 此外，如果不重疊的最後一個點和第一個點，它們會指定多邊形的右端。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立陣列的七個點來定義的多邊形。  
  
-   填滿的多邊形的區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，表示要填滿的多邊形的頂點。</param>
        <summary>填滿由 <see cref="T:System.Drawing.PointF" /> 結構指定的點陣列所定義的多邊形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個陣列中的兩個連續點指定多邊形的一邊。 此外，如果不重疊的最後一個點和第一個點，它們會指定多邊形的右端。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立陣列的七個點來定義的多邊形。  
  
-   填滿的多邊形的區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，表示要填滿的多邊形的頂點。</param>
        <param name="fillMode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉型別的成員，決定填滿的樣式。</param>
        <summary>使用指定的填滿模式，填滿由 <see cref="T:System.Drawing.Point" /> 結構指定的點陣列所定義的多邊形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個陣列中的兩個連續點指定多邊形的一邊。 此外，如果不重疊的最後一個點和第一個點，它們會指定多邊形的右端。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立陣列的七個點來定義的多邊形。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   填滿的多邊形的區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="points">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，表示要填滿的多邊形的頂點。</param>
        <param name="fillMode">
          <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列舉型別的成員，決定填滿的樣式。</param>
        <summary>使用指定的填滿模式，填滿由 <see cref="T:System.Drawing.PointF" /> 結構指定的點陣列所定義的多邊形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個陣列中的兩個連續點指定多邊形的一邊。 此外，如果不重疊的最後一個點和第一個點，它們會指定多邊形的右端。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立陣列的七個點來定義的多邊形。  
  
-   填滿模式設定為<xref:System.Drawing.Drawing2D.FillMode.Winding>。  
  
-   填滿的多邊形的區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="points" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由座標對、寬度和高度指定的矩形內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示要填滿的矩形。</param>
        <summary>填滿由 <see cref="T:System.Drawing.Rectangle" /> 結構表示的矩形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入所定義的矩形內部`rect`參數，包括指定的左上角和最多的計算降低、 下邊緣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立的矩形。  
  
-   填滿的矩形區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，表示要填滿的矩形。</param>
        <summary>填滿由 <see cref="T:System.Drawing.RectangleF" /> 結構表示的矩形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入所定義的矩形內部`rect`參數，包括指定的左上角和最多的計算降低、 下邊緣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立的矩形。  
  
-   填滿的矩形區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">要填滿之矩形左上角的 X 座標。</param>
        <param name="y">要填滿之矩形左上角的 Y 座標。</param>
        <param name="width">要填滿的矩形的寬度。</param>
        <param name="height">要填滿的矩形的高度。</param>
        <summary>填滿由座標對、寬度和高度指定的矩形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入所定義的矩形內部`x`， `y`， `width`，和`height`參數，包括指定的左上角和最多的計算降低並下邊緣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立的位置和大小的矩形。  
  
-   填滿的矩形區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="x">要填滿之矩形左上角的 X 座標。</param>
        <param name="y">要填滿之矩形左上角的 Y 座標。</param>
        <param name="width">要填滿的矩形的寬度。</param>
        <param name="height">要填滿的矩形的高度。</param>
        <summary>填滿由座標對、寬度和高度指定的矩形內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入所定義的矩形內部`x`， `y`， `width`，和`height`參數，包括指定的左上角和最多的計算降低並下邊緣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立的位置和大小的矩形。  
  
-   填滿的矩形區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填滿由 <see cref="T:System.Drawing.Rectangle" /> 結構表示的一系列矩形的內部。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rects">
          <see cref="T:System.Drawing.Rectangle" /> 結構的陣列，表示要填滿的矩形。</param>
        <summary>填滿由 <see cref="T:System.Drawing.Rectangle" /> 結構表示的一系列矩形的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立三個矩形的陣列。  
  
-   填滿的矩形的三個區域，在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="rects" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> 是長度為零的陣列。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="rects">
          <see cref="T:System.Drawing.RectangleF" /> 結構的陣列，表示要填滿的矩形。</param>
        <summary>填滿由 <see cref="T:System.Drawing.RectangleF" /> 結構表示的一系列矩形的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立三個矩形的陣列。  
  
-   填滿的矩形的三個區域，在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="rects" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> 是長度為零的陣列。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" />，決定填滿的特性。</param>
        <param name="region">
          <see cref="T:System.Drawing.Region" />，表示要填滿的區域。</param>
        <summary>填滿 <see cref="T:System.Drawing.Region" /> 的內部。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Region>是矩形和路徑所組成。 如果未關閉的區域，會額外的區段加入的最後一個點的第一個點，以將它關閉。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立實心藍色筆刷。  
  
-   建立的矩形。  
  
-   建立矩形區域。  
  
-   填滿的矩形區域在螢幕上。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 為 <see langword="null" />。  -或-  <paramref name="region" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>強制執行所有暫止圖形作業，並立即傳回而不等待作業完成。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制執行所有暫止圖形作業，並立即傳回而不等待作業完成。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會開始清除，並立即傳回而不等候任何目前正在執行的圖形作業完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">
          <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> 列舉的成員，指定方法是否立即傳回或等待任何現有作業完成。</param>
        <summary>使用在作業完成之前依照指定等待或不等待傳回的方法，來強制執行所有暫止圖形作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值為<xref:System.Drawing.Drawing2D.FlushIntention.Flush>如`intention`參數會指定此方法傳回之後立即開始排清，而值為<xref:System.Drawing.Drawing2D.FlushIntention.Sync>指定的方法，返回之前等候任何現有的作業完成之前。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的裝置內容控制代碼建立新的 <see cref="T:System.Drawing.Graphics" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">裝置內容的控制代碼。</param>
        <summary>從指定的裝置內容控制代碼建立新的 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>這個方法會傳回指定之裝置內容的新 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該一律呼叫<xref:System.Drawing.Graphics.Dispose%2A>方法，以釋放<xref:System.Drawing.Graphics>和相關聯的資源建立<xref:System.Drawing.Graphics.FromHdc%2A>方法。  
  
 顯示裝置在沒有關聯的 ICM 色彩設定檔，[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]預設不會使用該設定檔。 若要啟用的 ICM <xref:System.Drawing.Graphics>，建構<xref:System.Drawing.Graphics>HDC 之後您將 HDC （和 ICM_ON） 傳遞給從`SetICMMode`函式。 然後由任何繪圖<xref:System.Drawing.Graphics>根據顯示裝置與相關聯的 ICM 設定檔，將會調整。 啟用 ICM 會導致效能變慢。  
  
 裝置內容 （對應模式、 邏輯單元，等等） 時的狀態呼叫<xref:System.Drawing.Graphics.FromHdc%2A>可能會影響呈現由<xref:System.Drawing.Graphics>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立的內部指標類型變數`hdc`並將它設定為表單的圖形物件的裝置內容控制代碼。  
  
-   建立新的圖形物件使用`hdc`。  
  
-   繪製有新的圖形物件的矩形 （螢幕上）。  
  
-   釋出新的圖形物件使用`hdc`。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">裝置內容的控制代碼。</param>
        <param name="hdevice">裝置的控制代碼。</param>
        <summary>從指定的裝置內容控制代碼和裝置控制代碼，建立新的 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>這個方法會傳回指定之裝置內容和裝置的新 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該一律呼叫<xref:System.Drawing.Graphics.Dispose%2A>方法，以釋放<xref:System.Drawing.Graphics>和相關聯的資源建立<xref:System.Drawing.Graphics.FromHdc%2A>方法。  
  
 顯示裝置在沒有關聯的 ICM 色彩設定檔，[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]預設不會使用該設定檔。 若要啟用的 ICM <xref:System.Drawing.Graphics>，建構<xref:System.Drawing.Graphics>HDC 之後您將 HDC （和 ICM_ON） 傳遞給從`SetICMMode`函式。 然後由任何繪圖<xref:System.Drawing.Graphics>根據顯示裝置與相關聯的 ICM 設定檔，將會調整。 啟用 ICM 會導致效能變慢。  
  
 裝置內容 （對應模式、 邏輯單元，等等） 時的狀態呼叫<xref:System.Drawing.Graphics.FromHdc%2A>可能會影響呈現由<xref:System.Drawing.Graphics>。  
  
 裝置控制代碼通常用來查詢特定的印表機功能。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">裝置內容的控制代碼。</param>
        <summary>傳回指定之裝置內容的 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>指定之裝置內容的 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不應該使用這個方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">視窗的控制代碼。</param>
        <summary>從指定之視窗控制代碼建立新的 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>這個方法會傳回指定之視窗控制代碼的新 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該一律呼叫<xref:System.Drawing.Graphics.Dispose%2A>方法，以釋放<xref:System.Drawing.Graphics>和相關聯的資源建立<xref:System.Drawing.Graphics.FromHwnd%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式，以及`thisForm`、<xref:System.Windows.Forms.Form>範例。 該程式碼執行下列動作：  
  
-   建立新的內部指標變數`hwnd`並將其設為範例之表單的控制代碼。  
  
-   建立新<xref:System.Drawing.Graphics>從控制代碼。  
  
-   繪製矩形到新<xref:System.Drawing.Graphics>使用紅色畫筆。  
  
-   處置新<xref:System.Drawing.Graphics>。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">視窗的控制代碼。</param>
        <summary>為指定之 Windows 控制代碼建立新的 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>指定之視窗控制代碼的 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不應該使用這個方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">用來建立新 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="T:System.Drawing.Image" />。</param>
        <summary>從指定的 <see cref="T:System.Drawing.Image" /> 建立新 <see cref="T:System.Drawing.Graphics" />。</summary>
        <returns>這個方法會傳回指定之 <see cref="T:System.Drawing.Image" /> 的新 <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果影像具有索引像素格式，這個方法會擲回的例外狀況訊息、 「 從具有索引像素格式的映像不能建立圖形物件 」。 下列清單中，會顯示索引像素格式。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 您可以使用索引的映像將儲存為另一種格式<xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29>方法，然後擷取<xref:System.Drawing.Graphics>新映像的物件。  
  
 這個方法也會擲回例外狀況如果該映像包含任何下列的像素格式。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 您應該一律呼叫<xref:System.Drawing.Graphics.Dispose%2A>方法，以釋放<xref:System.Drawing.Graphics>和相關聯的資源建立<xref:System.Drawing.Graphics.FromImage%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立<xref:System.Drawing.Image>從圖形檔案 SampImag.jpg 範例資料夾中。  
  
-   建立<xref:System.Drawing.Graphics>從<xref:System.Drawing.Image>。  
  
-   來填滿的矩形中變更該影像。  
  
-   繪製<xref:System.Drawing.Image>至螢幕。  
  
-   釋放建立<xref:System.Drawing.Graphics>。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Exception">
          <paramref name="image" /> 具備索引像素格式或其格式尚未定義。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得累計圖形內容。</summary>
        <returns>代表累計圖形內容的 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值是物件陣列，其中第一個項目包含的累積的裁剪區域，而第二個元素包含累積轉譯/轉換的矩陣。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得目前的 Windows 半色調調色盤的控制代碼。</summary>
        <returns>指定調色盤控制代碼的內部指標。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目的<xref:System.Drawing.Graphics.GetHalftonePalette%2A>方法是啟用[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]顯示器使用的每個像素的 8 位元時，產生更好的品質半色調。 若要顯示使用半色調調色盤的映像，請使用下列程序。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   定義互通性<xref:System.Runtime.InteropServices.DllImportAttribute>Windows DLL 檔案 gdi32.dll，其中包含必要的屬性[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式。  
  
-   定義`SelectPalette`和`RealizePalette`為外部 DLL 中的函式。  
  
-   建立從現有的映像檔 SampImag.jpg （這必須是相同的範例程式碼檔案的資料夾中） 的映像並將影像繪製至螢幕。  
  
-   建立內部指標類型變數，並將其值分別設定為 圖形物件和目前的 Windows 半色調調色盤的控制代碼。  
  
-   選取，並使用半色調調色盤。  
  
-   建立新的圖形物件使用`hdc`參數。  
  
-   一次繪製影像。  
  
-   釋放裝置內容控制代碼。  
  
 結果是兩個範例影像的呈現： 其中一個 16 位元調色盤，另一個使用 8 位元調色盤。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得與這個 <see cref="T:System.Drawing.Graphics" /> 關聯之裝置內容的控制代碼。</summary>
        <returns>與這個 <see cref="T:System.Drawing.Graphics" /> 關聯之裝置內容的控制代碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 裝置內容是根據 Windows 結構[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]，定義一組圖形物件和其相關聯的屬性，以及會影響輸出的圖形化模式。 這個方法會傳回字型的裝置內容。 因為未選取字型，則呼叫<xref:System.Drawing.Font.FromHdc%2A>方法使用所傳回的控制代碼<xref:System.Drawing.Graphics.GetHdc%2A>方法將會失敗。  
  
 呼叫<xref:System.Drawing.Graphics.GetHdc%2A>和<xref:System.Drawing.Graphics.ReleaseHdc%2A>方法必須出現在配對中。 在範圍期間<xref:System.Drawing.Graphics.GetHdc%2A>和<xref:System.Drawing.Graphics.ReleaseHdc%2A>方法組，您通常只對進行呼叫[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式。 呼叫，範圍對[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]方法<xref:System.Drawing.Graphics>產生`hdc`參數失敗，並`ObjectBusy`錯誤。 此外，[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]會忽略所做的狀態變更<xref:System.Drawing.Graphics>的`hdc`後續作業中的參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 本範例會示範呼叫 Windows[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式來執行相同的工作[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics>方法。 該程式碼執行下列動作：  
  
-   定義互通性<xref:System.Runtime.InteropServices.DllImportAttribute>Windows DLL 檔案 gdi32.dll 的屬性。 此 DLL 包含所需[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式。  
  
-   定義<xref:System.Drawing.Rectangle>為外部 DLL 中的函式。  
  
-   建立紅色畫筆。  
  
-   使用畫筆繪製矩形螢幕使用[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics.DrawRectangle%2A>方法。  
  
-   定義的內部指標類型變數`hdc`並將其值設定為表單的裝置內容控制代碼。  
  
-   繪製矩形螢幕使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]<xref:System.Drawing.Rectangle>函式。  
  
-   釋放裝置內容所表示`hdc`參數。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> 結構，用來尋找符合項目。</param>
        <summary>取得最接近指定的 <see cref="T:System.Drawing.Color" /> 結構的色彩。</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> 結構，表示最接近以 <paramref name="color" /> 參數所指定的色彩。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立任意色彩 ARGB 座標為 （255，165、 63，136）。  
  
-   建立實心筆刷，並將其色彩會設定為指定的色彩。  
  
-   填滿橢圓形使用任意色彩。  
  
-   建立第二個色彩，並將其值設定為最接近的系統 ARGB 色彩。  
  
-   第二個橢圓形填入這個色彩。  
  
 結果是兩個橢圓形： 第一個繪製具有任意指定的色彩和第二個以最接近指定的色彩系統色彩繪製。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與這個 <see cref="T:System.Drawing.Graphics" /> 關聯的插補模式。</summary>
        <value>其中一個 <see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插補模式可讓您判斷兩個之間的中間值計算端點。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域更新為目前裁剪區域和所指定 <see cref="T:System.Drawing.Rectangle" /> 結構的交集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">要和目前裁剪區域交叉的 <see cref="T:System.Drawing.Rectangle" /> 結構。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域更新為目前裁剪區域和所指定 <see cref="T:System.Drawing.Rectangle" /> 結構的交集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將指派給<xref:System.Drawing.Graphics.Clip%2A>屬性這<xref:System.Drawing.Graphics>為目前裁剪區域和所指定的矩形的交集的區域`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形左上角，在 （0，0） 和設定這個矩形的裁剪區域。  
  
-   建立第二個矩形左上角，在 （100，100） 並將裁剪區域設定為目前裁剪區域 （第一個矩形） 這個矩形的交集。  
  
-   填滿包含實心藍色筆刷與前的兩個矩形的大矩形。  
  
-   將裁剪區域重設為無限。  
  
-   兩個裁剪區域周圍繪製的矩形。 它會使用黑色畫筆裁剪方框第一個和第二個的裁剪區域的紅色畫筆。  
  
 結果是兩個矩形的交集會填滿藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">要和目前裁剪區域交叉的 <see cref="T:System.Drawing.RectangleF" /> 結構。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域更新為目前裁剪區域和所指定 <see cref="T:System.Drawing.RectangleF" /> 結構的交集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將指派給<xref:System.Drawing.Graphics.Clip%2A>屬性這<xref:System.Drawing.Graphics>為目前裁剪區域和所指定的矩形的交集的區域`rect`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形左上角，在 （0，0） 和設定這個矩形的裁剪區域。  
  
-   建立第二個矩形左上角，在 （100，100） 並將裁剪區域設定為目前裁剪區域 （第一個矩形） 這個矩形的交集。  
  
-   填滿包含實心藍色筆刷與前的兩個矩形的大矩形。  
  
-   將裁剪區域重設為無限。  
  
-   兩個裁剪區域周圍繪製的矩形。 它會使用黑色畫筆裁剪方框第一個和第二個的裁剪區域的紅色畫筆。  
  
 結果是兩個矩形的交集會填滿藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">要與目前區域交集的 <see cref="T:System.Drawing.Region" />。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域更新為目前裁剪區域和指定之 <see cref="T:System.Drawing.Region" /> 的交集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將指派給<xref:System.Drawing.Graphics.Clip%2A>屬性這<xref:System.Drawing.Graphics>表示由目前裁剪區域和所指定區域交集的區域`region`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形左上角，在 （0，0）。  
  
-   建立區域並將它設定為在矩形中，並設定到此區域的裁剪區域。  
  
-   建立第二個矩形左上角，在 （100，100）。  
  
-   建立區域並將其設為第二個矩形中，設定裁剪區域的此區域和目前裁剪區域 （第一個矩形） 使用的合併模式的交集<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   填滿大型的矩形包含實心藍色筆刷前的兩個區域。  
  
-   將裁剪區域重設為無限。  
  
-   兩個裁剪區域周圍繪製的矩形。 它會使用黑色畫筆的第一個的裁剪區域和紅色畫筆，而第二個的裁剪區域。  
  
 結果是兩個區域的交集會填滿藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域是否為空的。</summary>
        <value>如果這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域是空的，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指出由一對座標指定的點是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">要測試可視性的 <see cref="T:System.Drawing.Point" /> 結構。</param>
        <summary>指示指定之 <see cref="T:System.Drawing.Point" /> 結構是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="point" /> 參數所指定的點包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   建立兩個點的裁剪區域內，一個外部。  
  
-   測試每個可視性的點，且只繪製可見。  
  
 結果是一個小紅色圓形，裁剪區域中。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">要測試可視性的 <see cref="T:System.Drawing.PointF" /> 結構。</param>
        <summary>指示指定之 <see cref="T:System.Drawing.PointF" /> 結構是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="point" /> 參數所指定的點包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為針對表單使用圖形的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   建立兩個點的裁剪區域內，一個外部。  
  
-   測試每個可視性的點，且只繪製可見。  
  
 結果是一個小紅色圓形，裁剪區域中。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">要測試可視性的 <see cref="T:System.Drawing.Rectangle" /> 結構。</param>
        <summary>指出由 <see cref="T:System.Drawing.Rectangle" /> 結構指定的矩形是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="rect" /> 參數所指定的矩形包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   位置和大小的兩個矩形的裁剪區域內，一個外部建立。  
  
-   測試每個矩形的可見性，且只繪製可見。  
  
 結果是一個小紅色矩形中的裁剪區域。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">要測試可視性的 <see cref="T:System.Drawing.RectangleF" /> 結構。</param>
        <summary>指出由 <see cref="T:System.Drawing.RectangleF" /> 結構指定的矩形是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="rect" /> 參數所指定的矩形包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   建立兩個矩形的裁剪區域內，一個外部。  
  
-   測試每個矩形的可見性，且只繪製可見。  
  
 結果是一個小紅色矩形中的裁剪區域。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要測試可視性的點的 X 座標。</param>
        <param name="y">要測試可視性的點的 Y 座標。</param>
        <summary>指出由一對座標指定的點是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 參數所定義的點包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   建立兩個點的裁剪區域內，一個外部。  
  
-   測試每個可視性的點，且只繪製可見。  
  
 結果是一個小紅色圓形，裁剪區域中。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">要測試可視性的點的 X 座標。</param>
        <param name="y">要測試可視性的點的 Y 座標。</param>
        <summary>指出由一對座標指定的點是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 參數所定義的點包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   建立兩個點的裁剪區域內，一個外部。  
  
-   測試每個可視性的點，且只繪製可見。  
  
 結果是一個小紅色圓形，裁剪區域中。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要測試可視性之矩形左上角的 X 座標。</param>
        <param name="y">要測試可視性之矩形左上角的 Y 座標。</param>
        <param name="width">要測試可視性之矩形的寬度。</param>
        <param name="height">要測試可視性之矩形的高度。</param>
        <summary>指出由一對座標、寬度和高度指定的矩形，是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="x" />、<paramref name="y" />、<paramref name="width" /> 和 <paramref name="height" /> 參數所定義之矩形包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   位置和大小的兩個矩形的裁剪區域內，一個外部建立。  
  
-   測試每個矩形的可見性，且只繪製可見。  
  
 結果是一個小紅色矩形中的裁剪區域。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">要測試可視性之矩形左上角的 X 座標。</param>
        <param name="y">要測試可視性之矩形左上角的 Y 座標。</param>
        <param name="width">要測試可視性之矩形的寬度。</param>
        <param name="height">要測試可視性之矩形的高度。</param>
        <summary>指出由一對座標、寬度和高度指定的矩形，是否包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中。</summary>
        <returns>如果 <paramref name="x" />、<paramref name="y" />、<paramref name="width" /> 和 <paramref name="height" /> 參數所定義之矩形包含在這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域中，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形的裁剪區域，並將它設定為使用表單的圖形物件的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>。  
  
-   位置和大小的兩個矩形的裁剪區域內，一個外部建立。  
  
-   測試每個矩形的可見性，且只繪製可見。  
  
 結果是一個小紅色矩形中的裁剪區域。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個 <see cref="T:System.Drawing.Graphics" /> 的可見裁剪區域是否為空的。</summary>
        <value>如果這個 <see cref="T:System.Drawing.Graphics" /> 之裁剪區域的可見部分是空的，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之可見裁剪區域是這樣的裁剪區域的交集`Graphics`和視窗的裁剪區域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="layoutRect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，指定字串的配置矩形。</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" />，表示字串的格式設定資訊，例如行距。</param>
        <summary>取得 <see cref="T:System.Drawing.Region" /> 物件的陣列，每個陣列框住指定字串中字元位置的範圍。</summary>
        <returns>這個方法傳回 <see cref="T:System.Drawing.Region" /> 物件的陣列，每個物件框住指定字串中字元位置的範圍。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的區域是精確度的解析度而定，因此可能會有些微遺失如果字串是精確度的一種解析度中繼檔中記錄，而且稍後播放不同解析度。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   設定字串 「 第一個和第二個範圍"和顯示字串 ("Times New Roman"，16 點) 的字型。  
  
-   設定兩個字元的字串內的範圍 （其對應的單字"第一次 」 和 「 第二個"）。  
  
-   建立要在其中顯示字串的矩形。  
  
-   設定字串 ¾ 包括兩個字元範圍的格式。  
  
-   將字串繪製到螢幕。  
  
-   測量的字元範圍，會決定繫結兩個指定之範圍的矩形。  
  
-   將兩個矩形繪製到螢幕。  
  
 結果是顯示的字串 （"第一次 」） 以紅色矩形所限定的第一個範圍與第二個 （「 第二個"） 以藍色矩形所限定的範圍。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 物件繪製時，測量指定的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 物件繪製時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數所指定的字串以 <paramref name="font" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串。  
  
-   建立字型物件，並將其設為新細明體 （16 點）。  
  
-   建立的大小物件並使用它和字型物件來測量字串的大小。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> 結構，指定文字的最大配置區域。</param>
        <summary>在指定之配置區域中使用指定的 <see cref="T:System.Drawing.Font" /> 繪製時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數所指定的字串以 <paramref name="font" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串和新細明體 （16 點） 設定的字型物件。  
  
-   設定字串的最大的配置大小。  
  
-   建立的大小物件，並用於測量字串的大小、 字型物件和最大的配置大小。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的格式。</param>
        <param name="width">字串的最大寬度，以像素為單位。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 物件繪製時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數中所指定的字串以 <paramref name="font" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `width`參數指定的寬度元件所傳回的最大值<xref:System.Drawing.SizeF>結構 (<xref:System.Drawing.SizeF.Width%2A>)。 如果`width`參數是字串，傳回的實際寬度小於<xref:System.Drawing.SizeF.Width%2A>元件就會截斷為代表符合指定的寬度的字元的數目上限的值。 若要容納整個字串，傳回的<xref:System.Drawing.SizeF.Height%2A>元件會調整為可讓顯示的字串字元換行的值。  
  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串和新細明體 （16 點） 設定的字型物件。  
  
-   設定字串的最大寬度。  
  
-   建立的大小物件，並用於測量字串的大小、 字型物件和字串的最大寬度。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="origin">
          <see cref="T:System.Drawing.PointF" /> 結構，表示字串的左上角。</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" />，表示字串的格式設定資訊，例如行距。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 繪製並以指定的 <see cref="T:System.Drawing.StringFormat" /> 設定格式時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數所指定的字串以 <paramref name="font" /> 參數和 <paramref name="stringFormat" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串和新細明體 （16 點） 設定的字型物件  
  
-   建立要尋找之字串的左上角的點。  
  
-   建立物件的字串格式，並將它的格式旗標設定為<xref:System.Drawing.StringFormatFlags.DirectionVertical>。  
  
-   建立以測量字串的大小物件。  
  
-   測量使用字串、 字型物件、 放置的點和字串格式，在字串的大小。  
  
-   繪製使用放置點和測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 結果是垂直矩形封入垂直的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> 結構，指定文字的最大配置區域。</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" />，表示字串的格式設定資訊，例如行距。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 繪製並以指定的 <see cref="T:System.Drawing.StringFormat" /> 設定格式時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數中所指定的字串以 <paramref name="font" /> 參數和 <paramref name="stringFormat" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串和新細明體 （16 點） 設定的字型物件。  
  
-   設定字串，建立以測量字串的大小物件的最大的配置大小。  
  
-   建立物件的字串格式，並將它的格式旗標設定為<xref:System.Drawing.StringFormatFlags.DirectionVertical>。  
  
-   測量使用字串、 字型物件、 最大的配置大小，以及字串格式，在字串的大小。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 結果是垂直矩形封入垂直的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="width">字串的最大寬度。</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" />，表示字串的格式設定資訊，例如行距。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 繪製並以指定的 <see cref="T:System.Drawing.StringFormat" /> 設定格式時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數中所指定的字串以 <paramref name="font" /> 參數和 <paramref name="stringFormat" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>，並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外，請確定<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立量值和字型的字串物件將它設定為新細明體 （16 點）。  
  
-   設定字串的最大寬度。  
  
-   建立物件的字串格式，並將它的格式旗標設定為<xref:System.Drawing.StringFormatFlags.DirectionVertical>。  
  
-   建立以測量字串的大小物件。  
  
-   測量使用字串、 字型物件、 最大寬度，以及字串格式，在字串的大小。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
 結果是垂直矩形封入垂直的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">要測量的字串。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" />，定義字串的文字格式。</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> 結構，指定文字的最大配置區域。</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" />，表示字串的格式設定資訊，例如行距。</param>
        <param name="charactersFitted">字串中的字元數。</param>
        <param name="linesFilled">字串中的文字行數。</param>
        <summary>以指定的 <see cref="T:System.Drawing.Font" /> 繪製並以指定的 <see cref="T:System.Drawing.StringFormat" /> 設定格式時，測量指定的字串。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.SizeF" /> 結構，表示 <paramref name="text" /> 參數的字串以 <paramref name="font" /> 參數和 <paramref name="stringFormat" /> 參數繪製時的大小，而使用的單位是由 <see cref="P:System.Drawing.Graphics.PageUnit" /> 屬性所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A>方法專為搭配個別字串和之前和之後要允許突出圖像 （glyph） 的字串，包含少量的額外空間設計。 此外，<xref:System.Drawing.Graphics.DrawString%2A>方法調整字符點以最佳化顯示品質，並可能顯示比所報告的窄字串<xref:System.Drawing.Graphics.MeasureString%2A>。 取得度量資訊適用於配置 （例如，實作格式化的文字） 中的相鄰字串，請使用<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A>方法或其中一個<xref:System.Drawing.Graphics.MeasureString%2A>方法，取得<xref:System.Drawing.StringFormat>並傳遞<xref:System.Drawing.StringFormat.GenericTypographic%2A>。 此外也請確認<xref:System.Drawing.Graphics.TextRenderingHint%2A>如<xref:System.Drawing.Graphics>是<xref:System.Drawing.Text.TextRenderingHint.AntiAlias>。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立要測量的字串和新細明體 （16 點） 設定的字型物件  
  
-   設定字串的最大的配置大小。  
  
-   建立物件的字串格式，並將它的格式旗標設定為<xref:System.Drawing.StringFormatFlags.DirectionVertical>。  
  
-   會建立整數變數`charactersFitted`和`linesFilled`和大小的物件，以量值的字串。  
  
-   字串的大小，並決定的字元數和填滿，使用字串、 字型物件、 最大配置大小和字串格式的行數。  
  
-   繪製使用測量字串的大小以紅色矩形。  
  
-   繪製所繪製的矩形內的字串。  
  
-   繪製的字元數和填滿的行數的值。  
  
 結果是垂直矩形封入垂直的字串。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的自然變換和指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 物件相乘。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">乘以自然變換的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的自然變換和指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 物件相乘。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的前面加上所指定的矩陣`matrix`參數，使結果`matrix`x 全局轉換。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立`transformMatrix`矩陣 （兩個由兩個身分識別矩陣，加上零轉譯向量）。  
  
-   轉換的向量 （200，100） 的轉換矩陣。  
  
-   30 度旋轉的 Windows Form 的自然變換矩陣，前面加上 30 度表單的轉換矩陣的旋轉矩陣。  
  
-   旋轉的自然變換矩陣乘以翻譯`transformMatrix`，和前面加上`transformMatrix`至的自然變換矩陣。  
  
-   繪製旋轉、 轉換的橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">乘以自然變換的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列舉的成員，決定相乘的順序。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的自然變換和指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 以指定的順序相乘。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值為<xref:System.Drawing.Drawing2D.MatrixOrder.Prepend>如`order`參數指定的順序相乘的`matrix`x 全局轉換。 值為<xref:System.Drawing.Drawing2D.MatrixOrder.Append>如`order`指定相乘的順序是全局轉換 x `matrix`。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立`transformMatrix`矩陣 （兩個由兩個身分識別矩陣，加上零轉譯向量）。  
  
-   轉換的向量 （200，100） 的轉換矩陣。  
  
-   您可以將 Windows form 的自然變換矩陣旋轉 30 度，前面加上 30 度表單的轉換矩陣的旋轉矩陣。  
  
-   旋轉的自然變換矩陣乘以翻譯`transformMatrix`、 附加`transformMatrix`至的自然變換矩陣。  
  
-   繪製旋轉、 轉換的橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在這個 <see cref="T:System.Drawing.Graphics" /> 的自然單位和畫面單位之間的縮放。</summary>
        <value>這個屬性指定這個 <see cref="T:System.Drawing.Graphics" /> 的自然單位和畫面單位之間的縮放值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Graphics.PageScale%2A>和<xref:System.Drawing.Graphics.TranslateTransform%2A>成員能夠變更的小數位數和來源，當您繪製矩形。  
  
 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`ChangePageScaleAndTranslateTransform`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在這個 <see cref="T:System.Drawing.Graphics" /> 中畫面座標使用的測量單位。</summary>
        <value>其中一個 <see cref="T:System.Drawing.GraphicsUnit" /> 值，<see cref="F:System.Drawing.GraphicsUnit.World" /> 除外。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在圖形單元會在這個畫面座標使用的測量單位<xref:System.Drawing.Graphics>。  
  
   
  
## Examples  
 下列程式碼範例示範如何變更的效果<xref:System.Drawing.Graphics.PageUnit%2A>屬性。  
  
 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`ChangePageUnit`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Graphics.PageUnit" /> 設定為 <see cref="F:System.Drawing.GraphicsUnit.World" />，這個值不是實體單位。</exception>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指定在這個 <see cref="T:System.Drawing.Graphics" /> 的呈現期間如何位移像素。</summary>
        <value>這個屬性指定 <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> 列舉的成員。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性來指定這個內容的其中一個較高品質、 速度較慢的呈現方式或較低的品質、 更快速呈現<xref:System.Drawing.Graphics>物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放由先前呼叫這個 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="M:System.Drawing.Graphics.GetHdc" /> 方法所取得的裝置內容控制代碼。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放由先前呼叫這個 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="M:System.Drawing.Graphics.GetHdc" /> 方法所取得的裝置內容控制代碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> 和<xref:System.Drawing.Graphics.ReleaseHdc%2A>兩種方法可讓您取得和釋放控制代碼的 Windows 裝置。 您應永遠遵循呼叫<xref:System.Drawing.Graphics.GetHdc%2A>呼叫<xref:System.Drawing.Graphics.ReleaseHdc%2A>完畢時使用的 Windows 控制代碼。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">藉由先前呼叫這個 <see cref="T:System.Drawing.Graphics" /> 之 <see cref="M:System.Drawing.Graphics.GetHdc" /> 方法所取得的裝置內容控制代碼。</param>
        <summary>釋放由先前呼叫這個 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="M:System.Drawing.Graphics.GetHdc" /> 方法所取得的裝置內容控制代碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 裝置內容是根據 Windows 結構[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]，定義一組圖形物件和其相關聯的屬性，以及會影響輸出的圖形化模式。  
  
 呼叫<xref:System.Drawing.Graphics.GetHdc%2A>和<xref:System.Drawing.Graphics.ReleaseHdc%2A>方法必須出現在配對中。 在範圍期間<xref:System.Drawing.Graphics.GetHdc%2A>和<xref:System.Drawing.Graphics.ReleaseHdc%2A>方法組，您通常進行呼叫只[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式。 呼叫，範圍對[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]方法<xref:System.Drawing.Graphics>產生`hdc`參數失敗，並`ObjectBusy`錯誤。 此外，[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]會忽略所做的狀態變更<xref:System.Drawing.Graphics>的`hdc`後續作業中的參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 本範例會示範呼叫 Windows[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式來執行相同的工作[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics>方法。 該程式碼執行下列動作：  
  
-   定義互通性<xref:System.Runtime.InteropServices.DllImportAttribute>Windows DLL 檔案 gdi32.dll 的屬性。 此 DLL 包含所需[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]函式，所以它定義<xref:System.Drawing.Rectangle>為外部 DLL 中的函式。  
  
-   建立紅色畫筆。  
  
-   使用畫筆繪製矩形螢幕使用[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics.DrawRectangle%2A>方法。  
  
-   定義的內部指標類型變數`hdc`並將其值設定為表單的裝置內容控制代碼。  
  
-   繪製矩形螢幕使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]<xref:System.Drawing.Rectangle>函式。  
  
-   釋放裝置內容所表示`hdc`參數。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">裝置內容的控制代碼。</param>
        <summary>釋放裝置內容的控制代碼。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個用於遞色和交錯線筆刷之 <see cref="T:System.Drawing.Graphics" /> 的呈現原點。</summary>
        <value>
          <see cref="T:System.Drawing.Point" /> 結構，表示每像素 8 位元和每像素 16 位元之遞色處理的遞色原點，並且用來設定交錯線筆刷的原點。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域重設為無限區域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當的裁剪區域<xref:System.Drawing.Graphics>為無限，這個項目<xref:System.Drawing.Graphics>繪製並未被截斷。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立矩形左上角，在 （0，0） 和設定這個矩形的裁剪區域。  
  
-   建立第二個矩形左上角，在 （100，100） 並將裁剪區域設定為目前裁剪區域 （第一個矩形） 這個矩形的交集。  
  
-   填滿包含實心藍色筆刷與前的兩個矩形的大矩形。  
  
-   將裁剪區域重設為無限。  
  
-   兩個裁剪區域; 周圍繪製矩形它會使用黑色畫筆裁剪方框第一個和第二個的裁剪區域的紅色畫筆。  
  
 結果是兩個矩形的交集會填滿藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的自然變換矩陣重設為識別矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 矩陣表示沒有縮放、 旋轉或轉移轉換。 重設這的自然變換<xref:System.Drawing.Graphics>為識別矩陣表示其全局轉換不會變更之幾何的已轉換的項目。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   將 Windows Form 的自然變換轉譯向量 （100，0）。  
  
-   儲存表單的圖形狀態。  
  
-   重設為識別表單的自然變換和與實心的紅色筆刷填滿的矩形。  
  
-   還原已轉換的圖形狀態，並使用純色藍色筆刷填滿的矩形。  
  
 結果是未轉譯的紅色填滿的矩形，翻譯的藍色填滿的矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">
          <see cref="T:System.Drawing.Drawing2D.GraphicsState" />，表示要用來還原這個 <see cref="T:System.Drawing.Graphics" /> 的狀態。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的狀態，還原成 <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> 所代表的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Drawing.Graphics.Save%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.Save%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsState>可識別該資訊區塊。 傳遞時，用來識別<xref:System.Drawing.Drawing2D.GraphicsState>至<xref:System.Drawing.Graphics.Restore%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.Save%2A>方法呼叫。 請注意，<xref:System.Drawing.Drawing2D.GraphicsState>給定呼叫所傳回的<xref:System.Drawing.Graphics.Save%2A>方法可以一次傳遞至`Restore`方法。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>方法可以巢狀結構; 也就是說，您可以呼叫<xref:System.Drawing.Graphics.Save%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.Restore%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.Save%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsState>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.Restore%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.Save%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsState>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.Save%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.Save%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.Save%2A>方法。 就像<xref:System.Drawing.Graphics.Restore%2A>呼叫搭配<xref:System.Drawing.Graphics.Save%2A>呼叫，<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   將 Windows Form 的自然變換轉譯向量 （100，0）。  
  
-   儲存表單的圖形狀態。  
  
-   重設為識別表單的自然變換和與實心的紅色筆刷填滿的矩形。  
  
-   還原已轉換的圖形狀態，並使用實心藍色筆刷填滿第二個矩形。  
  
 結果是未轉譯的紅色填滿的矩形，翻譯的藍色填滿的矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的旋轉套用至這個 <see cref="T:System.Drawing.Graphics" /> 的變換矩陣。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">旋轉的角度，以度為單位。</param>
        <summary>將指定的旋轉套用至這個 <see cref="T:System.Drawing.Graphics" /> 的變換矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 旋轉作業包括將其項目衍生自矩陣轉換矩陣乘以`angle`參數。 這個方法會套用旋轉附加在它前面的轉換矩陣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   將 Windows form 的自然變換矩陣轉換向量 （100，0）。  
  
-   旋轉的自然變換的角度 30 度，前面加上的自然變換矩陣的旋轉矩陣。  
  
-   旋轉、 轉換使用畫筆繪製橢圓形藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">旋轉的角度，以度為單位。</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列舉的成員，指定旋轉是附加到矩陣變換之前或之後。</param>
        <summary>依照指定的順序，將指定之旋轉套用至這個 <see cref="T:System.Drawing.Graphics" /> 的變換矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 旋轉作業包括將其項目衍生自矩陣轉換矩陣乘以`angle`參數。 這個方法會附加之前，或附加的變換矩陣<xref:System.Drawing.Graphics>根據旋轉的矩陣`order`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   將 Windows form 的自然變換矩陣轉換向量 （100，0）。  
  
-   旋轉角度 30 度，若要使用的自然變換矩陣附加旋轉矩陣的自然變換<xref:System.Drawing.Drawing2D.MatrixOrder.Append>。  
  
-   翻譯、 旋轉使用畫筆繪製橢圓形藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存這個 <see cref="T:System.Drawing.Graphics" /> 的目前狀態，並使用 <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> 識別儲存的狀態。</summary>
        <returns>這個方法會傳回 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />，表示這個 <see cref="T:System.Drawing.Graphics" /> 的儲存狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Drawing.Graphics.Save%2A>方法<xref:System.Drawing.Graphics>，保留狀態的資訊區塊<xref:System.Drawing.Graphics>放在堆疊上。 <xref:System.Drawing.Graphics.Save%2A>方法會傳回<xref:System.Drawing.Drawing2D.GraphicsState>可識別該資訊區塊。 傳遞時，用來識別<xref:System.Drawing.Drawing2D.GraphicsState>至<xref:System.Drawing.Graphics.Restore%2A>方法，資訊區塊會從堆疊移除，且用來還原<xref:System.Drawing.Graphics>的時間當時的狀態<xref:System.Drawing.Graphics.Save%2A>方法呼叫。 請注意，<xref:System.Drawing.Drawing2D.GraphicsState>給定呼叫所傳回的<xref:System.Drawing.Graphics.Save%2A>方法可以一次傳遞至<xref:System.Drawing.Graphics.Restore%2A>方法。  
  
 呼叫<xref:System.Drawing.Graphics.Save%2A>方法可以巢狀結構; 也就是說，您可以呼叫<xref:System.Drawing.Graphics.Save%2A>方法多次，才能呼叫<xref:System.Drawing.Graphics.Restore%2A>方法。 每次呼叫<xref:System.Drawing.Graphics.Save%2A>方法，一個資訊區塊會放在堆疊上，而且您收到<xref:System.Drawing.Drawing2D.GraphicsState>資訊區塊。 傳遞時，這些物件的其中一個<xref:System.Drawing.Graphics.Restore%2A>方法，<xref:System.Drawing.Graphics>回復成的時間當時的狀態<xref:System.Drawing.Graphics.Save%2A>方法呼叫傳回的特定<xref:System.Drawing.Drawing2D.GraphicsState>。 資訊區塊放置在堆疊上的<xref:System.Drawing.Graphics.Save%2A>方法呼叫會從堆疊移除，且之後的所有資訊區塊放都置於該堆疊上<xref:System.Drawing.Graphics.Save%2A>方法呼叫也會移除。  
  
 呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>相同呼叫堆疊上方法的位置資訊區塊<xref:System.Drawing.Graphics.Save%2A>方法。 就像<xref:System.Drawing.Graphics.Restore%2A>呼叫搭配<xref:System.Drawing.Graphics.Save%2A>呼叫，<xref:System.Drawing.Graphics.EndContainer%2A>方法呼叫搭配<xref:System.Drawing.Graphics.BeginContainer%2A>方法呼叫。  
  
 當您呼叫<xref:System.Drawing.Graphics.Restore%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.Save%2A>方法會從堆疊移除。 同樣地，當您呼叫<xref:System.Drawing.Graphics.EndContainer%2A>方法中，放置在堆疊上的所有資訊區塊 (由<xref:System.Drawing.Graphics.Save%2A>方法或由<xref:System.Drawing.Graphics.BeginContainer%2A>方法) 之後的對應呼叫<xref:System.Drawing.Graphics.BeginContainer%2A>方法會從堆疊移除。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   將 Windows Form 的自然變換轉譯向量 （100，0）。  
  
-   儲存表單的圖形狀態。  
  
-   將表單的自然變換重設為 （2 x 2 單位矩陣，加上零向量轉換） 的身分識別，並使用實心的紅色筆刷填滿的矩形。  
  
-   還原已轉換的圖形狀態，並使用純色藍色筆刷填滿的矩形。  
  
 結果是未轉譯紅色填滿的矩形在左邊，翻譯的藍色實心矩形，在表單的右側。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>透過將指定的縮放作業放置在物件的轉換矩陣之前，將作業套用至此 <see cref="T:System.Drawing.Graphics" /> 的轉換矩陣。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">X 方向的縮放比例。</param>
        <param name="sy">Y 方向的縮放比例。</param>
        <summary>透過將指定的縮放作業放置在物件的轉換矩陣之前，將作業套用至此 <see cref="T:System.Drawing.Graphics" /> 的轉換矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 調整作業包括將對角線矩陣，其元素也是轉換矩陣乘以 (`sx`， `sy`，1)。 這個方法的前面加上的變換矩陣<xref:System.Drawing.Graphics>由將縮放矩陣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   30 度旋轉 Windows Form 的自然變換的矩陣。  
  
-   將該矩陣 x 方向的 3 倍和係數會是 1，在 y 方向縮放轉換附加在前面。  
  
-   縮放、 旋轉使用畫筆繪製矩形藍色。  
  
 結果仍是一個矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">X 方向的縮放比例。</param>
        <param name="sy">Y 方向的縮放比例。</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列舉的成員，指定縮放作業是附加到變換矩陣之前或之後。</param>
        <summary>依照指定的順序，將指定之縮放作業套用至這個 <see cref="T:System.Drawing.Graphics" /> 的變換矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 調整作業包括將對角線矩陣，其元素也是轉換矩陣乘以 (`sx`， `sy`，1)。 這個方法會附加之前，或附加的變換矩陣<xref:System.Drawing.Graphics>所根據的縮放矩陣`order`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   30 度旋轉 Windows Form 的自然變換的矩陣。  
  
-   藉由附加與縮放的轉換將該矩陣 x 方向的 3 倍和係數會是 1，在 y 方向<xref:System.Drawing.Drawing2D.MatrixOrder.Append>成員。  
  
-   旋轉、 縮放使用畫筆繪製矩形藍色。  
  
 結果是平行四邊形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域設定為所指定 <see cref="T:System.Drawing.Graphics" /> 的 <see langword="Clip" /> 屬性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />，表示新的裁剪區域。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 之裁剪區域設定為指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所代表的圖形路徑`path`參數未關閉，額外的區段加入的最後一個點来關閉路徑的第一個點。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立圖形路徑，並將橢圓形加入路徑。  
  
-   將裁剪區域設定為橢圓形的路徑。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果會填滿的黑色橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">要從其中取得新裁剪區域的 <see cref="T:System.Drawing.Graphics" />。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域設定為所指定 <see cref="T:System.Drawing.Graphics" /> 的 <see langword="Clip" /> 屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式，以及`thisForm`、<xref:System.Windows.Forms.Form>範例。 該程式碼執行下列動作：  
  
-   會建立暫存<xref:System.Drawing.Graphics>從`thisForm`<xref:System.Windows.Forms.Form>的範例。  
  
-   設定 暫存的裁剪區域<xref:System.Drawing.Graphics>小方形。  
  
-   表單的圖形物件的裁剪區域更新的暫存<xref:System.Drawing.Graphics>。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是小型、 填滿的黑色方塊。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 結構，表示新裁剪區域。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立小型的裁剪區域的矩形。  
  
-   設定的裁剪區域為矩形。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個小型、 填滿的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 結構，表示新裁剪區域。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為 <see cref="T:System.Drawing.RectangleF" /> 結構所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立小型的裁剪區域的矩形。  
  
-   設定的裁剪區域為矩形。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個小型、 填滿的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">要組合的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <param name="combineMode">
          <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列舉的成員，指定要使用的組合作業。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為指定之作業的結果，該作業組合了目前裁剪區域和指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所代表的圖形路徑`path`參數未關閉，額外的區段加入的最後一個點来關閉路徑的第一個點。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立圖形路徑，並將橢圓形加入路徑。  
  
-   將裁剪區域設定為橢圓形的路徑與<xref:System.Drawing.Drawing2D.CombineMode.Replace>成員。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果會填滿的黑色橢圓形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" />，指定要組合的裁剪區域。</param>
        <param name="combineMode">
          <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列舉的成員，指定要使用的組合作業。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為目前裁剪區域和指定的 <see cref="T:System.Drawing.Graphics" /> 之 <see cref="P:System.Drawing.Graphics.Clip" /> 屬性的指定組合作業結果。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式，以及`thisForm`、<xref:System.Windows.Forms.Form>範例。 該程式碼執行下列動作：  
  
-   會建立暫存<xref:System.Drawing.Graphics>從`thisForm`<xref:System.Windows.Forms.Form>的範例。  
  
-   設定 暫存的裁剪區域<xref:System.Drawing.Graphics>小方形。  
  
-   表單的圖形物件的裁剪區域更新的新<xref:System.Drawing.Graphics>與<xref:System.Drawing.Drawing2D.CombineMode.Replace>成員。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是小型、 填滿的黑色方塊。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">要組合的 <see cref="T:System.Drawing.Rectangle" /> 結構。</param>
        <param name="combineMode">
          <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列舉的成員，指定要使用的組合作業。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為指定之作業的結果，該作業組合了目前裁剪區域和 <see cref="T:System.Drawing.Rectangle" /> 結構所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立小型的裁剪區域的矩形。  
  
-   設定為與矩形的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>成員。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個小型、 填滿的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">要組合的 <see cref="T:System.Drawing.RectangleF" /> 結構。</param>
        <param name="combineMode">
          <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列舉的成員，指定要使用的組合作業。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為指定之作業的結果，該作業組合了目前裁剪區域和 <see cref="T:System.Drawing.RectangleF" /> 結構所指定的矩形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立小型的裁剪區域的矩形。  
  
-   設定為與矩形的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>成員。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個小型、 填滿的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">要組合的 <see cref="T:System.Drawing.Region" />。</param>
        <param name="combineMode">
          <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列舉的成員，指定要使用的組合作業。</param>
        <summary>將這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域，設定為指定之作業的結果，該作業組合了目前裁剪區域和指定的 <see cref="T:System.Drawing.Region" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立小型的裁剪區域的矩形。  
  
-   設定為與矩形的裁剪區域<xref:System.Drawing.Drawing2D.CombineMode.Replace>成員。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個小型、 填滿的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個 <see cref="T:System.Drawing.Graphics" /> 的呈現品質。</summary>
        <value>其中一個 <see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 平滑模式指定線條、 曲線和填滿區域的邊緣是否使用平滑效果 （也稱為反鋸齒功能）。 其中一個例外是路徑漸層筆刷不會遵照平滑模式。 填滿使用的區域<xref:System.Drawing.Drawing2D.PathGradientBrush>會呈現相同的方式 （別名），不論<xref:System.Drawing.Graphics.SmoothingMode%2A>屬性。  
  
   
  
## Examples  
 下列方法示範如何設定作用的<xref:System.Drawing.Pen.DashCap%2A>， <xref:System.Drawing.Pen.DashPattern%2A>，和<xref:System.Drawing.Graphics.SmoothingMode%2A>屬性。 在下圖顯示範例的輸出。  
  
 ![行數並沒有套用平滑效果。](~/add/media/gdi-smoothingmode.png "行並沒有套用平滑效果。")  
  
 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`ShowPensAndSmoothingMode`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定呈現文字的 Gamma 修正值。</summary>
        <value>用於呈現反鋸齒補償和 ClearType 文字的 Gamma 修正值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gamma 修正值必須是介於 0 到 12 之間。 預設值為 4。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Graphics.TextRenderingHint%2A>和<xref:System.Drawing.Graphics.TextContrast%2A>屬性。  
  
 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`ChangeTextRenderingHintAndTextContrast`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與這個 <see cref="T:System.Drawing.Graphics" /> 關聯之文字的呈現模式。</summary>
        <value>其中一個 <see cref="T:System.Drawing.Text.TextRenderingHint" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個文字呈現提示會指定使用反鋸齒功能是否呈現文字。  
  
> [!NOTE]
>  您不應該使用<xref:System.Drawing.Graphics.CompositingMode%2A>屬性值為<xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy>時<xref:System.Drawing.Graphics.TextRenderingHint%2A>屬性設定為<xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>。 無法在發生例外狀況或映像可能無法正確呈現。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.Graphics.TextRenderingHint%2A>和<xref:System.Drawing.Graphics.TextContrast%2A>屬性。  
  
 這個範例被為了搭配 Windows Form。 程式碼貼到表單，並呼叫`ChangeTextRenderingHintAndTextContrast`方法時處理表單的<xref:System.Windows.Forms.Control.Paint>事件，將傳遞`e`為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個 <see cref="T:System.Drawing.Graphics" /> 幾何自然轉換的複本。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> 的複本，代表這個 <see cref="T:System.Drawing.Graphics" /> 的幾何自然轉換。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + 會使用三種座標空間： world、 頁面和裝置。 全局座標是用來建立模型特定的圖形範圍的座標，您將傳遞至方法在.NET Framework 中的座標。 頁面座標是指繪圖介面，例如表單或控制項所使用的座標系統。 裝置座標是實體裝置上，繪製在螢幕或印表機等所使用的座標。 <xref:System.Drawing.Graphics.Transform%2A>屬性表示全局轉換，會對應至頁面座標全局座標。  
  
 因為矩陣傳回和<xref:System.Drawing.Graphics.Transform%2A>屬性為的幾何轉換的複本，當您不再需要時，應該處置的矩陣。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用這個 <see cref="T:System.Drawing.Graphics" /> 的目前全局和頁面轉換，將點陣列從一個座標空間轉換到另一個座標空間。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">
          <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列舉的成員，指定目的座標空間。</param>
        <param name="srcSpace">
          <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列舉的成員，指定來源座標空間。</param>
        <param name="pts">
          <see cref="T:System.Drawing.Point" /> 結構的陣列，表示要變換的點。</param>
        <summary>使用這個 <see cref="T:System.Drawing.Graphics" /> 的目前全局和頁面轉換，將點陣列從一個座標空間轉換到另一個座標空間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立兩個點，和它們之間繪製藍線。  
  
-   設定要在 x 方向 y 方向 30 40 數量的世界轉換。  
  
-   轉換全局座標的點 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) 頁面座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>)。  
  
-   重設識別全局轉換。  
  
-   已轉換的點之間繪製紅線。  
  
 結果是藍線，其下的已翻譯紅線。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">
          <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列舉的成員，指定目的座標空間。</param>
        <param name="srcSpace">
          <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列舉的成員，指定來源座標空間。</param>
        <param name="pts">
          <see cref="T:System.Drawing.PointF" /> 結構的陣列，表示要變換的點。</param>
        <summary>使用這個 <see cref="T:System.Drawing.Graphics" /> 的目前全局和頁面轉換，將點陣列從一個座標空間轉換到另一個座標空間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立兩個點，和它們之間繪製藍線。  
  
-   設定要在 x 方向 y 方向 30 40 數量的世界轉換。  
  
-   轉換全局座標的點 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) 頁面座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>)。  
  
-   重設識別自然變換和變換的點之間繪製紅線。  
  
 結果是藍線，其下的已翻譯紅線。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>透過所指定之水平和垂直方向的量，轉譯這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">這個轉譯的 X 座標。</param>
        <param name="dy">這個轉譯的 Y 座標。</param>
        <summary>透過所指定之水平和垂直方向的量，轉譯這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立裁剪區域的矩形。  
  
-   設定的裁剪區域為矩形。  
  
-   轉換的向量 （50，50） 的裁剪區域。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個翻譯、 小型的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">這個轉譯的 X 座標。</param>
        <param name="dy">這個轉譯的 Y 座標。</param>
        <summary>透過所指定之水平和垂直方向的量，轉譯這個 <see cref="T:System.Drawing.Graphics" /> 的裁剪區域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   建立裁剪區域的矩形。  
  
-   設定的裁剪區域為矩形。  
  
-   轉換的向量 （50.0 f，50.0 f） 的裁剪區域。  
  
-   填入實心黑色筆刷大的矩形。  
  
 結果是一個翻譯、 小型的黑色矩形。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>透過將指定的轉譯放置在此 <see cref="T:System.Drawing.Graphics" /> 的轉換矩陣之前，變更座標系統的原點。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">這個轉譯的 X 座標。</param>
        <param name="dy">這個轉譯的 Y 座標。</param>
        <summary>透過將指定的轉譯放置在此 <see cref="T:System.Drawing.Graphics" /> 的轉換矩陣之前，變更座標系統的原點。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 來源通常是繪圖介面上限左上角。  轉譯作業包括將其轉譯部分是的矩陣轉換矩陣乘以`dx`和`dy`參數。 這個方法會將轉換套用附加在前面的轉換矩陣的轉移矩陣。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   您可以將 Windows form 的自然變換矩陣旋轉 30.0F 度。  
  
-   藉由呼叫移動來源的圖形物件<xref:System.Drawing.Graphics.TranslateTransform%2A>，前面加上的轉換矩陣的翻譯。  
  
-   翻譯、 旋轉使用畫筆繪製橢圓形藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 下圖顯示執行先前的程式碼範例的輸出。  
  
 ![Translated 和已轉換的橢圓形](~/add/media/ndp-tranlatetransform.png "Translated 和已轉換的橢圓形")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">這個轉譯的 X 座標。</param>
        <param name="dy">這個轉譯的 Y 座標。</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列舉的成員，指定轉換是附加到變換矩陣之前或之後。</param>
        <summary>依照指定的順序，將指定之轉換套用至這個 <see cref="T:System.Drawing.Graphics" /> 的變換矩陣，以變更座標系統的原點。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 轉譯作業包括將其轉譯部分是的矩陣轉換矩陣乘以`dx`和`dy`參數。 這個方法會附加之前，或附加的變換矩陣<xref:System.Drawing.Graphics>所根據的轉譯矩陣`order`參數。  
  
   
  
## Examples  
 下列程式碼範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
-   您可以將 Windows form 的自然變換矩陣旋轉 30.0F 度。  
  
-   藉由呼叫移動圖形物件的原始<xref:System.Drawing.Graphics.TranslateTransform%2A>，將轉譯附加到的自然變換矩陣。  
  
-   旋轉、 轉換使用畫筆繪製橢圓形藍色。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Drawing.Graphics" /> 之可見裁剪區域的周框。</summary>
        <value>
          <see cref="T:System.Drawing.RectangleF" /> 結構，代表這個 <see cref="T:System.Drawing.Graphics" /> 之可見裁剪區域的周框。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生的矩形的單位由所指定<xref:System.Drawing.Graphics.PageUnit%2A>屬性。 預設單位為像素。 A<xref:System.Drawing.Graphics>通常與控制項相關聯的來源矩形將會相對於該控制項的用戶端區域。  
  
 之可見裁剪區域是這樣的裁剪區域的交集<xref:System.Drawing.Graphics>和視窗的裁剪區域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>