<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1dcef3471b8a77cbccccdedfd56c4e4b03063f8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36340419" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供雙重緩衝的圖形緩衝區。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphics>類別可讓您實作自訂雙重緩衝的圖形。 它提供圖形緩衝區，以及可用來寫入緩衝區以及轉譯其內容至輸出裝置的方法包裝函式。  
  
 使用雙重緩衝的圖形可以減少或消除閃爍因重繪顯示介面的。 當您使用雙重緩衝時，緩衝區在記憶體中，會先繪製更新的圖形和這個緩衝區的內容會接著快速寫入部分或所有顯示的介面。 顯示圖形這相當簡短覆寫通常會減少，或完全排除，有時會發生更新時，圖形會閃爍。  
  
> [!NOTE]
>  使用雙重緩衝的最簡單方式是設定<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制樣式旗標控制使用<xref:System.Windows.Forms.Control.SetStyle%2A>方法。 設定<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>旗標的控制項將所有繪製控制項的預設圖形緩衝區中，透過重新都導向而不需要任何額外的程式碼。 若要設定此旗標`true`預設。  
  
 <xref:System.Drawing.BufferedGraphics>類別沒有公用建構函式，而且必須先建立<xref:System.Drawing.BufferedGraphicsContext>應用程式網域使用其<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 您可以擷取<xref:System.Drawing.BufferedGraphicsContext>目前應用程式定義域靜態<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>屬性。  
  
 <xref:System.Drawing.BufferedGraphics.Graphics%2A>屬性可用於繪圖至圖形緩衝區。 此屬性可存取<xref:System.Drawing.Graphics>繪製至這個已配置的圖形緩衝區的物件<xref:System.Drawing.BufferedGraphics>物件。  
  
 <xref:System.Drawing.BufferedGraphics.Render%2A>與任何引數繪製的圖形內容的緩衝區至介面方法可讓您指定當已配置的緩衝區。 其他多載<xref:System.Drawing.BufferedGraphics.Render%2A>方法可讓您指定<xref:System.Drawing.Graphics>物件或<xref:System.IntPtr>指向要繪製圖形緩衝區的內容的裝置內容物件。  
  
 如需繪製雙重緩衝的圖形的詳細資訊，請參閱[雙重緩衝的圖形](~/docs/framework/winforms/advanced/double-buffered-graphics.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Drawing.BufferedGraphics>繪製圖形使用緩衝實作的幾種類型的物件。 按一下表單，或者啟動然後停止計時器，導致繪製更新。 繪製更新可讓您觀察雙重緩衝的效果。 以滑鼠右鍵按一下下列的繪圖模式中表單的迴圈：  
  
-   直接繪圖<xref:System.Windows.Forms.Control.Handle%2A>如<xref:System.Windows.Forms.Form>。  
  
-   藉由覆寫繪製<xref:System.Windows.Forms.Form.OnPaint%2A>方法使用<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制樣式。  
  
-   藉由覆寫繪製<xref:System.Windows.Forms.Form.OnPaint%2A>表單方法，而不需要使用方法<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制樣式。  
  
 在每個模式中，會繪製文字，以識別目前的模式，並描述每個已按下滑鼠按鈕時所發生的行為。  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Drawing.BufferedGraphics" /> 類別不具備執行緒安全。 當存取圖形緩衝區從不同的執行緒，請務必使用執行緒存取控制機制，以避免衝突。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放由 <see cref="T:System.Drawing.BufferedGraphics" /> 物件使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Drawing.BufferedGraphics.Dispose%2A>完畢時使用<xref:System.Drawing.BufferedGraphics>物件。 <xref:System.Drawing.BufferedGraphics.Dispose%2A>方法會使<xref:System.Drawing.BufferedGraphics>中無法使用的狀態物件。 在呼叫<xref:System.Drawing.BufferedGraphics.Dispose%2A>，您必須釋放所有參考<xref:System.Drawing.BufferedGraphics>物件，以便記憶體回收行程可以回收的記憶體，<xref:System.Drawing.BufferedGraphics>物件所佔用。 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  請務必呼叫<xref:System.Drawing.BufferedGraphics.Dispose%2A>您釋放最後一個參考之前<xref:System.Drawing.BufferedGraphics>物件。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.BufferedGraphics> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Drawing.Graphics" /> 物件，該物件輸出至圖形緩衝區。</summary>
        <value>
          <see cref="T:System.Drawing.Graphics" /> 物件，該物件輸出至圖形緩衝區。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性提供<xref:System.Drawing.Graphics>繪製至這個已配置的圖形緩衝區的物件<xref:System.Drawing.BufferedGraphics>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>寫入圖形緩衝區的內容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將圖形緩衝區的內容寫入預設裝置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會寫入圖形緩衝區的內容，藉由呼叫指定的裝置<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法<xref:System.Drawing.BufferedGraphicsContext>用來建立此<xref:System.Drawing.BufferedGraphics>物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">要將圖形緩衝區的內容寫入的 <see cref="T:System.Drawing.Graphics" /> 物件。</param>
        <summary>將圖形緩衝區的內容寫入指定的 <see cref="T:System.Drawing.Graphics" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將圖形緩衝區的內容寫入指定<xref:System.Drawing.Graphics>物件。  
  
   
  
## Examples  
 下列程式碼範例示範如何呈現圖形緩衝區的內容與指定<xref:System.Drawing.Graphics>物件。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" />，指向要將圖形緩衝區的內容寫入的裝置內容。</param>
        <summary>將圖形緩衝區的內容寫入與指定 <see cref="T:System.IntPtr" /> 控制代碼關聯的裝置內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將圖形緩衝區的內容寫入指定相關聯的裝置內容<xref:System.IntPtr>處理。  
  
   
  
## Examples  
 下列程式碼範例示範如何呈現圖形緩衝區的內容`grafx`指定的裝置內容。 這段程式碼是針對所提供之較大範例的一部分<xref:System.Drawing.BufferedGraphics>類別。  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於存取 unmanaged 程式碼。 相關的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <altmember cref="T:System.IntPtr" />
      </Docs>
    </Member>
  </Members>
</Type>