<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Data.DataTable" /> 中資料行的結構描述。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn>是建立結構描述的基本建置組塊<xref:System.Data.DataTable>。 您建立結構描述加入一或多個<xref:System.Data.DataColumn>物件加入至<xref:System.Data.DataColumnCollection>。 如需詳細資訊，請參閱[新增資料行加入至 DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)。  
  
 每個<xref:System.Data.DataColumn>具有<xref:System.Data.DataColumn.DataType%2A>屬性，可決定的資料種類<xref:System.Data.DataColumn>包含。 比方說，您可以限制的資料類型至整數、 字串或小數位數。 因為資料所包含的<xref:System.Data.DataTable>通常會合併回其原始的資料來源，您必須符合的資料來源中的資料類型。 如需詳細資訊，請參閱[在 ADO.NET 中的資料類型對應](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md)。  
  
 屬性，例如<xref:System.Data.DataColumn.AllowDBNull%2A>， <xref:System.Data.DataColumn.Unique%2A>，和<xref:System.Data.DataColumn.ReadOnly%2A>放置項目和更新的資料，以協助確保資料完整性的限制。 您也可以使用<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>屬性以控制自動的資料產生。 如需有關<xref:System.Data.DataColumn.AutoIncrement%2A>資料行，請參閱[建立自動遞增資料行](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md)。 如需詳細資訊，請參閱[定義主索引鍵](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
 您也要確定的值在<xref:System.Data.DataColumn>都是唯一的建立<xref:System.Data.UniqueConstraint>並將它加入至<xref:System.Data.ConstraintCollection>的<xref:System.Data.DataTable>的<xref:System.Data.DataColumn>所屬。 如需詳細資訊，請參閱[DataTable 條件約束](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)。  
  
 若要建立之間的關聯<xref:System.Data.DataColumn>物件建立<xref:System.Data.DataRelation>物件，並將它加入至<xref:System.Data.DataRelationCollection>的<xref:System.Data.DataSet>。  
  
 您可以使用<xref:System.Data.DataColumn.Expression%2A>屬性<xref:System.Data.DataColumn>物件來計算資料行值，或建立彙總的資料行。 如需詳細資訊，請參閱[建立運算式資料行](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>有數個<xref:System.Data.DataColumn>物件。  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此類型是安全多執行緒的讀取作業。 您必須同步處理任何寫入作業。</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體 (Instance) 為型別字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立時，<xref:System.Data.DataColumn>物件有沒有預設值<xref:System.Data.DataColumn.ColumnName%2A>或<xref:System.Data.DataColumn.Caption%2A>。 當您將它加入至<xref:System.Data.DataColumnCollection>，將產生的預設名稱 （"Column1"、"Column2"，等等），如果名稱未指派給<xref:System.Data.DataColumn.ColumnName%2A>。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Data.DataColumn>、 設定各種屬性，並將它加入<xref:System.Data.DataColumnCollection>如<xref:System.Data.DataTable>物件。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
        <summary>使用指定的資料行名稱，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體為類型字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，特定的資料行的名稱會變成<xref:System.Data.DataColumn.Caption%2A>屬性值。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Data.DataColumn>與指定<xref:System.Data.DataColumn.ColumnName%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
        <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <summary>使用指定的資料行名稱和資料類型，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立新<xref:System.Data.DataColumn>與指定<xref:System.Data.DataColumn.ColumnName%2A>和<xref:System.Data.DataColumn.DataType%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
        <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <param name="expr">用來建立資料行的運算式。 如需詳細資訊，請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性 (Property)。</param>
        <summary>使用指定的名稱、資料型別和運算式，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立計算資料行。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
        <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <param name="expr">用來建立資料行的運算式。 如需詳細資訊，請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性 (Property)。</param>
        <param name="type">其中一個 <see cref="T:System.Data.MappingType" /> 值。</param>
        <summary>使用指定名稱、資料型別、運算式和判斷資料行是否是屬性 (Attribute) 的值，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `type`引數集<xref:System.Data.DataColumn.ColumnMapping%2A>屬性。 屬性會指定如何<xref:System.Data.DataColumn>當對應<xref:System.Data.DataSet>轉換成 XML 文件。 例如，如果資料行名為"fName"，而且它所包含的值是"Bob"和`type`設為`MappingType.Attribute`，XML 項目應如下：  
  
 \<Name fName = 'Bob'/>  
  
 如需有關如何將資料行對應至項目或屬性的詳細資訊，請參閱<xref:System.Data.DataColumn.ColumnMapping%2A>屬性。  
  
   
  
## Examples  
 下列範例會建構一個計算資料行。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對於屬於資料表的資料列而言，這個資料行中是否允許 Null 值。</summary>
        <value>
          如果允許 Null 值，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立新<xref:System.Data.DataColumn>並設定其<xref:System.Data.DataColumn.AllowDBNull%2A>屬性`true`。  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對於加入至資料表的新資料列而言，該資料行是否自動遞增資料行的值。</summary>
        <value>
          如果資料行值自動遞增，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此資料行類型不是 Int16、 Int32 或 Int64 當設定這個屬性，<xref:System.Data.DataColumn.DataType%2A>屬性會強制轉型為 Int32。 如果這是計算資料行，會產生例外狀況。 <xref:System.Data.DataColumn.Expression%2A>屬性設定。 只有當此資料行，當加入資料行集合中，資料列的值等於預設值，會使用遞增的值。  
  
 您可以建立新的資料列使用<xref:System.Data.DataRow.ItemArray%2A>屬性<xref:System.Data.DataRow>類別，並傳入值的陣列。 這是潛在問題的資料行，其<xref:System.Data.DataColumn.AutoIncrement%2A>設`true`，因為它的值會自動產生。 若要使用<xref:System.Data.DataRow.ItemArray%2A>屬性，放在`null`在陣列中的資料行的位置。 如需詳細資訊，請參閱<xref:System.Data.DataRow.ItemArray%2A>屬性<xref:System.Data.DataRow>類別。  
  
 如果資料行的類型是<xref:System.Data.SqlTypes.SqlInt16>或<xref:System.Data.SqlTypes.SqlInt32>，<xref:System.Data.DataColumn.AutoIncrement%2A>將無法運作。 請改用 Int16 或 Int32。  
  
 如果資料行的類型是<xref:System.Data.SqlTypes.SqlInt64>或<xref:System.Data.SqlTypes.SqlDecimal>，<xref:System.Data.DataColumn.AutoIncrement%2A>僅部分運作。 請改用 Int64 或十進位。  
  
 當<xref:System.Data.DataColumn.AutoIncrementStep%2A>值加入至目前的值，會隱藏溢位檢查。  
  
   
  
## Examples  
 下列範例會設定<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>屬性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">該資料行是計算的資料行。</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行的開始值，這個資料行的 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 屬性設定為 <see langword="true" />。 預設值為 0。</summary>
        <value>
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 函式的開始值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會設定<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>屬性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行所使用的遞增，這個資料行的 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 屬性設定為 <see langword="true" />。</summary>
        <value>自動遞增資料行值所根據的數字。 預設為 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會設定<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>屬性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定的值為零。</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行的標題。</summary>
        <value>資料行的標題。 如果未設定標題，則傳回 <see cref="P:System.Data.DataColumn.ColumnName" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Data.DataColumn.Caption%2A>屬性顯示的敘述性或好記名稱<xref:System.Data.DataColumn>。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Data.DataTable>。 接著它會加入三個<xref:System.Data.DataColumn>物件加入至<xref:System.Data.DataColumnCollection>並設定<xref:System.Data.DataColumn.Caption%2A>每個屬性<xref:System.Data.DataColumn>。  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行的 <see cref="T:System.Data.MappingType" />。</summary>
        <value>其中一個 <see cref="T:System.Data.MappingType" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ColumnMapping%2A>屬性會決定如何<xref:System.Data.DataColumn>當對應<xref:System.Data.DataSet>會另存為 XML 文件使用<xref:System.Data.DataSet.WriteXml%2A>方法。  
  
 例如，如果<xref:System.Data.DataColumn>名為"customerID，"且其<xref:System.Data.DataColumn.ColumnMapping%2A>屬性設定為`MappingType.Element`，資料行值將會產生下列 XML:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 不過，如果相同的資料行對應到`MappingType.Attribute`，則會產生下列 XML:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 使用<xref:System.Data.DataColumn.%23ctor%2A>建構函式，其中包含`type`引數來指定如何<xref:System.Data.DataColumn>當對應其<xref:System.Data.DataSet>轉換為 XML 文件。  
  
 <xref:System.Data.DataColumn.ColumnMapping%2A>屬性會對應到建構函式引數`type`。  
  
   
  
## Examples  
 下列範例會設定<xref:System.Data.DataColumn.ColumnMapping%2A>型別屬性時，新<xref:System.Data.DataColumn>。  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在 <see cref="T:System.Data.DataColumnCollection" /> 中的資料行名稱。</summary>
        <value>資料行名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Data.DataColumn>已建立，沒有任何<xref:System.Data.DataColumn.ColumnName%2A>值。 不過，當<xref:System.Data.DataColumn>加入至<xref:System.Data.DataColumnCollection>如<xref:System.Data.DataTable>物件，它給予預設的名稱 （"Column1"、"Column2"，等等）。  
  
 根據預設，<xref:System.Data.DataColumn.Caption%2A>值設定為<xref:System.Data.DataColumn.ColumnName%2A>值。  
  
   
  
## Examples  
 下列範例取得<xref:System.Data.DataColumn.ColumnName%2A>每個資料行中每個資料表中<xref:System.Data.DataSet>。 此範例也示範如何建立<xref:System.Data.DataColumn>與新<xref:System.Data.DataColumn.ColumnName%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">屬性會設定為 <see langword="null" /> 或空字串，並且資料行會屬於集合。</exception>
        <exception cref="T:System.Data.DuplicateNameException">具有相同名稱的資料行已經存在於集合中。 名稱比較不區分大小寫。</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定儲存在資料行中的資料型別。</summary>
        <value>
          <see cref="T:System.Type" /> 物件，表示資料行資料型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Data.DataColumn.DataType%2A>值是很重要，以及確保正確建立和更新的資料來源中的資料。  
  
 <xref:System.Data.DataColumn.DataType%2A>屬性支援下列的基底.NET Framework 資料型別：  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 以及下列的陣列型別：  
  
-   `Byte[]`  
  
 當變更此屬性的資料行之後，已經開始儲存資料時，會產生例外狀況。  
  
 如果<xref:System.Data.DataColumn.AutoIncrement%2A>設`true`，才能設定<xref:System.Data.DataColumn.DataType%2A>屬性，而且嘗試將類型設為整數類型以外的項目，會產生例外狀況。  
  
> [!NOTE]
>  資料類型的資料行`Byte[]`需要特殊處理方式，在某些情況下，因為它是在不同於基底的.NET Framework 資料類型，參考資料類型。 如果資料類型的資料行`Byte[]`做<xref:System.Data.DataTable.PrimaryKey%2A>，或為<xref:System.Data.DataView.Sort%2A>或<xref:System.Data.DataView.RowFilter%2A>金鑰<xref:System.Data.DataView>，資料行值的任何變更都必須包括指派`Byte[]`分別具現化資料行值`Byte[]`物件。 此指派，才能觸發排序、 篩選和主索引鍵作業所使用的內部索引更新。 以下範例就是說明這種情況：  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  雖然可以將資料行定義為資料類型，而不是基底的.NET Framework 資料型別和`Byte[]`，這類資料行都將視為使用者定義類型，受限於下列使用量限制。 (如需有關使用者定義類型的詳細資訊，請參閱[建立和 Using User-Defined 類型](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40)。)  
  
-   資料行不能屬於<xref:System.Data.DataView.RowFilter%2A>或<xref:System.Data.DataTable.Select%2A>運算式。  
  
-   如果資料行作為<xref:System.Data.DataTable.PrimaryKey%2A>，或為<xref:System.Data.DataView.Sort%2A>或<xref:System.Data.DataView>，必須將它視為不可變動的欄位; 一旦加入至資料表資料行的資料不能變更。  
  
-   其<xref:System.Data.DataColumn.ColumnMapping%2A>可以只設定為`MappingType.Element`。  
  
-   資料行的資料類型必須的實作都必須標記為類別<xref:System.SerializableAttribute>，而且如果實作必要<xref:System.Runtime.Serialization.ISerializable>或<xref:System.Xml.Serialization.IXmlSerializable>介面。  
  
-   變更追蹤的支援有所限制。 利用<xref:System.Data.DataTable>類別的變更追蹤機制，實作的資料行資料類型的類別必須實作<xref:System.ComponentModel.IChangeTracking>介面或接管負責通知<xref:System.Data.DataRow>時已經過的資料行值修改，或是藉由呼叫<xref:System.Data.DataRow.SetModified%2A>資料列或資料行值物件指派給個別具現化的資料行的值物件。  
  
   
  
## Examples  
 下列範例會將數個資料類型的資料行<xref:System.Data.DataTable>，然後將一個資料列加入至資料表。  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">資料行已經具有儲存的資料。</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行的 <see langword="DateTimeMode" />。</summary>
        <value>指定之資料行的 <see cref="T:System.Data.DataSetDateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.DateTimeMode%2A>資料列會加入後即無法修改<xref:System.Data.DataColumn>，除了從修改<xref:System.Data.DataSetDateTime.Unspecified>和<xref:System.Data.DataSetDateTime.UnspecifiedLocal>，反之亦然。 從修改`UnspecifiedLocal`至`Unspecified`，且反之亦然允許這兩個選項之間的差異只在還原序列化期間並不會影響存放裝置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在建立新資料列時，取得或設定資料行的預設值。</summary>
        <value>適合資料行的 <see cref="P:System.Data.DataColumn.DataType" /> 之值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設值是會自動指派給資料行的值時<xref:System.Data.DataRow>建立 (例如，日期和時間<xref:System.Data.DataRow>所建立。  
  
 當<xref:System.Data.DataColumn.AutoIncrement%2A>設為 true，可以有沒有預設值。  
  
 您可以建立新的資料列使用<xref:System.Data.DataRow.ItemArray%2A>屬性<xref:System.Data.DataRow>類別，然後將值陣列。 這是預設值的資料行可能有問題，因為它的值會自動產生。 若要使用<xref:System.Data.DataRow.ItemArray%2A>屬性這類資料行，與將放`null`在陣列中的資料行的位置。 如需詳細資訊，請參閱 <xref:System.Data.DataRow.ItemArray%2A> 屬性 (Property)。  
  
   
  
## Examples  
 下列範例會建立數個<xref:System.Data.DataColumn>物件具有不同的資料類型，並設定適當的預設值，每個資料行。  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">在加入資料列時，預設值不是資料行資料型別的執行個體。</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定運算式，用來篩選資料列、計算資料行中的值或建立彙總資料行。</summary>
        <value>運算式，用來計算資料行的值或建立彙總資料行。 運算式的傳回型別是由資料行的 <see cref="P:System.Data.DataColumn.DataType" /> 所判斷。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用一<xref:System.Data.DataColumn.Expression%2A>屬性是要建立導出資料行。 例如，若要計算的稅額值，單價乘以特定區域的稅率。 因為稅率不同地區，它就無法將單一稅率放在資料行，相反地，這個值會計算使用<xref:System.Data.DataColumn.Expression%2A>屬性，Visual Basic 程式碼的下一節中所示：  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 第二種用法是建立彙總的資料行。 類似於計算的值，彙總執行根據一組完整的資料列中的作業<xref:System.Data.DataTable>。 簡單的範例是在集合中傳回的資料列計數。 這是您要用於計算特定的銷售人員、 完成的交易數目，此 Visual Basic 程式碼所示的方法：  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>運算式語法  
 當您建立運算式時，使用<xref:System.Data.DataColumn.ColumnName%2A>屬性來參考資料行。 例如，如果<xref:System.Data.DataColumn.ColumnName%2A>運算式將會有一個資料行為"UnitPrice"，而另一個"Quantity"，如下：  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  如果在運算式中使用資料行，即稱為該資料行有相依性運算式。 如果相依的資料行已重新命名或移除，則會擲不回任何例外狀況。 存取已中斷的運算式資料行時，會擲回例外狀況。  
  
 當您建立篩選運算式時，將單引號字串：  
  
 "LastName = 'Jones'"  
  
 如果資料行名稱包含任何非英數字元或以數字開頭，或符合 （不區分大小） 任何下列的保留字，它需要特殊處理下, 面所述。  
  
 及  
  
 介於  
  
 子系  
  
 False  
  
 In  
  
 為  
  
 Like  
  
 Not  
  
 Null  
  
 或  
  
 父代  
  
 True  
  
 如果資料行名稱會符合上述條件的其中一個，它必須包裝在任一方括號或"'"（抑音符號） 引號。 例如，若要使用名為 「 資料行 # 」 在運算式中的資料行，您可以撰寫任一"[資料行 #]":  
  
 總計 * [資料行 #]  
  
 或 「\`資料行 #'":  
  
 總計 *\`資料行 #'  
  
 如果資料行名稱加上以方括號，則任何 ']' 和'\\' 字元 （但不是含任何其他字元） 中必須逸出方式是將它們與反斜線 ("\\") 字元。 如果資料行名稱加上抑音符號字元它必須不包含任何抑音符號字元。 例如，名為資料行 」 資料行 []\\"會被寫入：  
  
 總計 * [資料行 [\\]\\\\]  
  
 或  
  
 總計 *\`資料行]\\`  
  
## <a name="user-defined-values"></a>使用者定義的值  
 使用者定義的值可以用於運算式內資料行值進行比較。 字串值應括在單引號 （和字串值中的每個單引號字元逸出方式是將它與另一個單引號字元）。 日期值應該住井字號 （#） 或單引號 （'） 為基礎的資料提供者。 小數位數和科學記號標記法是允許的數字值。 例如:   
  
 "FirstName = 'John'"  
  
 「 價格 < = 50.00"  
  
 「 Birthdate < #1/31/&#82;"  
  
 包含列舉值的資料行，將值轉換為整數資料類型。 例如:   
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>剖析的常值運算式  
 所有的常值運算式必須以表示的文化特性而異的地區設定。 當`DataSet`剖析，並將轉換常值運算式，它一定會使用文化特性而異，沒有目前的文化特性。  
  
 單引號周圍的值時，會識別字串常值。 例如:   
  
 'John'  
  
 `Boolean` 常值為 true 和 false。它們不加上引號運算式中。  
  
 `Integer` 常值 [+-]？[0-9] + 會被視為`System.Int32`，`System.Int64`或`System.Double`。 `System.Double` 可能會遺失有效位數，視多大的數字是。 例如，如果常值中的數字是 2147483650，`DataSet`會先嘗試剖析數字以`Int32`。 這將會失敗，因為數目太大。 在此情況下`DataSet`會剖析數字以`Int64`，這將會成功。 如果常值是一個數字大於最大值的 Int64、`DataSet`常值使用，將會剖析`Double`。  
  
 使用科學記號標記法，例如 4.42372E 實數常值-30，會使用剖析`System.Double`。  
  
 不含科學記號標記法，但小數點，實際的常值會被視為`System.Decimal`。 如果數目超過支援的最大或最小值`System.Decimal`，則它會剖析為`System.Double`。 例如:   
  
 142526.144524 將轉換成`Decimal`。  
  
 345262.78036719560925667 會被視為`Double`。  
  
## <a name="operators"></a>運算子  
 允許使用布林值 AND、 OR 和 NOT 運算子串連。 您可以使用括號群組子句，並強制執行優先順序。 AND 運算子的優先順序高於其他運算子。 例如:   
  
 (LastName = 'smith ' 距離或 LastName = 'Jones')和 FirstName = 'John'  
  
 當您建立比較運算式時，允許下列運算子：  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 在運算式中也支援下列的算術運算子：  
  
 \+ （加號）  
  
 \- (減法)  
  
 \* （乘號）  
  
 / （除法）  
  
 %（模數）  
  
## <a name="string-operators"></a>字串運算子  
 若要串連的字串，請使用 + 字元。 值<xref:System.Data.DataSet.CaseSensitive%2A>屬性<xref:System.Data.DataSet>類別，判斷字串比較是否區分大小寫。 不過，您可以覆寫該值與<xref:System.Data.DataTable.CaseSensitive%2A>屬性<xref:System.Data.DataTable>類別。  
  
## <a name="wildcard-characters"></a>萬用字元  
 同時 *，%可以交換使用 LIKE 比較中的萬用字元。 如果 LIKE 子句中的字串包含 * 或 %，這些字元必須括在括號 ([])。 如果方括號是在子句中，都必須加上方括號 （例如 [] 或 []]） 加括號中的每個字元。 開始和結尾的模式，或結尾的模式，或在模式開頭，允許萬用字元。 例如:   
  
 "ItemName 類似 '* 產品\*' 」  
  
 "ItemName 類似 '* 產品' 」  
  
 "ItemName LIKE 'product*'"  
  
 字串中間不允許有萬用字元。 例如，' te * xt' 不允許。  
  
## <a name="parentchild-relation-referencing"></a>參考的父/子關聯性  
 父資料表可能會在運算式中參考資料行名稱前面加上`Parent`。 例如，`Parent.Price`參考父資料表的資料行名為`Price`。  
  
 當子系有一個以上的父資料列時，使用 Parent(RelationName)。ColumnName。 例如，Parent(RelationName)。價格會參考名價格為透過關聯性的父資料表的資料行。  
  
 子資料表中的資料行可能會在運算式中參考資料行名稱前面加上`Child`。 不過，因為子關聯性可能會傳回多個資料列，您必須包含參考子資料行在彙總函式。 例如，`Sum(Child.Price)`會傳回名為資料行的加總`Price`子資料表中。  
  
 如果資料表有一個以上的子系，語法是： `Child(RelationName)`。 比方說，如果資料表有兩個名為的子資料表`Customers`和`Orders`，而<xref:System.Data.DataRelation>物件命名為`Customers2Orders`，該參考為，如下所示：  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>彙總  
 支援下列彙總類型：  
  
 Sum (Sum)  
  
 Avg （平均）  
  
 最小值 （最小值）  
  
 最大值 （上限）  
  
 計數 （計數）  
  
 Stdev 函數 （統計標準差）  
  
 Var （統計變異數）。  
  
 彙總通常會執行沿著關聯性。 使用其中一種稍早所列的函式和子資料表資料行的父子式關聯性參考先前討論中所述建立彙總的運算式。 例如:   
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 也可以在單一資料表上執行彙總。 例如，若要建立資料行中的圖形摘要名為"Price":  
  
 Sum(Price)  
  
> [!NOTE]
>  如果您使用單一資料表建立彙總時，會有任何群組的功能。 相反地，所有資料列會顯示資料行中的相同的值。  
  
 如果資料表沒有任何資料列，彙總函式會傳回`null`。  
  
 資料型別一律可以檢查來判斷<xref:System.Data.DataColumn.DataType%2A>的資料行屬性。 您也可以轉換使用 Convert 函數，在下一節中所顯示的資料類型。  
  
 彙總只能套用至單一資料行與彙總也可以使用任何其他運算式。  
  
## <a name="functions"></a>函式  
 也支援下列功能：  
  
 `CONVERT`  
  
|||  
|-|-|  
|描述|將特定的運算式轉換成指定的.NET Framework 型別。|  
|語法|轉換 (`expression`， `type`)|  
|引數|`expression` --要轉換的運算式。<br /><br /> `type` --值會轉換成.NET Framework 型別。|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 所有的轉換是有效但有下列例外狀況：`Boolean`可以強制轉型的`Byte`， `SByte`， `Int16`， `Int32`， `Int64`， `UInt16`， `UInt32`， `UInt64`， `String`和只有本身。 `Char` 可以強制轉型的`Int32`， `UInt32`， `String`，和只有本身。 `DateTime` 可以強制轉型的`String`和只有本身。 `TimeSpan` 可以強制轉型的`String`和只有本身。  
  
 `LEN`  
  
|||  
|-|-|  
|描述|取得字串的長度|  
|語法|LEN(`expression`)|  
|引數|`expression` --要評估的字串。|  
  
 Example: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|描述|檢查運算式並傳回已檢查的運算式或取代值。|  
|語法|ISNULL(`expression`, `replacementvalue`)|  
|引數|`expression` 若要檢查--運算式。<br /><br /> `replacementvalue` --如果運算式是`null`，`replacementvalue`傳回。|  
  
 Example: myDataColumn.Expression="IsNull(price, -1)"  
  
 `IIF`  
  
|||  
|-|-|  
|描述|取得其中一個值，根據邏輯運算式的結果。|  
|語法|IIF(`expr`, `truepart`, `falsepart`)|  
|引數|`expr` --要評估的運算式。<br /><br /> `truepart` --要傳回運算式是否為 true 的值。<br /><br /> `falsepart` --要傳回運算式是否為 false 的值。|  
  
 Example: myDataColumn.Expression = "IIF(total>1000, 'expensive', 'dear')  
  
 `TRIM`  
  
|||  
|-|-|  
|描述|移除所有開頭和尾端空白的字元，例如 \r、 \n、 \t，' '|  
|語法|TRIM(`expression`)|  
|引數|`expression` --要修剪的運算式。|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|描述|取得所指定的長度，從字串中指定的點開始子的字串。|  
|語法|子字串 (`expression`， `start`， `length`)|  
|引數|`expression` --來源字串的子字串。<br /><br /> `start` -指定子字串開始位置的整數。<br /><br /> `length` -指定的子字串長度的整數。|  
  
 Example: myDataColumn.Expression = "SUBSTRING(phone, 7, 8)"  
  
> [!NOTE]
>  您可以重設<xref:System.Data.DataColumn.Expression%2A>屬性，方法是將其指派 null 值或空字串。 如果運算式資料行上設定預設值，所有先前已填滿的資料列會指派給之後的預設值<xref:System.Data.DataColumn.Expression%2A>屬性重設。  
  
   
  
## Examples  
 下列範例會建立三個資料行中的<xref:System.Data.DataTable>。 第二個和第三個資料行包含的運算式。第二個會計算稅使用變數的稅率，和第三個將計算的結果加入至第一個資料行的值。 產生的資料表會顯示在<xref:System.Windows.Forms.DataGrid>控制項。  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 屬性是設定為 <see langword="true" />。</exception>
        <exception cref="T:System.FormatException">在使用 CONVERT 函式時，運算式評估為字串，但是字串不包含可以轉變為型別參數的表示。</exception>
        <exception cref="T:System.InvalidCastException">在使用 CONVERT 函式時，不可能進行所要求的轉型。 請參閱下面段落中的型別轉換函式 (Conversion Function)，取得有關可能轉型的詳細資訊。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在使用 SUBSTRING 函式時，起始引數超出範圍。  
  
 -或者-  
  
 在使用 SUBSTRING 函式時，長度引數超出範圍。</exception>
        <exception cref="T:System.Exception">在使用 LEN 函式或 TRIM 函式時，運算式不會評估為字串。 這包括評估為 <see cref="T:System.Char" /> 的運算式。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與 <see cref="T:System.Data.DataColumn" /> 相關聯的自訂使用者資訊集合。</summary>
        <value>自訂資訊的 <see cref="T:System.Data.PropertyCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ExtendedProperties%2A>屬性可讓您儲存與物件的自訂資訊。 例如，您可能會儲存資料應該重新整理的時間。  
  
 擴充的屬性的類型必須是<xref:System.String>。 屬性不是型別<xref:System.String>不會保存在當<xref:System.Data.DataColumn>寫入為 XML。  
  
   
  
## Examples  
 下列範例會將自訂屬性來<xref:System.Data.PropertyCollection>傳回<xref:System.Data.DataColumn.ExtendedProperties%2A>屬性。 第二個範例會擷取自訂屬性。  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定文字資料行的最大長度。</summary>
        <value>資料行的最大長度，以字元為單位。 如果資料行不具有最大長度，則值為 -1 (預設值)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.MaxLength%2A>則會忽略非文字資料行的屬性。 A<xref:System.ArgumentException>會引發例外狀況，如果您指派<xref:System.Data.DataColumn.MaxLength%2A>非字串資料行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Data.DataColumn" /> 的命名空間。</summary>
        <value>
          <see cref="T:System.Data.DataColumn" /> 的命名空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.Namespace%2A>屬性可在讀取和寫入 XML 文件到<xref:System.Data.DataTable>中<xref:System.Data.DataSet>使用<xref:System.Data.DataSet.ReadXml%2A>， <xref:System.Data.DataSet.WriteXml%2A>， <xref:System.Data.DataSet.ReadXmlSchema%2A>，或<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。  
  
 XML 文件的命名空間用來限定範圍的 XML 屬性和項目時讀入<xref:System.Data.DataSet>。 比方說，<xref:System.Data.DataSet>包含結構描述文件，讀取具有命名空間"mycompany 機 」，且嘗試讀取資料 (與<xref:System.Data.DataSet.ReadXml%2A>方法) 從文件命名空間"theirCompany。 」 未對應到現有的結構描述的任何資料都會被忽略。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">命名空間已經有資料。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">參數參考。</param>
        <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Data.DataColumnCollection" /> 集合中 (以零起始) 的資料行位置。</summary>
        <value>資料行的位置。 如果資料行不是集合的成員，則取得 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會傳回資料行的資料行名稱、 序數和資料類型。  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定建立 <see cref="T:System.Data.DataTable" /> 命名空間別名的 XML 前置詞。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 命名空間的 XML 前置詞。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Prefix%2A>用於整個 XML 文件，以找出項目所屬的命名空間<xref:System.Data.DataSet>物件 (為設定由<xref:System.Data.DataSet.Namespace%2A>屬性)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">參數參考。</param>
        <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否資料列一加入至資料表，就允許變更資料行。</summary>
        <value>
          如果資料行是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立<xref:System.Data.DataColumn>並設定其<xref:System.Data.DataColumn.ReadOnly%2A>屬性`true`。  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">屬性在計算的資料行上設定為 <see langword="false" />。</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">指定的序數。</param>
        <summary>將 <see cref="T:System.Data.DataColumn" /> 的序數或位置變更為指定的序數或位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將 <xref:System.Data.DataColumn> 的序數或位置變更為指定的序數或位置。 如果序數為小於 0 或大於現有的資料行 – 1 （大於最後一個資料行的序數） 則無效<xref:System.ArgumentException>就會擲回。  
  
 當您變更資料行的序數時，資料行被移至資料行的集合中的新位置。 任何資料行之間的先前和新的序數將會重新編號，來調整資料行的新序數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得資料行所屬的 <see cref="T:System.Data.DataTable" />。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataColumn" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會傳回父資料表的<xref:System.Data.DataColumn>透過其<xref:System.Data.DataColumn.Table%2A>屬性。  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得資料行的 <see cref="P:System.Data.DataColumn.Expression" /> (如果存在)。</summary>
        <returns>如果屬性已經設定，則為 <see cref="P:System.Data.DataColumn.Expression" /> 值，否則為 <see cref="P:System.Data.DataColumn.ColumnName" /> 屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Data.DataColumn.ToString%2A>屬性傳回的集合的每個成員的預設字串<xref:System.Data.DataColumn>物件。  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出在資料行之每個資料列中的值是否必須是唯一的。</summary>
        <value>
          如果值必須是唯一的，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性從 false 變更為 true，因為唯一條件約束將會建立此資料行來確定值是唯一。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Data.DataColumn>管理員、 設定其屬性，並將它加入至資料表的資料行集合。  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">該資料行是計算的資料行。</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>