<Type Name="EntityKey" FullName="System.Data.EntityKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6911c2007bc269d038d952c3f18397a65154c85" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399182" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityKey : IEquatable&lt;System.Data.EntityKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityKey extends System.Object implements class System.IEquatable`1&lt;class System.Data.EntityKey&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityKey&#xA;Implements IEquatable(Of EntityKey)" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityKey sealed : IEquatable&lt;System::Data::EntityKey ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Data.EntityKey&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0550e-101">提供實體 (Entity) 類型執行個體 (Instance) 之物件的持久參考。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0550e-101">Provides a durable reference to an object that is an instance of an entity type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-102"><xref:System.Data.EntityKey> 物件是不可變動的。也就是說，建構這些物件之後，就無法修改它們。</span><span class="sxs-lookup"><span data-stu-id="0550e-102">The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified.</span></span>  
  
 <span data-ttu-id="0550e-103">如需詳細資訊，請參閱[實體索引鍵使用](http://msdn.microsoft.com/library/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)。</span><span class="sxs-lookup"><span data-stu-id="0550e-103">For more information, see [Working with Entity Keys](http://msdn.microsoft.com/library/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0550e-104">這些範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。</span><span class="sxs-lookup"><span data-stu-id="0550e-104">These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="0550e-105">範例會示範如何建立和使用<xref:System.Data.EntityKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-105">The examples show you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-106">初始化 <see cref="T:System.Data.EntityKey" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-106">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0550e-107">初始化 <see cref="T:System.Data.EntityKey" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-107">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; entityKeyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; entityKeyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, entityKeyValues As IEnumerable(Of KeyValuePair(Of String, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ entityKeyValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="entityKeyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="0550e-108">
            <see cref="T:System.String" />，它是由實體容器名稱限定的實體集名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-108">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="entityKeyValues">
          <span data-ttu-id="0550e-109">泛型 <see cref="T:System.Collections.Generic.KeyValuePair" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-109">A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          </span>
          <span data-ttu-id="0550e-110">每個索引鍵/值組都具有屬性名稱 (當做索引鍵) 和該屬性的值 (當做值)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-110">Each key/value pair has a property name as the key and the value of that property as the value.</span>
          </span>
          <span data-ttu-id="0550e-111">屬於 <see cref="T:System.Data.EntityKey" /> 一部分的每個屬性都應該具有一組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-111">There should be one pair for each property that is part of the <see cref="T:System.Data.EntityKey" />.</span>
          </span>
          <span data-ttu-id="0550e-112">雖然索引鍵/值組的順序不重要，但是每個索引鍵屬性都應該包含在內。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-112">The order of the key/value pairs is not important, but each key property should be included.</span>
          </span>
          <span data-ttu-id="0550e-113">這些屬性名稱是未以實體類型名稱或結構描述名稱限定的簡單名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-113">The property names are simple names that are not qualified with an entity type name or the schema name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-114">使用實體集名稱和泛型 <see cref="T:System.Data.EntityKey" /> 集合，初始化 <see cref="T:System.Collections.Generic.KeyValuePair" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-114">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and a generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0550e-115">這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。</span><span class="sxs-lookup"><span data-stu-id="0550e-115">This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="0550e-116">此範例會示範如何建立和使用<xref:System.Data.EntityKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-116">The example shows you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable&lt;System.Data.EntityKeyMember&gt; entityKeyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.EntityKeyMember&gt; entityKeyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, entityKeyValues As IEnumerable(Of EntityKeyMember))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::Collections::Generic::IEnumerable&lt;System::Data::EntityKeyMember ^&gt; ^ entityKeyValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="entityKeyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.EntityKeyMember&gt;" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="0550e-117">
            <see cref="T:System.String" />，它是由實體容器名稱限定的實體集名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-117">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="entityKeyValues">
          <span data-ttu-id="0550e-118">要用來初始化索引鍵之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件的 <see cref="T:System.Data.EntityKeyMember" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-118">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects with which to initialize the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-119">使用實體集名稱和 <see cref="T:System.Data.EntityKey" /> 物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，初始化 <see cref="T:System.Data.EntityKeyMember" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-119">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, string keyName, object keyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, keyName As String, keyValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::String ^ keyName, System::Object ^ keyValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="0550e-120">
            <see cref="T:System.String" />，它是由實體容器名稱限定的實體集名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-120">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="keyName">
          <span data-ttu-id="0550e-121">
            <see cref="T:System.String" />，它是索引鍵的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-121">A <see cref="T:System.String" /> that is the name of the key.</span>
          </span>
        </param>
        <param name="keyValue">
          <span data-ttu-id="0550e-122">
            <see cref="T:System.Object" />，它是索引鍵值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-122">An <see cref="T:System.Object" /> that is the key value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-123">使用實體集名稱和特定實體索引鍵組，初始化 <see cref="T:System.Data.EntityKey" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-123">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and specific entity key pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0550e-124">這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。</span><span class="sxs-lookup"><span data-stu-id="0550e-124">This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="0550e-125">此範例會示範如何建立和使用<xref:System.Data.EntityKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-125">The example shows you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityContainerName">
      <MemberSignature Language="C#" Value="public string EntityContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntityContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntityContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntityContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-126">取得或設定實體容器的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-126">Gets or sets the name of the entity container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0550e-127">
            <see cref="T:System.String" /> 值，它是 <see cref="T:System.Data.EntityKey" /> 所屬之實體的實體容器名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-127">A <see cref="T:System.String" /> value that is the name of the entity container for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityKeyValues">
      <MemberSignature Language="C#" Value="public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.EntityKeyMember[] EntityKeyValues" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntityKeyValues" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityKeyValues As EntityKeyMember()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ EntityKeyValues { cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ get(); void set(cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.EntityKeyMember[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-128">取得或設定與這個 <see cref="T:System.Data.EntityKey" /> 關聯的索引鍵值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-128">Gets or sets the key values associated with this <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0550e-129">這個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 之索引鍵值的 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-129">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of key values for this <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-130"><xref:System.Data.EntityKey> 類別 (Class) 包含構成針對這個實體類型所指定之邏輯索引鍵的值複本。</span><span class="sxs-lookup"><span data-stu-id="0550e-130">The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.</span></span>  
  
 <span data-ttu-id="0550e-131">每個 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 的成員都在 <xref:System.Collections.Generic.KeyValuePair%602> 中具有屬性名稱和值，其中索引鍵是屬性名稱，而值是物件之該屬性的實際值。</span><span class="sxs-lookup"><span data-stu-id="0550e-131">The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityNotValidKey">
      <MemberSignature Language="C#" Value="public static readonly System.Data.EntityKey EntityNotValidKey;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.EntityKey EntityNotValidKey" />
      <MemberSignature Language="DocId" Value="F:System.Data.EntityKey.EntityNotValidKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EntityNotValidKey As EntityKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::EntityKey ^ EntityNotValidKey;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-132">簡單的 <see cref="T:System.Data.EntityKey" />，可識別失敗 [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) 運算所產生的實體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-132">A simple <see cref="T:System.Data.EntityKey" /> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-133">取得無效實體的方式有許多種。</span><span class="sxs-lookup"><span data-stu-id="0550e-133">There are various ways to get an invalid entity.</span></span> <span data-ttu-id="0550e-134">最常見的案例是當[!INCLUDE[esql](~/includes/esql-md.md)]查詢使用[視為](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md)運算子來解譯為特定類型的多型別的執行個體和有問題的執行個體不符。</span><span class="sxs-lookup"><span data-stu-id="0550e-134">The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match.</span></span> <span data-ttu-id="0550e-135">([視為](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md)類似於 C#`as`運算子)。</span><span class="sxs-lookup"><span data-stu-id="0550e-135">([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator).</span></span> <span data-ttu-id="0550e-136">在此情況中，查詢會傳回無效的實體，而且產生之實體的實體索引鍵會設定為 <xref:System.Data.EntityKey.EntityNotValidKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-136">In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySetName">
      <MemberSignature Language="C#" Value="public string EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntitySetName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntitySetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-137">取得或設定實體集的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-137">Gets or sets the name of the entity set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0550e-138">
            <see cref="T:System.String" /> 值，它是 <see cref="T:System.Data.EntityKey" /> 所屬之實體的實體集名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-138">A <see cref="T:System.String" /> value that is the name of the entity set for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-139">傳回值，這個值指出此執行個體是否與指定的物件相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-139">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Data.EntityKey other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Data.EntityKey other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.Equals(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Data::EntityKey ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0550e-140">要與這個執行個體相比較的 <see cref="T:System.Data.EntityKey" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-140">An <see cref="T:System.Data.EntityKey" /> object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-141">傳回值，這個值指出此執行個體是否與指定的 <see cref="T:System.Data.EntityKey" /> 相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-141">Returns a value that indicates whether this instance is equal to a specified <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-142">如果這個執行個體和 <paramref name="other" /> 具有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-142">
              <see langword="true" /> if this instance and <paramref name="other" /> have equal values; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-143">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-143">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-144">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-144">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-145">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-145">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-146">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-146">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-147">也就是說，如果實體集相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.EntityKey> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-147">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-148">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是永久索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-148">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="0550e-149">要與這個執行個體相比較的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-149">An <see cref="T:System.Object" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-150">傳回值，這個值指出此執行個體是否與指定的物件相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-150">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-151">如果這個執行個體和 <paramref name="obj" /> 具有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-151">
              <see langword="true" /> if this instance and <paramref name="obj" /> have equal values; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-152">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-152">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-153">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-153">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-154">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-154">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-155">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-155">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-156">也就是說，如果 <xref:System.Data.EntityKey> 物件相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.Metadata.Edm.EntitySet> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-156">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-157">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是永久索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-157">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntitySet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EntitySet GetEntitySet(class System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::EntitySet ^ GetEntitySet(System::Data::Metadata::Edm::MetadataWorkspace ^ metadataWorkspace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EntitySet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataWorkspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
      </Parameters>
      <Docs>
        <param name="metadataWorkspace">
          <span data-ttu-id="0550e-158">包含此實體的中繼資料工作空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-158">The metadata workspace that contains the entity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-159">從給定的中繼資料 (Metadata) 工作空間中取得此實體索引鍵的實體集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-159">Gets the entity set for this entity key from the given metadata workspace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-160">實體索引鍵的 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-160">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for the entity key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-161">系統會根據索引鍵的實體容器名稱和實體集名稱，存取此實體集。</span><span class="sxs-lookup"><span data-stu-id="0550e-161">The entity set is accessed based on the entity container name and entity set name of the key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0550e-162">在指定的中繼資料工作空間中找不到此實體集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-162">The entity set could not be located in the specified metadata workspace.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0550e-163">做為目前 <see cref="T:System.Data.EntityKey" /> 物件的雜湊函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-163">Serves as a hash function for the current <see cref="T:System.Data.EntityKey" /> object.</span>
          </span>
          <span data-ttu-id="0550e-164">
            <see cref="M:System.Data.EntityKey.GetHashCode" /> 適合用於雜湊演算法和諸如雜湊資料表這類的資料結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-164">
              <see cref="M:System.Data.EntityKey.GetHashCode" /> is suitable for hashing algorithms and data structures such as a hash table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-165">目前 <see cref="T:System.Data.EntityKey" /> 的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-165">A hash code for the current <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-166">取得值，這個值表示 <see cref="T:System.Data.EntityKey" /> 是否為暫存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-166">Gets a value that indicates whether the <see cref="T:System.Data.EntityKey" /> is temporary.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0550e-167">如果 <see cref="T:System.Data.EntityKey" /> 是暫存的，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-167">
              <see langword="true" /> if the <see cref="T:System.Data.EntityKey" /> is temporary; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-168">建立新實體時，[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] 會定義暫時索引鍵，並將 <xref:System.Data.EntityKey.IsTemporary%2A> 屬性設定為 `true`。</span><span class="sxs-lookup"><span data-stu-id="0550e-168">When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`.</span></span> <span data-ttu-id="0550e-169">當您呼叫<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>方法，[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]指派永久索引鍵，並設定<xref:System.Data.EntityKey.IsTemporary%2A>屬性`false`。</span><span class="sxs-lookup"><span data-stu-id="0550e-169">When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0550e-170">暫存索引鍵是此架構自動建構的。使用者無法直接建構暫存索引鍵。</span><span class="sxs-lookup"><span data-stu-id="0550e-170">Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.</span></span>  
  
 <span data-ttu-id="0550e-171">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-171">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-172">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-172">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-173">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-173">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-174">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-174">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-175">也就是說，如果實體集相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.EntityKey> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-175">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-176">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是永久索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-176">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 <span data-ttu-id="0550e-177">針對實體的 <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> 呼叫 <xref:System.Data.Objects.ObjectStateEntry> 方法，而且此實體從 <xref:System.Data.EntityState.Added> 狀態轉換成 <xref:System.Data.EntityState.Unchanged> 狀態時，[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] 就會自動計算實體的新永久索引鍵並且同步處理所有暫存索引鍵參考。</span><span class="sxs-lookup"><span data-stu-id="0550e-177">When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState.Added> state to <xref:System.Data.EntityState.Unchanged> state, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoEntitySetKey">
      <MemberSignature Language="C#" Value="public static readonly System.Data.EntityKey NoEntitySetKey;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.EntityKey NoEntitySetKey" />
      <MemberSignature Language="DocId" Value="F:System.Data.EntityKey.NoEntitySetKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoEntitySetKey As EntityKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::EntityKey ^ NoEntitySetKey;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0550e-178">用以識別唯讀實體的單一 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-178">A singleton <see cref="T:System.Data.EntityKey" /> by which a read-only entity is identified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-179">唯讀的實體會識別在每種用途中有效的實體，但是當它沒有與實際實體集相關聯的情況除外。</span><span class="sxs-lookup"><span data-stu-id="0550e-179">A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set.</span></span> <span data-ttu-id="0550e-180">在建構並傳回指定於查詢文字內部之實體執行個體 (相對於從資料庫資料表中擷取的實體) 的 [!INCLUDE[esql](~/includes/esql-md.md)] 查詢結果中，可能會發生這種情況。</span><span class="sxs-lookup"><span data-stu-id="0550e-180">This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table).</span></span> <span data-ttu-id="0550e-181">沒有實體集的實體要等到與某個實體集相關聯時，才能保存至資料庫。</span><span class="sxs-lookup"><span data-stu-id="0550e-181">An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set.</span></span> <span data-ttu-id="0550e-182">因此，不論指定的實際合併選項為何，物件具體化程式都會將這種實體視為指定了 <xref:System.Data.Objects.MergeOption.NoTracking> 合併選項。</span><span class="sxs-lookup"><span data-stu-id="0550e-182">Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified.</span></span> <span data-ttu-id="0550e-183">雖然系統將建立實體物件，但是無法解析其識別 (Identity)，而且它不會在具體化程序中加入至狀態管理員。</span><span class="sxs-lookup"><span data-stu-id="0550e-183">An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialized">
      <MemberSignature Language="C#" Value="public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="0550e-184">描述給定序列化資料流的來源和目的端，並且提供其他呼叫端定義的內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-184">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-185">可用來還原序列化 <see cref="T:System.Data.EntityKey" /> 的 Helper 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-185">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-186">還原序列化 <xref:System.Data.EntityKey.OnDeserialized%2A> 時，物件服務會使用 <xref:System.Data.EntityKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-186"><xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>.</span></span> <span data-ttu-id="0550e-187">如需詳細資訊，請參閱[序列化物件](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)。</span><span class="sxs-lookup"><span data-stu-id="0550e-187">For more information, see [Serializing Objects](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserializing">
      <MemberSignature Language="C#" Value="public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDeserializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="0550e-188">描述給定序列化資料流的來源和目的端，並且提供其他呼叫端定義的內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-188">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-189">可用來還原序列化 <see cref="T:System.Data.EntityKey" /> 的 Helper 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-189">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-190">還原序列化 <xref:System.Data.EntityKey.OnDeserializing%2A> 時，物件服務會使用 <xref:System.Data.EntityKey>。</span><span class="sxs-lookup"><span data-stu-id="0550e-190"><xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>.</span></span> <span data-ttu-id="0550e-191">如需詳細資訊，請參閱[序列化物件](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)。</span><span class="sxs-lookup"><span data-stu-id="0550e-191">For more information, see [Serializing Objects](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Data.EntityKey key1, System.Data.EntityKey key2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (key1 As EntityKey, key2 As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Data::EntityKey ^ key1, System::Data::EntityKey ^ key2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key1" Type="System.Data.EntityKey" />
        <Parameter Name="key2" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key1">
          <span data-ttu-id="0550e-192">要比較的 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-192">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <param name="key2">
          <span data-ttu-id="0550e-193">要比較的 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-193">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-194">比較兩個 <see cref="T:System.Data.EntityKey" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-194">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-195">如果 <paramref name="key1" /> 和 <paramref name="key2" /> 值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-195">
              <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-196">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-196">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-197">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-197">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-198">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-198">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-199">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-199">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-200">也就是說，如果實體集相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.EntityKey> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-200">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-201">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是永久索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-201">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 <span data-ttu-id="0550e-202">這個運算子的對等方法是<xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType> </format> </remarks> </Docs> 
     </Member> 
     <Member MemberName="op_Inequality"> <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);" /> <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" /> <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" /> <MemberType>方法</MemberType> <AssemblyInfo> <AssemblyName>System.Data.Entity</AssemblyName> <AssemblyVersion>4.0.0.0</AssemblyVersion> </AssemblyInfo> <ReturnValue> <ReturnType>System.Boolean</ReturnType> </ReturnValue><Parameters> <Parameter Name="key1" Type="System.Data.EntityKey" /> <Parameter Name="key2" Type="System.Data.EntityKey" /> </Parameters> <Docs> <param name="key1">A<see cref="T:System.Data.EntityKey" />比較。</param></span><span class="sxs-lookup"><span data-stu-id="0550e-202">The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType></format> </remarks> </Docs>
    </Member>
    <Member MemberName="op_Inequality"> <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);" /> <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" /> <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" /> <MemberType>Method</MemberType> <AssemblyInfo> <AssemblyName>System.Data.Entity</AssemblyName> <AssemblyVersion>4.0.0.0</AssemblyVersion> </AssemblyInfo> <ReturnValue> <ReturnType>System.Boolean</ReturnType> </ReturnValue> <Parameters> <Parameter Name="key1" Type="System.Data.EntityKey" /> <Parameter Name="key2" Type="System.Data.EntityKey" /> </Parameters> <Docs> <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param></span></span>
        <span data-ttu-id="0550e-203"><param name="key2">A<see cref="T:System.Data.EntityKey" />比較。</param></span><span class="sxs-lookup"><span data-stu-id="0550e-203"><param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param></span></span>
        <span data-ttu-id="0550e-204"><summary>比較兩個<see cref="T:System.Data.EntityKey" />物件。</summary></span><span class="sxs-lookup"><span data-stu-id="0550e-204"><summary>Compares two <see cref="T:System.Data.EntityKey" /> objects.</summary></span></span>
        <span data-ttu-id="0550e-205"><returns> <see langword="true" /> 如果<paramref name="key1" />和<paramref name="key2" />值不相等，否則<see langword="false" />。</returns></span><span class="sxs-lookup"><span data-stu-id="0550e-205"><returns> <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, <see langword="false" />.</returns></span></span>
        <span data-ttu-id="0550e-206"><remarks> <format type="text/markdown"><![CDATA[</span><span class="sxs-lookup"><span data-stu-id="0550e-206"><remarks> <format type="text/markdown"><![CDATA[</span></span>  
  
## Remarks  
 <span data-ttu-id="0550e-207">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-207">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-208">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-208">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-209">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-209">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-210">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-210">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-211">也就是說，如果實體集相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.EntityKey> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-211">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-212">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是一般索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-212">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.</span></span>  
  
 <span data-ttu-id="0550e-213">這個運算子的對等方法是<xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0550e-213">The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Data.EntityKey key1, System.Data.EntityKey key2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (key1 As EntityKey, key2 As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Data::EntityKey ^ key1, System::Data::EntityKey ^ key2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key1" Type="System.Data.EntityKey" />
        <Parameter Name="key2" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key1">
          <span data-ttu-id="0550e-214">要比較的 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-214">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <param name="key2">
          <span data-ttu-id="0550e-215">要比較的 <see cref="T:System.Data.EntityKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-215">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0550e-216">比較兩個 <see cref="T:System.Data.EntityKey" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-216">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0550e-217">如果 <paramref name="key1" /> 和 <paramref name="key2" /> 值不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0550e-217">
              <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550e-218">暫存索引鍵與永久索引鍵具有不同的比較語意：</span><span class="sxs-lookup"><span data-stu-id="0550e-218">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="0550e-219">暫存索引鍵會使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-219">Temporary keys use reference equality.</span></span> <span data-ttu-id="0550e-220">也就是說，完全相同之暫存 <xref:System.Data.EntityKey> 執行個體的兩個參考會相等，但是沒有其他 <xref:System.Data.EntityKey> 執行個體會相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-220">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="0550e-221">永久索引鍵會根據包含的索引鍵屬性值和 <xref:System.Data.Metadata.Edm.EntitySet> 來判斷是否相等。</span><span class="sxs-lookup"><span data-stu-id="0550e-221">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="0550e-222">也就是說，如果實體集相同，而且索引鍵值相等，您可能會有兩個相等的個別 <xref:System.Data.EntityKey> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="0550e-222">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="0550e-223">此外，暫存索引鍵沒有任何 <xref:System.Data.Metadata.Edm.EntitySet> 或索引鍵值，但是一般索引鍵有。</span><span class="sxs-lookup"><span data-stu-id="0550e-223">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>