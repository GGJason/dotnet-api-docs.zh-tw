<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e84607c810b7307a449ac176f00e6a7a789c10a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36680142" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="634fe-101">代表資料的記憶體中快取。</span>
      <span class="sxs-lookup">
        <span data-stu-id="634fe-101">Represents an in-memory cache of data.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-102"><xref:System.Data.DataSet>，這就是資料來源擷取資料的記憶體中快取是 ADO.NET 架構的主要元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-102">The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</span></span> <span data-ttu-id="634fe-103"><xref:System.Data.DataSet>組成的集合<xref:System.Data.DataTable>物件，您可以與彼此相關以<xref:System.Data.DataRelation>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-103">The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects.</span></span> <span data-ttu-id="634fe-104">您也可以強制執行中的資料完整性<xref:System.Data.DataSet>使用<xref:System.Data.UniqueConstraint>和<xref:System.Data.ForeignKeyConstraint>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-104">You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects.</span></span> <span data-ttu-id="634fe-105">如需有關使用的詳細資訊<xref:System.Data.DataSet>物件，請參閱[資料集、 Datatable 和 Dataview](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)。</span><span class="sxs-lookup"><span data-stu-id="634fe-105">For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).</span></span>  
  
 <span data-ttu-id="634fe-106">而<xref:System.Data.DataTable>物件包含的資料，<xref:System.Data.DataRelationCollection>可讓您巡覽資料表階層架構。</span><span class="sxs-lookup"><span data-stu-id="634fe-106">Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy.</span></span> <span data-ttu-id="634fe-107">資料表包含在<xref:System.Data.DataTableCollection>透過存取<xref:System.Data.DataSet.Tables%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-107">The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property.</span></span> <span data-ttu-id="634fe-108">當存取<xref:System.Data.DataTable>物件，請注意，它們是有條件地區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="634fe-108">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="634fe-109">例如，如果一個<xref:System.Data.DataTable>名為"mydatatable"和另一個名為"Mydatatable 」，用來搜尋的其中一個資料表的字串會視為區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="634fe-109">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="634fe-110">不過，如果"mydatatable 」 存在，"Mydatatable"並不會搜尋字串會視為為不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="634fe-110">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="634fe-111">如需有關使用<xref:System.Data.DataTable>物件，請參閱[建立 DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)。</span><span class="sxs-lookup"><span data-stu-id="634fe-111">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).</span></span>  
  
 <span data-ttu-id="634fe-112">A<xref:System.Data.DataSet>可以讀取和寫入資料和結構描述為 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-112">A <xref:System.Data.DataSet> can read and write data and schema as XML documents.</span></span> <span data-ttu-id="634fe-113">資料和結構描述可以會透過 HTTP 傳輸並啟用 XML 的任何平台上的任何應用程式，使用。</span><span class="sxs-lookup"><span data-stu-id="634fe-113">The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</span></span> <span data-ttu-id="634fe-114">您可以將結構描述儲存為 XML 結構描述與<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，這個方法，而結構描述和資料可以儲存使用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-114">You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-115">若要讀取 XML 文件包含結構描述和資料，使用<xref:System.Data.DataSet.ReadXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-115">To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-116">在典型的多層式實作，建立及重新整理步驟<xref:System.Data.DataSet>，而且接著，更新的原始資料的：</span><span class="sxs-lookup"><span data-stu-id="634fe-116">In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:</span></span>  
  
1.  <span data-ttu-id="634fe-117">建立並填入每個<xref:System.Data.DataTable>中<xref:System.Data.DataSet>使用資料來源的資料<xref:System.Data.Common.DataAdapter>。</span><span class="sxs-lookup"><span data-stu-id="634fe-117">Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.</span></span>  
  
2.  <span data-ttu-id="634fe-118">變更中個別的資料<xref:System.Data.DataTable>藉由加入、 更新或刪除物件<xref:System.Data.DataRow>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-118">Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.</span></span>  
  
3.  <span data-ttu-id="634fe-119">叫用<xref:System.Data.DataSet.GetChanges%2A>方法，以建立第二個<xref:System.Data.DataSet>該功能的資料變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-119">Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.</span></span>  
  
4.  <span data-ttu-id="634fe-120">呼叫<xref:System.Data.Common.DataAdapter.Update%2A>方法<xref:System.Data.Common.DataAdapter>，傳遞第二個<xref:System.Data.DataSet>做為引數。</span><span class="sxs-lookup"><span data-stu-id="634fe-120">Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.</span></span>  
  
5.  <span data-ttu-id="634fe-121">叫用<xref:System.Data.DataSet.Merge%2A>方法，將合併的變更，在第二個<xref:System.Data.DataSet>到第一個。</span><span class="sxs-lookup"><span data-stu-id="634fe-121">Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.</span></span>  
  
6.  <span data-ttu-id="634fe-122">叫用<xref:System.Data.DataSet.AcceptChanges%2A>上<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-122">Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-123">或者，叫用<xref:System.Data.DataSet.RejectChanges%2A>取消所做的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-123">Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-124"><xref:System.Data.DataSet>和<xref:System.Data.DataTable>物件繼承自<xref:System.ComponentModel.MarshalByValueComponent>，並支援<xref:System.Runtime.Serialization.ISerializable>遠端執行功能的介面。</span><span class="sxs-lookup"><span data-stu-id="634fe-124">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting.</span></span> <span data-ttu-id="634fe-125">這些是唯一可以進行遠端通訊的 ADO.NET 物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-125">These are the only ADO.NET objects that can be remoted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-126">類別繼承自<xref:System.Data.DataSet>不完成記憶體回收行程，因為已經在隱藏的完成項<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-126">Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-127">在衍生的類別可以呼叫<xref:System.GC.ReRegisterForFinalize%2A>其建構函式，以允許記憶體回收行程最終處理而類別中的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-127">The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-128">下列範例包含數種方法，結合，建立並填入<xref:System.Data.DataSet>從**Northwind**資料庫。</span><span class="sxs-lookup"><span data-stu-id="634fe-128">The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.</span></span>  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="634fe-129">此類型是安全多執行緒的讀取作業。</span>
      <span class="sxs-lookup">
        <span data-stu-id="634fe-129">This type is safe for multithreaded read operations.</span>
      </span>
      <span data-ttu-id="634fe-130">您必須同步處理任何寫入作業。</span>
      <span class="sxs-lookup">
        <span data-stu-id="634fe-130">You must synchronize any write operations.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-131">初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-131">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-132">初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-132">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-133">這項實作<xref:System.Data.DataSet>建構函式不採用任何參數，並建立一個預設名稱，"NewDataSet，"新的執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-133">This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</span></span>  
  
 <span data-ttu-id="634fe-134">名稱<xref:System.Data.DataSet>，才能確保的 XML 表示法<xref:System.Data.DataSet>一律會有文件項目，也就是最高層級的項目結構描述定義中的名稱。</span><span class="sxs-lookup"><span data-stu-id="634fe-134">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-135">下列範例會建立新<xref:System.Data.DataSet>，並加入兩個<xref:System.Data.DataTable>給它的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-135">The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName">
          <span data-ttu-id="634fe-136">
            <see cref="T:System.Data.DataSet" /> 的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-136">The name of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-137">使用指定名稱，初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-137">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class with the given name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-138">名稱<xref:System.Data.DataSet>，才能確保的 XML 表示法<xref:System.Data.DataSet>一律會有文件項目，也就是最高的層級項目結構描述定義中的名稱。</span><span class="sxs-lookup"><span data-stu-id="634fe-138">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-139">下列範例會建立新<xref:System.Data.DataSet>的兩個<xref:System.Data.DataTable>物件就會加入。</span><span class="sxs-lookup"><span data-stu-id="634fe-139">The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-140">序列化或還原序列化物件所需的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-140">The data needed to serialize or deserialize an object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-141">指定的序列化資料流的來源和目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-141">The source and destination of a given serialized stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-142">初始化具有指定序列化資訊和內容之 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-142">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class that has the given serialization information and context.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-143">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-143">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-144">
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-144">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span>
          </span>
        </param>
        <param name="ConstructSchema">
          <span data-ttu-id="634fe-145">布林值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-145">The boolean value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-146">初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-146">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-147">認可從載入這個 <see cref="T:System.Data.DataSet" /> 物件或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來，對該物件做的所有變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-147">Commits all the changes made to this <see cref="T:System.Data.DataSet" /> since it was loaded or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-148">同時<xref:System.Data.DataRow>和<xref:System.Data.DataTable>類別具有<xref:System.Data.DataSet.AcceptChanges%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-148">Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods.</span></span> <span data-ttu-id="634fe-149">呼叫<xref:System.Data.DataTable.AcceptChanges%2A>在<xref:System.Data.DataTable>層級原因<xref:System.Data.DataRow.AcceptChanges%2A>每個方法<xref:System.Data.DataRow>呼叫。</span><span class="sxs-lookup"><span data-stu-id="634fe-149">Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called.</span></span> <span data-ttu-id="634fe-150">同樣地，叫用<xref:System.Data.DataSet.AcceptChanges%2A>上<xref:System.Data.DataSet>導致<xref:System.Data.DataTable.AcceptChanges%2A>中每一個資料表上呼叫<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-150">Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-151">如此一來，在中，您必須在可以叫用此方法的多個層級。</span><span class="sxs-lookup"><span data-stu-id="634fe-151">In this manner, you have multiple levels at which the method can be invoked.</span></span> <span data-ttu-id="634fe-152">呼叫<xref:System.Data.DataSet.AcceptChanges%2A>的<xref:System.Data.DataSet>可讓您叫用所有從屬物件 （例如，資料表和資料列） 中的某個呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-152">Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</span></span>  
  
 <span data-ttu-id="634fe-153">當您呼叫`AcceptChanges`上`DataSet`，任何<xref:System.Data.DataRow>物件仍在編輯模式中的順利結束編輯。</span><span class="sxs-lookup"><span data-stu-id="634fe-153">When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully.</span></span> <span data-ttu-id="634fe-154"><xref:System.Data.DataRow.RowState%2A>每個屬性<xref:System.Data.DataRow>也會變更。`Added`和`Modified`資料列會變成`Unchanged`，和`Deleted`會移除資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-154">The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="634fe-155">如果`DataSet`包含<xref:System.Data.ForeignKeyConstraint>叫用的物件`AcceptChanges`方法也會導致<xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>強制執行。</span><span class="sxs-lookup"><span data-stu-id="634fe-155">If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-156">`AcceptChanges` 和`RejectChanges`只會套用到`DataRow`相關的變更 （亦即，新增、 移除、 刪除和修改）。</span><span class="sxs-lookup"><span data-stu-id="634fe-156">`AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify).</span></span> <span data-ttu-id="634fe-157">它們並不適用於結構描述或結構化變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-157">They are not applicable to schema or structural changes.</span></span>  
>   
>  <span data-ttu-id="634fe-158">呼叫 AcceptChanges 不會複寫這些變更回資料來源是否已填入資料集，使用資料配接器。</span><span class="sxs-lookup"><span data-stu-id="634fe-158">Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</span></span> <span data-ttu-id="634fe-159">在此情況下，呼叫<xref:System.Data.Common.DataAdapter.Update%2A>改為。</span><span class="sxs-lookup"><span data-stu-id="634fe-159">In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead.</span></span> <span data-ttu-id="634fe-160">請參閱[以 Dataadapter 更新資料來源](http://msdn.microsoft.com/library/33y2221y.aspx)如需詳細資訊。</span><span class="sxs-lookup"><span data-stu-id="634fe-160">See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-161">下列範例會將<xref:System.Data.DataRow>至<xref:System.Data.DataTable>中<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-161">The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-162"><xref:System.Data.DataSet.AcceptChanges%2A>方法接著會在呼叫<xref:System.Data.DataSet>，哪些串聯，聯集全部<xref:System.Data.DataTable>它所包含的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-162">The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-163">開始對表單或另一個元件所使用的 <see cref="T:System.Data.DataSet" /> 進行初始化作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-163">Begins the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="634fe-164">初始化發生於執行階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-164">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-165">Visual Studio.NET 設計環境會使用這個方法來開始初始化用於表單或為另一個元件所使用的元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-165">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="634fe-166"><xref:System.Data.DataSet.EndInit%2A>方法結束初始化。</span><span class="sxs-lookup"><span data-stu-id="634fe-166">The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="634fe-167">使用<xref:System.Data.DataSet.BeginInit%2A>和<xref:System.Data.DataSet.EndInit%2A>方法可防止控制項完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="634fe-167">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-168">取得或設定值，指出在 <see cref="T:System.Data.DataTable" /> 物件中的字串比較是否為區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-168">Gets or sets a value indicating whether string comparisons within <see cref="T:System.Data.DataTable" /> objects are case-sensitive.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-169">如果字串比較為區分大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-169">
              <see langword="true" /> if string comparisons are case-sensitive; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="634fe-170">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-170">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-171"><xref:System.Data.DataSet.CaseSensitive%2A>如何排序、 搜尋和篩選作業執行的每個屬性會影響<xref:System.Data.DataTable>中所含物件<xref:System.Data.DataSet>時使用<xref:System.Data.DataTable.Select%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-171">The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-172">根據預設，設定<xref:System.Data.DataSet.CaseSensitive%2A>屬性<xref:System.Data.DataSet>也會設定<xref:System.Data.DataTable.CaseSensitive%2A>的每個相關聯的屬性<xref:System.Data.DataTable>為相同的值。</span><span class="sxs-lookup"><span data-stu-id="634fe-172">By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-173">下列範例會切換<xref:System.Data.DataSet.CaseSensitive%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-173">The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-174">移除所有資料表中的資料列，以清除任何資料的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-174">Clears the <see cref="T:System.Data.DataSet" /> of any data by removing all rows in all tables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-175">如果<xref:System.Data.DataSet>繫結至<xref:System.Xml.XmlDataDocument>，則呼叫<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>或<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>引發<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="634fe-175">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="634fe-176">若要避免這種情況下，會周遊一次移除一個每個資料列的每個資料表。</span><span class="sxs-lookup"><span data-stu-id="634fe-176">To avoid this situation, traverse each table, removing each row one at a time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-177">下列範例會清除<xref:System.Data.DataSet>的所有資料表中的所有資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-177">The following example clears the <xref:System.Data.DataSet> of all rows in all tables.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-178">複製 <see cref="T:System.Data.DataSet" /> 的結構，包括所有 <see cref="T:System.Data.DataTable" /> 結構描述、關聯和條件約束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-178">Copies the structure of the <see cref="T:System.Data.DataSet" />, including all <see cref="T:System.Data.DataTable" /> schemas, relations, and constraints.</span>
          </span>
          <span data-ttu-id="634fe-179">不要複製任何資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-179">Does not copy any data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-180">具有與目前的 <see cref="T:System.Data.DataSet" /> 相同結構描述之新 <see cref="T:System.Data.DataSet" />，但是沒有資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-180">A new <see cref="T:System.Data.DataSet" /> with the same schema as the current <see cref="T:System.Data.DataSet" />, but none of the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="634fe-181">如果這些類別具有已子類別化，複製也會屬於相同的子類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-181">If these classes have been subclassed, the clone will also be of the same subclasses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-182">下列範例會建立複製的<xref:System.Data.DataSet>物件的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-182">The following example creates a clone of a <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-183">複製這個 <see cref="T:System.Data.DataSet" /> 的結構和資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-183">Copies both the structure and data for this <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-184">新的 <see cref="T:System.Data.DataSet" />，具有與這個 <see cref="T:System.Data.DataSet" /> 相同的結構 (資料表結構描述、關聯和條件約束) 和資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-184">A new <see cref="T:System.Data.DataSet" /> with the same structure (table schemas, relations, and constraints) and data as this <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="634fe-185">
            <block subset="none" type="note">
              <para> 如果這些類別已形成子類別，則複本也會屬於相同的子類別。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-185">
              <block subset="none" type="note">
                <para> If these classes have been subclassed, the copy will also be of the same subclasses.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="634fe-186">下列範例會使用<xref:System.Data.DataSet.Copy%2A>方法來建立一份原始<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-186">The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-187">傳回 <see cref="T:System.Data.DataTableReader" />，每個 <see cref="T:System.Data.DataTable" /> 有一個結果集，順序與資料表出現在 <see cref="P:System.Data.DataSet.Tables" /> 集合中的順序相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-187">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-188">若要確保結果集內傳回的順序<xref:System.Data.DataTableReader>，如果<xref:System.Data.DataTable>內<xref:System.Data.DataSet>是空的它將由表示空的結果集內傳回`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="634fe-188">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it will be represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-189">此範例中，主控台應用程式，會建立三個<xref:System.Data.DataTable>執行個體，並將每個要<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-189">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-190">範例會呼叫<xref:System.Data.DataSet.CreateDataReader%2A>方法，並顯示傳回之內容<xref:System.Data.DataTableReader>。</span><span class="sxs-lookup"><span data-stu-id="634fe-190">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="634fe-191">請注意，在 設定結果的順序`DataTableReader`控制依以下順序`DataTable`做為參數傳遞的執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-191">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-192">這個範例示範如何使用其中一個多載版本`CreateDataReader`。</span><span class="sxs-lookup"><span data-stu-id="634fe-192">This example shows how to use one of the overloaded versions of `CreateDataReader`.</span></span> <span data-ttu-id="634fe-193">如需可能會提供其他範例，請參閱個別的多載的主題。</span><span class="sxs-lookup"><span data-stu-id="634fe-193">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="634fe-194">此範例會在主控台視窗中顯示下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="634fe-194">The example displays the following code in the Console window:</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-195">傳回 <see cref="T:System.Data.DataTableReader" />，每個 <see cref="T:System.Data.DataTable" /> 有一個結果集，順序與資料表出現在 <see cref="P:System.Data.DataSet.Tables" /> 集合中的順序相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-195">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-196">
            <see cref="T:System.Data.DataTableReader" />，包含一個或多個結果集，對應於包含在來源 <see cref="T:System.Data.DataTable" /> 之中的 <see cref="T:System.Data.DataSet" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-196">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-197">若要確保結果集內傳回的順序<xref:System.Data.DataTableReader>，如果<xref:System.Data.DataTable>內<xref:System.Data.DataSet>是空的它會以空的結果集內傳回`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="634fe-197">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-198">下列範例會建立三個<xref:System.Data.DataTable>例項，並將每個要加入<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-198">The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-199">此範例接著會將傳遞填`DataSet`要呼叫的程序<xref:System.Data.DataSet.CreateDataReader%2A>方法，然後繼續進行逐一查看所有結果集內包含<xref:System.Data.DataTableReader>。</span><span class="sxs-lookup"><span data-stu-id="634fe-199">The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="634fe-200">這個範例會在主控台視窗中顯示結果。</span><span class="sxs-lookup"><span data-stu-id="634fe-200">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables">
          <span data-ttu-id="634fe-201">DataTable 的陣列提供要在 <see cref="T:System.Data.DataTableReader" /> 中傳回的結果集順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-201">An array of DataTables providing the order of the result sets to be returned in the <see cref="T:System.Data.DataTableReader" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-202">傳回 <see cref="T:System.Data.DataTableReader" />，每一個 <see cref="T:System.Data.DataTable" /> 有一個結果集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-202">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-203">
            <see cref="T:System.Data.DataTableReader" />，包含一個或多個結果集，對應於包含在來源 <see cref="T:System.Data.DataTable" /> 之中的 <see cref="T:System.Data.DataSet" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-203">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="634fe-204">傳回的結果集的順序是 <paramref name="dataTables" /> 參數所指定的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-204">The returned result sets are in the order specified by the <paramref name="dataTables" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-205">為了確保結果的順序設定內傳回<xref:System.Data.DataTableReader>，如果<xref:System.Data.DataTable>內<xref:System.Data.DataSet>是空的它會以空的結果集內傳回`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="634fe-205">In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span> <span data-ttu-id="634fe-206">因為這個多載的版本，可讓您提供一份`DataTable`做為參數的情況下，您可以指定結果集內傳回的出現的順序`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="634fe-206">Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-207">此範例中，主控台應用程式，會建立三個<xref:System.Data.DataTable>執行個體，並將每個要<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-207">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-208">範例會呼叫<xref:System.Data.DataSet.CreateDataReader%2A>方法，並顯示傳回之內容<xref:System.Data.DataTableReader>。</span><span class="sxs-lookup"><span data-stu-id="634fe-208">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="634fe-209">請注意，在 設定結果的順序`DataTableReader`控制依以下順序`DataTable`做為參數傳遞的執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-209">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span> <span data-ttu-id="634fe-210">這個範例會在主控台視窗中顯示結果。</span><span class="sxs-lookup"><span data-stu-id="634fe-210">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-211">取得或設定目前 <see cref="T:System.Data.DataSet" /> 的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-211">Gets or sets the name of the current <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-212">
            <see cref="T:System.Data.DataSet" /> 的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-212">The name of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="634fe-213">下列範例會建立新<xref:System.Data.DataSet>與給定<xref:System.Data.DataSet.DataSetName%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-213">The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-214">取得 <see cref="T:System.Data.DataSet" /> (它允許使用自訂的 <see cref="T:System.Data.DataViewManager" /> 進行篩選、搜尋和巡覽) 所包含的資料之自訂檢視。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-214">Gets a custom view of the data contained in the <see cref="T:System.Data.DataSet" /> to allow filtering, searching, and navigating using a custom <see cref="T:System.Data.DataViewManager" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-215">
            <see cref="T:System.Data.DataViewManager" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-215">A <see cref="T:System.Data.DataViewManager" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-216"><xref:System.Data.DataViewManager>傳回<xref:System.Data.DataSet.DefaultViewManager%2A>屬性可讓您為每個建立自訂設定<xref:System.Data.DataTable>中<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-216">The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-217">當您取得<xref:System.Data.DataView>從<xref:System.Data.DataTable>，排序次序、 篩選和<xref:System.Data.DataViewRowState>根據中的設定會設定<xref:System.Data.DataSet.DefaultViewManager%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-217">When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-218">下列範例會取得預設<xref:System.Data.DataViewManager>如<xref:System.Data.DataSet>，並將<xref:System.Data.DataTable>至<xref:System.Data.DataTableCollection>。</span><span class="sxs-lookup"><span data-stu-id="634fe-218">The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-219">判斷 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-219">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-220">還原序列化的型別時，就可以呼叫這個方法<xref:System.Data.DataSet>來判斷其<xref:System.Data.DataSet.SchemaSerializationMode%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-220">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-221">
            <see cref="T:System.Xml.XmlReader" /> 執行個體，是在 <see cref="T:System.Data.DataSet" /> 的還原序列化期間傳遞的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-221">The <see cref="T:System.Xml.XmlReader" /> instance that is passed during deserialization of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-222">判斷 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-222">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-223">
            <see cref="T:System.Data.SchemaSerializationMode" /> 列舉，指出結構描述資訊是否已從承載中省略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-223">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-224">還原序列化的型別時，就可以呼叫這個方法<xref:System.Data.DataSet>來判斷其<xref:System.Data.DataSet.SchemaSerializationMode%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-224">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-225">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />，在遠端作業案例中，以 <see langword="DataSet" /> 的保護建構函式 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 叫用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-225">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that a <see langword="DataSet" />’s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-226">
            <see cref="T:System.Runtime.Serialization.StreamingContext" />，在遠端作業案例中，以 <see langword="DataSet" /> 的保護建構函式 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 叫用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-226">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that a <see langword="DataSet" />’s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-227">判斷 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-227">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-228">
            <see cref="T:System.Data.SchemaSerializationMode" /> 列舉，指出結構描述資訊是否已從承載中省略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-228">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-229">還原序列化的型別時，就可以呼叫這個方法<xref:System.Data.DataSet>來判斷其<xref:System.Data.DataSet.SchemaSerializationMode%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-229">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-230">結束對表單或另一個元件所使用的 <see cref="T:System.Data.DataSet" /> 進行初始化作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-230">Ends the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="634fe-231">初始化發生於執行階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-231">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-232">Visual Studio.NET 設計環境會使用這個方法來結束初始化用於表單或為另一個元件所使用的元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-232">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="634fe-233"><xref:System.Data.DataSet.BeginInit%2A>方法初始化開始。</span><span class="sxs-lookup"><span data-stu-id="634fe-233">The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="634fe-234">使用<xref:System.Data.DataSet.BeginInit%2A>和<xref:System.Data.DataSet.EndInit%2A>方法可防止控制項完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="634fe-234">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-235">取得或設定值，指出在嘗試任何更新作業時，是否遵循條件約束 (Constraint) 規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-235">Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-236">如果強制遵循規則，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-236">
              <see langword="true" /> if rules are enforced; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="634fe-237">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-237">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-238">條件約束會在設定<xref:System.Data.DataTable>層級 (<xref:System.Data.DataTable.Constraints%2A>屬性)。</span><span class="sxs-lookup"><span data-stu-id="634fe-238">Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property).</span></span> <span data-ttu-id="634fe-239">如需有關建立條件約束的詳細資訊，請參閱[DataTable 條件約束](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)。</span><span class="sxs-lookup"><span data-stu-id="634fe-239">For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-240">下列範例會建立<xref:System.Data.DataSet>其中包含一個資料表，一個資料行、 五個資料列，一個<xref:System.Data.UniqueConstraint>。</span><span class="sxs-lookup"><span data-stu-id="634fe-240">The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>.</span></span> <span data-ttu-id="634fe-241"><xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`和每個資料列的值都會設為相同的值。</span><span class="sxs-lookup"><span data-stu-id="634fe-241">The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value.</span></span> <span data-ttu-id="634fe-242">當<xref:System.Data.DataSet.EnforceConstraints%2A>屬性重設為`true`、<xref:System.Data.ConstraintException>產生。</span><span class="sxs-lookup"><span data-stu-id="634fe-242">When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">
          <span data-ttu-id="634fe-243">一個或多個條件約束無法強制遵循。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-243">One or more constraints cannot be enforced.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-244">取得與 <see langword="DataSet" /> 相關聯的自訂使用者資訊集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-244">Gets the collection of customized user information associated with the <see langword="DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-245">具有所有自訂使用者資訊的 <see cref="T:System.Data.PropertyCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-245">A <see cref="T:System.Data.PropertyCollection" /> with all custom user information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-246"><xref:System.Data.DataSet.ExtendedProperties%2A>屬性可讓您儲存自訂的資訊與`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="634fe-246">The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`.</span></span> <span data-ttu-id="634fe-247">例如，您可能會儲存資料應該重新整理的時間。</span><span class="sxs-lookup"><span data-stu-id="634fe-247">For example, you might store a time when the data should be refreshed.</span></span>  
  
 <span data-ttu-id="634fe-248">擴充的屬性的類型必須是<xref:System.String>如果您想要它們時保存<xref:System.Data.DataSet>寫入為 XML。</span><span class="sxs-lookup"><span data-stu-id="634fe-248">Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-249">下列範例會將自訂屬性來<xref:System.Data.PropertyCollection>傳回<xref:System.Data.DataColumn.ExtendedProperties%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-249">The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property.</span></span> <span data-ttu-id="634fe-250">第二個範例會擷取自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-250">The second example retrieves the custom property.</span></span>  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-251">取得 <see cref="T:System.Data.DataSet" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來所做的所有變更) 的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-251">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-252">取得 <see cref="T:System.Data.DataSet" /> (包含從載入它或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來所做的所有變更) 的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-252">Gets a copy of the <see cref="T:System.Data.DataSet" /> that contains all changes made to it since it was loaded or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was last called.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-253">這個 <see cref="T:System.Data.DataSet" /> 所產生變更的複本，可在其上執行動作，並且稍後使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 合併回來。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-253">A copy of the changes from this <see cref="T:System.Data.DataSet" /> that can have actions performed on it and later be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span>
          </span>
          <span data-ttu-id="634fe-254">如果找不到已變更的資料列，則方法會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-254">If no changed rows are found, the method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-255">建立新<xref:System.Data.DataSet>包含的所有資料列的原始複本<xref:System.Data.DataSet>具有暫止的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-255">Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="634fe-256">關聯性條件約束會造成其他不變的資料列新增至新<xref:System.Data.DataSet>如果變更的資料列包含對應至外部索引鍵中的變更資料列的主索引鍵。</span><span class="sxs-lookup"><span data-stu-id="634fe-256">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="634fe-257">方法會傳回`null`是否有任何資料列在原始<xref:System.Data.DataSet>具有暫止的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-257">The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-258">下列範例會建立簡單<xref:System.Data.DataSet>一個資料表、 兩個資料行，與十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-258">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-259">變更兩個值，並加入一個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-259">Two values are changed, and one row is added.</span></span> <span data-ttu-id="634fe-260">使用建立的已變更的資料子集<xref:System.Data.DataSet.GetChanges%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-260">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="634fe-261">調解錯誤，新的資料行新增至後變更結構描述的子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-261">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="634fe-262">當<xref:System.Data.DataSet.Merge%2A>方法呼叫`missingSchemaAction`設`MissingSchemaAction.Add`，新的資料行加入到原始<xref:System.Data.DataSet>物件的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-262">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">
          <span data-ttu-id="634fe-263">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-263">One of the <see cref="T:System.Data.DataRowState" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-264">取得 <see cref="T:System.Data.DataSet" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來所做的所有變更) 的複本 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-264">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-265">篩選過的 <see cref="T:System.Data.DataSet" /> 複本，可以在其上執行動作，然後在使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 時合併回來。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-265">A filtered copy of the <see cref="T:System.Data.DataSet" /> that can have actions performed on it, and subsequently be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span>
          </span>
          <span data-ttu-id="634fe-266">如果找不到所需的 <see cref="T:System.Data.DataRowState" /> 的資料列，則方法會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-266">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-267"><xref:System.Data.DataSet.GetChanges%2A>方法用來產生第二個<xref:System.Data.DataSet>導入原始的物件，其中包含所做的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-267">The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="634fe-268">使用`rowStates`引數以指定的變更應該包含新的物件類型。</span><span class="sxs-lookup"><span data-stu-id="634fe-268">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="634fe-269">傳回此複本設計來合併回原始此<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-269">This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-270">關聯性條件約束可能會導致父資料列標示為`Unchanged`包含。</span><span class="sxs-lookup"><span data-stu-id="634fe-270">Relationship constraints may cause parent rows marked `Unchanged` to be included.</span></span> <span data-ttu-id="634fe-271">如果所需的任何資料列<xref:System.Data.DataRowState>找不到，<xref:System.Data.DataSet.GetChanges%2A>方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="634fe-271">If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-272">下列範例會使用<xref:System.Data.DataSet.GetChanges%2A>方法，以建立第二個<xref:System.Data.DataSet>物件，然後用來更新資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-272">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet">
          <span data-ttu-id="634fe-273">指定的結構描述集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-273">The specified schema set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-274">取得資料集之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-274">Gets a copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" /> for the DataSet.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-275">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-275">A copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-276">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />，保留與 <see cref="T:System.Data.DataSet" /> 關聯的序列化資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-276">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-277">
            <see cref="T:System.Runtime.Serialization.StreamingContext" />，含有與 <see cref="T:System.Data.DataSet" /> 關聯的序列資料流的來源和目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-277">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-278">以序列化 <see cref="T:System.Data.DataSet" /> 所需的資料，填入序列化資訊物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-278">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="634fe-279">
            <paramref name="info" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-279">The <paramref name="info" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-280">傳回可序列化的 <see cref="T:System.Xml.Schema.XmlSchema" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-280">Returns a serializable <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-281">
            <see cref="T:System.Xml.Schema.XmlSchema" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-281">The <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-282">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-282">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-283">資料流內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-283">The streaming context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-284">從二進位或 XML 資料流還原序列化資料表資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-284">Deserializes the table data from the binary or XML stream.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-285">傳回儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-285">Returns the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-286">字串，儲存於 <see cref="T:System.Data.DataSet" /> 的資料表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-286">A string that is a representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-287">呼叫此方法等於呼叫<xref:System.Data.DataSet.WriteXml%2A>與<xref:System.Data.XmlWriteMode>設<xref:System.Data.XmlWriteMode.IgnoreSchema>。</span><span class="sxs-lookup"><span data-stu-id="634fe-287">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.</span></span>  
  
 <span data-ttu-id="634fe-288"><xref:System.Data.DataSet.GetXml%2A> 傳回 XML 字串形式，因此需要以更多成本負擔比<xref:System.Data.DataSet.WriteXml%2A>寫入 XML 檔案。</span><span class="sxs-lookup"><span data-stu-id="634fe-288"><xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="634fe-289">如果您要建置<xref:System.Data.DataSet>使用結構描述推斷和序列化它使用 XML 或 Web 服務的資料行順序可能會變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-289">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-290">下列範例會建立<xref:System.Data.DataSet>和<xref:System.Data.DataTable>、 新增範例資料，並以 XML 格式顯示資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-290">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 <span data-ttu-id="634fe-291">這個範例示範如何從資料集將資料寫入 XML 檔案，並從 XML 將資料讀入資料集。</span><span class="sxs-lookup"><span data-stu-id="634fe-291">This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML.</span></span> <span data-ttu-id="634fe-292">這個範例會使用兩個資料表建立一個資料集、 使用兩種方式可將資料集匯出至 XML 檔案 （WriteXml 和 GetXml），並使用兩種方式 （ReadXml 和 InferXmlSchema），從 XML 檔案匯入資料集。</span><span class="sxs-lookup"><span data-stu-id="634fe-292">This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.</span></span>  
  
 <span data-ttu-id="634fe-293">在編譯和執行範例之前，您需要在 範例目錄中建立四個 XML 檔案。</span><span class="sxs-lookup"><span data-stu-id="634fe-293">Before you compile and run the sample, you need to create four XML files in the sample directory.</span></span> <span data-ttu-id="634fe-294">首先，建立 ElementsWithAttributes.xml:</span><span class="sxs-lookup"><span data-stu-id="634fe-294">First, create ElementsWithAttributes.xml:</span></span>  
  
```  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="634fe-295">接下來，建立 ElementsWithChildElementsxml.xml:</span><span class="sxs-lookup"><span data-stu-id="634fe-295">Next, create ElementsWithChildElementsxml.xml:</span></span>  
  
```  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 <span data-ttu-id="634fe-296">現在建立 ElementsWithOnlyAttributes.xml:</span><span class="sxs-lookup"><span data-stu-id="634fe-296">Now create ElementsWithOnlyAttributes.xml:</span></span>  
  
```  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 <span data-ttu-id="634fe-297">然後最後，建立 RepeatingElements.xml:</span><span class="sxs-lookup"><span data-stu-id="634fe-297">And finally, create RepeatingElements.xml:</span></span>  
  
```  
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="634fe-298">現在您可以編譯並執行下列的原始程式碼。</span><span class="sxs-lookup"><span data-stu-id="634fe-298">Now you can compile and run the following source code.</span></span>  <span data-ttu-id="634fe-299">[如何儲存資料的資料集至 XML 檔案](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3)具有此範例的 Visual Basic 和 C# 專案。</span><span class="sxs-lookup"><span data-stu-id="634fe-299">[How to Store Data of DataSet into XML File](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.</span></span>  
  
```  
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-300">為儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示，傳回 XML 結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-300">Returns the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-301">字串，為儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示的 XML 結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-301">String that is the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-302">呼叫此方法等於呼叫<xref:System.Data.DataSet.WriteXmlSchema%2A>，只不過寫入主要結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-302">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.</span></span>  
  
 <span data-ttu-id="634fe-303"><xref:System.Data.DataSet.GetXmlSchema%2A> 傳回 XML 字串形式，因此需要以更多成本負擔比<xref:System.Data.DataSet.WriteXmlSchema%2A>寫入 XML 檔案。</span><span class="sxs-lookup"><span data-stu-id="634fe-303"><xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="634fe-304">如果您要建置<xref:System.Data.DataSet>使用結構描述推斷和序列化它使用 XML 或 Web 服務的資料行順序可能會變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-304">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-305">下列範例會建立<xref:System.Data.DataSet>和<xref:System.Data.DataTable>，然後以 XML 格式顯示結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-305">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-306">取得值，表示 <see cref="T:System.Data.DataSet" /> 是否包含變更，包括加入、刪除或修改的資料列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-306">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-307">取得值，表示 <see cref="T:System.Data.DataSet" /> 是否包含變更，包括加入、刪除或修改的資料列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-307">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-308">如果 <see cref="T:System.Data.DataSet" /> 包含變更，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-308">
              <see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="634fe-309">下列範例會使用<xref:System.Data.DataSet.GetChanges%2A>方法，以建立第二個<xref:System.Data.DataSet>物件，然後用來更新資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-309">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">
          <span data-ttu-id="634fe-310">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-310">One of the <see cref="T:System.Data.DataRowState" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-311">取得值，指出 <see cref="T:System.Data.DataSet" /> 是否包含變更，包括加入、刪除或修改的資料列 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-311">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows, filtered by <see cref="T:System.Data.DataRowState" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-312">如果 <see cref="T:System.Data.DataSet" /> 包含變更，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-312">
              <see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-313">檢查<xref:System.Data.DataSet.HasChanges%2A>屬性`DataSet`叫用之前<xref:System.Data.DataSet.GetChanges%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-313">Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-314">下列範例會使用<xref:System.Data.DataSet.GetChanges%2A>方法，以建立第二個<xref:System.Data.DataSet>物件，然後用來更新資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-314">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-315">取得值，指出這個 <see cref="T:System.Data.DataTable" /> 內的 <see cref="T:System.Data.DataSet" /> 物件中是否有任何一個有錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-315">Gets a value indicating whether there are errors in any of the <see cref="T:System.Data.DataTable" /> objects within this <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-316">如果任何資料表含有錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-316">
              <see langword="true" /> if any table contains an error;otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-317">每個<xref:System.Data.DataTable>中<xref:System.Data.DataSet>還有<xref:System.Data.DataTable.HasErrors%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-317">Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property.</span></span> <span data-ttu-id="634fe-318">使用`HasErrors`屬性`DataSet`首先，判斷資料表是否錯誤，檢查個別之前<xref:System.Data.DataTable>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-318">Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects.</span></span> <span data-ttu-id="634fe-319">如果`DataTable`有錯誤，錯誤<xref:System.Data.DataTable.GetErrors%2A>方法傳回的陣列<xref:System.Data.DataRow>包含錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-319">If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-320">下列範例會使用<xref:System.Data.DataSet.HasErrors%2A>屬性來判斷是否<xref:System.Data.DataSet>物件包含錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-320">The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors.</span></span> <span data-ttu-id="634fe-321">若是如此，每個錯誤<xref:System.Data.DataRow>中每個<xref:System.Data.DataTable>會列印。</span><span class="sxs-lookup"><span data-stu-id="634fe-321">If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-322">將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-322">Applies XML schema to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-323">要從其中讀取結構描述的來源 <see langword="Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-323">The <see langword="Stream" /> from which to read the schema.</span>
          </span>
        </param>
        <param name="nsArray">
          <span data-ttu-id="634fe-324">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-324">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-325">從指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-325">Applies the XML schema from the specified <see cref="T:System.IO.Stream" /> to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-326">要從其中讀取結構描述的來源 <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-326">The <see langword="TextReader" /> from which to read the schema.</span>
          </span>
        </param>
        <param name="nsArray">
          <span data-ttu-id="634fe-327">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-327">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-328">從指定的 <see cref="T:System.IO.TextReader" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-328">Applies the XML schema from the specified <see cref="T:System.IO.TextReader" /> to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-329">要從中讀取結構描述的來源檔案名稱 (包含路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-329">The name of the file (including the path) from which to read the schema.</span>
          </span>
        </param>
        <param name="nsArray">
          <span data-ttu-id="634fe-330">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-330">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-331">從指定的檔案，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-331">Applies the XML schema from the specified file to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-332">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-332">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-333">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-333">For reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-334">關聯的列舉型別：<see cref="T:System.Security.Permissions.FileIOPermissionAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-334">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-335">要從其中讀取結構描述的來源 <see langword="XMLReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-335">The <see langword="XMLReader" /> from which to read the schema.</span>
          </span>
        </param>
        <param name="nsArray">
          <span data-ttu-id="634fe-336">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-336">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-337">從指定的 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-337">Applies the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-338">發生於 <see cref="T:System.Data.DataSet" /> 初始化之後。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-338">Occurs after the <see cref="T:System.Data.DataSet" /> is initialized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-339">如需詳細資訊，請參閱<xref:System.Data.DataSet.IsInitialized%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-339">For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-340">從二進位或 XML 資料流還原序列化資料集的所有資料表資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-340">Deserialize all of the tables data of the DataSet from the binary or XML stream.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="634fe-341">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-341">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="634fe-342">
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-342">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-343">檢查 <see langword="DataSet" /> 之序列化表示的格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-343">Inspects the format of the serialized representation of the <see langword="DataSet" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-344">如果指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示以二進位格式序列化的 <see langword="true" />，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-344">
              <see langword="true" /> if the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> represents a <see langword="DataSet" /> serialized in its binary format, <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-345">此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</span><span class="sxs-lookup"><span data-stu-id="634fe-345">This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-346">取得值，指出 <see cref="T:System.Data.DataSet" /> 是否已初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-346">Gets a value that indicates whether the <see cref="T:System.Data.DataSet" /> is initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-347">
            <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-347">
              <see langword="true" /> to indicate the component has completed initialization; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-348">傳回的狀態<xref:System.Data.DataSet>時它由所建構，例如 Visual Studio。</span><span class="sxs-lookup"><span data-stu-id="634fe-348">Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="634fe-349"><xref:System.Data.DataSet.BeginInit%2A>方法將它設定為`false`和<xref:System.Data.DataSet.EndInit%2A>方法將它設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-349">The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-350">使用所提供的 <see cref="T:System.Data.DataSet" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-350">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-351"><xref:System.Data.DataTable.Load%2A>方法提供的技巧，以便填滿單一<xref:System.Data.DataTable>從擷取的資料<xref:System.Data.IDataReader>執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-351">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="634fe-352">這個方法會提供相同的功能，但可讓您從多個結果集載入`IDataReader`分成多個資料表內`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="634fe-352">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
 <span data-ttu-id="634fe-353">如果 `DataSet` 已經包含資料列，從資料來源傳入的資料會與現有的資料列合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-353">If the `DataSet` already contains rows, the incoming data from the data source is merged with the existing rows.</span></span>  
  
 <span data-ttu-id="634fe-354">`Load`方法可以用數種常見案例，所有中心從指定的資料來源取得資料，並將它加入至目前的資料容器中 (在此情況下， `DataSet`)。</span><span class="sxs-lookup"><span data-stu-id="634fe-354">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataSet`).</span></span> <span data-ttu-id="634fe-355">下列案例說明標準用法`DataSet`，描述其更新，以及合併行為。</span><span class="sxs-lookup"><span data-stu-id="634fe-355">These scenarios describe standard usage for a `DataSet`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="634fe-356">A`DataSet`同步處理或單一主要資料來源的更新。</span><span class="sxs-lookup"><span data-stu-id="634fe-356">A `DataSet` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="634fe-357">`DataSet`追蹤變更，允許與主要資料來源的同步處理。</span><span class="sxs-lookup"><span data-stu-id="634fe-357">The `DataSet` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="634fe-358">此外，`DataSet`可以接受一或多個次要資料來源的增量資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-358">In addition, a `DataSet` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="634fe-359">`DataSet`不負責追蹤變更，才能允許與次要資料來源的同步處理。</span><span class="sxs-lookup"><span data-stu-id="634fe-359">The `DataSet` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="634fe-360">指定這些兩個假設性的資料來源，使用者很可能需要下列行為的其中一個：</span><span class="sxs-lookup"><span data-stu-id="634fe-360">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="634fe-361">初始化`DataSet`從主要資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-361">Initialize `DataSet` from a primary data source.</span></span> <span data-ttu-id="634fe-362">在此案例中，使用者想要初始化空`DataSet`與主要資料來源中的值。</span><span class="sxs-lookup"><span data-stu-id="634fe-362">In this scenario, the user wants to initialize an empty `DataSet` with values from the primary data source.</span></span> <span data-ttu-id="634fe-363">會修改一或多個資料表的內容。</span><span class="sxs-lookup"><span data-stu-id="634fe-363">One or more DataTable's contents are modified.</span></span> <span data-ttu-id="634fe-364">稍後，使用者想要將變更傳送回主要資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-364">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="634fe-365">保留變更，並重新同步處理主要資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-365">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="634fe-366">在此案例中，使用者想要採取`DataSet`區域分布在前述案例中，執行增量同步處理與主要資料來源，保留中所做的修改`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="634fe-366">In this scenario, the user wants to take the `DataSet` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataSet`.</span></span>  
  
-   <span data-ttu-id="634fe-367">累加式的資料摘要，從次要資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-367">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="634fe-368">在此案例中，使用者想要合併一或多個次要資料來源的變更，並將變更傳播回到主要資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-368">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="634fe-369">`Load`方法可讓所有這些情況。</span><span class="sxs-lookup"><span data-stu-id="634fe-369">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="634fe-370">這個方法可讓您指定負載選項參數，指出如何資料列已在<xref:System.Data.DataTable>結合正在載入的資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-370">This method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="634fe-371">下表描述所提供的三種負載選項<xref:System.Data.LoadOption>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="634fe-371">The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="634fe-372">在每個案例中，說明當內送資料中的資料列的主索引鍵符合現有的資料列的主索引鍵表示的行為。</span><span class="sxs-lookup"><span data-stu-id="634fe-372">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="634fe-373">載入選項</span><span class="sxs-lookup"><span data-stu-id="634fe-373">Load Option</span></span>|<span data-ttu-id="634fe-374">描述</span><span class="sxs-lookup"><span data-stu-id="634fe-374">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="634fe-375">`PreserveChanges` (預設值)</span><span class="sxs-lookup"><span data-stu-id="634fe-375">`PreserveChanges` (default)</span></span>|<span data-ttu-id="634fe-376">內送資料列的值，更新資料列的原始版本。</span><span class="sxs-lookup"><span data-stu-id="634fe-376">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="634fe-377">使用內送資料列的值更新資料列的目前和原始版本。</span><span class="sxs-lookup"><span data-stu-id="634fe-377">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="634fe-378">內送資料列的值，更新資料列的目前版本。</span><span class="sxs-lookup"><span data-stu-id="634fe-378">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="634fe-379">一般情況下，`PreserveChanges`和`OverwriteChanges`選項適用於使用者要同步處理的案例`DataSet`及它的主要資料來源的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-379">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="634fe-380">`Upsert`選項可以協助彙總一或多個次要資料來源的變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-380">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-381">
            <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-381">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="634fe-382">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see cref="T:System.Data.DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-382">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span>
          </span>
        </param>
        <param name="tables">
          <span data-ttu-id="634fe-383">
            <see cref="T:System.Data.DataTable" /> 執行個體的陣列，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法從中擷取名稱和命名空間資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-383">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> method retrieves name and namespace information.</span>
          </span>
          <span data-ttu-id="634fe-384">這些資料表的每一個都必須為這個 <see cref="T:System.Data.DataTableCollection" /> 所包含 <see cref="T:System.Data.DataSet" /> 的成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-384">Each of these tables must be a member of the <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-385">使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值，填入 <see cref="T:System.Data.IDataReader" />，使用 <see cref="T:System.Data.DataTable" /> 執行個體的陣列，以提供結構描述和命名空間資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-385">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-386"><xref:System.Data.DataTable.Load%2A>方法提供的技巧，以便填滿單一<xref:System.Data.DataTable>從擷取的資料<xref:System.Data.IDataReader>執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-386">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="634fe-387">這個方法會提供相同的功能，但可讓您從多個結果集載入<xref:System.Data.IDataReader>分成多個資料表內<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-387">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-388">在載入作業將會失敗並<xref:System.InvalidOperationException>若有任何內送的來源資料行`reader`是計算資料行。</span><span class="sxs-lookup"><span data-stu-id="634fe-388">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="634fe-389">`loadOption`參數可讓您指定要匯入現有的資料進行互動的資料及可以是任何值的方式<xref:System.Data.LoadOption>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="634fe-389">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="634fe-390">請參閱文件<xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A>如需有關使用此參數的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-390">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="634fe-391">`tables`參數可讓您指定的陣列<xref:System.Data.DataTable>執行個體，指出資料表對應至每一個結果集從讀取器的載入順序。</span><span class="sxs-lookup"><span data-stu-id="634fe-391">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="634fe-392"><xref:System.Data.DataSet.Load%2A>方法填滿每個提供<xref:System.Data.DataTable>具有資料從單一結果集，從來源資料讀取器執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-392">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="634fe-393">每個結果集之後,<xref:System.Data.DataSet.Load%2A>方法會移到下一個結果集內讀取器，直到沒有其他結果集。</span><span class="sxs-lookup"><span data-stu-id="634fe-393">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="634fe-394">這個方法的名稱解析配置等同於後續<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法<xref:System.Data.Common.DbDataAdapter>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-394">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-395">下列範例會建立新<xref:System.Data.DataSet>，加入兩個<xref:System.Data.DataTable>執行個體來<xref:System.Data.DataSet>，然後填入<xref:System.Data.DataSet>使用<xref:System.Data.DataSet.Load%2A>方法，擷取資料，從<xref:System.Data.DataTableReader>包含兩個結果集。</span><span class="sxs-lookup"><span data-stu-id="634fe-395">The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets.</span></span> <span data-ttu-id="634fe-396">最後，這個範例會顯示在主控台視窗中資料表的內容。</span><span class="sxs-lookup"><span data-stu-id="634fe-396">Finally, the example displays the contents of the tables in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-397">
            <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-397">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="634fe-398">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see langword="DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-398">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see langword="DataSet" /> will be combined with incoming rows that share the same primary key.</span>
          </span>
        </param>
        <param name="tables">
          <span data-ttu-id="634fe-399">字串的陣列，<see langword="Load" /> 方法從中擷取資料表名稱資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-399">An array of strings, from which the <see langword="Load" /> method retrieves table name information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-400">使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值填入 <see cref="T:System.Data.IDataReader" />，使用字串的陣列來提供 <see langword="DataSet" /> 之內的資料表名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-400">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of strings to supply the names for the tables within the <see langword="DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-401"><xref:System.Data.DataTable.Load%2A>方法提供的技巧，以便填滿單一<xref:System.Data.DataTable>從擷取的資料<xref:System.Data.IDataReader>執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-401">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="634fe-402">這個方法會提供相同的功能，但可讓您從多個結果集載入`IDataReader`分成多個資料表內`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="634fe-402">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-403">在載入作業將會失敗並<xref:System.InvalidOperationException>若有任何內送的來源資料行`reader`是計算資料行。</span><span class="sxs-lookup"><span data-stu-id="634fe-403">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="634fe-404">`loadOption`參數可讓您指定要匯入現有的資料進行互動的資料及可以是任何值的方式<xref:System.Data.LoadOption>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="634fe-404">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="634fe-405">請參閱文件<xref:System.Data.DataTable.Load%2A>如需有關使用此參數的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-405">See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="634fe-406">`tables`參數可讓您用來指定資料表名稱，表示對應至每一個結果集載入從讀取器的資料表順序的陣列。</span><span class="sxs-lookup"><span data-stu-id="634fe-406">The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="634fe-407">`Load`方法會嘗試尋找內資料表`DataSet`陣列中的順序中的資料表名稱，找到符合的名稱。</span><span class="sxs-lookup"><span data-stu-id="634fe-407">The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order.</span></span> <span data-ttu-id="634fe-408">如果找到相符的資料表，該資料表會載入目前的結果集的內容。</span><span class="sxs-lookup"><span data-stu-id="634fe-408">If a matching table is found, that table is loaded with the content of the current result set.</span></span> <span data-ttu-id="634fe-409">如果找到相符的資料表，建立資料表所使用的資料表名稱陣列中提供的名稱，並從結果集推斷新的資料表結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-409">If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</span></span> <span data-ttu-id="634fe-410">每個結果集之後,`Load`方法會移到下一個結果集內讀取器，直到沒有其他結果集。</span><span class="sxs-lookup"><span data-stu-id="634fe-410">After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="634fe-411">與相關聯的預設命名空間`DataSet`，如果與每個新建立的任何項目，是相關聯`DataTable`。</span><span class="sxs-lookup"><span data-stu-id="634fe-411">The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`.</span></span> <span data-ttu-id="634fe-412">這個方法的名稱解析配置等同於後續<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法<xref:System.Data.Common.DbDataAdapter>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-412">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-413">下列主控台應用程式範例首先會建立資料表，並會從讀取器讀入資料載入<xref:System.Data.DataSet>，並使用`Load`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-413">The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method.</span></span> <span data-ttu-id="634fe-414">然後範例會加入至資料表<xref:System.Data.DataSet>，嘗試填入資料表中的資料和<xref:System.Data.DataTableReader>。</span><span class="sxs-lookup"><span data-stu-id="634fe-414">The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="634fe-415">在此範例中，因為參數傳遞給`Load`方法指出不存在的資料表名稱`Load`方法會建立新的資料表，以符合做為參數傳遞的名稱。</span><span class="sxs-lookup"><span data-stu-id="634fe-415">In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter.</span></span> <span data-ttu-id="634fe-416">一旦已載入的資料，這個範例會顯示在主控台視窗及其所有資料表的內容。</span><span class="sxs-lookup"><span data-stu-id="634fe-416">Once the data has been loaded, the example displays the contents of all its tables in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-417">
            <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-417">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="634fe-418">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see cref="T:System.Data.DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-418">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span>
          </span>
        </param>
        <param name="errorHandler">
          <span data-ttu-id="634fe-419">載入資料時發生錯誤，要呼叫的 <see cref="T:System.Data.FillErrorEventHandler" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-419">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span>
          </span>
        </param>
        <param name="tables">
          <span data-ttu-id="634fe-420">
            <see cref="T:System.Data.DataTable" /> 執行個體的陣列，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法從中擷取名稱和命名空間資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-420">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> method retrieves name and namespace information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-421">使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值，填入 <see cref="T:System.Data.IDataReader" />，使用 <see cref="T:System.Data.DataTable" /> 執行個體的陣列，以提供結構描述和命名空間資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-421">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-422"><xref:System.Data.DataTable.Load%2A>方法提供的技巧，以便填滿單一<xref:System.Data.DataTable>從擷取的資料<xref:System.Data.IDataReader>執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-422">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="634fe-423">這個方法會提供相同的功能，但可讓您從多個結果集載入<xref:System.Data.IDataReader>分成多個資料表內<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-423">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-424">在載入作業將會失敗並<xref:System.InvalidOperationException>若有任何內送的來源資料行`reader`是計算資料行。</span><span class="sxs-lookup"><span data-stu-id="634fe-424">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="634fe-425">`loadOption`參數可讓您指定要匯入現有的資料進行互動的資料及可以是任何值的方式<xref:System.Data.LoadOption>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="634fe-425">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="634fe-426">請參閱文件<xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A>如需有關使用此參數的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-426">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="634fe-427">`errorHandler`參數是<xref:System.Data.FillErrorEventHandler>載入資料時，發生錯誤時呼叫的程序是指的委派。</span><span class="sxs-lookup"><span data-stu-id="634fe-427">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="634fe-428"><xref:System.Data.FillErrorEventArgs>參數傳遞至程序提供可讓您擷取發生的錯誤，目前的資料，資料列的相關資訊的屬性和<xref:System.Data.DataTable>被填入。</span><span class="sxs-lookup"><span data-stu-id="634fe-428">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="634fe-429">使用此委派機制，而不是簡單的 try/catch 區塊，可讓您判斷錯誤處理狀況，並繼續處理，如果您想。</span><span class="sxs-lookup"><span data-stu-id="634fe-429">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="634fe-430"><xref:System.Data.FillErrorEventArgs>參數提供<xref:System.Data.FillErrorEventArgs.Continue%2A>屬性： 將此屬性設定為`true`，表示處理錯誤和想来繼續處理，將屬性設定為`false`指出您想要停止處理。</span><span class="sxs-lookup"><span data-stu-id="634fe-430">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="634fe-431">請注意，將屬性設`false`導致觸發要擲回例外狀況的問題將程式碼。</span><span class="sxs-lookup"><span data-stu-id="634fe-431">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
 <span data-ttu-id="634fe-432">`tables`參數可讓您指定的陣列<xref:System.Data.DataTable>執行個體，指出資料表對應至每一個結果集從讀取器的載入順序。</span><span class="sxs-lookup"><span data-stu-id="634fe-432">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="634fe-433"><xref:System.Data.DataSet.Load%2A>方法填滿每個提供<xref:System.Data.DataTable>具有資料從單一結果集，從來源資料讀取器執行個體。</span><span class="sxs-lookup"><span data-stu-id="634fe-433">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="634fe-434">每個結果集之後,<xref:System.Data.DataSet.Load%2A>方法會移到下一個結果集內讀取器，直到沒有其他結果集。</span><span class="sxs-lookup"><span data-stu-id="634fe-434">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="634fe-435">這個方法的名稱解析配置等同於後續<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法<xref:System.Data.Common.DbDataAdapter>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-435">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-436">下列範例會將資料表以<xref:System.Data.DataSet>，然後嘗試使用<xref:System.Data.DataSet.Load%2A>方法來載入資料<xref:System.Data.DataTableReader>，其中包含不相容的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-436">The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema.</span></span> <span data-ttu-id="634fe-437">而不是設陷錯誤，這個範例會使用<xref:System.Data.FillErrorEventHandler>調查和處理錯誤的委派。</span><span class="sxs-lookup"><span data-stu-id="634fe-437">Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error.</span></span> <span data-ttu-id="634fe-438">輸出會顯示在主控台視窗中。</span><span class="sxs-lookup"><span data-stu-id="634fe-438">The output is displayed in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-439">取得或設定用來在資料表中比較字串的地區設定 (Locale) 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-439">Gets or sets the locale information used to compare strings within the table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-440">
            <see cref="T:System.Globalization.CultureInfo" />，包含使用者電腦地區設定的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-440">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span>
          </span>
          <span data-ttu-id="634fe-441">預設值為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-441">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-442"><xref:System.Data.DataSet.Locale%2A>屬性指定的地區設定的排序會套用。</span><span class="sxs-lookup"><span data-stu-id="634fe-442">The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.</span></span>  
  
 <span data-ttu-id="634fe-443">根據預設，設定<xref:System.Data.DataSet.Locale%2A>如<xref:System.Data.DataSet>也會設定<xref:System.Data.DataSet.Locale%2A>每個<xref:System.Data.DataTable>中的物件`DataSet`為相同的值。</span><span class="sxs-lookup"><span data-stu-id="634fe-443">By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-444">資料行中包含的運算式，<xref:System.StringComparison.InvariantCulture>用。</span><span class="sxs-lookup"><span data-stu-id="634fe-444">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="634fe-445"><xref:System.StringComparison.CurrentCulture>會被忽略。</span><span class="sxs-lookup"><span data-stu-id="634fe-445">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-446">下列範例會取得<xref:System.Globalization.CultureInfo>如<xref:System.Data.DataSet>並列印<xref:System.Globalization.CultureInfo.DisplayName%2A>和<xref:System.Globalization.CultureInfo.EnglishName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-446">The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-447">將指定的 <see cref="T:System.Data.DataSet" />、<see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataRow" /> 物件的陣列合併到目前的 <see langword="DataSet" /> 或 <see langword="DataTable" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-447">Merges a specified <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, or array of <see cref="T:System.Data.DataRow" /> objects into the current <see langword="DataSet" /> or <see langword="DataTable" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">
          <span data-ttu-id="634fe-448">
            <see langword="DataRow" /> 物件的陣列，將合併至 <see langword="DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-448">The array of <see langword="DataRow" /> objects to be merged into the <see langword="DataSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-449">將 <see cref="T:System.Data.DataRow" /> 物件的陣列合併到目前的 <see cref="T:System.Data.DataSet" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-449">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-450"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-450">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-451">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-451">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-452">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-452">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-453"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-453">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-454">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-454">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-455">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-455">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-456">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-456">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-457">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-457">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-458">這個子集通常比較小，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-458">This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-459">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-459">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-460">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-460">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-461">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-461">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-462">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-462">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-463">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-463">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-464">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-464">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-465">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-465">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-466">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-466">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-467">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-467">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-468">來源的資料列<xref:System.Data.DataRowState>值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-468">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-469">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-469">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-470">如果任何條件約束無法啟用合併，結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-470">If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-471">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-471">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-472">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-472">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="634fe-473">
            <see langword="DataSet" />，其資料及結構描述將被合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-473">The <see langword="DataSet" /> whose data and schema will be merged.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-474">將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述合併到目前的 <see langword="DataSet" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-474">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-475"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-475">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-476">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-476">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-477">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-477">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-478"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-478">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-479">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-479">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-480">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-480">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-481">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-481">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-482">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-482">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-483">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-483">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-484">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-484">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-485">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-485">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-486">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-486">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-487">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-487">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-488">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-488">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-489">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-489">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-490">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-490">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-491">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-491">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-492">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-492">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-493">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-493">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-494">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-494">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-495">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-495">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-496">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-496">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-497">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-497">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-498">下列範例會使用<xref:System.Data.DataSet.GetChanges%2A>、 更新和<xref:System.Data.DataSet.Merge%2A>方法<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-498">The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">
          <span data-ttu-id="634fe-499">一個或多個條件約束無法啟用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-499">One or more constraints cannot be enabled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="634fe-500">
            <paramref name="dataSet" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-500">The <paramref name="dataSet" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="634fe-501">
            <see cref="T:System.Data.DataTable" />，其資料及結構描述將被合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-501">The <see cref="T:System.Data.DataTable" /> whose data and schema will be merged.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-502">將指定的 <see cref="T:System.Data.DataTable" /> 及其結構描述合併到目前的 <see cref="T:System.Data.DataSet" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-502">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-503"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-503">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-504">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-504">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-505">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-505">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-506"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-506">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-507">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-507">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-508">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-508">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-509">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-509">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-510">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-510">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-511">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-511">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-512">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-512">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-513">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-513">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-514">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-514">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-515">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-515">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-516">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-516">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-517">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-517">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-518">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-518">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-519">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-519">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-520">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-520">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-521">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-521">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-522">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-522">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-523">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-523">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-524">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-524">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-525">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-525">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-526">下列範例會建立簡單<xref:System.Data.DataSet>一個資料表、 兩個資料行，與十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-526">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-527">第二個<xref:System.Data.DataTable>也就是建立與第一個。</span><span class="sxs-lookup"><span data-stu-id="634fe-527">A second <xref:System.Data.DataTable> is created that is identical to the first.</span></span> <span data-ttu-id="634fe-528">兩個資料列會加入第二個資料表，然後合併到<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-528">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="634fe-529">
            <paramref name="table" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-529">The <paramref name="table" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="634fe-530">
            <see langword="DataSet" />，其資料及結構描述將被合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-530">The <see langword="DataSet" /> whose data and schema will be merged.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="634fe-531">若要保留目前 <see langword="true" /> 中的變更，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-531">
              <see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-532">將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述合併到目前的 <see langword="DataSet" /> 中，根據給定參數保留或忽略這個 <see langword="DataSet" /> 中的任何變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-532">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />, preserving or discarding any changes in this <see langword="DataSet" /> according to the given argument.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-533"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-533">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-534">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-534">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-535">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-535">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-536"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-536">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-537">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-537">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-538">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-538">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-539">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-539">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-540">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-540">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-541">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-541">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-542">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-542">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-543">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-543">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-544">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-544">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-545">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-545">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-546">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-546">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-547">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-547">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-548">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-548">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-549">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-549">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-550">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-550">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-551">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-551">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-552">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-552">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-553">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-553">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-554">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-554">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-555">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-555">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-556">下列範例會建立簡單<xref:System.Data.DataSet>一個資料表、 兩個資料行，與十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-556">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-557">新增十個資料列後, 兩個值會變更，並加入一個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-557">After adding ten rows, two values are changed, and one row is added.</span></span> <span data-ttu-id="634fe-558">使用建立的已變更的資料子集<xref:System.Data.DataSet.GetChanges%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-558">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="634fe-559">之後，重新調整錯誤，子集資料合併至原始<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-559">After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows">
          <span data-ttu-id="634fe-560">
            <see cref="T:System.Data.DataRow" /> 物件的陣列，將合併至 <see langword="DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-560">The array of <see cref="T:System.Data.DataRow" /> objects to be merged into the <see langword="DataSet" />.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="634fe-561">若要保留 <see langword="true" /> 中的變更，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-561">
              <see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="missingSchemaAction">
          <span data-ttu-id="634fe-562">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-562">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-563">將 <see cref="T:System.Data.DataRow" /> 物件的陣列合併到目前的 <see cref="T:System.Data.DataSet" /> 中，根據給定參數保留或忽略 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-563">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-564"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-564">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-565">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-565">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-566">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-566">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-567"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-567">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-568">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-568">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-569">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-569">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-570">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-570">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-571">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-571">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-572">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-572">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-573">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-573">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-574">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-574">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-575">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-575">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-576">為了方便說明<xref:System.Data.DataSet.Merge%2A>方法，我們使用 「 目標 」 來表示目前<xref:System.Data.DataSet>，和 「 來源 」 名稱的第二個 （參數） <xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-576">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-577">目標<xref:System.Data.DataSet>如此命名，因為它是在其動作 （合併），就會發生的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-577">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="634fe-578">第二個<xref:System.Data.DataSet>稱為 「 來源 」，因為它包含的資訊不會變更，但改為合併到目前<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-578">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-579">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-579">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-580">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-580">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-581">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-581">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-582">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-582">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-583">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-583">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-584">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-584">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-585">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-585">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-586">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-586">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-587">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-587">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-588">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-588">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-589">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-589">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="634fe-590">
            <see langword="DataSet" />，其資料及結構描述將被合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-590">The <see langword="DataSet" /> whose data and schema will be merged.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="634fe-591">若要保留目前 <see langword="true" /> 中的變更，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-591">
              <see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="missingSchemaAction">
          <span data-ttu-id="634fe-592">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-592">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-593">將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述與目前的 <see langword="DataSet" /> 合併，根據給定參數保留或忽略目前 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-593">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema with the current <see langword="DataSet" />, preserving or discarding changes in the current <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-594"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-594">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-595">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-595">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-596">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-596">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-597"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-597">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-598">在用戶端應用程式中，是很常見的單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-598">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-599">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-599">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-600">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-600">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-601">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-601">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-602">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-602">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-603">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-603">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-604">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-604">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-605">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-605">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-606">為了方便說明<xref:System.Data.DataSet.Merge%2A>方法，我們使用 「 目標 」 來表示目前<xref:System.Data.DataSet>，和 「 來源 」 名稱的第二個 （參數） <xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-606">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-607">目標<xref:System.Data.DataSet>如此命名，因為它是在其動作 （合併），就會發生的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-607">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="634fe-608">第二個<xref:System.Data.DataSet>稱為 「 來源 」，因為它包含的資訊不會變更，但改為合併到目前<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-608">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-609">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-609">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-610">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-610">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-611">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-611">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-612">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-612">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-613">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-613">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-614">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-614">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-615">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-615">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-616">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-616">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-617">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-617">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-618">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-618">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-619">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-619">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-620">下列範例會建立簡單<xref:System.Data.DataSet>一個資料表、 兩個資料行，與十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-620">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-621">變更兩個值，並加入一個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-621">Two values are changed, and one row is added.</span></span> <span data-ttu-id="634fe-622">使用建立的已變更的資料子集<xref:System.Data.DataSet.GetChanges%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-622">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="634fe-623">調解錯誤，新的資料行新增至後變更結構描述的子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-623">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="634fe-624">當<xref:System.Data.DataSet.Merge%2A>方法呼叫`missingSchemaAction`設`MissingSchemaAction.Add`，新的資料行加入到原始<xref:System.Data.DataSet>物件的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-624">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="634fe-625">
            <paramref name="dataSet" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-625">The <paramref name="dataSet" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="634fe-626">
            <see langword="DataTable" />，其資料及結構描述將被合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-626">The <see langword="DataTable" /> whose data and schema will be merged.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="634fe-627">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-627">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </param>
        <param name="missingSchemaAction">
          <span data-ttu-id="634fe-628">若要保留 <see langword="true" /> 中的變更，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-628">
              <see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-629">將指定的 <see cref="T:System.Data.DataTable" /> 及其結構描述合併到目前的 <see langword="DataSet" />，根據給定引數保留或忽略 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-629">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see langword="DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-630"><xref:System.Data.DataSet.Merge%2A>方法用來合併兩個<xref:System.Data.DataSet>有大致相似的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-630">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="634fe-631">合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-631">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-632">這可讓用戶端應用程式已重新整理<xref:System.Data.DataSet>從資料來源的最新的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-632">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="634fe-633"><xref:System.Data.DataSet.Merge%2A>方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-633">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-634">Middle 用戶端應用程式，它是具有單一按鈕，讓使用者可以按一下，收集變更的資料，並送回中介層元件之前先進行驗證。</span><span class="sxs-lookup"><span data-stu-id="634fe-634">iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="634fe-635">在此案例中，<xref:System.Data.DataSet.GetChanges%2A>首次叫用方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-635">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="634fe-636">方法會傳回第二個<xref:System.Data.DataSet>適合用來驗證和合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-636">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="634fe-637">此第二個<xref:System.Data.DataSet>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-637">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-638">這個子集是容量較小時，因此更有效率地傳遞回中介層元件。</span><span class="sxs-lookup"><span data-stu-id="634fe-638">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="634fe-639">然後中, 介層元件會透過預存程序，以變更更新原始資料來源。</span><span class="sxs-lookup"><span data-stu-id="634fe-639">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="634fe-640">中介層就可以傳送回其中一個新<xref:System.Data.DataSet>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。</span><span class="sxs-lookup"><span data-stu-id="634fe-640">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="634fe-641">（例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataSet>可以合併至用戶端應用程式的原始<xref:System.Data.DataSet>與<xref:System.Data.DataSet.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-641">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-642">當<xref:System.Data.DataSet.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataSet>物件進行比較，因為它是可能的結構描述可能已經變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-642">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="634fe-643">例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。</span><span class="sxs-lookup"><span data-stu-id="634fe-643">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="634fe-644">如果來源<xref:System.Data.DataSet>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-644">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="634fe-645">在此情況下，合併<xref:System.Data.DataSet>包含新增結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-645">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="634fe-646">合併結構描述後, 資料會合併。</span><span class="sxs-lookup"><span data-stu-id="634fe-646">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="634fe-647">合併新的來源時<xref:System.Data.DataSet>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-647">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="634fe-648">來源的資料列`DataRowState`值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-648">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="634fe-649">合併期間，會停用條件約束。</span><span class="sxs-lookup"><span data-stu-id="634fe-649">During a merge, constraints are disabled.</span></span> <span data-ttu-id="634fe-650">如果任何條件約束無法啟用 「 合併 」 結尾<xref:System.Data.ConstraintException>產生，停用條件約束時，合併的資料都會保留下來。</span><span class="sxs-lookup"><span data-stu-id="634fe-650">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="634fe-651">在此情況下，<xref:System.Data.DataSet.EnforceConstraints%2A>屬性設定為`false`，並且所有的資料列，而不會標示錯誤。</span><span class="sxs-lookup"><span data-stu-id="634fe-651">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="634fe-652">必須先解決錯誤，然後再嘗試重設<xref:System.Data.DataSet.EnforceConstraints%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="634fe-652">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-653">下列範例會建立簡單<xref:System.Data.DataSet>一個資料表、 兩個資料行，與十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-653">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-654">第二個<xref:System.Data.DataTable>也就是建立與第一個幾乎完全相同之處在於新`DataColumn`加入至資料表。</span><span class="sxs-lookup"><span data-stu-id="634fe-654">A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table.</span></span> <span data-ttu-id="634fe-655">兩個資料列會加入第二個資料表，然後合併到<xref:System.Data.DataSet>與`preserveChanges`引數設定為`false`，而`missingSchemaAction`引數設定為`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="634fe-655">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="634fe-656">
            <paramref name="dataSet" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-656">The <paramref name="dataSet" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-657">當目標和來源 <see cref="T:System.Data.DataRow" /> 有相同的主索引鍵值，且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 設定為 True 時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-657">Occurs when a target and source <see cref="T:System.Data.DataRow" /> have the same primary key value, and <see cref="P:System.Data.DataSet.EnforceConstraints" /> is set to true.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-658">如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。</span><span class="sxs-lookup"><span data-stu-id="634fe-658">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-659">下列範例示範如何使用<xref:System.Data.DataSet.MergeFailed>事件。</span><span class="sxs-lookup"><span data-stu-id="634fe-659">The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-660">取得或設定 <see cref="T:System.Data.DataSet" /> 的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-660">Gets or sets the namespace of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-661">
            <see cref="T:System.Data.DataSet" /> 的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-661">The namespace of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-662"><xref:System.Data.DataSet.Namespace%2A>屬性可在讀取和寫入 XML 文件到<xref:System.Data.DataSet>使用<xref:System.Data.DataSet.ReadXml%2A>， <xref:System.Data.DataSet.WriteXml%2A>， <xref:System.Data.DataSet.ReadXmlSchema%2A>，或<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-662">The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.</span></span>  
  
 <span data-ttu-id="634fe-663">XML 文件的命名空間用來限定範圍的 XML 屬性和項目時讀入<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-663">The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-664">例如，如果<xref:System.Data.DataSet>包含結構描述，已從具有命名空間"mycompany 機 」 的文件和嘗試從具有不同的命名空間的文件只讀取資料，任何未對應到現有的結構描述的資料會被忽略。</span><span class="sxs-lookup"><span data-stu-id="634fe-664">For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-665">下列範例會設定<xref:System.Data.DataSet.Prefix%2A>之前先呼叫<xref:System.Data.DataSet.ReadXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-665">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="634fe-666">命名空間已經有資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-666">The namespace already has data.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">
          <span data-ttu-id="634fe-667">
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />，其中包含事件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-667">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-668">引發 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-668">Raises the <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-669">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="634fe-669">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="634fe-670">如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="634fe-670">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="634fe-671">
            <para>在覆寫<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />在衍生類別中，請務必呼叫基底類別<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-671">
              <para>When overriding <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">
          <span data-ttu-id="634fe-672">正在移除的 <see cref="T:System.Data.DataRelation" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-672">The <see cref="T:System.Data.DataRelation" /> being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-673">發生於從 <see cref="T:System.Data.DataRelation" /> 移除 <see cref="T:System.Data.DataTable" /> 時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-673">Occurs when a <see cref="T:System.Data.DataRelation" /> object is removed from a <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-674">要移除的資料表限制的子類別應該覆寫這個方法</span><span class="sxs-lookup"><span data-stu-id="634fe-674">This method should be overridden by subclasses to restrict tables being removed</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="634fe-675">正在移除的 <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-675">The <see cref="T:System.Data.DataTable" /> being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-676">發生於從 <see cref="T:System.Data.DataTable" /> 移除 <see cref="T:System.Data.DataSet" /> 時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-676">Occurs when a <see cref="T:System.Data.DataTable" /> is removed from a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-677">這個方法可以覆寫子類別，以限制資料表中移除。</span><span class="sxs-lookup"><span data-stu-id="634fe-677">This method can be overridden by subclasses to restrict tables from being removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-678">下列範例示範衍生自類別<xref:System.Data.DataSet>與<xref:System.Data.DataSet.OnRemoveTable%2A>覆寫方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-678">The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-679">取得或設定建立 <see cref="T:System.Data.DataSet" /> 命名空間別名的 XML 前置詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-679">Gets or sets an XML prefix that aliases the namespace of the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-680">
            <see cref="T:System.Data.DataSet" /> 命名空間的 XML 前置詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-680">The XML prefix for the <see cref="T:System.Data.DataSet" /> namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-681"><xref:System.Data.DataSet.Prefix%2A>屬性用於整個 XML 文件，以找出項目所屬的命名空間<xref:System.Data.DataSet>物件 (為設定由<xref:System.Data.DataSet.Namespace%2A>屬性)。</span><span class="sxs-lookup"><span data-stu-id="634fe-681">The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-682">下列範例會設定<xref:System.Data.DataSet.Prefix%2A>之前先呼叫<xref:System.Data.DataSet.ReadXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-682">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="634fe-683">將要變更的屬性名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-683">The name of the property that is about to change.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-684">傳送一個指定的 <see cref="T:System.Data.DataSet" /> 屬性即將變更的告知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-684">Sends a notification that the specified <see cref="T:System.Data.DataSet" /> property is about to change.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-685">將 XML 結構描述和資料讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-685">Reads XML schema and data into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-686">衍生自 <see cref="T:System.IO.Stream" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-686">An object that derives from <see cref="T:System.IO.Stream" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-687">使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-687">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-688">
            <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-688">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-689"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-689">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-690">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-690">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-691">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-691">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-692">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-692">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-693">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-693">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-694"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-694">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-695">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-695">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-696">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-696">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-697">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-697">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-698">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-698">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-699">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-699">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-700">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-700">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-701">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-701">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-702">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-702">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-703">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-703">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema, as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-704">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-704">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-705">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-705">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-706">下列範例會先建立簡單<xref:System.Data.DataSet>與一個<xref:System.Data.DataTable>，兩個資料行和十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-706">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-707"><xref:System.Data.DataSet>結構描述和資料會寫入磁碟，然後叫用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-707">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-708">第二個<xref:System.Data.DataSet>建立和<xref:System.Data.DataSet.ReadXml%2A>方法用來填入結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-708">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-709">要從中讀取結構描述和資料的 <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-709">The <see langword="TextReader" /> from which to read the schema and data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-710">使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-710">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-711">
            <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-711">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-712"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-712">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-713">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-713">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-714">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-714">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-715">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-715">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-716">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-716">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-717"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-717">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-718">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-718">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-719">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-719">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-720">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-720">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-721">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-721">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-722">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-722">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-723">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-723">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-724">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-724">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-725">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-725">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-726">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-726">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="634fe-727">類別繼承自<xref:System.IO.TextReader>類別包含<xref:System.IO.StreamReader>和<xref:System.IO.StringReader>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-727">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-728">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-728">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-729">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-729">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-730">下列範例會先建立簡單<xref:System.Data.DataSet>與一個<xref:System.Data.DataTable>，兩個資料行和十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-730">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-731"><xref:System.Data.DataSet>結構描述和資料會寫入磁碟，然後叫用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-731">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-732">第二個<xref:System.Data.DataSet>建立和<xref:System.Data.DataSet.ReadXml%2A>方法用來填入結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-732">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-733">要讀取的檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-733">The filename (including the path) from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-734">使用指定的檔案，將 XML 結構描述和資料讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-734">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-735">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-735">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-736"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-736">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-737">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-737">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-738">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-738">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-739">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-739">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-740">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-740">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-741"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-741">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-742">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-742">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-743">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-743">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-744">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-744">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-745">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-745">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-746">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-746">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-747">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-747">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-748">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-748">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-749">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-749">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-750">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-750">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-751">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-751">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-752">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-752">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-753">下列範例會先建立簡單<xref:System.Data.DataSet>與一個<xref:System.Data.DataTable>，兩個資料行和十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-753">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-754"><xref:System.Data.DataSet>結構描述和資料會寫入磁碟，然後叫用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-754">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-755">第二個<xref:System.Data.DataSet>建立和<xref:System.Data.DataSet.ReadXml%2A>方法用來填入結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-755">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-756">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-756">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-757">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-757">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-758">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-758">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-759">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-759">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-760">使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.Xml.XmlReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-760">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-761">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-761">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-762"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-762">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-763">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-763">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-764">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-764">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-765">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-765">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-766">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-766">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-767"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-767">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-768">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-768">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-769">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-769">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-770">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-770">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-771">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-771">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-772">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-772">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-773">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-773">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-774">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-774">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-775">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-775">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-776">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-776">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="634fe-777"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 繼承自 <xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="634fe-777"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> inherits from <xref:System.Xml.XmlReader>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-778">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-778">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-779">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-779">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-780">下列範例會先建立簡單<xref:System.Data.DataSet>與一個<xref:System.Data.DataTable>，兩個資料行和十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-780">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-781"><xref:System.Data.DataSet>結構描述和資料會寫入磁碟，然後叫用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-781">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-782">第二個<xref:System.Data.DataSet>建立和<xref:System.Data.DataSet.ReadXml%2A>方法用來填入結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-782">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-783">要讀取的來源 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-783">The <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-784">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-784">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-785">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-785">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlReadMode" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-786">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-786">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-787"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-787">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-788">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-788">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-789">同樣適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-789">The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-790">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-790">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-791">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-791">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-792">當您使用<xref:System.Data.DataSet.ReadXml%2A>和您設定<xref:System.Data.XmlReadMode>至`Diffgram`，目標內容`DataSet`和原始`DataSet`可能因為 diffgram 是產生和處理方式不同。</span><span class="sxs-lookup"><span data-stu-id="634fe-792">When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed.</span></span> <span data-ttu-id="634fe-793">如需有關 diffgram 的詳細資訊，請參閱[DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)。</span><span class="sxs-lookup"><span data-stu-id="634fe-793">For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-794"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-794">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-795">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-795">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-796">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-796">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-797">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-797">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-798">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-798">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-799">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-799">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-800">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-800">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-801">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-801">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-802">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-802">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-803">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-803">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-804">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-804">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-805">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-805">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-806">要讀取的來源 <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-806">The <see cref="T:System.IO.TextReader" /> from which to read.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-807">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-807">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-808">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextReader" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-808">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-809">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-809">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-810"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-810">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-811">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-811">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-812">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-812">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-813">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-813">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-814">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-814">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-815"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-815">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-816">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-816">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-817">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-817">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-818">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-818">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-819">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-819">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-820">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-820">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-821">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-821">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-822">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-822">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-823">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-823">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-824">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-824">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-825">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-825">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-826">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-826">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-827">要讀取的檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-827">The filename (including the path) from which to read.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-828">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-828">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-829">使用指定的檔案和 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-829">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file and <see cref="T:System.Data.XmlReadMode" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-830">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-830">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-831"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-831">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-832">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-832">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-833">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-833">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-834">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-834">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-835">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-835">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-836"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-836">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-837">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-837">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-838">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-838">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-839">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-839">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-840">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-840">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-841">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-841">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-842">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-842">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-843">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-843">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-844">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-844">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-845">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-845">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-846">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-846">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-847">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-847">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-848">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-848">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-849">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-849">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-850">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-850">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-851">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-851">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-852">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-852">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-853">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-853">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-854">
            <see langword="XmlReadMode" />，用來讀取資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-854">The <see langword="XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-855"><xref:System.Data.DataSet.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataSet>從 XML 文件，而<xref:System.Data.DataSet.ReadXmlSchema%2A>方法讀取的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-855">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="634fe-856">若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`mode`參數，並將其值設定為`ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-856">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="634fe-857">請注意，也適用於<xref:System.Data.DataSet.WriteXml%2A>和<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-857">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-858">要寫入的 XML 資料，或結構描述和資料從`DataSet`，使用`WriteXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-858">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="634fe-859">若要寫入的結構描述，使用`WriteXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-859">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-860"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-860">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="634fe-861">如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-861">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="634fe-862">如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-862">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="634fe-863">如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。</span><span class="sxs-lookup"><span data-stu-id="634fe-863">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="634fe-864">如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-864">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-865">`DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。</span><span class="sxs-lookup"><span data-stu-id="634fe-865">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="634fe-866">`DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。</span><span class="sxs-lookup"><span data-stu-id="634fe-866">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="634fe-867">當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。</span><span class="sxs-lookup"><span data-stu-id="634fe-867">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="634fe-868">如果 XML 結構描述<xref:System.Data.DataSet>包含`targetNamespace`、 可能不會讀取資料，並呼叫時，您可能會遇到例外狀況<xref:System.Data.DataSet.ReadXml%2A>載入<xref:System.Data.DataSet>xml 程式碼，包含非限定命名空間的項目。</span><span class="sxs-lookup"><span data-stu-id="634fe-868">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="634fe-869">若要讀取不合格的項目，設定`elementFormDefault`等於"qualified"中的 XML 結構描述如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="634fe-869">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="634fe-870">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXml%2A>藉由指定`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-870">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="634fe-871">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-871">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-872">將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-872">Reads an XML schema into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-873">要讀取的來源 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-873">The <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-874">從指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-874">Reads the XML schema from the specified <see cref="T:System.IO.Stream" /> into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-875">使用<xref:System.Data.DataSet.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-875">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-876">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-876">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-877">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-877">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-878">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-878">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-879">如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。</span><span class="sxs-lookup"><span data-stu-id="634fe-879">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="634fe-880">將會擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-880">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="634fe-881"><xref:System.Data.DataSet.ReadXmlSchema%2A>方法一般叫用之前叫用<xref:System.Data.DataSet.ReadXml%2A>方法用來填滿<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-881">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-882">類別衍生自<xref:System.IO.Stream>類別包含<xref:System.IO.BufferedStream>， <xref:System.IO.FileStream>， <xref:System.IO.MemoryStream>，和<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="634fe-882">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-883">如果結構描述您<xref:System.Data.DataSet>包含元素的名稱相同，但相同的命名空間中的不同型別擲回例外狀況是當您嘗試讀取到結構描述<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXmlSchema%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-883">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="634fe-884">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-884">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-885">下列範例會建立<xref:System.IO.FileStream>物件讀取 XML 結構描述，並叫用<xref:System.Data.DataSet.ReadXmlSchema%2A>與物件的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-885">The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-886">要讀取的來源 <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-886">The <see cref="T:System.IO.TextReader" /> from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-887">從指定的 <see cref="T:System.IO.TextReader" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-887">Reads the XML schema from the specified <see cref="T:System.IO.TextReader" /> into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-888">使用<xref:System.Data.DataSet.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-888">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-889">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-889">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-890">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-890">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-891">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-891">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-892">如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。</span><span class="sxs-lookup"><span data-stu-id="634fe-892">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="634fe-893">將會擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-893">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="634fe-894"><xref:System.Data.DataSet.ReadXmlSchema%2A>方法一般叫用之前叫用<xref:System.Data.DataSet.ReadXml%2A>方法用來填滿<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-894">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-895">類別繼承自<xref:System.IO.TextReader>類別包含<xref:System.IO.StreamReader>和<xref:System.IO.StringReader>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-895">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-896">如果結構描述您<xref:System.Data.DataSet>包含元素的名稱相同，但相同的命名空間中的不同型別擲回例外狀況是當您嘗試讀取到結構描述<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXmlSchema%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-896">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="634fe-897">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-897">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-898">下列範例會建立<xref:System.IO.StreamReader>物件讀取結構描述，並叫用<xref:System.Data.DataSet.ReadXmlSchema%2A>與物件的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-898">The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-899">要讀取的來源檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-899">The file name (including the path) from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-900">從指定的檔案，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-900">Reads the XML schema from the specified file into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-901">使用<xref:System.Data.DataSet.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-901">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-902">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-902">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-903">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-903">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-904">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-904">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-905">如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。</span><span class="sxs-lookup"><span data-stu-id="634fe-905">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="634fe-906">將會擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-906">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="634fe-907"><xref:System.Data.DataSet.ReadXmlSchema%2A>方法一般叫用之前叫用<xref:System.Data.DataSet.ReadXml%2A>方法用來填滿<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-907">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-908">如果結構描述您<xref:System.Data.DataSet>包含項目嘗試讀取到結構描述時，發生例外狀況的名稱相同，但不同的類型，請在相同的命名空間，<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXmlSchema%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-908">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="634fe-909">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-909">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-910">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-910">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-911">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-911">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-912">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-912">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-913">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-913">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-914">從指定的 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-914">Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> into the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-915">使用<xref:System.Data.DataSet.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-915">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="634fe-916">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-916">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="634fe-917">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-917">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-918">如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。</span><span class="sxs-lookup"><span data-stu-id="634fe-918">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="634fe-919">將會擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-919">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="634fe-920"><xref:System.Data.DataSet.ReadXmlSchema%2A>方法一般叫用之前叫用<xref:System.Data.DataSet.ReadXml%2A>方法用來填滿<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-920">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-921"><xref:System.Xml.XmlReader?displayProperty=nameWithType>類別是抽象的。</span><span class="sxs-lookup"><span data-stu-id="634fe-921">The <xref:System.Xml.XmlReader?displayProperty=nameWithType> class is abstract.</span></span> <span data-ttu-id="634fe-922">類別繼承自`XmlReader`是<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-922">A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-923">如果結構描述您<xref:System.Data.DataSet>包含元素的名稱相同，但相同的命名空間中的不同型別擲回例外狀況是當您嘗試讀取到結構描述<xref:System.Data.DataSet>與<xref:System.Data.DataSet.ReadXmlSchema%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-923">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="634fe-924">如果您使用.NET Framework 1.0 版，則不會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="634fe-924">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-925">下列範例會建立新<xref:System.Data.DataSet>和<xref:System.IO.FileStream?displayProperty=nameWithType>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-925">The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="634fe-926"><xref:System.IO.FileStream>建立的檔案路徑與檔案名稱的物件用來建立<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>做為引數傳遞<xref:System.Data.DataSet.ReadXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-926">The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-927">指定的 XML 讀取器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-927">The specified XML reader.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-928">忽略屬性並傳回空白資料集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-928">Ignores attributes and returns an empty DataSet.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-929">復原從建立 <see cref="T:System.Data.DataSet" /> 物件或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來，對該物件做的所有變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-929">Rolls back all the changes made to the <see cref="T:System.Data.DataSet" /> since it was created, or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-930">叫用<xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType>呼叫<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>方法上所有<xref:System.Data.DataTable>所包含之物件<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-930">Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="634fe-931"><xref:System.Data.DataRow> 所包含之物件<xref:System.Data.DataSet>可每個被設定進入編輯模式下叫用<xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-931"><xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="634fe-932">叫用後<xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType>方法，可以藉由呼叫拒絕變更<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>上<xref:System.Data.DataTable>的<xref:System.Data.DataRow>所屬的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-932">After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.</span></span>  
  
 <span data-ttu-id="634fe-933">當<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>呼叫方法時，請編輯模式中的任何資料列取消編輯。</span><span class="sxs-lookup"><span data-stu-id="634fe-933">When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method is called, any rows still in edit-mode cancel their edits.</span></span> <span data-ttu-id="634fe-934">新的資料列被移除。</span><span class="sxs-lookup"><span data-stu-id="634fe-934">New rows are removed.</span></span> <span data-ttu-id="634fe-935">修改和刪除資料列會傳回至其原始狀態 (`DataRowState.Unchanged`)。</span><span class="sxs-lookup"><span data-stu-id="634fe-935">Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).</span></span>  
  
 <span data-ttu-id="634fe-936">AcceptChanges 和 RejectChanges 只會套用到<xref:System.Data.DataRow>相關的變更 (亦即`Add`， `Remove`， `Delete`，和`Modify`)。</span><span class="sxs-lookup"><span data-stu-id="634fe-936">AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`).</span></span> <span data-ttu-id="634fe-937">它們並不適用於結構描述或結構化變更。</span><span class="sxs-lookup"><span data-stu-id="634fe-937">They are not applicable to schema or structural changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-938">下列範例示範衍生自類別<xref:System.Data.DataSet>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-938">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="634fe-939"><xref:System.Data.DataSet.RejectChanges%2A>事件會從叫用函式內。</span><span class="sxs-lookup"><span data-stu-id="634fe-939">The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-940">取得連結資料表並允許從父資料表到子資料表進行巡覽之關聯的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-940">Get the collection of relations that link tables and allow navigation from parent tables to child tables.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-941">包含 <see cref="T:System.Data.DataRelationCollection" /> 物件集合的 <see cref="T:System.Data.DataRelation" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-941">A <see cref="T:System.Data.DataRelationCollection" /> that contains a collection of <see cref="T:System.Data.DataRelation" /> objects.</span>
          </span>
          <span data-ttu-id="634fe-942">如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-942">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="634fe-943">下列範例會列印到所有的子資料表的資料行名稱<xref:System.Data.DataSet.Relations%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="634fe-943">The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-944">取得或設定遠端作業中使用之 <see cref="T:System.Data.SerializationFormat" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-944">Gets or sets a <see cref="T:System.Data.SerializationFormat" /> for the <see cref="T:System.Data.DataSet" /> used during remoting.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-945">
            <see cref="T:System.Data.SerializationFormat" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-945">A <see cref="T:System.Data.SerializationFormat" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-946">清除所有資料表，並從 <see cref="T:System.Data.DataSet" /> 中移除所有關聯、外部條件約束和資料表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-946">Clears all tables and removes all relations, foreign constraints, and tables from the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="634fe-947">子類別應該覆寫 <see cref="M:System.Data.DataSet.Reset" /> 以還原 <see cref="T:System.Data.DataSet" /> 到它的原始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-947">Subclasses should override <see cref="M:System.Data.DataSet.Reset" /> to restore a <see cref="T:System.Data.DataSet" /> to its original state.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-948">取得或設定 <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-948">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-949">取得或設定 <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-949">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-950">A <xref:System.Data.DataSet> Web 服務和遠端處理案例中，預設序列化其結構描述和執行個體資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-950">A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios.</span></span> <span data-ttu-id="634fe-951">設定<xref:System.Data.DataSet.SchemaSerializationMode%2A>的具類型的屬性`DataSet`至<xref:System.Data.SchemaSerializationMode.ExcludeSchema>會導致序列化裝載要排除的結構描述資訊。</span><span class="sxs-lookup"><span data-stu-id="634fe-951">Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.</span></span>  
  
 <span data-ttu-id="634fe-952"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 支援僅針對具型別的`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="634fe-952"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`.</span></span> <span data-ttu-id="634fe-953">針對不具型別的`DataSet`這個屬性只能設定為<xref:System.Data.SchemaSerializationMode.IncludeSchema>。</span><span class="sxs-lookup"><span data-stu-id="634fe-953">For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="634fe-954"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 應該只用於在其中具類型的基礎結構描述資訊的情況下`DataTables`，`DataRelations`和`Constraints`尚未修改。</span><span class="sxs-lookup"><span data-stu-id="634fe-954"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified.</span></span> <span data-ttu-id="634fe-955">如果需要修改應該以序列化發生、 完整的結構描述資訊<xref:System.Data.SchemaSerializationMode.IncludeSchema>。</span><span class="sxs-lookup"><span data-stu-id="634fe-955">If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="634fe-956"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 支援 2.0 版的.NET framework 或更新版本。</span><span class="sxs-lookup"><span data-stu-id="634fe-956"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.</span></span>  
  
 <span data-ttu-id="634fe-957">當<xref:System.Data.SchemaSerializationMode.ExcludeSchema>設定，只有最上層的層級執行階段屬性上有<xref:System.Data.DataSet>會序列化。</span><span class="sxs-lookup"><span data-stu-id="634fe-957">When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized.</span></span> <span data-ttu-id="634fe-958">此外，它們會序列化才發生不同的預設值。</span><span class="sxs-lookup"><span data-stu-id="634fe-958">In addition, they are serialized only if they happen to be different from the default values.</span></span> <span data-ttu-id="634fe-959">沒有任何`Tables`，`Relations`或`Constraints`會序列化。</span><span class="sxs-lookup"><span data-stu-id="634fe-959">None of the `Tables`, `Relations` or `Constraints` are serialized.</span></span> <span data-ttu-id="634fe-960">序列化的執行階段屬性包括<xref:System.Data.DataSet.DataSetName%2A>， <xref:System.Data.DataSet.Namespace%2A>， <xref:System.Data.DataSet.Prefix%2A>， <xref:System.Data.DataSet.Locale%2A>， <xref:System.Data.DataSet.EnforceConstraints%2A>，和<xref:System.Data.DataSet.CaseSensitive%2A>。</span><span class="sxs-lookup"><span data-stu-id="634fe-960">The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>.</span></span> <span data-ttu-id="634fe-961">這些屬性會序列化以確定會保留整體的執行階段資料的完整性。</span><span class="sxs-lookup"><span data-stu-id="634fe-961">These properties are serialized to make sure that overall runtime data integrity is preserved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-962">取得值，表示是否應該保存 <see cref="P:System.Data.DataSet.Relations" /> 屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-962">Gets a value indicating whether <see cref="P:System.Data.DataSet.Relations" /> property should be persisted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-963">如果屬性值已經從其預設值變更，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-963">
              <see langword="true" /> if the property value has been changed from its default; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-964">您通常使用這個方法，如果您要建立的設計工具<xref:System.Data.DataSet>，或建立您自己的控制項加入<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-964">You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-965">下列範例會示範衍生自類別<xref:System.Data.DataSet>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-965">The following examples show a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="634fe-966"><xref:System.Data.DataSet.Reset%2A>和<xref:System.Data.DataSet.ShouldSerializeRelations%2A>方法會從叫用在衍生類別中的函式內。</span><span class="sxs-lookup"><span data-stu-id="634fe-966">The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-967">取得值，表示是否應該保存 <see cref="P:System.Data.DataSet.Tables" /> 屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-967">Gets a value indicating whether <see cref="P:System.Data.DataSet.Tables" /> property should be persisted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-968">如果屬性值已經從其預設值變更，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-968">
              <see langword="true" /> if the property value has been changed from its default; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-969">您通常使用這個方法，您可能想要建立的設計工具時，才<xref:System.Data.DataSet>，或建立您自己的控制項加入<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="634fe-969">You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-970">下列範例示範衍生自類別<xref:System.Data.DataSet>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-970">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="634fe-971"><xref:System.Data.DataSet.ShouldSerializeTables%2A>衍生類別中的函式中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-971">The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-972">取得或設定 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.ComponentModel.ISite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-972">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-973">
            <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-973">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-974">站台繫結<xref:System.ComponentModel.Component>至<xref:System.ComponentModel.Container>和啟用它們之間的通訊，以及提供容器以管理其元件的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-974">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-975">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-975">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-976">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-976">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-977">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="634fe-977">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="634fe-978">只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="634fe-978">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-979">如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-979">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-980">如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-980">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-981">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="634fe-981">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="634fe-982">只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="634fe-982">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="634fe-983">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-983">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="634fe-984">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-984">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-985">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="634fe-985">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="634fe-986">只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="634fe-986">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="634fe-987">
            <see cref="T:System.Xml.XmlReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-987">A <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-988">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-988">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-989">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="634fe-989">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="634fe-990">只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="634fe-990">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-991">
            <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-991">A <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-992">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-992">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-993">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="634fe-993">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="634fe-994">只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="634fe-994">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-995">取得包含在 <see cref="T:System.Data.DataSet" /> 中的資料表的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-995">Gets the collection of tables contained in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="634fe-996">
            <see cref="T:System.Data.DataTableCollection" />，這個 <see cref="T:System.Data.DataSet" /> 所包含的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-996">The <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="634fe-997">如果沒有任何 <see cref="T:System.Data.DataTable" /> 物件存在，則會傳回空的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-997">An empty collection is returned if no <see cref="T:System.Data.DataTable" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-998">若要將資料表加入至集合，使用<xref:System.Data.DataTableCollection.Add%2A>方法<xref:System.Data.DataTableCollection>。</span><span class="sxs-lookup"><span data-stu-id="634fe-998">To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>.</span></span> <span data-ttu-id="634fe-999">若要移除資料表，請使用<xref:System.Data.DataTableCollection.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-999">To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1000">下列範例會傳回<xref:System.Data.DataSet>物件的<xref:System.Data.DataTableCollection>，並列印每個資料表中的資料列與資料行。</span><span class="sxs-lookup"><span data-stu-id="634fe-1000">The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-1001">從 <see cref="T:System.Data.DataSet" /> 寫入 XML 資料，並選擇性寫入結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1001">Writes XML data, and optionally the schema, from the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-1002">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1002">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1003">使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.IO.Stream" /> 的目前資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1003">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1004">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1004">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1005">寫入資料和結構描述，請使用其中一個多載，其中包含`mode`參數，並將其值設定為`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1005">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1006">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1006">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1007">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1007">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1008">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1008">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1009"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1009">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1010">下列範例會建立<xref:System.IO.FileStream?displayProperty=nameWithType>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1010">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="634fe-1011">物件然後搭配<xref:System.Data.DataSet.WriteXml%2A>方法來撰寫 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1011">The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1012">用來寫入的 <see cref="T:System.IO.TextWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1012">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1013">使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.IO.TextWriter" /> 的目前資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1013">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1014">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1014">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1015">寫入資料和結構描述，請使用其中一個多載，其中包含`mode`參數，並將其值設定為`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1015">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1016">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1016">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1017">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1017">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1018">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1018">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1019"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1019">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-1020">要寫入的目的檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1020">The file name (including the path) to which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1021">將 <see cref="T:System.Data.DataSet" /> 的目前資料寫入指定的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1021">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1022">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1022">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1023">寫入資料和結構描述，請使用其中一個多載，其中包含`mode`參數，並將其值設定為`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1023">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1024">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1024">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1025">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1025">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1026">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1026">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1027"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1027">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-1028">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1028">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-1029">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1029">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-1030">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1030">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1031">要用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1031">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1032">將 <see cref="T:System.Data.DataSet" /> 的目前資料寫入指定的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1032">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1033">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1033">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1034">寫入資料和結構描述，請使用其中一個多載，其中包含`mode`參數，並將其值設定為`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1034">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1035">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1035">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1036">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1036">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1037">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1037">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1038"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1038">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-1039">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1039">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-1040">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1040">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1041">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1041">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="634fe-1042">若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1042">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1043">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1043">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1044">若要撰寫資料和結構描述，設定`mode`參數`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1044">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1045">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1045">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1046">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1046">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1047">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1047">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1048"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1048">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1049">用來寫入文件的 <see cref="T:System.IO.TextWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1049">A <see cref="T:System.IO.TextWriter" /> object used to write the document.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-1050">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1050">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1051">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1051">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="634fe-1052">若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1052">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1053">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1053">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1054">若要撰寫資料和結構描述，設定`mode`參數`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1054">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1055">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1055">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1056">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1056">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1057">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1057">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1058"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1058">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1059">下列範例會先建立簡單<xref:System.Data.DataSet>與一個<xref:System.Data.DataTable>，兩個資料行和十個資料列。</span><span class="sxs-lookup"><span data-stu-id="634fe-1059">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="634fe-1060"><xref:System.Data.DataSet>結構描述和資料會寫入磁碟，然後叫用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1060">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="634fe-1061">第二個<xref:System.Data.DataSet>建立和<xref:System.Data.DataSet.ReadXml%2A>方法用來填入結構描述和資料。</span><span class="sxs-lookup"><span data-stu-id="634fe-1061">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-1062">要寫入的目的檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1062">The file name (including the path) to which to write.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-1063">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1063">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1064">使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1064">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="634fe-1065">若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1065">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1066">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1066">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1067">若要撰寫資料和結構描述，設定`mode`參數`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1067">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1068">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1068">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1069">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1069">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1070">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1070">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1071"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1071">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1072">下列範例會使用<xref:System.Data.DataSet.WriteXml%2A>方法來撰寫 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1072">The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-1073">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1073">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-1074">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1074">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-1075">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1075">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1076">要用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1076">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="634fe-1077">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1077">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1078">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1078">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="634fe-1079">若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1079">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1080">`WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataSet>XML 文件，而<xref:System.Data.DataSet.WriteXmlSchema%2A>方法會寫入的結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1080">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="634fe-1081">若要撰寫資料和結構描述，設定`mode`參數`WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="634fe-1081">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="634fe-1082">請注意，也適用於<xref:System.Data.DataSet.ReadXml%2A>和<xref:System.Data.DataSet.ReadXmlSchema%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1082">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="634fe-1083">讀取 XML 資料，或結構描述和資料`DataSet`，使用`ReadXml`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1083">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="634fe-1084">若要讀取的結構描述，使用`ReadXmlSchema`方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1084">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="634fe-1085"><xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1085">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1086">下列範例會建立<xref:System.IO.FileStream?displayProperty=nameWithType>物件，用來建立新<xref:System.Xml.XmlTextWriter>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1086">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object that is used to create a new <xref:System.Xml.XmlTextWriter>.</span></span> <span data-ttu-id="634fe-1087"><xref:System.Xml.XmlTextWriter>物件搭配<xref:System.Data.DataSet.WriteXml%2A>方法來撰寫 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1087">The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="634fe-1088">寫入 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1088">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-1089">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1089">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1090">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1090">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1091">使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataSet>XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1091">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="634fe-1092">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-1092">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-1093">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1093">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1094">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1094">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="634fe-1095">若要將資料寫入 XML 文件中，使用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1095">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1096">類別衍生自<xref:System.IO.Stream>類別包含<xref:System.IO.BufferedStream>， <xref:System.IO.FileStream>， <xref:System.IO.MemoryStream>，和<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1096">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1097">下列範例會建立新<xref:System.IO.FileStream>物件傳遞至<xref:System.Data.DataSet.WriteXmlSchema%2A>寫入磁碟的結構描述的方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1097">The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1098">用來寫入的 <see cref="T:System.IO.TextWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1098">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1099">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.TextWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1099">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1100">使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataSet>XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1100">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="634fe-1101">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-1101">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-1102">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1102">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1103">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1103">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="634fe-1104">若要將資料寫入 XML 文件中，使用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1104">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1105">類別和從其中衍生<xref:System.IO.TextWriter?displayProperty=nameWithType>類別包含<xref:System.Web.HttpWriter?displayProperty=nameWithType>， <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>， <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>， <xref:System.IO.StreamWriter?displayProperty=nameWithType>，和<xref:System.IO.StringWriter?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1105">Classes the derive from the <xref:System.IO.TextWriter?displayProperty=nameWithType> class include the <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, and <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1106">下列範例會建立<xref:System.Text.StringBuilder?displayProperty=nameWithType>的物件用來建立新<xref:System.IO.StringWriter?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="634fe-1106">The following example creates a <xref:System.Text.StringBuilder?displayProperty=nameWithType> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span> <span data-ttu-id="634fe-1107"><xref:System.IO.StringWriter>傳遞至<xref:System.Data.DataSet.WriteXmlSchema%2A>方法，而且產生的字串會列印到主控台視窗。</span><span class="sxs-lookup"><span data-stu-id="634fe-1107">The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-1108">要寫入的目的檔案名稱 (包括路徑)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1108">The file name (including the path) to which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1109">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1109">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1110">使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataSet>XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1110">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="634fe-1111">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-1111">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-1112">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1112">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1113">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1113">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="634fe-1114">若要將資料寫入 XML 文件中，使用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1114">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="634fe-1115">
            <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1115">
              <see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="634fe-1116">用於讀取和寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1116">for reading and writing files.</span>
          </span>
          <span data-ttu-id="634fe-1117">相關聯的列舉型別： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1117">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1118">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1118">The <see cref="T:System.Xml.XmlWriter" /> to write to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1119">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入 <see cref="T:System.Xml.XmlWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1119">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="634fe-1120">使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataSet>XML 文件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1120">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="634fe-1121">結構描述包含資料表、 關聯和條件約束的定義。</span><span class="sxs-lookup"><span data-stu-id="634fe-1121">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="634fe-1122">若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1122">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1123">使用 XSD 標準寫入 XML 結構描述。</span><span class="sxs-lookup"><span data-stu-id="634fe-1123">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="634fe-1124">若要將資料寫入 XML 文件中，使用<xref:System.Data.DataSet.WriteXml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="634fe-1124">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="634fe-1125">繼承自一個類別<xref:System.Xml.XmlWriter?displayProperty=nameWithType>類別是<xref:System.Xml.XmlTextWriter>類別。</span><span class="sxs-lookup"><span data-stu-id="634fe-1125">One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=nameWithType> class is the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="634fe-1126">下列範例會建立新<xref:System.IO.FileStream?displayProperty=nameWithType>物件使用指定的路徑。</span><span class="sxs-lookup"><span data-stu-id="634fe-1126">The following example creates a new <xref:System.IO.FileStream?displayProperty=nameWithType> object with the specified path.</span></span> <span data-ttu-id="634fe-1127"><xref:System.IO.FileStream>物件用來建立<xref:System.Xml.XmlTextWriter>物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1127">The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XmlTextWriter> object.</span></span> <span data-ttu-id="634fe-1128"><xref:System.Data.DataSet.WriteXmlSchema%2A>然後叫用方法<xref:System.Xml.XmlTextWriter>寫入磁碟的結構描述的物件。</span><span class="sxs-lookup"><span data-stu-id="634fe-1128">The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="634fe-1129">要寫入的目標 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1129">A <see cref="T:System.IO.Stream" /> object to write to.</span>
          </span>
        </param>
        <param name="multipleTargetConverter">
          <span data-ttu-id="634fe-1130">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1130">A delegate used to convert <see cref="T:System.Type" /> to string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1131">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.Stream" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1131">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1132">要寫入的目標 <see cref="T:System.IO.TextWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1132">A <see cref="T:System.IO.TextWriter" /> object to write to.</span>
          </span>
        </param>
        <param name="multipleTargetConverter">
          <span data-ttu-id="634fe-1133">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1133">A delegate used to convert <see cref="T:System.Type" /> to string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1134">將 <see cref="T:System.Data.DataSet" /> 結構當做 XML 結構描述寫入至指定的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1134">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="634fe-1135">要寫入的檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1135">The name of the file to write to.</span>
          </span>
        </param>
        <param name="multipleTargetConverter">
          <span data-ttu-id="634fe-1136">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1136">A delegate used to convert <see cref="T:System.Type" /> to string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1137">將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1137">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="634fe-1138">要寫入的目標 <see cref="T:System.Xml.XmlWriter" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1138">A <see cref="T:System.Xml.XmlWriter" /> object to write to.</span>
          </span>
        </param>
        <param name="multipleTargetConverter">
          <span data-ttu-id="634fe-1139">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1139">A delegate used to convert <see cref="T:System.Type" /> to string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="634fe-1140">將 <see cref="T:System.Data.DataSet" /> 結構當做 XML 結構描述寫入至指定的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="634fe-1140">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>