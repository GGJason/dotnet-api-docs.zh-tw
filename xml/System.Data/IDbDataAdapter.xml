<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d5ad4617b21404fdfc9af0b0272a505fd2fb4f37" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30398312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDataAdapter implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbDataAdapter&#xA;Implements IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbDataAdapter : System::Data::IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示與命令相關的屬性集，這些屬性是用來填入 <see cref="T:System.Data.DataSet" /> 並更新資料來源，並且由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDbDataAdapter>介面繼承自<xref:System.Data.IDataAdapter>介面，並讓物件建立資料配接器設計用於關聯式資料庫。 <xref:System.Data.IDbDataAdapter>介面，並選擇性地公用程式類別， <xref:System.Data.Common.DbDataAdapter>，允許繼承的類別來實作資料配接器類別，代表資料來源之間的橋樑和<xref:System.Data.DataSet>。 如需詳細資料配接器類別的詳細資訊，請參閱[填入資料集從 DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)。 如需實作.NET Framework 資料提供者的詳細資訊，請參閱[ &#91; \<topic://cpconimplementingnetdataprovider >&#93;](http://msdn.microsoft.com/library/a9fa1926-071b-4c6f-997d-a16bac633852)。  
  
 應用程式不會建立的執行個體<xref:System.Data.IDbDataAdapter>介面直接，但是會建立繼承的類別的執行個體<xref:System.Data.IDbDataAdapter>和<xref:System.Data.Common.DbDataAdapter>。  
  
 繼承的類別<xref:System.Data.IDbDataAdapter>必須實作繼承的成員，和通常用來定義其他成員將提供者特有的功能。 例如，<xref:System.Data.IDbDataAdapter>介面會定義<xref:System.Data.IDbDataAdapter.SelectCommand%2A>屬性，而<xref:System.Data.Common.DbDataAdapter>介面會定義<xref:System.Data.IDataAdapter.Fill%2A>採用方法<xref:System.Data.DataTable>做為參數。 接著，<xref:System.Data.OleDb.OleDbDataAdapter>類別會繼承<xref:System.Data.IDbDataAdapter.SelectCommand%2A>屬性和<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法，而且也會定義兩個其他多載<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>採取 ADO 資料錄集物件做為參數的方法。  
  
   
  
## Examples  
 下列範例會使用衍生的類別， <xref:System.Data.SqlClient.SqlCommand>，<xref:System.Data.SqlClient.SqlDataAdapter>和<xref:System.Data.SqlClient.SqlConnection>來選取資料來源的記錄。 區域分布<xref:System.Data.DataSet>再傳回。 若要完成這項作業，方法會傳遞初始化<xref:System.Data.DataSet>，連接字串和 TRANSACT-SQL SELECT 陳述式的查詢字串。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>若要升級.NET Framework 資料提供者之間的一致性，命名為繼承的類別，在表單中<paramref name="Prv" />DataAdapter 其中<paramref name="Prv" />是提供給特定的.NET Framework 資料提供者命名空間中的所有類別的統一前置詞。 例如，<paramref name="Sql" />是前置詞<see cref="T:System.Data.SqlClient.SqlDataAdapter" />類別<see langword="System.Data.SqlClient" />命名空間。  
  
 當您繼承自<see cref="T:System.Data.IDbDataAdapter" />介面，您應該實作下列建構函式：  
  
 <list type="table"><listheader><term> 項目  
  
 </term><description> 描述  
  
 </description></listheader><item><term> PrvDataAdapter()  
  
 </term><description> 初始化 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)  
  
 </term><description> 初始化具有指定的 SQL SELECT 陳述式的 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter （selectCommandText 字串、 字串 selectConnectionString）  
  
 </term><description> 初始化 SQL SELECT 陳述式與連接字串的 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter （字串 selectCommandText、 PrvConnection selectConnection）  
  
 </term><description> 初始化 SQL SELECT 陳述式和 PrvConnection 物件 PrvDataAdapter 類別的新執行個體。  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SQL 陳述式從資料集刪除資料錄。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所刪除的資料列刪除在資料來源中的資料錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，並且出現在主索引鍵資訊<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>如果您將可以自動產生`SelectCommand`.NET Framework 資料提供者的屬性。 然後，您未設定任何其他命令會產生 CommandBuilder。 此產生邏輯需要索引鍵資料行資訊會出現在<xref:System.Data.DataSet>。 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 當<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>指派到先前建立<xref:System.Data.IDbCommand>、<xref:System.Data.IDbCommand>不會被複製。 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>維護參考先前建立的<xref:System.Data.IDbCommand>物件。  
  
   
  
## Examples  
 下列範例會建立繼承的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>類別，並設定<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>和<xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>屬性。 它會假設您已經建立<xref:System.Data.OleDb.OleDbConnection>物件。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來將新的資料錄插入至資料來源的 SQL 陳述式。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中新的資料列插入在資料來源中的資料錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，並且出現在主索引鍵資訊<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.InsertCommand%2A>如果您將可以自動產生`SelectCommand`.NET Framework 資料提供者的屬性。 然後，您未設定任何其他命令會產生 CommandBuilder。 此產生邏輯需要索引鍵資料行資訊會出現在<xref:System.Data.DataSet>。 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 當<xref:System.Data.IDbDataAdapter.InsertCommand%2A>指派到先前建立<xref:System.Data.IDbCommand>、<xref:System.Data.IDbCommand>不會被複製。 <xref:System.Data.IDbDataAdapter.InsertCommand%2A>維護參考先前建立的<xref:System.Data.IDbCommand>物件。  
  
> [!NOTE]
>  如果執行此命令會傳回資料列，這些資料列可能會加入至<xref:System.Data.DataSet>根據如何設定<xref:System.Data.IDbCommand.UpdatedRowSource%2A>屬性<xref:System.Data.IDbCommand>物件。  
  
   
  
## Examples  
 下列範例會建立繼承的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>類別，並設定<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>和<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>屬性。 它會假設您已經建立<xref:System.Data.OleDb.OleDbConnection>物件。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來在資料來源中選取資料錄的 SQL 陳述式。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中的位置從資料來源選取資料錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Data.IDbDataAdapter.SelectCommand%2A>指派到先前建立<xref:System.Data.IDbCommand>、<xref:System.Data.IDbCommand>不會被複製。 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>維護參考先前建立的<xref:System.Data.IDbCommand>物件。  
  
 如果<xref:System.Data.IDbDataAdapter.SelectCommand%2A>不會傳回任何資料列，資料表不會加入至<xref:System.Data.DataSet>，並會引發任何例外狀況。  
  
   
  
## Examples  
 下列範例會建立繼承的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>類別，並設定<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>和<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>屬性。 它會假設您已經建立<xref:System.Data.OleDb.OleDbConnection>物件。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來在資料來源中更新資料錄的 SQL 陳述式。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所修改的資料列更新在資料來源中的資料錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，並且出現在主索引鍵資訊<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>如果您將可以自動產生`SelectCommand`.NET Framework 資料提供者的屬性。 然後，您未設定任何其他命令會產生 CommandBuilder。 此產生邏輯需要索引鍵資料行資訊會出現在<xref:System.Data.DataSet>。 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 當<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>指派到先前建立<xref:System.Data.IDbCommand>、<xref:System.Data.IDbCommand>不會被複製。 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>維護參考先前建立的<xref:System.Data.IDbCommand>物件。  
  
> [!NOTE]
>  如果執行此命令會傳回資料列，這些資料列會加入至<xref:System.Data.DataSet>。  
  
   
  
## Examples  
 下列範例會建立繼承的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>類別，並設定<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>和<xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>屬性。 它會假設您已經建立<xref:System.Data.OleDb.OleDbConnection>物件。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>