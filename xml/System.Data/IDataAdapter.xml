<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ccfe5816dad413d7b60fcc102b5215bd09c9535b" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51903160" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>允許物件實作 DataAdapter，並表示用來填滿和更新 <see cref="T:System.Data.DataSet" /> 並更新資料來源的方法集和對應動作相關屬性集。  
  
 <see cref="T:System.Data.IDbDataAdapter" /> 執行個體適用於本身為 (或類似於) 採用文字命令 (例如 Transact-SQL) 之關聯式資料庫的資料來源，而 <see cref="T:System.Data.IDataAdapter" /> 執行個體則可以使用任何類型的資料來源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter>介面可讓繼承的類別來實作資料配接器類別，代表資料來源之間的橋樑， <xref:System.Data.DataSet>。 如需詳細資料配接器類別的詳細資訊，請參閱[從 DataAdapter 填入 DataSet](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)。  
  
 應用程式不會建立的執行個體<xref:System.Data.IDataAdapter>介面直接，但會實作繼承的類別的執行個體<xref:System.Data.IDataAdapter>。  
  
 繼承的類別<xref:System.Data.IDataAdapter>必須實作繼承的成員，以及它們通常會定義要新增提供者特有的功能的其他成員。 例如，<xref:System.Data.IDataAdapter>介面會定義<xref:System.Data.IDataAdapter.Fill%2A>採用方法<xref:System.Data.DataSet>做為參數。 依次<xref:System.Data.OleDb.OleDbDataAdapter>類別會繼承<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法，也會定義兩個額外的多載<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>需要 ADO 資料錄集物件，做為參數的方法。  
  
   
  
## Examples  
 下列範例會使用衍生的類別， <xref:System.Data.SqlClient.SqlCommand>， <xref:System.Data.SqlClient.SqlDataAdapter>，和<xref:System.Data.SqlClient.SqlConnection>、 從資料庫選取資料錄。 區域分布<xref:System.Data.DataSet>再傳回。 若要這樣做，方法傳遞初始化<xref:System.Data.DataSet>，連接字串，而是 TRANSACT-SQL SELECT 陳述式的查詢字串。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>若要升級.NET Framework 資料提供者之間的一致性，命名為在表單中繼承的類別<paramref name="Prv" />DataAdapter 其中<paramref name="Prv" />是統一的前置詞提供給特定的.NET Framework 資料提供者命名空間中的所有類別。 例如，<paramref name="Sql" />是的前置詞<see cref="T:System.Data.SqlClient.SqlDataAdapter" />類別中<see langword="System.Data.SqlClient" />命名空間。  
  
當您繼承自<see cref="T:System.Data.IDataAdapter" />介面，您應該實作下列建構函式： 
 <list type="table"><listheader><term> 項目 
 </term><description> 描述 
 </description></listheader><item><term> PrvDataAdapter() 
 </term><description> 初始化 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) 
 </term><description> 使用指定的 SQL SELECT 陳述式來初始化 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter （字串 selectCommandText，字串 selectConnectionString） 
 </term><description> 使用 SQL SELECT 陳述式和連接字串，以初始化 PrvDataAdapter 類別的新執行個體。  
  
 </description></item><item><term> PrvDataAdapter （字串 selectCommandText、 PrvConnection selectConnection） 
 </term><description> 使用 SQL SELECT 陳述式和 PrvConnection 物件，以初始化 PrvDataAdapter 類別的新執行個體。  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>使用 <see cref="T:System.Data.DataSet" /> 名稱，加入或更新 <see cref="T:System.Data.DataSet" /> 中的資料列，以符合那些在資料來源中的資料列，並建立命名為 "Table" 的 <see cref="T:System.Data.DataTable" />。</summary>
        <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> 從使用 SELECT 陳述式指定由相關聯的資料來源擷取資料列<xref:System.Data.IDbDataAdapter.SelectCommand%2A>屬性。 SELECT 陳述式相關聯的連接物件必須是有效的但它不需要開啟。 如果連線已關閉之前<xref:System.Data.IDataAdapter.Fill%2A>會呼叫它，它會開啟來擷取資料，然後關閉。 如果連接已開啟之前<xref:System.Data.IDataAdapter.Fill%2A>是呼叫，它會保持開啟狀態。  
  
 <xref:System.Data.IDataAdapter.Fill%2A>作業，然後將資料列加入到目的地<xref:System.Data.DataTable>中的物件<xref:System.Data.DataSet>建立<xref:System.Data.DataTable>物件如果它們尚不存在。 建立時<xref:System.Data.DataTable>物件，<xref:System.Data.IDataAdapter.Fill%2A>作業通常會建立只有資料行名稱中繼資料。 不過，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>屬性設定為`AddWithKey`，也會建立適當的主索引鍵和條件約束。  
  
 如果 `SelectCommand` 傳回 OUTER JOIN 的結果，則 `DataAdapter` 便不會為產生的 <xref:System.Data.DataTable.PrimaryKey%2A> 設定 <xref:System.Data.DataTable>值。 您必須明確定義以確保正確解析重複的資料列的主索引鍵。 如需詳細資訊，請參閱 <<c0> [ 定義主索引鍵](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
 如果<xref:System.Data.IDataAdapter>遇到重複的資料行在填入<xref:System.Data.DataTable>，它會產生連續的資料行，並使用模式 」 columnname1"、"columnname2 」、 「 columnname3"，等等的名稱。 如果內送資料中包含未命名資料行，它們都放<xref:System.Data.DataSet>根據模式"Column1"、"Column2"，依此類推。 當多個結果集加入至<xref:System.Data.DataSet>，每個結果集放在個別的資料表。 其他結果集的命名方式將整數值附加至指定的資料表名稱 （例如，"Table"、"Table1"、"Table2"，等等）。 使用資料行和資料表名稱，以確保沒有這些命名模式的衝突時，應用程式應謹慎小心。  
  
 當 SELECT 陳述式，用來填入<xref:System.Data.DataSet>傳回多個結果，例如 SQL 陳述式的批次，如果其中一個結果包含錯誤，所有後續的結果會略過且未新增到<xref:System.Data.DataSet>。  
  
 您可以使用<xref:System.Data.IDataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果主索引鍵存在，內送資料列會合併與相符的資料列已經存在。 如果沒有主索引鍵存在，將內送資料列附加至<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  當處理批次 SQL 陳述式會傳回多個結果，實作<xref:System.Data.IDataAdapter.Fill%2A>和<xref:System.Data.IDataAdapter.FillSchema%2A>.NET Framework 資料提供者會擷取第一個結果的結構描述資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">要從資料來源以結構描述填入的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
        <summary>新增一個名為 "Table" 的 <see cref="T:System.Data.DataTable" /> 至指定的 <see cref="T:System.Data.DataSet" />，並且設定符合指定的 <see cref="T:System.Data.SchemaType" /> 上之資料來源的結構描述。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> 物件的陣列，包含從資料來源傳回的結構描述資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.FillSchema%2A>方法會擷取結構描述從資料來源使用<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 連接物件相關聯<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必須是有效的但它不需要開啟。 如果連線已關閉之前<xref:System.Data.IDataAdapter.FillSchema%2A>會呼叫它，它會開啟來擷取資料，然後關閉。 如果連接已開啟之前<xref:System.Data.IDataAdapter.FillSchema%2A>是呼叫，它會保持開啟狀態。  
  
 A<xref:System.Data.IDataAdapter.FillSchema%2A>作業會將加入<xref:System.Data.DataTable>到目的地<xref:System.Data.DataSet>。 接著它會加入至資料行<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，並設定下列<xref:System.Data.DataColumn>如果它們存在於資料來源的屬性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必須設定<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>分開。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 也會設定<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>屬性根據下列規則：  
  
-   如果所傳回的一或多個主要的索引鍵資料行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，做為主要索引鍵資料行<xref:System.Data.DataTable>。  
  
-   如果傳回沒有主索引鍵資料行，但唯一資料行，唯一的資料行會使用主索引鍵，如果所有唯一的資料行不可為 null。 如果任何資料行可為 null，<xref:System.Data.UniqueConstraint>新增至<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>屬性未設定。  
  
-   如果傳回主要索引鍵資料行及唯一的資料行，將主索引鍵資料行做為主要索引鍵資料行<xref:System.Data.DataTable>。  
  
 請注意，會將主索引鍵和唯一條件約束加入至<xref:System.Data.ConstraintCollection>不加入根據先前的規則，但其他條件約束類型。  
  
 如果唯一的叢集資料行或將 SQL Server 資料表中的資料行上定義索引和叢集索引中的資料行的名稱將會傳回一組個別的資料行上定義主索引鍵條件約束。 若要傳回的名稱或主索引鍵資料行的名稱，使用指定的主索引鍵名稱的 SELECT 陳述式中的查詢提示。 如需如何指定查詢提示的詳細資訊，請參閱[查詢提示 & Amp;#40;transact-SQL&AMP;#41;](https://msdn.microsoft.com/library/ms181714.aspx)。  
  
 如果<xref:System.Data.IDataAdapter>遇到重複的資料行在填入<xref:System.Data.DataTable>，它會產生連續的資料行，並使用模式 」 columnname1"、"columnname2 」、 「 columnname3"，等等的名稱。 如果內送資料中包含未命名資料行，它們都放<xref:System.Data.DataSet>根據模式"Column1"、"Column2"，依此類推。 當多個結果集加入至<xref:System.Data.DataSet>，每個結果集放在個別的資料表。 其他結果集的命名方式將整數值附加至指定的資料表名稱 （例如，"Table"、"Table1"、"Table2"，等等）。 使用資料行和資料表名稱，以確保沒有這些命名模式的衝突時，應用程式應謹慎小心。  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 傳回任何資料列。 使用<xref:System.Data.IDataAdapter.Fill%2A>方法，以將資料列加入<xref:System.Data.DataTable>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得在執行 SQL SELECT 陳述式時由使用者設定的參數。</summary>
        <returns>
          <see cref="T:System.Data.IDataParameter" /> 物件的陣列，含有由使用者設定的參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示或指定未對應的來源資料表或資料行是否為了篩選或引發錯誤，而使用它們的來源名稱傳遞。</summary>
        <value>其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。 預設值為 <see langword="Passthrough" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.TableMappings%2A>屬性會提供傳回的記錄之間的主要對應和<xref:System.Data.DataSet>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示或指定遺漏的來源資料表、資料行和關聯性 (Relationship) 是否加入至資料集結構描述 (Schema)、已忽略，或造成要引發的錯誤。</summary>
        <value>其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。 預設值為 <see langword="Add" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示來源資料表如何對應至資料集資料表。</summary>
        <value>集合，提供傳回的資料錄和 <see cref="T:System.Data.DataSet" /> 之間的主要對應。 預設值為空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter>用於名為"Table"的來源資料表的對應。 所有 SELECT、 INSERT、 DELETE 和 UPDATE 陳述式，傳回的資料必須執行使用一致的資料行命名。 傳回記錄中的資料行名稱必須是唯一，否則資料行名稱重複的覆寫先前的資料。 在  <xref:System.Data.IDataAdapter.Update%2A>，則只會對應到名為"Table"的來源資料表的資料表必須協調其變更。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">用來更新資料來源的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>從命名為 "Table" 之 <see cref="T:System.Data.DataSet" /> 的指定 <see cref="T:System.Data.DataTable" /> 中，為每個插入、更新或刪除的資料列呼叫對應的 INSERT、UPDATE 或 DELETE 陳述式。</summary>
        <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當應用程式呼叫<xref:System.Data.IDataAdapter.Update%2A>方法中，<xref:System.Data.IDataAdapter>會檢查<xref:System.Data.DataRow.RowState%2A>屬性，並執行必要的 INSERT、 UPDATE 或 DELETE 陳述式，反覆地針對每個的資料列中，然後再根據順序中設定的索引<xref:System.Data.DataSet>. 例如，<xref:System.Data.IDataAdapter.Update%2A>可能會執行 DELETE 陳述式，後面接著 INSERT 陳述式和另一個的 DELETE 陳述式，因為順序中的資料列<xref:System.Data.DataTable>。  
  
 請注意，這些陳述式都不會執行以批次程序;個別更新每個資料列。 應用程式可以呼叫<xref:System.Data.DataSet.GetChanges%2A>方法，如果您必須控制陳述式類型 （例如，在更新之前插入） 的順序。 如需詳細資訊，請參閱 <<c0> [ 使用 Dataadapter 更新資料來源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 陳述式，<xref:System.Data.Common.DataAdapter.Update%2A>方法會產生例外狀況。 不過，您可以建立<xref:System.Data.SqlClient.SqlCommandBuilder>或是<xref:System.Data.OleDb.OleDbCommandBuilder>物件來自動產生單一資料表更新的 SQL 陳述式，如果您將設定`SelectCommand`.NET Framework 資料提供者的屬性。 然後，您未設定任何其他 SQL 陳述式會產生 CommandBuilder。 此層代 」 邏輯需要索引鍵資料行資訊會出現在<xref:System.Data.DataSet>。 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DataAdapter.Update%2A>方法會從第一個對應，然後再執行更新中所列的資料表擷取資料列。 <xref:System.Data.Common.DataAdapter.Update%2A>然後更新使用的值的資料列<xref:System.Data.IDbCommand.UpdatedRowSource%2A>屬性。 傳回任何其他資料列都會被忽略。  
  
 任何資料載入回後<xref:System.Data.DataSet>，則<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引發事件時，讓使用者能夠檢查協調<xref:System.Data.DataSet>資料列和任何輸出命令所傳回的參數。 已成功更新資料列之後，會接受該資料列所做的變更。  
  
 當使用<xref:System.Data.IDataAdapter.Update%2A>，執行的順序如下所示：  
  
1.  中的值<xref:System.Data.DataRow>會移至 參數值。  
  
2.  便會引發 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  執行命令。  
  
4.  如果命令設定為`FirstReturnedRecord`，則第一個傳回的結果會放在<xref:System.Data.DataRow>。  
  
5.  如果沒有輸出參數，它們都放<xref:System.Data.DataRow>。  
  
6.  便會引發 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  呼叫 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 每個相關聯的命令<xref:System.Data.IDataAdapter>通常都有一個與其相關聯的參數集合。 參數會對應至目前的資料列，透過`SourceColumn`並`SourceVersion`屬性的.NET Framework 資料提供者的`Parameter`類別。 `SourceColumn` 是指<xref:System.Data.DataTable>資料行，<xref:System.Data.IDataAdapter>以取得目前資料列的參數值的參考。  
  
 `SourceColumn` 在套用任何資料表對應之前，是指未對應的資料行名稱。 如果`SourceColumn`指的是不存在的資料行中，所採取的動作取決於下列其中一種<xref:System.Data.MissingMappingAction>值。  
  
|列舉值|採取的動作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用中的資料表名稱與來源資料行名稱<xref:System.Data.DataSet>如果不不存在任何對應。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>產生。 時明確設定的對應，遺漏對應的輸入參數是通常會因發生錯誤。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>產生。|  
  
 `SourceColumn`屬性也會用來對應輸出的值，或輸入/輸出參數傳回`DataSet`。 如果它是指不存在的資料行，則會產生例外狀況。  
  
 `SourceVersion` .NET Framework 資料提供者的屬性`Parameter`類別會決定是否要使用`Original`， `Current`，或`Proposed`版本的資料行的值。 這項功能是經常用來在 UPDATE 陳述式來檢查有開放式同步存取違規的 WHERE 子句中包含原始值。  
  
> [!NOTE]
>  如果在更新資料列時發生錯誤，會擲回例外狀況，並執行更新已停止。 若要繼續更新作業，而不會產生例外狀況，當發生錯誤時，設定<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>屬性，以`true`再呼叫<xref:System.Data.Common.DbDataAdapter.Update%2A>。 您也可以回應內每個資料列依錯誤`RowUpdated`DataAdapter 的事件。 若要繼續更新作業，而不會產生例外狀況內`RowUpdated`事件，設定<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>屬性<xref:System.Data.Common.RowUpdatedEventArgs>至<xref:System.Data.UpdateStatus.Continue>。  
  
   
  
## Examples  
 下列範例會使用衍生的類別中，<xref:System.Data.OleDb.OleDbDataAdapter>至<xref:System.Data.Common.DataAdapter.Update%2A>資料來源。 這個範例假設您已建立<xref:System.Data.OleDb.OleDbDataAdapter>和<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
      </Docs>
    </Member>
  </Members>
</Type>