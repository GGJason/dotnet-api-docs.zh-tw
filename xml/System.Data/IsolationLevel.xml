<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3927e5f538dc55d18189c8b487fc273c69d4094d" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39981993" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <TypeSignature Language="F#" Value="type IsolationLevel = " />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7c3b0-101">指定此連接的異動鎖定行為。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7c3b0-101">Specifies the transaction locking behavior for the connection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c3b0-102"><xref:System.Data.IsolationLevel>執行交易時，將會使用.NET Framework 資料提供者的值。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-102">The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.</span></span>  
  
 <span data-ttu-id="7c3b0-103"><xref:System.Data.IsolationLevel>保持作用中之前明確變更，但它可以隨時變更。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-103">The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="7c3b0-104">無法剖析階段時，會在執行時，使用新的值。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="7c3b0-105">如果在交易期間變更，伺服器的預期的行為是將新的鎖定層級套用所有剩餘的陳述式。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c3b0-106">此應用程式示範如何使用<xref:System.Data.IsolationLevel>在<xref:System.Data.Common.DbTransaction>。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-106">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="7c3b0-107">此範例將示範其中一個下列行為允許在不同的隔離等級：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-107">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="7c3b0-108">中途讀取。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-108">Dirty reads.</span></span>  
  
-   <span data-ttu-id="7c3b0-109">非可重複讀取。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-109">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="7c3b0-110">虛設項目。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-110">Phantoms.</span></span>  
  
 <span data-ttu-id="7c3b0-111">此應用程式會在下列隔離等級中執行：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-111">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="7c3b0-112">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="7c3b0-112">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="7c3b0-113">ReadCommitted</span><span class="sxs-lookup"><span data-stu-id="7c3b0-113">ReadCommitted</span></span>  
  
-   <span data-ttu-id="7c3b0-114">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="7c3b0-114">RepeatableRead</span></span>  
  
-   <span data-ttu-id="7c3b0-115">可序列化</span><span class="sxs-lookup"><span data-stu-id="7c3b0-115">Serializable</span></span>  
  
-   <span data-ttu-id="7c3b0-116">快照</span><span class="sxs-lookup"><span data-stu-id="7c3b0-116">Snapshot</span></span>  
  
 <span data-ttu-id="7c3b0-117">PhantomReadThreads 類別會示範是否特定交易可讓由虛設項目讀取行為。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-117">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="7c3b0-118">如果交易允許行為，執行緒會以下列順序：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-118">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="7c3b0-119">在第一個執行緒中，選取 [products(All)]。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-119">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="7c3b0-120">在第二個執行緒中，插入新的產品。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-120">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="7c3b0-121">認可之交易中第二個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-121">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="7c3b0-122">一次選取的產品。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-122">Select the products again.</span></span>  
  
-   <span data-ttu-id="7c3b0-123">認可之交易中第一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-123">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="7c3b0-124">如果交易允許行為，兩個選取的作業會取得不同的結果。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-124">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="7c3b0-125">NonrepeatableReadThreads 類別會示範是否特定交易可讓不可重複讀取行為。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-125">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="7c3b0-126">如果交易允許行為，執行緒會以下列順序：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-126">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="7c3b0-127">在第一個執行緒中，選取 [product(ProductId=1)]。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-127">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="7c3b0-128">在第二個執行緒中，更新數量 value(ProductId=1)。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-128">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="7c3b0-129">認可之交易中第二個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-129">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="7c3b0-130">一次選取的產品。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-130">Select the product again.</span></span>  
  
-   <span data-ttu-id="7c3b0-131">認可之交易中第一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-131">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="7c3b0-132">如果交易允許行為，兩個選取的作業會取得不同的結果。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-132">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="7c3b0-133">ExchangeValuesThreads 類別示範 Serializable 和 Snapshot 交易之間的差異。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-133">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="7c3b0-134">對於可序列化交易中，執行緒會以下列順序：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-134">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="7c3b0-135">在第一個執行緒，取得 product(ProductId=2) 和存放區的價格在變數中。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-135">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="7c3b0-136">在第一個執行緒，更新的 product(ProductId=2) 價格 product(ProductId=1) 的價格。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-136">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="7c3b0-137">認可之交易中第一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-137">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="7c3b0-138">在第二個執行緒中，請在變數中取得 product(ProductId=1) 和存放區的價格。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-138">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="7c3b0-139">在第二個執行緒中，更新的 product(ProductId=1) 價格 product(ProductId=2) 的價格。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-139">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="7c3b0-140">認可之交易中第二個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-140">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="7c3b0-141">現在的價格值 (ProductId = 1 且 ProductId = 2) 會與原始價格的 Product(ProductId=2) 為相同。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-141">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="7c3b0-142">快照集交易，執行緒會以下列順序：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-142">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="7c3b0-143">在第一個執行緒中，取得 product(ProductId=2) 和存放區的價格在變數中;</span><span class="sxs-lookup"><span data-stu-id="7c3b0-143">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="7c3b0-144">在第一個執行緒，更新的 product(ProductId=2) 價格 product(ProductId=1) 的價格。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-144">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="7c3b0-145">在第二個執行緒中，取得 product(ProductId=1) 的價格從快照集並將儲存在變數中。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-145">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="7c3b0-146">在第二個執行緒中，更新的 product(ProductId=1) 價格 product(ProductId=2) 的價格。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-146">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="7c3b0-147">認可之交易中第二個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-147">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="7c3b0-148">認可之交易中第一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-148">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="7c3b0-149">現在 exchange 產品的價格 (ProductId = 1 且 ProductId = 2)。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-149">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="7c3b0-150">DirtyReadThreads 類別示範特定交易是否允許中途讀取行為。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-150">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="7c3b0-151">如果交易允許行為，執行緒會以下列順序：</span><span class="sxs-lookup"><span data-stu-id="7c3b0-151">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="7c3b0-152">在第一個執行緒，開始交易並加入數量 value(ProductId=1)。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-152">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="7c3b0-153">在第二個執行緒中，讀取數量值，並再次新增的值。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-153">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="7c3b0-154">認可之交易中第二個執行緒。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-154">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="7c3b0-155">在第一個執行緒上回復交易。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-155">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="7c3b0-156">如果交易允許行為，將兩次新增數量值。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-156">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="7c3b0-157">這個程式碼範例的 C# 和 Visual Basic 專案都位於[開發人員程式碼範例](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4)。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-157">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberSignature Language="F#" Value="Chaos = 16" Usage="System.Data.IsolationLevel.Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-158">無法覆寫來自隔離程度更深之交易的暫止變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-158">The pending changes from more highly isolated transactions cannot be overwritten.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberSignature Language="F#" Value="ReadCommitted = 4096" Usage="System.Data.IsolationLevel.ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-159">當正在讀取資料來避免 Dirty 讀取時，會使用共用鎖定，但是在異動結束之前，資料可以變更，這將會產生非重複讀取或虛設資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-159">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberSignature Language="F#" Value="ReadUncommitted = 256" Usage="System.Data.IsolationLevel.ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-160">可以進行 Dirty 讀取，這表示未發出共用鎖定，並且沒有生效的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-160">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberSignature Language="F#" Value="RepeatableRead = 65536" Usage="System.Data.IsolationLevel.RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-161">鎖定是加諸於查詢中使用的所有資料，以防止其他使用者更新資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-161">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span>
          </span>
          <span data-ttu-id="7c3b0-162">防止非重複讀取，但是仍然可能造成虛設資料列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-162">Prevents non-repeatable reads but phantom rows are still possible.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberSignature Language="F#" Value="Serializable = 1048576" Usage="System.Data.IsolationLevel.Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-163">範圍鎖定會置於 <see cref="T:System.Data.DataSet" /> 上，以免其他使用者在異動完成前將資料列更新或插入至資料集中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-163">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberSignature Language="F#" Value="Snapshot = 16777216" Usage="System.Data.IsolationLevel.Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-164">在其他應用程式正在修改相同資料時，儲存應用程式可以讀取的資料版本，藉此減少封鎖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-164">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span>
          </span>
          <span data-ttu-id="7c3b0-165">指出即使重新查詢，您也無法從某個異動看到在其他異動中所產生的變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-165">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberSignature Language="F#" Value="Unspecified = -1" Usage="System.Data.IsolationLevel.Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c3b0-166">使用與指定不同的隔離等級，但無法判斷該等級。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c3b0-166">A different isolation level than the one specified is being used, but the level cannot be determined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c3b0-167">使用時<xref:System.Data.Odbc.OdbcTransaction>，如果您未設定<xref:System.Data.IsolationLevel>或您設定<xref:System.Data.IsolationLevel>到`Unspecified`，根據取決於驅動程式所使用的隔離等級執行的交易。</span><span class="sxs-lookup"><span data-stu-id="7c3b0-167">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>