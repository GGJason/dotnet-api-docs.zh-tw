<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c379d60a4885e86c9f4b5402912c49f4801096e8" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37669441" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定義 <see cref="T:System.Data.DataTable" /> 類別的擴充方法。 <see cref="T:System.Data.DataTableExtensions" /> 為靜態類別。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="table">來源 <see cref="T:System.Data.DataTable" />，已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 是從其中建立。</param>
        <summary>建立並傳回已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</summary>
        <returns>已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 啟用資料繫結案例[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]以及您可以從建立具型別或不具型別的<xref:System.Data.DataTable>，提供該資料表的預設檢視。 在您已經從 <xref:System.Data.DataView> 中建立 <xref:System.Data.DataTable> 之後，就可以針對它設定篩選和排序。 <xref:System.Data.DataView>然後會繫結至 UI 控制項，例如<xref:System.Windows.Forms.DataGrid>或<xref:System.Windows.Forms.DataGridView>，提供簡單資料繫結模型。  
  
 如需詳細資訊和範例，請參閱 <<c0> [ 建立 DataView 物件](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataView>從 SalesOrderDetail 資料表，並將它設定為資料來源<xref:System.Windows.Forms.BindingSource>物件，它會作為 proxy<xref:System.Windows.Forms.DataGridView>控制項：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
        <param name="source">來源 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查詢，已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 是從其中建立。</param>
        <summary>建立並傳回已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件，表示 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查詢。</summary>
        <returns>已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 可讓資料繫結案例，如[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]以及您可以從建立[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]查詢。 <xref:System.Data.DataView>代表查詢本身，而不是查詢頂端的檢視。 新建立<xref:System.Data.DataView>推斷篩選和排序從建立查詢的資訊。 <xref:System.Data.DataView>然後會繫結至 UI 控制項，例如<xref:System.Windows.Forms.DataGrid>或<xref:System.Windows.Forms.DataGridView>，提供簡單的資料繫結模型。  
  
 參數`T`輸入參數的`source`只能為類型<xref:System.Data.DataRow>或型別衍生自<xref:System.Data.DataRow>。  
  
 下列查詢運算子，僅支援在查詢中用來建立<xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 如需詳細資訊和範例，請參閱 <<c0> [ 建立 DataView 物件](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataView>的線上訂單資訊，請依 總金額：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">要成為可列舉的來源 <see cref="T:System.Data.DataTable" />。</param>
        <summary>傳回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。 這個物件可以在 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 運算式或方法查詢中使用。</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 實作的資料來源上的查詢運作<xref:System.Collections.Generic.IEnumerable%601>介面或<xref:System.Linq.IQueryable>介面。  <xref:System.Data.DataTable>類別未實作其中一個介面，因此您必須呼叫<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法，以使用<xref:System.Data.DataTable>中的來源`From`子句[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查詢。 您也可以如取得自訂的網域特定運算子<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>，藉由傳回<xref:System.Collections.Generic.IEnumerable%601>物件。  
  
 所傳回的可列舉物件<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法永久繫結至<xref:System.Data.DataTable>產生它。 多次呼叫<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法會傳回多個獨立的可查詢物件的所有繫結至來源<xref:System.Data.DataTable>。  
  
   
  
## Examples  
 在下列範例中，`DisplayProducts`方法會接收 DataTable，其中包含名為 DataColumn `ProductName`，會擷取`ProductName`值，然後會列印值。  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根據輸入 <see cref="T:System.Data.DataTable" /> 物件，傳回包含 <see cref="T:System.Data.DataRow" /> 物件複本的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
        <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <summary>根據輸入 <see cref="T:System.Data.DataTable" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />) 傳回包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複本的 <see cref="T:System.Data.DataRow" />。</summary>
        <returns><see cref="T:System.Data.DataTable" />，包含當做 <see cref="T:System.Data.DataRow" /> 物件型別的輸入序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 參數`T`輸入參數的`source`只能為類型<xref:System.Data.DataRow>或型別衍生自<xref:System.Data.DataRow>。  
  
 輸入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>來源，不僅查詢透過<xref:System.Data.DataTable>。 請注意，是否來源序列是查詢，請呼叫這個運算子會強制立即執行。 列舉來源序列可能也會導致擲回的例外狀況。  
  
 目的地資料表的結構描述為基礎的第一個結構描述<xref:System.Data.DataRow>來源序列中的資料列。 資料表中繼資料取自<xref:System.Data.DataRow>中繼資料和資料表值的資料行值<xref:System.Data.DataRow>。 型別的<xref:System.Data.DataTable>，不會保留類型。 傳送資料和結構描述，但產生的輸出資料表的資料列不會的具型別<xref:System.Data.DataRow>型別。 <xref:System.Data.DataRow.RowState%2A>並<xref:System.Data.DataRow.RowError%2A>屬性不會保留在從來源複製期間<xref:System.Data.DataRow>所傳回<xref:System.Data.DataTable>。  
  
 當**null**參考或值為 null 的型別**null**位於來源<xref:System.Data.DataRow>，這個方法會取代目的地中的值<xref:System.Data.DataTable>值為<xref:System.DBNull.Value>。  
  
 產生的方法所傳回的資料表有預設的資料表名稱。 如果您想要命名<xref:System.Data.DataTable>，將其附加至<xref:System.Data.DataSet>，或執行任何其他<xref:System.Data.DataTable>特定作業，您必須這樣做之後已建立並傳回的資料表。  
  
 如需詳細資訊，請參閱 <<c0> [ 建立 DataTable 從查詢](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
   
  
## Examples  
 下列範例在 2001 年 8 月 8 日之後, 會查詢 SalesOrderHeader 資料表的訂單，並使用<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>方法用來建立<xref:System.Data.DataTable>從該查詢。 接著，<xref:System.Data.DataTable> 便繫結至 <xref:System.Windows.Forms.BindingSource>，而它會當做 <xref:System.Windows.Forms.DataGridView> 的 Proxy。  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，而且無法建立新的資料表。</exception>
        <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。  
  
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。  
  
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
        <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目的地 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">指定 <see cref="T:System.Data.LoadOption" /> 載入選項的 <see cref="T:System.Data.DataTable" /> 列舉型別。</param>
        <summary>根據輸入 <see cref="T:System.Data.DataRow" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataTable" />)，將 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複製到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 參數`T`輸入參數的`source`只能為類型<xref:System.Data.DataRow>，或為型別衍生自<xref:System.Data.DataRow>。  
  
 輸入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>來源，不僅查詢透過<xref:System.Data.DataTable>。 請注意，是否來源序列是查詢，請呼叫這個運算子會強制立即執行。 列舉來源序列可能也會導致擲回的例外狀況。  
  
 目的地資料表的結構描述為基礎的第一個結構描述<xref:System.Data.DataRow>來源序列中的資料列。 資料表中繼資料取自<xref:System.Data.DataRow>中繼資料和資料表值的資料行值<xref:System.Data.DataRow>。 型別的<xref:System.Data.DataTable>，不會保留類型。 傳送資料和結構描述，但產生的輸出資料表的資料列不會的具型別<xref:System.Data.DataRow>型別。 <xref:System.Data.DataRow.RowState%2A>並<xref:System.Data.DataRow.RowError%2A>屬性不會保留在從來源複製期間<xref:System.Data.DataRow>所傳回<xref:System.Data.DataTable>。  
  
 當**null**參考或值為 null 的型別**null**位於來源<xref:System.Data.DataRow>，這個方法會取代目的地中的值<xref:System.Data.DataTable>值為<xref:System.DBNull.Value>。  
  
 產生的方法所傳回的資料表有預設的資料表名稱。 如果您想要命名<xref:System.Data.DataTable>，將其附加至<xref:System.Data.DataSet>，或執行任何其他<xref:System.Data.DataTable>特定作業，您必須這樣做之後已建立並傳回的資料表。  
  
 如需詳細資訊，請參閱 <<c0> [ 建立 DataTable 從查詢](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">已複製的 <see cref="T:System.Data.DataRow" /> 物件不適合目的 <see cref="T:System.Data.DataTable" /> 的結構描述。</exception>
        <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，或者目的 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。  
  
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。  
  
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
        <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目的地 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">指定 <see cref="T:System.Data.LoadOption" /> 載入選項的 <see cref="T:System.Data.DataTable" /> 列舉型別。</param>
        <param name="errorHandler"><see cref="T:System.Data.FillErrorEventHandler" /> 委派，表示會處理錯誤的方法。</param>
        <summary>根據輸入 <see cref="T:System.Data.DataRow" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataTable" />)，將 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複製到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 參數`T`輸入參數的`source`只能為類型<xref:System.Data.DataRow>，或為型別衍生自<xref:System.Data.DataRow>。  
  
 輸入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>來源，不僅查詢透過<xref:System.Data.DataTable>。 請注意，是否來源序列是查詢，請呼叫這個運算子會強制立即執行。 列舉來源序列可能也會導致擲回的例外狀況。  
  
 目的地資料表的結構描述為基礎的第一個結構描述<xref:System.Data.DataRow>來源序列中的資料列。 資料表中繼資料取自<xref:System.Data.DataRow>中繼資料和資料表值的資料行值<xref:System.Data.DataRow>。 型別的<xref:System.Data.DataTable>，不會保留類型。 傳送資料和結構描述，但產生的輸出資料表的資料列不會的具型別<xref:System.Data.DataRow>型別。 <xref:System.Data.DataRow.RowState%2A>並<xref:System.Data.DataRow.RowError%2A>屬性不會保留在從來源複製期間<xref:System.Data.DataRow>所傳回<xref:System.Data.DataTable>。  
  
 當**null**參考或值為 null 的型別**null**位於來源<xref:System.Data.DataRow>，這個方法會取代目的地中的值<xref:System.Data.DataTable>值為<xref:System.DBNull.Value>。  
  
 產生的方法所傳回的資料表有預設的資料表名稱。 如果您想要命名<xref:System.Data.DataTable>，將其附加至<xref:System.Data.DataSet>，或執行任何其他<xref:System.Data.DataTable>特定作業，您必須這樣做之後已建立並傳回的資料表。  
  
 如果發生例外狀況期間的資料列複製到目標資料表，例如條件約束例外狀況`errorHandler`呼叫委派。 A<xref:System.Data.FillErrorEventArgs>傳遞至`errorHandler`委派具有下列值：  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A>屬性設定為 來源資料的複本。  
  
-   <xref:System.Data.FillErrorEventArgs.DataTable%2A>屬性設為目標<xref:System.Data.DataTable>。  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A>屬性設定為 已攔截的例外狀況。  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A>委派呼叫傳回之後，屬性唯讀。 如果<xref:System.Data.FillErrorEventArgs.Continue%2A>屬性是`true`、 列舉和載入資料的資料表來源順序會繼續。 如果<xref:System.Data.FillErrorEventArgs.Continue%2A>屬性是`false`，原始的例外狀況會擲回從<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>方法。  
  
 如需詳細資訊，請參閱 <<c0> [ 建立 DataTable 從查詢](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">已複製的 <see cref="T:System.Data.DataRow" /> 物件不適合目的 <see cref="T:System.Data.DataTable" /> 的結構描述。</exception>
        <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，或者目的 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。  
  
-或- 
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。  
  
-或- 
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>