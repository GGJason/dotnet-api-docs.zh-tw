<Type Name="DataTable" FullName="System.Data.DataTable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae2d2ca49781b6fbea2101bb4f63426c09bee1b1" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33685186" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataTable extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTable" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTable&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTable : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TableName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示記憶體中資料的一個資料表。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable>是 ADO.NET 文件庫中的核心物件。 其他物件使用<xref:System.Data.DataTable>包含<xref:System.Data.DataSet>和<xref:System.Data.DataView>。  
  
 當存取<xref:System.Data.DataTable>物件，請注意，它們是有條件地區分大小寫。 例如，如果一個<xref:System.Data.DataTable>名為"mydatatable"和另一個名為"Mydatatable 」，用來搜尋的其中一個資料表的字串會視為區分大小寫。 不過，如果"mydatatable 」 存在，"Mydatatable"並不會搜尋字串會視為為不區分大小寫。 A<xref:System.Data.DataSet>可以包含兩個<xref:System.Data.DataTable>具有相同的物件<xref:System.Data.DataTable.TableName%2A>屬性值，但不同<xref:System.Data.DataTable.Namespace%2A>屬性值。 如需有關使用<xref:System.Data.DataTable>物件，請參閱[建立 DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)。  
  
 如果您要建立<xref:System.Data.DataTable>以程式設計的方式，您必須先定義其結構描述加<xref:System.Data.DataColumn>物件加入至<xref:System.Data.DataColumnCollection>(透過存取<xref:System.Data.DataTable.Columns%2A>屬性)。 如需有關加入<xref:System.Data.DataColumn>物件，請參閱[新增資料行加入至 DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)。  
  
 若要將資料列加入<xref:System.Data.DataTable>，您必須先使用<xref:System.Data.DataTable.NewRow%2A>方法以傳回新<xref:System.Data.DataRow>物件。 <xref:System.Data.DataTable.NewRow%2A>方法傳回的結構描述資料列<xref:System.Data.DataTable>，因為它由資料表的定義<xref:System.Data.DataColumnCollection>。 最大數目的資料列<xref:System.Data.DataTable>可以存放區是 16,777,216。 如需詳細資訊，請參閱[將資料加入至 DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)。  
  
 <xref:System.Data.DataTable>也包含一組<xref:System.Data.Constraint>物件，可以用來確保資料的完整性。 如需詳細資訊，請參閱[DataTable 條件約束](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)。  
  
 有許多<xref:System.Data.DataTable>可用來判斷對資料表進行變更時的事件。 其中包括 <xref:System.Data.DataTable.RowChanged>、<xref:System.Data.DataTable.RowChanging>、<xref:System.Data.DataTable.RowDeleting> 和 <xref:System.Data.DataTable.RowDeleted>。 如需有關可以搭配使用的事件<xref:System.Data.DataTable>，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
 執行個體時<xref:System.Data.DataTable>建立時，某些屬性設為初始值的讀取/寫入。 如需這些值的清單，請參閱<xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType>建構函式的主題。  
  
> [!NOTE]
>  <xref:System.Data.DataSet>和<xref:System.Data.DataTable>物件繼承自<xref:System.ComponentModel.MarshalByValueComponent>，並支援<xref:System.Runtime.Serialization.ISerializable>適用於.NET Framework 遠端處理的介面。 這些是唯一適用於.NET Framework 遠端處理，您可以使用的 ADO.NET 物件。  
  
   
  
## Examples  
 下列範例會建立兩個<xref:System.Data.DataTable>物件和一個<xref:System.Data.DataRelation>物件，並加入新的物件，以<xref:System.Data.DataSet>。 資料表會再顯示在<xref:System.Windows.Forms.DataGridView>控制項。  
  
 [!code-csharp[Classic WebData DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable Example/VB/source.vb#1)]  
  
 這個範例示範如何手動建立 DataTable，使用特定的結構描述定義：  
  
-   建立多個 Datatable 並定義初始的資料行。  
  
-   建立資料表條件約束。  
  
-   插入值，並顯示資料表。  
  
-   建立運算式資料行，並顯示資料表。  
  
 此程式碼範例使用 C# 和 Visual Basic 專案可以找到上[開發人員程式碼範例](https://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914)。  
  
 [!code-csharp[Classic WebData DataTable Example2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/classic webdata datatable example2/cs/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/classic webdata datatable example2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此類型是安全多執行緒的讀取作業。 您必須同步處理任何寫入作業。</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>不使用引數來初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構函式設定的所有屬性的初始值<xref:System.Data.DataTable>物件。 下表顯示屬性和其預設值。 執行個體時<xref:System.Data.DataTable>會建立下列屬性會設為初始值的讀取/寫入。  
  
|屬性|預設值|  
|--------------|-------------------|  
|**CaseSensitive**|與父系相同<xref:System.Data.DataSet>，如果屬於其中一個。 否則為 `false`。|  
|**DisplayExpression**|空字串 ("")|  
|**地區設定**|與父系相同<xref:System.Data.DataSet>物件的<xref:System.Globalization.CultureInfo>(傳回<xref:System.Data.DataSet.Locale%2A>屬性); 如果沒有父代存在時，預設值是目前的系統<xref:System.Globalization.CultureInfo>。|  
|**MinimumCapacity**|50 個資料列。|  
  
 您可以變更這些屬性，透過呼叫另一個屬性的值。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Data.DataTable>與<xref:System.Data.DataColumn>和<xref:System.Data.DataRow>，並顯示在<xref:System.Windows.Forms.DataGridView>控制項。  
  
 [!code-csharp[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable(System::String ^ tableName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">要提供資料表的名稱。 如果 <c>tableName</c> 是 <see langword="null" /> 或空字串，則會在新增至 <see cref="T:System.Data.DataTableCollection" /> 時提供預設名稱。</param>
        <summary>使用指定的資料表名稱，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>並顯示在<xref:System.Windows.Forms.DataGridView>控制項。  
  
 [!code-csharp[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataTable(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">序列化或還原序列化物件所需的資料。</param>
        <param name="context">指定的序列化資料流的來源和目的端。</param>
        <summary>使用 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項實作<xref:System.Data.DataTable>建構函式是為了<xref:System.Runtime.Serialization.ISerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName, string tableNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName, string tableNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableName As String, tableNamespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable(System::String ^ tableName, System::String ^ tableNamespace);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="tableNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">要提供資料表的名稱。 如果 <c>tableName</c> 是 <see langword="null" /> 或空字串，則會在新增至 <see cref="T:System.Data.DataTableCollection" /> 時提供預設名稱。</param>
        <param name="tableNamespace">儲存於 <see langword="DataTable" /> 中資料之 XML 表示的命名空間。</param>
        <summary>使用指定的資料表名稱和命名空間，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>認可自前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來對這個資料表所做的所有變更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Data.DataTable.AcceptChanges%2A>呼叫時，任何<xref:System.Data.DataRow>順利結束編輯模式中的物件的編輯。 <xref:System.Data.DataRowState>也會變更： 所有`Added`和`Modified`資料列會變成`Unchanged`，和`Deleted`會移除資料列。  
  
 <xref:System.Data.DataTable.AcceptChanges%2A>方法通常會在呼叫<xref:System.Data.DataTable>您嘗試更新之後<xref:System.Data.DataSet>使用<xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會測試每個資料表的錯誤。 如果資料表的錯誤可以調解 （藉由將它傳遞至未定義函式），<xref:System.Data.DataTable.AcceptChanges%2A>呼叫，否則<xref:System.Data.DataTable.RejectChanges%2A>呼叫。  
  
 [!code-csharp[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開始對表單或另一個元件所使用的 <see cref="T:System.Data.DataTable" /> 進行初始化作業。 初始化發生於執行階段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio.NET 設計環境會使用這個方法來開始初始化用於表單或為另一個元件所使用的元件。 <xref:System.Data.DataTable.EndInit%2A>方法結束初始化。 使用<xref:System.Data.DataTable.BeginInit%2A>和<xref:System.Data.DataTable.EndInit%2A>方法可防止控制項完全初始化之前使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadData">
      <MemberSignature Language="C#" Value="public void BeginLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginLoadData" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginLoadData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginLoadData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>載入資料時關閉告知、索引維護和條件約束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.BeginLoadData%2A>搭配<xref:System.Data.DataTable.LoadDataRow%2A>和<xref:System.Data.DataTable.EndLoadData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示字串比較在資料表中是否區分大小寫。</summary>
        <value>
          如果比較區分大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值會設定為父 <see cref="T:System.Data.DataSet" /> 物件的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 屬性，或者，如果 <see cref="T:System.Data.DataTable" /> 是獨自建立而無關 <see cref="T:System.Data.DataSet" /> 時，則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.CaseSensitive%2A>屬性會影響排序、 搜尋和篩選中的字串比較。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Data.DataTable.Select%2A>方法兩次 on <xref:System.Data.DataTable>。 第一次，<xref:System.Data.DataTable.CaseSensitive%2A>屬性設定為`false`，第二個要`true`。  
  
 [!code-csharp[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.Select" />
      </Docs>
    </Member>
    <Member MemberName="ChildRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ChildRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ChildRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ChildRelations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildRelations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ ChildRelations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為這個 <see cref="T:System.Data.DataTable" /> 取得子關聯的集合。</summary>
        <value>
          <see cref="T:System.Data.DataRelationCollection" />，其中包含資料表的子關聯。 如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Data.DataRelation>定義兩個資料表之間的關聯性。 一般而言，透過的單一欄位所包含相同的資料連結兩個資料表。 例如，資料表，其中包含地址資料可能包含代表國家 （地區） 的程式碼的單一欄位。 包含國家/地區資料的第二個資料表會有的單一欄位所包含的程式碼識別國家/地區，而且這段程式碼插入至第一個資料表中的對應欄位。 A <xref:System.Data.DataRelation>，然後，包含至少四項資訊: (1) 的第一個資料表的名稱、 （2） 中的第一個資料表的資料行名稱、 （3） 的第二個資料表，名稱和 （4） 的第二個資料表中的資料行名稱。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.ChildRelations%2A>屬性來傳回每個子系<xref:System.Data.DataRelation>中<xref:System.Data.DataTable>。 每個關聯性則做為引數用於<xref:System.Data.DataRow.GetChildRows%2A>方法<xref:System.Data.DataRow>傳回陣列的資料列。 接著會列印每個資料列中的資料行的值。  
  
 [!code-csharp[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.ParentRelations" />
        <altmember cref="M:System.Data.DataRow.GetParentRows(System.String)" />
        <altmember cref="M:System.Data.DataRow.GetChildRows(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除所有資料的 <see cref="T:System.Data.DataTable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會移除所有的資料表中的所有資料列。 如果資料表有會導致子資料列失去任何強制執行的子關聯，會產生例外狀況。  
  
 如果<xref:System.Data.DataSet>繫結至<xref:System.Xml.XmlDataDocument>，則呼叫<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>或<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>引發<xref:System.NotSupportedException>。 若要避免這種情況下，會周遊一次移除一個每個資料列的每個資料表。 當您使用<xref:System.Data.DataTable.NewRow%2A>若要建立新的資料列，資料列必須處理才能呼叫<xref:System.Data.DataTable.Clear%2A>。  
  
   
  
## Examples  
 下列範例會清除所有資料的資料表。  
  
 [!code-csharp[Classic WebData DataTable.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataTable ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複製 (Clone) <see cref="T:System.Data.DataTable" /> 的結構，包括所有 <see cref="T:System.Data.DataTable" /> 結構描述和條件約束。</summary>
        <returns>新的 <see cref="T:System.Data.DataTable" />，具有與目前 <see cref="T:System.Data.DataTable" /> 相同的結構描述。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果衍生的類別，複製也會屬於相同的衍生類別。  
  
 複製會建立新<xref:System.Data.DataTable>以相同的結構與原始<xref:System.Data.DataTable>，但不會複製任何資料 (新<xref:System.Data.DataTable>不會包含任何`DataRows`)。 若要將結構和資料複製到新<xref:System.Data.DataTable>，使用<xref:System.Data.DataTable.Copy%2A>。  
  
   
  
## Examples  
 下列範例示範如何執行 DataTable.Clone 之後更新的結構和目的地資料表的條件約束。 ClonedDataTable 類別將會傳回目的地資料表，並包含所有更新的事件。 之後再製，來源資料表中的結構變更並不會反映在目的地資料表中。 具體而言，此範例將會：  
  
-   更新的來源資料表中的資料行的變更。  
  
-   更新來源資料表中 UniqueConstraint 的變更。  
  
-   更新 ForeignKeyConstraint 來源資料表中的變更。  
  
 此程式碼範例使用 C# 和 Visual Basic 專案可以找到上[開發人員程式碼範例](https://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable)。  
  
```csharp  
using System;  
using System.Linq;  
using System.Data;  
using System.ComponentModel;  
  
class Program {  
   static void Main(string[] args) {  
      DataTable courses = NewCourseDataTable();  
      Console.WriteLine("This is the source table:");  
      WriteDataTable(courses);  
  
      ClonedDataTable clonedResult = new ClonedDataTable(courses);  
      DataTable clonedCourses = clonedResult.DestinationTable;  
      Console.WriteLine("This is the destination table:");  
      WriteDataTable(clonedCourses);  
  
      // Add the events of updating column collection into the source table.  
      clonedResult.UpdateAddedColumn();  
      clonedResult.UpdateDeletedColumn();  
      // Add a DataColumn in source table.  
      DataColumn columnCreidts = new DataColumn("Credits", typeof(Int32));  
      courses.Columns.Add(columnCreidts);  
      Console.WriteLine("After add a column in source table, it's the result in the destination:");  
      WriteDataTable(clonedCourses);  
  
      // Add the event of updating UniqueConstraint into the source table.  
      clonedResult.UpdateUniqueConstraint();  
  
      // Add the unique constraint in source table.  
      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns["CourseId"]);  
      courses.Constraints.Add(uniqueConstraint);  
  
      Console.WriteLine(@"If we add the unique constraint in source table and then insert the duplicate   
rows into the destination table, we will get the following error:");  
      InsertDuplicateData(clonedCourses);  
      Console.WriteLine();  
  
      // Add the event of updating ForeignKeyConstraint into the source table.  
      clonedResult.UpdateForeignKeyConstraint();  
  
      // Add the ForeignKeyConstraint into the source table.  
      DataTable deparments = NewDeparmentDataTable();  
      DataSet dataset = new DataSet();  
  
      dataset.Tables.Add(courses);  
      dataset.Tables.Add(clonedCourses);  
      dataset.Tables.Add(deparments);  
  
      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns["DepartmentId"], courses.Columns["DepartmentId"]);  
      courses.Constraints.Add(foreignKey);  
  
      Console.WriteLine(@"If we add the foreign key constraint in source table and then insert a row   
without the parent  into the destination table, we will get the following error:");  
      InsertNoParentRow(clonedCourses);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static private DataTable NewCourseDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("CourseId", typeof(String)),  
                                      new DataColumn("CourseName",typeof(String)),                                        
                                      new DataColumn("DepartmentId", typeof(Int32))  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add("C1045", "Calculus", 7);  
      newTable.Rows.Add("C1061", "Physics", 1);  
      newTable.Rows.Add("C2021", "Composition", 2);  
      newTable.Rows.Add("C2042", "Literature", 2);  
  
      return newTable;  
   }  
  
   static private DataTable NewDeparmentDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("DepartmentId", typeof(Int32)),  
                                      new DataColumn("Name",typeof(String)),  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add(1, "Engineering");  
      newTable.Rows.Add(2, "English");  
      newTable.Rows.Add(4, "Economics");  
      newTable.Rows.Add(7, "Mathematics");  
  
      return newTable;  
   }  
  
   static private void WriteDataTable(DataTable table) {  
      if (table == null)  
         return;  
  
      foreach (DataColumn column in table.Columns) {  
         Console.Write("{0,-15}", column.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         for (int i = 0; i < table.Columns.Count; i++)  
            Console.Write("{0,-15}", row[i].ToString());  
         Console.WriteLine();  
      }  
  
      Console.WriteLine();  
   }  
  
   static private void InsertDuplicateData(DataTable table) {  
      try {  
         table.Rows.Add("C1045", "Calculus", 7);  
         table.Rows.Add("C1045", "Calculus", 7);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
  
   private static void InsertNoParentRow(DataTable table) {  
      try {  
         table.Rows.Add("C1061", "Physics", 11);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
}  
  
public class ClonedDataTable {  
   private DataTable sourceTable;  
   private DataTable destinationTable;  
  
   public ClonedDataTable(DataTable source) {  
      sourceTable = source;  
      // set the cloned result  
      destinationTable = sourceTable.Clone();  
   }  
  
   public void UpdateAddedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  
   }  
  
   public void UpdateDeletedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  
   }  
  
   public void UpdateUniqueConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  
   }  
  
   public void UpdateForeignKeyConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  
   }  
  
   // After the source table adds a column, the method will add the same column in the destination table.  
   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null) {  
            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  
  
            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  
               destinationTable.Columns.Add(newColumn);  
         }  
      }  
   }  
  
   // After the source table deletes a column, the method will delete the same column in the destination table.  
   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Remove) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null)  
            if (destinationTable.Columns.Contains(column.ColumnName))  
               destinationTable.Columns.Remove(column.ColumnName);  
      }  
   }  
  
   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        
   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      UniqueConstraint constraint = e.Element as UniqueConstraint;  
  
      if (constraint == null)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         Boolean isPrimaryKey = constraint.IsPrimaryKey;  
  
         // Get the columns used in new constraint from the destiantion table.  
         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // After the source table changes the ForeignKeyConstraint, this method changes    
   // the same ForeignKeyConstraint in the destination table.  
   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  
  
      if (constraint == null)  
         return;  
  
      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  
      if (sourceTable.DataSet != destinationTable.DataSet)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         DataColumn[] parentColumns = constraint.RelatedColumns;  
  
         // Get the columns used in new constraint from the destination table.  
         for (int i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  
         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  
         newConstraint.DeleteRule = constraint.DeleteRule;  
         newConstraint.UpdateRule = constraint.UpdateRule;  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // return the destination table.  
   public DataTable DestinationTable {  
      get { return destinationTable; }  
   }  
}  
```  
  
 這個範例示範如何修改 DataTable 中的資料，並更新資料來源。  
  
 首先，建立資料庫：  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 您現在可以編譯及執行範例。 [如何修改資料表與資料來源的更新中的資料](https://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4)具有此範例的 Visual Basic 和 C# 專案。  
  
```csharp  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
   string MySchoolConnectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True";  
  
      // Get Data  
      String selectString =  
       @"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  
               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] ";  
  
      DataSet dataSet = new DataSet();  
      DataTable course = dataSet.Tables.Add("Course");  
      DataTable department = dataSet.Tables.Add("Department");  
  
      Console.WriteLine("Get data from database:");  
      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  
      Console.WriteLine();  
  
      // Use DataTable Edits to edit the data  
      String updateString =  
              @"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;";  
  
      course.ColumnChanged += OnColumnChanged;  
  
      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  
      ChangeCredits(course, course.Rows[0], -1);  
      ChangeCredits(course, course.Rows[1], 11);  
  
      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"),  
          new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits"));  
      Console.WriteLine("Only the Credits of second row is changed.");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      // Delete and Remove from DataTable  
      // Create the foreign key constraint, and set the DeleteRule with Cascade.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      String deleteString = @"Delete From [dbo].[Course] Where [CourseID]=@CourseID;";  
  
      department.Rows[0].Delete();  
      Console.WriteLine("If One row in Department table is deleted, the related rows in Course table will also be deleted.");  
      Console.WriteLine("Department DataTable:");  
      ShowDataTable(department);  
      Console.WriteLine();  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
      // Update the delete operation  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
      Console.WriteLine("After delete operation:");  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      course.Rows.RemoveAt(0);  
      Console.WriteLine("Now we remove one row from Course:");  
      ShowDataTable(course);  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
   }  
  
   // Use SqlDataAdapter to get data.  
   private static void GetDataTables(String connectionString, String selectString,  
       DataSet dataSet, params DataTable[] tables) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.SelectCommand = new SqlCommand(selectString);  
         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Fill(0, 0, tables);  
  
         foreach (DataTable table in dataSet.Tables) {  
            Console.WriteLine("Data in {0}:", table.TableName);  
            ShowDataTable(table);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use SqlDataAdapter to update the updata operation.  
   private static void UpdateDataTables(String connectionString, String updateString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.UpdateCommand = new SqlCommand(updateString);  
         adapter.UpdateCommand.Parameters.AddRange(parameters);  
         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use SqlDataAdapter to update delete operation.  
   private static void DeleteDataTables(String connectionString, String deleteString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.DeleteCommand = new SqlCommand(deleteString);  
         adapter.DeleteCommand.Parameters.AddRange(parameters);  
         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use DataTable Edits to modify the data.  
   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  
      row.BeginEdit();  
      Console.WriteLine("We change row {0}", table.Rows.IndexOf(row));  
      row["Credits"] = credits;  
      row.EndEdit();  
   }  
  
   // The method will be invoked when the value in DataTable is changed.  
   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  
      Int32 credits = 0;  
      // If Credits is changed and the value is negative, we'll cancel the edit.  
      if ((args.Column.ColumnName == "Credits") &&  
          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  
         Console.WriteLine("The value of Credits is invalid. Edit canceled.");  
         args.Row.CancelEdit();  
      }  
   }  
  
   // Display the column and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "RowState");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               else  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col]);  
               else  
                  Console.Write("{0,-14}", row[col]);  
            }  
         }  
         Console.WriteLine("{0,-14}", row.RowState);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.Copy" />
      </Docs>
    </Member>
    <Member MemberName="ColumnChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnChanged As DataColumnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataColumnChangeEventHandler ^ ColumnChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在值已經為 <see cref="T:System.Data.DataColumn" /> 中指定的 <see cref="T:System.Data.DataRow" /> 變更之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataColumnChangeEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ColumnChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnChanging As DataColumnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataColumnChangeEventHandler ^ ColumnChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在值正在為 <see cref="T:System.Data.DataColumn" /> 中指定的 <see cref="T:System.Data.DataRow" /> 變更之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Data.DataColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumnCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As DataColumnCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataColumnCollection ^ Columns { System::Data::DataColumnCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得屬於這個資料表的資料行集合。</summary>
        <value>
          <see cref="T:System.Data.DataColumnCollection" />，其中包含資料表的 <see cref="T:System.Data.DataColumn" /> 物件集合。 如果沒有任何 <see cref="T:System.Data.DataColumn" /> 物件存在，則會傳回空的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumnCollection>藉由定義每個資料行的資料類型會決定資料表的結構描述。  
  
   
  
## Examples  
 下列範例會列印每個值的資料表使用中的每個資料列<xref:System.Data.DataTable.Columns%2A>屬性。  
  
 [!code-csharp[Classic WebData DataTable.Columns Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Columns Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compute">
      <MemberSignature Language="C#" Value="public object Compute (string expression, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Compute(string expression, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Compute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compute (expression As String, filter As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Compute(System::String ^ expression, System::String ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">要計算的運算式。</param>
        <param name="filter">要限制在運算式中評估之資料列的篩選條件。</param>
        <summary>計算在傳遞篩選準則的目前資料列上的指定運算式。</summary>
        <returns>
          <see cref="T:System.Object" />，設定為計算的結果。 若運算式評估為 Null，傳回值會是 <see cref="F:System.DBNull.Value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `expression`參數需要的彙總函式。 例如，以下是合法的運算式：  
  
 `Count(Quantity)`  
  
 但是，此運算式不是：  
  
 `Sum (Quantity * UnitPrice)`  
  
 如果您必須執行兩個或多個資料行上的作業，您應該建立<xref:System.Data.DataColumn>，將其<xref:System.Data.DataColumn.Expression%2A>屬性設為適當的運算式，並使用產生的資料行上的彙總運算式。 在此情況下，給定<xref:System.Data.DataColumn>具有名稱"總計 」，而<xref:System.Data.DataColumn.Expression%2A>屬性設定為這個：  
  
 `"Quantity * UnitPrice"`  
  
 運算式引數<xref:System.Data.DataTable.Compute%2A>方法將會是這樣：  
  
 `Sum(total)`  
  
 第二個參數， `filter`，判斷哪些資料列會在運算式中使用。 例如，如果資料表包含名為"colDate 」 的日期資料行，您可能會限制使用下列運算式的資料列：  
  
 `colDate > 1/1/99 AND colDate < 17/1/99`  
  
 如需建立兩個參數的運算式的規則，請參閱<xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例會加總稱為 「 總計 」，其識別碼是五個銷售人員的資料行的值。  
  
 [!code-csharp[Classic WebData DataTable.Compute Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Compute Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constraints">
      <MemberSignature Language="C#" Value="public System.Data.ConstraintCollection Constraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ConstraintCollection Constraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Constraints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Constraints As ConstraintCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ConstraintCollection ^ Constraints { System::Data::ConstraintCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConstraintCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個資料表所維護的條件約束 (Constraint) 集合。</summary>
        <value>
          <see cref="T:System.Data.ConstraintCollection" />，其中包含資料表的 <see cref="T:System.Data.Constraint" /> 物件集合。 如果沒有任何 <see cref="T:System.Data.Constraint" /> 物件存在，則會傳回空的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Data.ForeignKeyConstraint>限制資料行 （或資料行） 中的值已刪除或更新時執行的動作。 這類條件約束被用來搭配主索引鍵資料行。 在兩個資料表之間的父子式關聯性，從父資料表中刪除某個值可能會影響子資料列以下列方式之一。  
  
-   子資料列也可以刪除 （串聯式動作）。  
  
-   子資料行 （或資料行） 中的值可以設為 null 值。  
  
-   子資料行 （或資料行） 中的值可以設定為預設值。  
  
-   可以產生例外狀況。  
  
 A<xref:System.Data.UniqueConstraint>時嘗試設定中的非唯一值的主索引鍵的值會變成作用中。  
  
   
  
## Examples  
 下列範例會將<xref:System.Data.ForeignKeyConstraint>至條件約束的集合。  
  
 [!code-csharp[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複製這個 <see cref="T:System.Data.DataTable" /> 的結構和資料。</summary>
        <returns>新的 <see cref="T:System.Data.DataTable" />，具有與這個 <see cref="T:System.Data.DataTable" /> 相同的結構 (資料表結構描述和條件約束) 和資料。  
  
 如果這些類別已形成子類別，則複本也會屬於相同的子類別。  
  
 <see cref="M:System.Data.DataTable.Copy" /> 會建立與原始 <see cref="T:System.Data.DataTable" /> 具有相同結構和資料的新 <see cref="T:System.Data.DataTable" />。 若要將結構複製到新的 <see cref="T:System.Data.DataTable" />，但是不複製資料，請使用 <see cref="M:System.Data.DataTable.Clone" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.Copy%2A>方法來建立一份原始<xref:System.Data.DataTable>。 命名空間名稱不會保留，如果它繼承自父代<xref:System.Data.DataTable>或<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DataTable.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataView.ToTable" />
        <altmember cref="M:System.Data.DataTable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回對應於這個 <see cref="T:System.Data.DataTableReader" /> 之中資料的 <see cref="T:System.Data.DataTable" />。</summary>
        <returns>
          <see cref="T:System.Data.DataTableReader" />，其中包含一個結果集，對應於來源 <see cref="T:System.Data.DataTable" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列的主控台應用程式會建立 <xref:System.Data.DataTable> 執行個體 (Instance)。 此範例接著會將傳遞填<xref:System.Data.DataTable>要呼叫的程序<xref:System.Data.DataTable.CreateDataReader%2A>方法，這個方法會逐一查看包含在結果<xref:System.Data.DataTableReader>。  
  
 [!code-csharp[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/VB/source.vb#1)]  
  
 此範例會在主控台視窗中顯示以下輸出：  
  
 `1 Mary`  
  
 `2 Andy`  
  
 `3 Peter`  
  
 `4 Russ`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.CreateDataReader" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateInstance () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ CreateInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Data.DataTable" /> 的新執行個體。</summary>
        <returns>新的運算式。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DataSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSet As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSet ^ DataSet { System::Data::DataSet ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個資料表所屬的 <see cref="T:System.Data.DataSet" />。</summary>
        <value>這個資料表所屬的 <see cref="T:System.Data.DataSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控制項已資料繫結到<xref:System.Data.DataTable>，與資料表所屬<xref:System.Data.DataSet>，您可以取得<xref:System.Data.DataSet>透過這個屬性。  
  
   
  
## Examples  
 下列範例會傳回父系<xref:System.Data.DataSet>透過給定資料表的<xref:System.Data.DataTable.DataSet%2A>屬性。  
  
 [!code-csharp[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultView">
      <MemberSignature Language="C#" Value="public System.Data.DataView DefaultView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataView DefaultView" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DefaultView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultView As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataView ^ DefaultView { System::Data::DataView ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可能含有已篩選檢視表或游標位置的資料表自訂檢視表。</summary>
        <value>與 <see cref="T:System.Data.DataView" /> 關聯的 <see cref="T:System.Data.DataTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.DefaultView%2A>屬性會傳回<xref:System.Data.DataView>可用來排序、 篩選和搜尋<xref:System.Data.DataTable>。  
  
   
  
## Examples  
 下列範例會設定屬性的<xref:System.Data.DataTable>物件的<xref:System.Data.DataView>透過<xref:System.Data.DataTable.DefaultView%2A>屬性。 此範例也示範的繫結<xref:System.Windows.Forms.DataGridView>控制權傳輸至<xref:System.Data.DataTable>名為 「 供應 」 包含資料行名為"CompanyName"。  
  
 [!code-csharp[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayExpression">
      <MemberSignature Language="C#" Value="public string DisplayExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayExpression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DisplayExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定會傳回用來在使用者介面中表示這個資料表之值的運算式。 <see langword="DisplayExpression" /> 屬性可讓您將這個資料表的名稱顯示在使用者介面中。</summary>
        <value>一個顯示字串。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結束對表單或另一個元件所使用的 <see cref="T:System.Data.DataTable" /> 進行初始化作業。 初始化發生於執行階段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio.NET 設計環境會使用這個方法來結束初始化用於表單或為另一個元件所使用的元件。 <xref:System.Data.DataTable.BeginInit%2A>方法初始化開始。 使用<xref:System.Data.DataTable.BeginInit%2A>和<xref:System.Data.DataTable.EndInit%2A>方法可防止控制項完全初始化之前使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadData">
      <MemberSignature Language="C#" Value="public void EndLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndLoadData" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndLoadData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndLoadData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>載入資料後開啟告知、索引維護和條件約束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.EndLoadData%2A>搭配<xref:System.Data.DataTable.LoadDataRow%2A>和<xref:System.Data.DataTable.BeginLoadData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得自訂使用者資訊的集合。</summary>
        <value>
          <see cref="T:System.Data.PropertyCollection" />，含有自訂使用者資訊。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.ExtendedProperties%2A>若要將自訂資訊加入<xref:System.Data.DataTable>。 新增資訊與`Add`方法。 擷取資訊`Item`方法。  
  
 擴充的屬性的類型必須是<xref:System.String>。 不是 String 類型的屬性不會保存時<xref:System.Data.DataTable>寫入為 XML。  
  
   
  
## Examples  
 下列範例會加入至時間戳記值<xref:System.Data.DataTable>透過<xref:System.Data.DataTable.ExtendedProperties%2A>屬性。  
  
 [!code-csharp[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="fInitInProgress">
      <MemberSignature Language="C#" Value="protected internal bool fInitInProgress;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly bool fInitInProgress" />
      <MemberSignature Language="DocId" Value="F:System.Data.DataTable.fInitInProgress" />
      <MemberSignature Language="VB.NET" Value="Protected Friend fInitInProgress As Boolean " />
      <MemberSignature Language="C++ CLI" Value="protected public: bool fInitInProgress;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>檢查初始化是否仍在進行中。 初始化發生於執行階段。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得 <see cref="T:System.Data.DataTable" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來所做的所有變更) 的複本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得 <see cref="T:System.Data.DataTable" /> (包含從載入它或前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來所做的所有變更) 的複本。</summary>
        <returns>這個 <see cref="T:System.Data.DataTable" /> 所產生變更的複本，如果沒有變更，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立新<xref:System.Data.DataSet>包含的所有資料列的原始副本<xref:System.Data.DataSet>具有暫止的變更。 關聯性條件約束會造成其他不變的資料列新增至新<xref:System.Data.DataSet>如果變更的資料列包含對應至外部索引鍵中的變更資料列的主索引鍵。 方法會傳回`null`(`Nothing`在 Visual Basic 中) 是否有任何資料列在原始<xref:System.Data.DataSet>與暫止的變更。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</param>
        <summary>取得 <see cref="T:System.Data.DataTable" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來所做的所有變更) 的複本 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</summary>
        <returns>篩選過的 <see cref="T:System.Data.DataTable" /> 複本，可以在其上執行動作，稍後會在 <see cref="T:System.Data.DataTable" /> 中使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 合併回來。 如果找不到所需的 <see cref="T:System.Data.DataRowState" /> 的資料列，則方法會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.GetChanges%2A>方法用來產生第二個<xref:System.Data.DataTable>導入原始的物件，其中包含所做的變更。 使用`rowStates`引數以指定的變更應該包含新的物件類型。  
  
 關聯性條件約束可能會導致要包含的不變的父資料列。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataTableSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataTableSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataTableSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體。</param>
        <summary>這個方法會傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體，此執行個體包含描述 Web 服務之 <see cref="T:System.Data.DataTable" /> 的 Web 服務描述語言 (WSDL)。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrors">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetErrors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetErrors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetErrors () As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ GetErrors();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得包含錯誤之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
        <returns>具有錯誤之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的清單<xref:System.Data.DataRow>物件<xref:System.Data.DataRow.RowError%2A>設定。 例如，呼叫時可能會發生錯誤<xref:System.Data.Common.DataAdapter.Update%2A>與<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>設**true**。 不會叫用<xref:System.Data.DataTable.AcceptChanges%2A>上<xref:System.Data.DataTable>直到您解決所有錯誤，然後再重新送出<xref:System.Data.DataSet>更新。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.GetErrors%2A>方法傳回的陣列<xref:System.Data.DataRow>有錯誤的物件。  
  
 [!code-csharp[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.HasErrors" />
        <altmember cref="P:System.Data.DataRow.RowError" />
        <altmember cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，其保留與 <see cref="T:System.Data.DataTable" /> 關聯的序列化資料。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，其包含與 <see cref="T:System.Data.DataTable" /> 關聯之序列化資料流的來源和目的端。</param>
        <summary>以序列化 <see cref="T:System.Data.DataTable" /> 所需的資料，填入序列化資訊物件。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 參數是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowType">
      <MemberSignature Language="C#" Value="protected virtual Type GetRowType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetRowType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetRowType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetRowType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ GetRowType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得資料列型別。</summary>
        <returns>傳回 <see cref="T:System.Data.DataRow" /> 的型別。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchema () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出資料表所屬 <see cref="T:System.Data.DataSet" /> 的任何資料表中的任何資料列是否存在錯誤。</summary>
        <value>
          <see langword="true" />，表示存在錯誤；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當使用者處理一組資料中包含<xref:System.Data.DataTable>，如果變更會導致某些驗證失敗，您可以將標記每項變更，發生錯誤。 您可以標記整個<xref:System.Data.DataRow>錯誤訊息使用<xref:System.Data.DataRow.RowError%2A>屬性。 您也可以具有的資料列的每個資料行上設定錯誤<xref:System.Data.DataRow.SetColumnError%2A>方法。  
  
 更新的資料來源之前<xref:System.Data.DataSet>，我們建議您先呼叫<xref:System.Data.DataSet.GetChanges%2A>方法在目標上的<xref:System.Data.DataSet>。 方法會產生<xref:System.Data.DataSet>，包含只對原始變更。 在傳送之前<xref:System.Data.DataSet>若要更新的資料來源，請檢查<xref:System.Data.DataTable.HasErrors%2A>的每個資料表，請參閱是否任何錯誤已經附加到資料列或資料列中的資料行的屬性。  
  
 之後，重新調整每個錯誤，清除 錯誤與<xref:System.Data.DataRow.ClearErrors%2A>方法`DataRow`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.HasErrors%2A>屬性來檢查資料表是否包含錯誤。  
  
 [!code-csharp[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.GetErrors" />
      </Docs>
    </Member>
    <Member MemberName="ImportRow">
      <MemberSignature Language="C#" Value="public void ImportRow (System.Data.DataRow row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ImportRow(class System.Data.DataRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ImportRow(System.Data.DataRow)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportRow (row As DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportRow(System::Data::DataRow ^ row);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="row">要匯入的 <see cref="T:System.Data.DataRow" />。</param>
        <summary>將 <see cref="T:System.Data.DataRow" /> 複製至 <see cref="T:System.Data.DataTable" />，保留任何屬性設定，以及原始值和目前值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.DataTable.NewRow%2A>加入資料列，以使用現有的資料表結構描述的資料表，但使用預設值的資料列，並設定<xref:System.Data.DataRowState>至`Detached`。 呼叫<xref:System.Data.DataTable.ImportRow%2A>會保留現有<xref:System.Data.DataRowState>以及其他資料列中的值。 如果`DataRow`傳遞參數處於已卸離狀態，則會忽略它，並不擲回任何例外狀況。  
  
 新的資料列會加入至資料表的結尾。  
  
 如果新的資料列違反條件約束不會加入到資料表。  
  
 您可以取得 DataTable.Rows.IndexOf DataTable.Rows.Find 以及新的資料列索引。 如需詳細資訊，請參閱 <xref:System.Data.DataRowCollection> 和 <xref:System.Data.DataTable.Rows%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="T:System.Data.DataTable" /> 初始化之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱<xref:System.Data.DataTable.IsInitialized%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Data.DataTable" /> 是否已初始化。</summary>
        <value>
          <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的狀態<xref:System.Data.DataTable>時它由所建構，例如 Visual Studio。 <xref:System.Data.DataTable.BeginInit%2A>方法將它設定為`false`和<xref:System.Data.DataTable.EndInit%2A>方法將它設定為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。 如果 <see langword="DataTable" /> 已經包含資料列，從資料來源傳入的資料會與現有的資料列合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`方法可以用數種常見案例，所有中心從指定的資料來源取得資料，並將它加入至目前的資料容器中 (在此情況下， `DataTable`)。 下列案例說明標準用法`DataTable`，描述其更新，以及合併行為。  
  
 A`DataTable`同步處理或單一主要資料來源的更新。 `DataTable`追蹤變更，允許與主要資料來源的同步處理。 此外，`DataTable`可以接受一或多個次要資料來源的增量資料。 `DataTable`不負責追蹤變更，才能允許與次要資料來源的同步處理。  
  
 指定這些兩個假設性的資料來源，使用者很可能需要下列行為的其中一個：  
  
-   初始化`DataTable`從主要資料來源。 在此案例中，使用者想要初始化空`DataTable`與主要資料來源中的值。 稍後，使用者想要將變更傳送回主要資料來源。  
  
-   保留變更，並重新同步處理主要資料來源。 在此案例中，使用者想要採取`DataTable`區域分布在前述案例中，執行增量同步處理與主要資料來源，保留中所做的修改`DataTable`。  
  
-   累加式的資料摘要，從次要資料來源。 在此案例中，使用者想要合併一或多個次要資料來源的變更，並將變更傳播回到主要資料來源。  
  
 `Load`方法可讓所有這些情況。 所有多載這個方法可讓您指定的負載選項參數，表示方式已在資料列<xref:System.Data.DataTable>結合正在載入的資料列。 （不允許您指定的行為的多載會使用預設載入選項）。下表描述所提供的三種負載選項<xref:System.Data.LoadOption>列舉型別。 在每個案例中，說明當內送資料中的資料列的主索引鍵符合現有的資料列的主索引鍵表示的行為。  
  
|載入選項|描述|  
|-----------------|-----------------|  
|`PreserveChanges` (預設值)|內送資料列的值，更新資料列的原始版本。|  
|`OverwriteChanges`|使用內送資料列的值更新資料列的目前和原始版本。|  
|`Upsert`|內送資料列的值，更新資料列的目前版本。|  
  
 一般情況下，`PreserveChanges`和`OverwriteChanges`選項適用於使用者要同步處理的案例`DataSet`及它的主要資料來源的變更。 `Upsert`選項可以協助彙總一或多個次要資料來源的變更。  
  
   
  
## Examples  
 下列範例會示範數個呼叫的相關問題的<xref:System.Data.DataTable.Load%2A>方法。 首先，此範例著重於結構描述問題，包括 推斷的結構描述從載入<xref:System.Data.IDataReader>，和不相容的結構描述和結構描述具有遺失或其他資料行，接著處理。 此範例接著著重於資料問題，包括處理各種載入選項。  
  
> [!NOTE]
>  這個範例示範如何使用其中一個多載版本`Load`。 如需可能會提供其他範例，請參閱個別的多載的主題。  
  
 [!code-csharp[DataWorks DataTableLoad#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.Load" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" />，提供結果集。</param>
        <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。 如果 <see cref="T:System.Data.DataTable" /> 已經包含資料列，從資料來源傳入的資料會與現有的資料列合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>方法會使用第一個結果集從載入<xref:System.Data.IDataReader>，並成功完成之後，讀取器的位置設下一個結果集，如果有的話。 轉換資料時`Load`方法會使用相同的轉換規則<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>方法。  
  
 <xref:System.Data.DataTable.Load%2A>方法必須考慮到三個特定的問題時載入的資料從<xref:System.Data.IDataReader>執行個體： 結構描述、 資料和事件的作業。 當使用結構描述，<xref:System.Data.DataTable.Load%2A>方法可能會遇到的條件下, 表中所述。 結構描述作業進行的所有匯入的結果集，即使沒有包含資料。  
  
|條件|行為|  
|---------------|--------------|  
|<xref:System.Data.DataTable>沒有結構描述。|<xref:System.Data.DataTable.Load%2A>方法會根據來自匯入的結果集的結構描述<xref:System.Data.IDataReader>。|  
|<xref:System.Data.DataTable>有結構描述，但它與載入結構描述不相容。|<xref:System.Data.DataTable.Load%2A>方法會擲回對應至特定錯誤的嘗試將資料載入至不相容的結構描述時，就會發生例外狀況。|  
|結構描述相容，但已載入的結果集結構描述包含資料行不存在於<xref:System.Data.DataTable>。|<xref:System.Data.DataTable.Load%2A>方法加入額外的資料行，以`DataTable`的結構描述。 在方法擲回例外狀況，如果對應中的資料行<xref:System.Data.DataTable>和載入的結果集不相容的值。 方法也會擷取結果集和所有加入的資料行的條件約束資訊。 此條件約束資訊的主索引鍵條件約束的情況下，除了用只有當目前<xref:System.Data.DataTable>不包含任何資料行，在載入作業的開頭。|  
|結構描述相容，但載入的結果集結構描述包含較少的資料行，比`DataTable`。|如果遺漏資料行已定義了預設值或資料行的資料類型可為 null，<xref:System.Data.DataTable.Load%2A>方法可讓資料列来加入，以取代預設值或`null`遺漏資料行的值。 如果沒有預設值或`null`可用，然後在`Load`方法會擲回的例外狀況。 如果未不提供任何特定的預設值，`Load`方法會使用`null`值設為隱含的預設值。|  
  
 考慮的行為之前，先`Load`方法資料作業，請考慮每個資料列內<xref:System.Data.DataTable>會維護目前值和每個資料行的原始值。 這些值可能會相等，或如果已變更過填滿的資料列中的資料可能會不同`DataTable`。  如需詳細資訊，請參閱[資料列狀態和資料列版本](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)。  
  
 這個版本的`Load`方法會嘗試保留每個資料列，並完整留下的原始值中的目前值。 (如果您想更細微地控制行為的內送資料，請參閱<xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType>。)如果現有的資料列和內送資料列包含對應的主索引鍵值，則會使用目前的資料列狀態值處理的資料列，否則它會被視為新的資料列。  
  
 事件作業<xref:System.Data.DataTable.RowChanging>之前變更每個資料列時，就會發生事件和<xref:System.Data.DataTable.RowChanged>變更每個資料列之後，就會發生事件。 在每個案例中，<xref:System.Data.DataRowChangeEventArgs.Action%2A>屬性<xref:System.Data.DataRowChangeEventArgs>傳遞至事件處理常式的執行個體包含與事件相關聯的特定動作的相關資訊。 此動作的值而定的資料列之前載入作業的狀態。 在每個案例中，這兩個事件發生，而且動作是針對每個相同。 此動作可套用到每個資料列，目前或原始版本或兩者，根據目前的資料列狀態。  
  
 下表顯示行為`Load`方法。 （標示為"（不會出現） 」） 的最後一個資料列描述不符合任何現有的資料列的內送資料列的行為。 此資料表中的每個資料格會描述資料列中欄位的目前和原始值連同<xref:System.Data.DataRowState>後的值為`Load`方法已完成。 方法在此情況下，不允許您指定 [載入] 選項，並使用預設值， `PreserveChanges`。  
  
|現有 Getchanges|值之後`Load`方法和事件動作|  
|---------------------------|--------------------------------------------------|  
|已加入|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
|修改時間|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
|Deleted|目前 =\<無法使用 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<刪除 ><br /><br /> RowAction = ChangeOriginal|  
|Unchanged|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
|（不會出現）|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
  
 中的值<xref:System.Data.DataColumn>可以藉由使用屬性這類限制<xref:System.Data.DataColumn.ReadOnly%2A>和<xref:System.Data.DataColumn.AutoIncrement%2A>。 `Load`方法會處理這類資料行與資料行的屬性所定義的行為一致的方式。 讀取的唯一條件約束上<xref:System.Data.DataColumn>只適用於記憶體中發生的變更。 `Load`方法的覆寫唯讀資料行值，如有需要。  
  
 若要判斷哪個版本的主索引鍵欄位，要用來比較目前的資料列，與內送的資料列，`Load`如果存在的話，方法會使用原始版本的資料列中的主索引鍵值。 否則，`Load`方法會使用目前版本的主索引鍵欄位。  
  
   
  
## Examples  
 下列範例會示範數個呼叫的相關問題的<xref:System.Data.DataTable.Load%2A>方法。 首先，此範例著重於結構描述問題，包括 推斷的結構描述從載入<xref:System.Data.IDataReader>，和不相容的結構描述和結構描述具有遺失或其他資料行，接著處理。 此範例會接著呼叫`Load`方法，顯示資料之前和之後載入作業。  
  
 [!code-csharp[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</param>
        <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，指出已經在 <see cref="T:System.Data.DataTable" /> 中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
        <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。 如果 <see langword="DataTable" /> 已經包含資料列，從資料來源傳入的資料會根據 <paramref name="loadOption" /> 參數的值，與現有的資料列合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`方法會使用第一個結果集從載入<xref:System.Data.IDataReader>，並成功完成之後，讀取器的位置設下一個結果集，如果有的話。 轉換資料時`Load`方法會使用相同的轉換規則<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法。  
  
 `Load`方法必須考慮到三個特定的問題時載入的資料從<xref:System.Data.IDataReader>執行個體： 結構描述、 資料和事件的作業。 當使用結構描述，`Load`方法可能會遇到的條件下, 表中所述。 結構描述作業進行的所有匯入的結果集，即使沒有包含資料。  
  
|條件|行為|  
|---------------|--------------|  
|<xref:System.Data.DataTable>沒有結構描述。|`Load`方法會根據來自匯入的結果集的結構描述<xref:System.Data.IDataReader>。|  
|<xref:System.Data.DataTable>有結構描述，但它與載入結構描述不相容。|`Load`方法會擲回對應至特定錯誤的嘗試將資料載入至不相容的結構描述時，就會發生例外狀況。|  
|結構描述相容，但已載入的結果集結構描述包含資料行不存在於中`DataTable`。|`Load`方法加入額外的資料行，以`DataTable`的結構描述。 在方法擲回例外狀況，如果對應中的資料行<xref:System.Data.DataTable>和載入的結果集不相容的值。 方法也會擷取結果集和所有加入的資料行的條件約束資訊。 此條件約束資訊的主索引鍵條件約束的情況下，除了用只有當目前<xref:System.Data.DataTable>不包含任何資料行，在載入作業的開頭。|  
|結構描述相容，但載入的結果集結構描述包含較少的資料行，比`DataTable`。|如果遺漏資料行已定義了預設值或資料行的資料類型可為 null，`Load`方法可讓資料列来加入，以取代遺失的資料行的預設值或 null 值。 如果可以使用沒有預設值或 null，則`Load`方法會擲回的例外狀況。 如果未不提供任何特定的預設值，`Load`方法會使用隱含的預設值為 null 的值。|  
  
 考慮的行為之前，先`Load`方法資料作業，請考慮每個資料列內<xref:System.Data.DataTable>會維護目前值和每個資料行的原始值。 這些值可能會相等，或如果已變更過填滿的資料列中的資料可能會不同`DataTable`。 請參閱[資料列狀態和資料列版本](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)如需詳細資訊。  
  
 在這個方法呼叫中，指定<xref:System.Data.LoadOption>參數會影響連入資料的處理。 Load 方法應如何處理具有相同的主索引鍵為現有的資料列載入資料列？ 它應該修改目前的值、 原始值，或兩者嗎？ 這些問題，以及其他項目，皆受`loadOption`參數。  
  
 如果現有的資料列和內送資料列包含對應的主索引鍵值，則會使用目前的資料列狀態值處理的資料列，否則它會被視為新的資料列。  
  
 事件作業<xref:System.Data.DataTable.RowChanging>之前變更每個資料列時，就會發生事件和<xref:System.Data.DataTable.RowChanged>變更每個資料列之後，就會發生事件。 在每個案例中，<xref:System.Data.DataRowChangeEventArgs.Action%2A>屬性<xref:System.Data.DataRowChangeEventArgs>傳遞至事件處理常式的執行個體包含與事件相關聯的特定動作的相關資訊。 此動作的值會根據的資料列之前載入作業的狀態而有所不同。 在每個案例中，這兩個事件發生，而且動作是針對每個相同。 此動作可套用到每個資料列，目前或原始版本或兩者，根據目前的資料列狀態。  
  
 下表顯示與每個呼叫時，Load 方法的行為`LoadOption`值，然後也會顯示這些值載入的資料列的資料列狀態的互動。 （標示為"（不會出現） 」） 的最後一個資料列描述不符合任何現有的資料列的內送資料列的行為。 此資料表中的每個資料格會描述資料列中欄位的目前和原始值連同<xref:System.Data.DataRowState>後的值為`Load`方法已完成。  
  
|現有 Getchanges|Upsert|OverwriteChanges|PreserveChanges （預設行為）|  
|---------------------------|------------|----------------------|------------------------------------------|  
|已加入|目前 =\<傳入 ><br /><br /> 原始 =-\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
|修改時間|目前 =\<傳入 ><br /><br /> 原始 =\<現有 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
eleted|（負載並不會影響已刪除資料列）<br /><br /> 目前 =--<br /><br /> 原始 =\<現有 ><br /><br /> 狀態 =\<刪除 ><br /><br /> （新的資料列會加入具有下列特性）<br /><br /> 目前 =\<傳入 ><br /><br /> 原始 =\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 新增|復原刪除和<br /><br /> 目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<無法使用 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<刪除 ><br /><br /> RowAction = ChangeOriginal|  
|Unchanged|目前 =\<傳入 ><br /><br /> 原始 =\<現有 ><br /><br /> 如果新的值是現有的值相同則<br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
不會出現）|目前 =\<傳入 ><br /><br /> 原始 =\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 新增|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
  
 中的值<xref:System.Data.DataColumn>可以藉由使用屬性這類限制<xref:System.Data.DataColumn.ReadOnly%2A>和<xref:System.Data.DataColumn.AutoIncrement%2A>。 `Load`方法會處理這類資料行與資料行的屬性所定義的行為一致的方式。 讀取的唯一條件約束上<xref:System.Data.DataColumn>只適用於記憶體中發生的變更。 `Load`方法的覆寫唯讀資料行值，如有需要。  
  
 如果您指定的 OverwriteChanges 或 PreserveChanges 選項呼叫時`Load`方法，則假設由內送資料來自`DataTable`的主要資料來源和資料表會追蹤變更，可以將傳播將變更傳回資料來源。 如果您選取了選項，則會假設資料來自次要資料來源，例如資料由中介層元件，或許更改由使用者所提供的其中一個。 在此情況下，假設是目的是彙總資料一或多個資料來源中`DataTable`，，然後可能將傳播回主要資料來源的資料。 <xref:System.Data.LoadOption>參數用來判斷要用於主索引鍵比較的資料列的特定版本。 下表提供詳細資料。  
  
|載入選項|用於主索引鍵比較的 DataRow 版本|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|原始版本 （如果存在的話），否則目前的版本|  
|`PreserveChanges`|原始版本 （如果存在的話），否則目前的版本|  
|`Upsert`|目前版本 （如果存在的話），否則原始版本|  
  
   
  
## Examples  
 下列範例會示範數個呼叫的相關問題的<xref:System.Data.DataTable.Load%2A>方法。 首先，此範例著重於結構描述問題，包括 推斷的結構描述從載入<xref:System.Data.IDataReader>，和不相容的結構描述和結構描述具有遺失或其他資料行，接著處理。 此範例接著著重於資料問題，包括處理各種載入選項。  
  
 [!code-csharp[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" />，提供結果集。</param>
        <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，指出已經在 <see cref="T:System.Data.DataTable" /> 中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
        <param name="errorHandler">載入資料時發生錯誤，要呼叫的 <see cref="T:System.Data.FillErrorEventHandler" /> 委派。</param>
        <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，以資料來源的值填滿 <see cref="T:System.Data.IDataReader" />，使用錯誤處理委派。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`方法會使用第一個結果集從載入<xref:System.Data.IDataReader>，並成功完成之後，讀取器的位置設下一個結果集，如果有的話。 轉換資料時`Load`方法會使用相同的轉換規則<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>方法。  
  
 `Load`方法必須考慮到三個特定的問題時載入的資料從<xref:System.Data.IDataReader>執行個體： 結構描述、 資料和事件的作業。 當使用結構描述，`Load`方法可能會遇到的條件下, 表中所述。 結構描述作業進行的所有匯入的結果集，即使沒有包含資料。  
  
|條件|行為|  
|---------------|--------------|  
|<xref:System.Data.DataTable>沒有結構描述。|`Load`方法會根據來自匯入的結果集的結構描述<xref:System.Data.IDataReader>。|  
|<xref:System.Data.DataTable>有結構描述，但它與載入結構描述不相容。|`Load`方法會擲回對應至特定錯誤的嘗試將資料載入至不相容的結構描述時，就會發生例外狀況。|  
|結構描述相容，但已載入的結果集結構描述包含資料行不存在於中`DataTable`。|`Load`方法會將額外的資料行至`DataTable`的結構描述。 在方法擲回例外狀況，如果對應中的資料行<xref:System.Data.DataTable>和載入的結果集不相容的值。 方法也會擷取結果集和所有加入的資料行的條件約束資訊。 此條件約束資訊的主索引鍵條件約束的情況下，除了用只有當目前<xref:System.Data.DataTable>不包含任何資料行，在載入作業的開頭。|  
|結構描述相容，但載入的結果集結構描述包含較少的資料行，比`DataTable`。|如果遺漏資料行已定義了預設值或資料行的資料類型可為 null，`Load`方法可讓資料列来加入，以取代遺失的資料行的預設值或 null 值。 如果可以使用沒有預設值或 null，則`Load`方法會擲回的例外狀況。 如果未不提供任何特定的預設值，`Load`方法會使用隱含的預設值為 null 的值。|  
  
 考慮的行為之前，先`Load`方法資料作業，請考慮每個資料列內<xref:System.Data.DataTable>會維護目前值和每個資料行的原始值。 這些值可能會相等，或如果已變更過填滿的資料列中的資料可能會不同`DataTable`。 請參閱[資料列狀態和資料列版本](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)如需詳細資訊。  
  
 在這個方法呼叫中，指定<xref:System.Data.LoadOption>參數會影響連入資料的處理。 Load 方法應如何處理具有相同的主索引鍵為現有的資料列載入資料列？ 它應該修改目前的值、 原始值，或兩者嗎？ 這些問題，以及其他項目，皆受`loadOption`參數。  
  
 如果現有的資料列和內送資料列包含對應的主索引鍵值，則會使用目前的資料列狀態值處理的資料列，否則它會被視為新的資料列。  
  
 事件作業<xref:System.Data.DataTable.RowChanging>之前變更每個資料列時，就會發生事件和<xref:System.Data.DataTable.RowChanged>變更每個資料列之後，就會發生事件。 在每個案例中，<xref:System.Data.DataRowChangeEventArgs.Action%2A>屬性<xref:System.Data.DataRowChangeEventArgs>傳遞至事件處理常式的執行個體包含與事件相關聯的特定動作的相關資訊。 此動作的值會根據的資料列之前載入作業的狀態而有所不同。 在每個案例中，這兩個事件發生，而且動作是針對每個相同。 此動作可套用到每個資料列，目前或原始版本或兩者，根據目前的資料列狀態。  
  
 下表顯示與每個呼叫時，Load 方法的行為`LoadOption`值，然後也會顯示這些值載入的資料列的資料列狀態的互動。 （標示為"（不會出現） 」） 的最後一個資料列描述不符合任何現有的資料列的內送資料列的行為。 此資料表中的每個資料格會描述資料列中欄位的目前和原始值連同<xref:System.Data.DataRowState>後的值為`Load`方法已完成。  
  
|現有 Getchanges|Upsert|OverwriteChanges|PreserveChanges （預設行為）|  
|---------------------------|------------|----------------------|------------------------------------------|  
|已加入|目前 =\<傳入 ><br /><br /> 原始 =-\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
|修改時間|目前 =\<傳入 ><br /><br /> 原始 =\<現有 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<現有 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = ChangeOriginal|  
eleted|（負載並不會影響已刪除資料列）<br /><br /> 目前 =--<br /><br /> 原始 =\<現有 ><br /><br /> 狀態 =\<刪除 ><br /><br /> （新的資料列會加入具有下列特性）<br /><br /> 目前 =\<傳入 ><br /><br /> 原始 =\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 新增|復原刪除和<br /><br /> 目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<無法使用 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<刪除 ><br /><br /> RowAction = ChangeOriginal|  
|Unchanged|目前 =\<傳入 ><br /><br /> 原始 =\<現有 ><br /><br /> 如果新的值是現有的值相同則<br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> 狀態 =\<修改 ><br /><br /> RowAction = 變更|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
不會出現）|目前 =\<傳入 ><br /><br /> 原始 =\<無法使用 ><br /><br /> 狀態 =\<加入 ><br /><br /> RowAction = 新增|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|目前 =\<傳入 ><br /><br /> 原始 =\<傳入 ><br /><br /> 狀態 =\<變更 ><br /><br /> RowAction = ChangeCurrentAndOriginal|  
  
 中的值<xref:System.Data.DataColumn>可以藉由使用屬性這類限制<xref:System.Data.DataColumn.ReadOnly%2A>和<xref:System.Data.DataColumn.AutoIncrement%2A>。 `Load`方法會處理這類資料行與資料行的屬性所定義的行為一致的方式。 讀取的唯一條件約束上<xref:System.Data.DataColumn>只適用於記憶體中發生的變更。 `Load`方法的覆寫唯讀資料行值，如有需要。  
  
 如果您指定的 OverwriteChanges 或 PreserveChanges 選項呼叫時`Load`方法，則假設由內送資料來自`DataTable`的主要資料來源和資料表會追蹤變更，可以將傳播將變更傳回資料來源。 如果您選取了選項，則會假設資料來自次要資料來源，例如資料由中介層元件，或許更改由使用者所提供的其中一個。 在此情況下，假設是目的是彙總資料一或多個資料來源中`DataTable`，，然後可能將傳播回主要資料來源的資料。 <xref:System.Data.LoadOption>參數用來判斷要用於主索引鍵比較的資料列的特定版本。 下表提供詳細資料。  
  
|載入選項|用於主索引鍵比較的 DataRow 版本|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|原始版本 （如果存在的話），否則目前的版本|  
|`PreserveChanges`|原始版本 （如果存在的話），否則目前的版本|  
|`Upsert`|目前版本 （如果存在的話），否則原始版本|  
  
 `errorHandler`參數是<xref:System.Data.FillErrorEventHandler>載入資料時，發生錯誤時呼叫的程序是指的委派。 <xref:System.Data.FillErrorEventArgs>參數傳遞至程序提供可讓您擷取發生的錯誤，目前的資料，資料列的相關資訊的屬性和<xref:System.Data.DataTable>被填入。 使用此委派機制，而不是簡單的 try/catch 區塊，可讓您判斷錯誤處理狀況，並繼續處理，如果您想。 <xref:System.Data.FillErrorEventArgs>參數提供<xref:System.Data.FillErrorEventArgs.Continue%2A>屬性： 將此屬性設定為`true`指出您已處理錯誤，而且想要繼續處理。 將屬性設定為`false`指出您想要停止處理。 請注意，將屬性設`false`導致觸發要擲回例外狀況的問題將程式碼。  
  
   
  
## Examples  
 [!code-csharp[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadDataRow">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>尋找並更新特定資料列。 如果找不到符合的資料列，則使用指定值來建立新的資料列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, bool fAcceptChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadDataRow (values As Object(), fAcceptChanges As Boolean) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ LoadDataRow(cli::array &lt;System::Object ^&gt; ^ values, bool fAcceptChanges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="fAcceptChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="values">用來建立新資料列的值陣列。</param>
        <param name="fAcceptChanges">
          若要接受變更，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>尋找並更新特定資料列。 如果找不到符合的資料列，則使用指定值來建立新的資料列。</summary>
        <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.LoadDataRow%2A>方法會採用值的陣列，並在主索引鍵資料行中尋找相符的值。  
  
 如果資料行有預設值，傳遞 null 值的陣列中要設定該資料行的預設值。 同樣地，如果資料行其<xref:System.Data.DataColumn.AutoIncrement%2A>屬性設為 true，則傳遞 null 值的陣列中要設定自動產生資料列的值。  
  
 如果`fAcceptChanges`參數是`true`或未指定，會加入新的資料，然後<xref:System.Data.DataTable.AcceptChanges%2A>呼叫可接受中的所有變更<xref:System.Data.DataTable>; 如果引數是`false`，新加入的資料列標示為插入，而且會變更現有的資料列都會標示為修改。  
  
 例外狀況，也會發生在其中<xref:System.Data.DataTable.ColumnChanging>或<xref:System.Data.DataTable.RowChanging>事件。 如果發生例外狀況，資料列不會加入至資料表。  
  
 使用<xref:System.Data.DataTable.LoadDataRow%2A>搭配<xref:System.Data.DataTable.BeginLoadData%2A>和<xref:System.Data.DataTable.EndLoadData%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.LoadDataRow%2A>方法，以嘗試尋找一個資料列。 如果找到這類的資料列，這些值可用來建立新的資料列。  
  
 [!code-csharp[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">陣列大於資料表中的資料行數目。</exception>
        <exception cref="T:System.InvalidCastException">數值不符合其個別的資料行型別。</exception>
        <exception cref="T:System.Data.ConstraintException">加入資料列會使條件約束失效。</exception>
        <exception cref="T:System.Data.NoNullAllowedException">嘗試將 Null 置於 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 為 False 的資料行中。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ LoadDataRow(cli::array &lt;System::Object ^&gt; ^ values, System::Data::LoadOption loadOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="values">用來建立新資料列的值陣列。</param>
        <param name="loadOption">用來判斷陣列值如何套用至現有資料列中對應的值。</param>
        <summary>尋找並更新特定資料列。 如果找不到符合的資料列，則使用指定值來建立新的資料列。</summary>
        <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.LoadDataRow%2A>方法會採用值的陣列，並在主索引鍵資料行中尋找相符的值。  
  
 如果資料行有預設值，傳遞 null 值的陣列中要設定該資料行的預設值。 同樣地，如果資料行其<xref:System.Data.DataColumn.AutoIncrement%2A>屬性設為 true，則傳遞 null 值的陣列中要設定自動產生資料列的值。  
  
 值`loadOption`參數用來判斷陣列中的值如何套用至現有的資料列。 例如，如果`loadOption`設為`OverwriteChanges`、`Original`和`Current`每個資料行的值會取代中的內送資料列的值和`RowState`屬性設定為`Unchanged`。  
  
 例外狀況，也會發生在其中<xref:System.Data.DataTable.ColumnChanging>或<xref:System.Data.DataTable.RowChanging>事件。 如果發生例外狀況，資料列不會加入至資料表。  
  
 使用<xref:System.Data.DataTable.LoadDataRow%2A>搭配<xref:System.Data.DataTable.BeginLoadData%2A>和<xref:System.Data.DataTable.EndLoadData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來在資料表中比較字串的地區設定 (Locale) 資訊。</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" />，包含使用者電腦地區設定的資料。 預設值為 <see cref="T:System.Data.DataSet" /> 所屬的 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Data.DataSet.Locale" /> (由 <see cref="T:System.Data.DataTable" /> 屬性傳回)，如果資料表不屬於 <see cref="T:System.Data.DataSet" />，則預設值是目前系統 <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Globalization.CultureInfo>代表特定文化特性或群體軟體喜好設定。  
  
 用於字串比較時<xref:System.Globalization.CultureInfo>會影響比較，排序和篩選。  
  
> [!NOTE]
>  資料行中包含的運算式，<xref:System.StringComparison.InvariantCulture>用。 <xref:System.StringComparison.CurrentCulture>會被忽略。  
  
   
  
## Examples  
 下列範例會設定<xref:System.Globalization.CultureInfo>透過<xref:System.Data.DataTable.Locale%2A>並列印 ISO 語言名稱。  
  
 [!code-csharp[Classic WebData DataTable.Locale Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see cref="T:System.Data.DataTable" /> 合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Merge`方法用來合併兩個<xref:System.Data.DataTable>有大致相似的結構描述的物件。 合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataTable>。 這可讓用戶端應用程式已重新整理<xref:System.Data.DataTable>從資料來源的最新的資料。  
  
 「 合併 」 作業會列入考量，只有原始資料表，以及要合併的資料表。 未受影響或包含子資料表。 如果資料表有一或多個定義為關聯性，一部分的子資料表必須個別合併每一個子資料表。  
  
   
  
## Examples  
 下列主控台應用程式示範的行為`missingSchemaAction`參數<xref:System.Data.DataTable.Merge%2A>方法。 這個範例會建立兩個版本的相同資料表中，修改第二個版本的結構描述。 程式碼會嘗試將第二個資料表合併到第一個。  
  
> [!NOTE]
>  這個範例示範如何使用其中一種多載版本的合併。 如需可能會提供其他範例，請參閱個別的多載的主題。  
  
 [!code-csharp[DataWorks DataTableMergeOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableMergeOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" />，要與目前的 <see cref="T:System.Data.DataTable" /> 合併。</param>
        <summary>將指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see cref="T:System.Data.DataTable" /> 合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Merge 方法用來合併兩個<xref:System.Data.DataTable>有大致相似的結構描述的物件。 合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataTable>。 這可讓用戶端應用程式已重新整理<xref:System.Data.DataTable>從資料來源的最新的資料。  
  
 「 合併 」 作業會列入考量，只有原始資料表，以及要合併的資料表。 未受影響或包含子資料表。 如果資料表有一或多個定義為關聯性，一部分的子資料表必須個別合併每一個子資料表。  
  
 `Merge`方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataTable>。  
  
 當執行合併，現有的資料，在合併之前所做的變更會保留依預設，合併作業期間。 開發人員可以呼叫其中一個其他兩個多載，此方法，並指定 false 值，以修改此行為`preserveChanges`參數。  
  
 在用戶端應用程式，則通常會有單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。 在此案例中，<xref:System.Data.DataTable.GetChanges%2A>首次叫用方法。 方法會傳回第二個<xref:System.Data.DataTable>適合用來驗證和合併。 此第二個<xref:System.Data.DataTable>物件只包含<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataTable>。 這個子集通常比較小，因此更有效率地傳遞回中介層元件。 然後中, 介層元件會透過預存程序，以變更更新原始資料來源。 中介層就可以傳送回其中一個新<xref:System.Data.DataTable>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。 （例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataTable>可以合併至用戶端應用程式的原始<xref:System.Data.DataTable>與<xref:System.Data.DataTable.Merge%2A>方法。  
  
 合併新的來源時<xref:System.Data.DataTable>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`，對應到相同的主索引鍵值的目標資料列。 來源的資料列<xref:System.Data.DataRowState>值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。  
  
   
  
## Examples  
 下列主控台應用程式會建立簡單<xref:System.Data.DataTable>並且將資料加入至資料表。 接著，範例會建立一份資料表，並加入資料列的複本。 最後，此範例會呼叫<xref:System.Data.DataTable.Merge%2A>方法，將合併的第二個資料表中的資料，第一個資料表中的資料。  
  
 [!code-csharp[DataWorks DataTable.Merge#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.Merge#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable, preserveChanges As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="table">
          <see langword="DataTable" />，要與目前的 <see langword="DataTable" /> 合併。</param>
        <param name="preserveChanges">
          若要保留目前 <see langword="DataTable" /> 中的變更，則為 <see langword="true" />；否則為 <see langword="false" />。<see langword="" /></param>
        <summary>合併指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see langword="DataTable" />，指出是否保留目前 <see langword="DataTable" /> 中的變更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Merge 方法用來合併兩個<xref:System.Data.DataTable>有大致相似的結構描述的物件。 合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataTable>。 這可讓用戶端應用程式已重新整理<xref:System.Data.DataTable>從資料來源的最新的資料。  
  
 「 合併 」 作業會列入考量，只有原始資料表，以及要合併的資料表。 未受影響或包含子資料表。 如果資料表有一或多個定義為關聯性，一部分的子資料表必須個別合併每一個子資料表。  
  
 `Merge`方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataTable>。  
  
 除非開發人員會指定為 false 時執行合併，現有的資料，在合併之前所做的變更會保留在合併作業期間`preserveChanges`參數。 如果`preserveChanges`參數設定為`true`，內送值不會覆寫現有的資料列的目前資料列版本中現有的值。 如果`preserveChanges`參數設定為`false`，內送值就會覆寫現有的資料列的目前資料列版本中現有的值。 如需詳細資料列版本的詳細資訊，請參閱[資料列狀態和資料列版本](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)。  
  
 在用戶端應用程式，則通常會有單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。 在此案例中，<xref:System.Data.DataTable.GetChanges%2A>首次叫用方法。 方法會傳回第二個<xref:System.Data.DataTable>適合用來驗證和合併。 此第二個<xref:System.Data.DataTable>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataTable>。 這個子集是容量較小時，因此這個子集更有效率地傳遞回中介層元件。 然後中, 介層元件會透過預存程序，以變更更新原始資料來源。 中介層就可以傳送回其中一個新<xref:System.Data.DataTable>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。 （例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataTable>可以合併至用戶端應用程式的原始<xref:System.Data.DataTable>與<xref:System.Data.DataTable.Merge%2A>方法。  
  
 合併新的來源時<xref:System.Data.DataTable>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。 來源的資料列<xref:System.Data.DataRowState>值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。  
  
   
  
## Examples  
 下列主控台應用程式建立<xref:System.Data.DataTable>包含資料列，修改這些資料列中的資料部分，並嘗試從不同的資料合併<xref:System.Data.DataTable>。 此範例示範不同的行為，如`preserveChanges`參數。  
  
 [!code-csharp[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" />，要與目前的 <see cref="T:System.Data.DataTable" /> 合併。</param>
        <param name="preserveChanges">
          若要保留目前 <see langword="true" /> 中的變更，則為 <see cref="T:System.Data.DataTable" />，否則為 <see langword="false" />。</param>
        <param name="missingSchemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
        <summary>合併指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see langword="DataTable" />，指出是否保留變更，以及如何處理目前在 <see langword="DataTable" /> 中缺少的結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Merge`方法用來合併兩個<xref:System.Data.DataTable>有大致相似的結構描述的物件。 合併用戶端應用程式上通常用來將資料來源的最新的變更合併至現有<xref:System.Data.DataTable>。 這可讓用戶端應用程式已重新整理<xref:System.Data.DataTable>從資料來源的最新的資料。  
  
 「 合併 」 作業會列入考量，只有原始資料表，以及要合併的資料表。 未受影響或包含子資料表。 如果資料表有一或多個定義為關聯性，一部分的子資料表必須個別合併每一個子資料表。  
  
 `Merge`方法通常稱為結尾的一系列程序牽涉到驗證的變更、 重新調整錯誤、 變更，更新資料來源和最後重新整理現有<xref:System.Data.DataTable>。  
  
 除非開發人員會指定為 false 時執行合併，現有的資料，在合併之前所做的變更會保留在合併作業期間`preserveChanges`參數。 如果`preserveChanges`參數設定為`true`，內送值不會覆寫現有的資料列的目前資料列版本中現有的值。 如果`preserveChanges`參數設定為`false`，內送值就會覆寫現有的資料列的目前資料列版本中現有的值。 如需詳細資料列版本的詳細資訊，請參閱[資料列狀態和資料列版本](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)。  
  
 在用戶端應用程式，則通常會有單一按鈕，讓使用者可以按一下收集變更的資料，再將它傳送回中介層元件進行驗證。 在此案例中，<xref:System.Data.DataTable.GetChanges%2A>首次叫用方法。 方法會傳回第二個<xref:System.Data.DataTable>適合用來驗證和合併。 此第二個<xref:System.Data.DataTable>物件只包含<xref:System.Data.DataTable>和<xref:System.Data.DataRow>物件已變更，導致原始子集<xref:System.Data.DataTable>。 這個子集是容量較小時，因此這個子集更有效率地傳遞回中介層元件。 然後中, 介層元件會透過預存程序，以變更更新原始資料來源。 中介層就可以傳送回其中一個新<xref:System.Data.DataTable>（藉由執行原始查詢一次），包含原始資料和資料來源的最新的資料，或可重新傳送的任何變更，已對它從資料來源子集。 （例如，如果資料來源會自動建立唯一的主索引鍵值，這些值可以傳播回用戶端應用程式。）在任一情況下，傳回<xref:System.Data.DataTable>可以合併至用戶端應用程式的原始<xref:System.Data.DataTable>與<xref:System.Data.DataTable.Merge%2A>方法。  
  
 當<xref:System.Data.DataTable.Merge%2A>呼叫方法時，兩個結構描述<xref:System.Data.DataTable>物件進行比較，因為它是可能的結構描述可能已經變更。 例如，在企業對企業案例中，新的資料行可能已新增至 XML 結構描述自動化程序。 如果來源<xref:System.Data.DataTable>包含結構描述項目 (加入<xref:System.Data.DataColumn>物件) 中遺失目標中，結構描述項目可以藉由設定新增至目標`missingSchemaAction`引數`MissingSchemaAction.Add`。 在此情況下，合併<xref:System.Data.DataTable>包含新增結構描述和資料。  
  
 合併結構描述後, 資料會合併。  
  
 合併新的來源時<xref:System.Data.DataTable>到目標，任何來源的資料列與<xref:System.Data.DataRowState>值`Unchanged`， `Modified`，或`Deleted`會對應到相同的主索引鍵值的目標資料列。 來源的資料列<xref:System.Data.DataRowState>值`Added`會對應到新的目標資料列與相同的主索引鍵值為新的來源資料列。  
  
   
  
## Examples  
 下列主控台應用程式示範的行為`missingSchemaAction`參數<xref:System.Data.DataTable.Merge%2A>方法。 這個範例會建立兩個版本的相同資料表中，修改第二個版本的結構描述。 程式碼會嘗試將第二個資料表合併到第一個。  
  
 [!code-csharp[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumCapacity">
      <MemberSignature Language="C#" Value="public int MinimumCapacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.MinimumCapacity" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumCapacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumCapacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(50)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個資料表的初始開始大小。</summary>
        <value>這個資料表的資料列中的初始開始大小。 預設值為 50。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.MinimumCapacity%2A>可讓系統擷取資料之前建立一組適合的資源。 情況下效能很重要，設定這個屬性可以讓效能最佳化。  
  
   
  
## Examples  
 下列範例會設定<xref:System.Data.DataTable.MinimumCapacity%2A>的<xref:System.Data.DataTable>。  
  
 [!code-csharp[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為在 <see cref="T:System.Data.DataTable" /> 中所儲存資料的 XML 表示取得或設定命名空間。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 的命名空間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow NewRow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow NewRow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRow" />
      <MemberSignature Language="VB.NET" Value="Public Function NewRow () As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ NewRow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用與資料表相同的結構描述來建立新的 <see cref="T:System.Data.DataRow" />。</summary>
        <returns>
          <see cref="T:System.Data.DataRow" />，具有與 <see cref="T:System.Data.DataTable" /> 相同的結構描述。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須使用<xref:System.Data.DataTable.NewRow%2A>方法來建立新<xref:System.Data.DataRow>具有相同結構描述物件<xref:System.Data.DataTable>。 在建立之後<xref:System.Data.DataRow>，您可以將它加入至<xref:System.Data.DataRowCollection>，到<xref:System.Data.DataTable>物件的<xref:System.Data.DataTable.Rows%2A>屬性。 當您使用<xref:System.Data.DataTable.NewRow%2A>若要建立新的資料列，資料列必須加入或刪除資料表，才能呼叫<xref:System.Data.DataTable.Clear%2A>。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>，加入兩個<xref:System.Data.DataColumn>物件，可判斷資料表的結構描述，並建立數個新<xref:System.Data.DataRow>物件，使用<xref:System.Data.DataTable.NewRow%2A>方法。 這些<xref:System.Data.DataRow>物件會加入至<xref:System.Data.DataRowCollection>使用<xref:System.Data.DataRowCollection.Add%2A>方法。  
  
 [!code-csharp[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowArray">
      <MemberSignature Language="C#" Value="protected internal System.Data.DataRow[] NewRowArray (int size);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Data.DataRow[] NewRowArray(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowArray(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NewRowArray (size As Integer) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ NewRowArray(int size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">描述陣列大小的 <see cref="T:System.Int32" /> 值。</param>
        <summary>傳回 <see cref="T:System.Data.DataRow" /> 的陣列。</summary>
        <returns>新陣列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowFromBuilder">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataRow NewRowFromBuilder(class System.Data.DataRowBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewRowFromBuilder (builder As DataRowBuilder) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataRow ^ NewRowFromBuilder(System::Data::DataRowBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Data.DataRowBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <see cref="T:System.Data.DataRowBuilder" /> 物件。</param>
        <summary>從現有的資料列建立新的資料列。</summary>
        <returns>
          <see cref="T:System.Data.DataRow" /> 衍生類別。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanged(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnColumnChanged (e As DataColumnChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnColumnChanged(System::Data::DataColumnChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataColumnChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanging">
      <MemberSignature Language="C#" Value="protected internal virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanging(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnColumnChanging (e As DataColumnChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnColumnChanging(System::Data::DataColumnChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataColumnChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">
          <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveColumn">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveColumn (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveColumn(class System.Data.DataColumn column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveColumn (column As DataColumn)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveColumn(System::Data::DataColumn ^ column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">正在移除的 <see cref="T:System.Data.DataColumn" />。</param>
        <summary>向 <see cref="T:System.Data.DataTable" /> 通知 <see cref="T:System.Data.DataColumn" /> 正在移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanged(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowChanged (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowChanged(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanging(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowChanging (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowChanging(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleted(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDeleted (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDeleted(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleting(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDeleting (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDeleting(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTableCleared">
      <MemberSignature Language="C#" Value="protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableCleared(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableCleared (e As DataTableClearEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableCleared(System::Data::DataTableClearEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataTableClearEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發<xref:System.Data.DataTable.TableCleared>事件，所有資料列已成功清除之前之後，立即就會引發<xref:System.Data.DataTable.Clear%2A>方法會傳回至呼叫端的控制項。  
  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableClearing">
      <MemberSignature Language="C#" Value="protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableClearing(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableClearing (e As DataTableClearEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableClearing(System::Data::DataTableClearEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataTableClearEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發<xref:System.Data.DataTable.TableClearing>事件引發之前處理<xref:System.Data.DataTable.Clear%2A>作業開始。  
  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableNewRow">
      <MemberSignature Language="C#" Value="protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableNewRow(class System.Data.DataTableNewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableNewRow (e As DataTableNewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableNewRow(System::Data::DataTableNewRowEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableNewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Data.DataTableNewRowEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發<xref:System.Data.DataTable.TableNewRow>，所引發的事件之後的新<xref:System.Data.DataRow>使用已建立<xref:System.Data.DataTable.NewRow%2A>。  
  
 引發事件會透過委派叫用此事件處理常式。 如需概觀，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ParentRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ParentRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ParentRelations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentRelations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ ParentRelations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為這個 <see cref="T:System.Data.DataTable" /> 取得父關聯的集合。</summary>
        <value>
          <see cref="T:System.Data.DataRelationCollection" />，其中包含資料表的父關聯。 如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Data.DataTable.ParentRelations%2A>屬性來傳回每個父<xref:System.Data.DataRelation>中<xref:System.Data.DataTable>。 每個關聯性則做為引數用於<xref:System.Data.DataRow.GetParentRows%2A>方法<xref:System.Data.DataRow>傳回陣列的資料列。 接著會列印每個資料列中的資料行的值。  
  
 [!code-csharp[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.ChildRelations" />
        <altmember cref="T:System.Data.DataRelation" />
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="P:System.Data.DataSet.Relations" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為在 <see cref="T:System.Data.DataTable" /> 中所儲存資料的 XML 表示取得或設定命名空間。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 的前置詞。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public System.Data.DataColumn[] PrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumn[] PrimaryKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.PrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Property PrimaryKey As DataColumn()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Data::DataColumn ^&gt; ^ PrimaryKey { cli::array &lt;System::Data::DataColumn ^&gt; ^ get(); void set(cli::array &lt;System::Data::DataColumn ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.PrimaryKeyEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.PrimaryKeyTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行的陣列，這些資料行是做為資料表 (Data Table) 之主索引鍵。</summary>
        <value>
          <see cref="T:System.Data.DataColumn" /> 物件的陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資料表的主索引鍵必須是唯一識別資料表中的記錄。 它也可具有兩個或多個資料行所組成的主索引鍵的資料表。 這發生在單一資料行不能包含足夠的唯一值。 例如，"FirstName"和"LastName"的資料行可能包含兩個資料行主索引鍵。 主索引鍵可以組成的多個資料行，因為<xref:System.Data.DataTable.PrimaryKey%2A>屬性所組成的陣列<xref:System.Data.DataColumn>物件。  
  
   
  
## Examples  
 第一個範例示範如何傳回主要索引鍵資料行<xref:System.Data.DataTable>中顯示`DataGrid`。 第二個範例示範如何設定的主索引鍵資料行<xref:System.Data.DataTable>。  
  
 [!code-csharp[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DataException">索引鍵為外部索引鍵。</exception>
        <altmember cref="T:System.Data.DataColumn" />
        <altmember cref="P:System.Data.DataTable.PrimaryKey" />
        <altmember cref="T:System.Data.DataColumnCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 XML 結構描述和資料讀入 <see cref="T:System.Data.DataTable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataTable>從 XML 文件，而<xref:System.Data.DataTable.ReadXmlSchema%2A>方法讀取的結構描述。 若要讀取資料和結構描述，請使用其中一種`ReadXML`包含的多載`XmlReadMode`參數，並將其值設定為`ReadSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.WriteXml%2A>和<xref:System.Data.DataTable.WriteXmlSchema%2A>方法，分別。 要寫入的 XML 資料，或結構描述和資料從`DataTable`，使用`WriteXml`方法。 若要寫入的結構描述，使用`WriteXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.ReadXml" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">衍生自 <see cref="T:System.IO.Stream" /> 的物件</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.Stream" />。</summary>
        <returns>
          <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前<xref:System.Data.DataTable>以及使用所提供的資料載入其下階<xref:System.IO.Stream>。 這個方法的行為是相同的<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>方法，但也在此情況下，資料已載入僅適用於目前的資料表和子系。  
  
 <xref:System.Data.DataTable.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataTable>從 XML 文件，而<xref:System.Data.DataTable.ReadXmlSchema%2A>方法讀取的結構描述。  
  
 請注意，也適用於<xref:System.Data.DataTable.WriteXml%2A>和<xref:System.Data.DataTable.WriteXmlSchema%2A>方法，分別。 要寫入的 XML 資料，或結構描述和資料從`DataTable`，使用`WriteXml`方法。 若要寫入的結構描述，使用`WriteXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。 如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。  
  
 如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。 如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。  
  
> [!NOTE]
>  `DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。 `DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。 當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>包含兩個資料行和十個資料列。 此範例寫入<xref:System.Data.DataTable>結構描述和資料至記憶體資料流，藉由叫用<xref:System.Data.DataTable.WriteXml%2A>方法。 此範例會建立第二個<xref:System.Data.DataTable>呼叫<xref:System.Data.DataTable.ReadXml%2A>来填入結構描述和資料的方法。  
  
 [!code-csharp[DataWorks DataTable.ReadXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.IO.TextReader" />，將用來讀取資料。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.TextReader" />。</summary>
        <returns>
          <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前<xref:System.Data.DataTable>以及使用所提供的資料載入其下階<xref:System.IO.TextReader>。 這個方法的行為是相同的<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>方法，但也在此情況下，資料已載入僅適用於目前的資料表和子系。  
  
 <xref:System.Data.DataTable.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataTable>從 XML 文件，而<xref:System.Data.DataTable.ReadXmlSchema%2A>方法讀取的結構描述。  
  
 請注意，也適用於<xref:System.Data.DataTable.WriteXml%2A>和<xref:System.Data.DataTable.WriteXmlSchema%2A>方法，分別。 要寫入的 XML 資料，或結構描述和資料從`DataTable`，使用`WriteXml`方法。 若要寫入的結構描述，使用`WriteXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。 如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。  
  
 如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。 如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。  
  
> [!NOTE]
>  `DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。 `DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。 當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>包含兩個資料行和十個資料列。 此範例寫入<xref:System.Data.DataTable>結構描述和資料至記憶體資料流，藉由叫用<xref:System.Data.DataTable.WriteXml%2A>方法。 此範例會建立第二個<xref:System.Data.DataTable>呼叫<xref:System.Data.DataTable.ReadXml%2A>来填入結構描述和資料的方法。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要從中讀取資料的檔案名稱。</param>
        <summary>將 XML 結構描述和資料從指定的檔案讀入 <see cref="T:System.Data.DataTable" />。</summary>
        <returns>
          <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前<xref:System.Data.DataTable>命名的檔案中所提供的資料會載入，其下階<xref:System.String>。 這個方法的行為是相同的<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>方法，但也在此情況下，資料已載入僅適用於目前的資料表和子系。  
  
 <xref:System.Data.DataTable.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataTable>從 XML 文件，而<xref:System.Data.DataTable.ReadXmlSchema%2A>方法讀取的結構描述。  
  
 請注意，也適用於<xref:System.Data.DataTable.WriteXml%2A>和<xref:System.Data.DataTable.WriteXmlSchema%2A>方法，分別。 要寫入的 XML 資料，或結構描述和資料從`DataTable`，使用`WriteXml`方法。 若要寫入的結構描述，使用`WriteXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。 如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。  
  
 如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。 如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。  
  
> [!NOTE]
>  `DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。 `DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。 當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。  
  
```csharp  
using System.Data;  
public class A {  
   static void Main(string[] args) {  
      DataTable tabl = new DataTable("mytable");  
      tabl.Columns.Add(new DataColumn("id", typeof(int)));  
      for (int i = 0; i < 10; i++) {  
         DataRow row = tabl.NewRow();  
         row["id"] = i;  
         tabl.Rows.Add(row);  
      }  
      tabl.WriteXml("f.xml", XmlWriteMode.WriteSchema);  
      DataTable newt = new DataTable();  
      newt.ReadXml("f.xml");  
   }  
}  
```  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>包含兩個資料行和十個資料列。 此範例寫入<xref:System.Data.DataTable>結構描述和資料到磁碟。 此範例會建立第二個<xref:System.Data.DataTable>呼叫<xref:System.Data.DataTable.ReadXml%2A>来填入結構描述和資料的方法。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" />，將用來讀取資料。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>
          <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前<xref:System.Data.DataTable>命名的檔案中所提供的資料會載入，其下階<xref:System.Xml.XmlReader>。 這個方法的行為是相同的<xref:System.Data.DataTable.ReadXml%2A>方法，但也在此情況下，資料已載入僅適用於目前的資料表和子系。  
  
 <xref:System.Data.DataTable.ReadXml%2A>方法來讀取資料，或同時提供資料和結構描述<xref:System.Data.DataTable>從 XML 文件，而<xref:System.Data.DataTable.ReadXmlSchema%2A>方法讀取的結構描述。  
  
 請注意，也適用於<xref:System.Data.DataTable.WriteXml%2A>和<xref:System.Data.DataTable.WriteXmlSchema%2A>方法，分別。 要寫入的 XML 資料，或結構描述和資料從`DataTable`，使用`WriteXml`方法。 若要寫入的結構描述，使用`WriteXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 如果指定的內嵌結構描述，則內嵌結構描述用來擴充現有的關聯式結構之前載入的資料。 如果有任何衝突 （例如，相同的資料行定義為不同的資料型別相同資料表中） 會引發例外狀況。  
  
 如果未不指定任何內嵌結構描述，就會推斷，視需要透過關聯式結構擴充根據 XML 文件的結構。 如果無法透過推斷延伸架構才能公開的所有資料，會引發例外狀況。  
  
> [!NOTE]
>  `DataSet`不將 XML 項目關聯與其對應`DataColumn`或`DataTable`合法的 XML 字元，例如 ("_") 在序列化 xml 逸出。 `DataSet`本身只逸出 XML 項目名稱中不合法的 XML 字元，並因此可以只使用相同。 當 XML 項目名稱中的合法字元會逸出時，處理時忽略此元素。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.DataTable>包含兩個資料行和十個資料列。 此範例寫入<xref:System.Data.DataTable>結構描述和資料<xref:System.Xml.XmlReader>。 此範例會建立第二個<xref:System.Data.DataTable>呼叫<xref:System.Data.DataTable.ReadXml%2A>方法將填入結構描述和資料從<xref:System.Xml.XmlReader>執行個體。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 XML 結構描述讀入 <see cref="T:System.Data.DataTable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`ReadXmlSchema`方法建立的結構描述<xref:System.Data.DataTable>。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法。  
  
 XML 結構描述會根據標準的 XSD 進行解譯。  
  
 `ReadXmlSchema`方法一般叫用之前叫用<xref:System.Data.DataTable.ReadXml%2A>方法用來填滿<xref:System.Data.DataTable>。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.ReadXmlSchema" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">用來讀取結構描述的資料流。</param>
        <summary>使用指定的資料流，將 XML 結構描述讀入 <see cref="T:System.Data.DataTable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataTable>。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法。  
  
 XML 結構描述會根據標準的 XSD 進行解譯。  
  
 如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。 將會擲不回任何例外狀況。  
  
 `ReadXmlSchema`方法一般叫用之前叫用<xref:System.Data.DataTable.ReadXml%2A>方法用來填滿<xref:System.Data.DataTable>。  
  
 若要建立巢狀的關聯使用 XML 結構描述，請使用隱含的巢狀項目。 您也可以設定要使用明確的資料行名稱的巢狀的關聯。 必須在對應的 Datatable 加入巢狀關聯中的順序隱含巢狀項目。  
  
   
  
## Examples  
 下列主控台應用程式建立新<xref:System.Data.DataTable>，並將寫入至該資料表的結構描述<xref:System.IO.MemoryStream>。 然後，此範例會建立新<xref:System.Data.DataTable>並讀取其結構描述從已儲存的 XML 結構描述。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.IO.TextReader" />，用來讀取結構描述資訊。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述讀入 <see cref="T:System.IO.TextReader" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataTable>。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法。  
  
 XML 結構描述會根據標準的 XSD 進行解譯。  
  
 如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。 將會擲不回任何例外狀況。  
  
 `ReadXmlSchema`方法一般叫用之前叫用<xref:System.Data.DataTable.ReadXml%2A>方法用來填滿<xref:System.Data.DataTable>。  
  
 若要建立巢狀的關聯使用 XML 結構描述，請使用隱含的巢狀項目。 您也可以重新設定以使用明確的資料行名稱的巢狀關聯性。 必須在對應的 Datatable 加入巢狀關聯中的順序隱含巢狀項目。  
  
   
  
## Examples  
 下列主控台應用程式建立新<xref:System.Data.DataTable>，並將寫入至該資料表的結構描述<xref:System.IO.MemoryStream>。 然後，此範例會建立新<xref:System.Data.DataTable>及讀取其結構描述從已儲存的 XML 結構描述，使用<xref:System.IO.StreamReader>(繼承自<xref:System.IO.TextReader>) 當做其來源。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要從中讀取結構描述資訊的檔案名稱。</param>
        <summary>從指定的檔案，將 XML 結構描述讀入 <see cref="T:System.Data.DataTable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataTable>。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法。  
  
 XML 結構描述會根據標準的 XSD 進行解譯。  
  
 如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。 將會擲不回任何例外狀況。  
  
 `ReadXmlSchema`方法一般叫用之前叫用<xref:System.Data.DataTable.ReadXml%2A>方法用來填滿`DataTable`。  
  
 若要建立巢狀的關聯使用 XML 結構描述，請使用隱含的巢狀項目。 您也可以重新設定以使用明確的資料行名稱的巢狀關聯性。 必須在對應的 Datatable 加入巢狀關聯中的順序隱含巢狀項目。  
  
   
  
## Examples  
 下列主控台應用程式建立新<xref:System.Data.DataTable>，並將該資料表的結構描述寫入檔案。 然後，此範例會建立新<xref:System.Data.DataTable>及讀取其結構描述從已儲存的 XML 結構描述，使用當做其來源檔案。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" />，用來讀取結構描述資訊。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述讀入 <see cref="T:System.Xml.XmlReader" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.ReadXmlSchema%2A>方法建立的結構描述<xref:System.Data.DataTable>。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 若要寫入的 XML 文件結構描述，請使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法。  
  
 XML 結構描述會根據標準的 XSD 進行解譯。  
  
 如果 msdata:DataType 和 xs: type 類型不相符，就會發生資料損毀。 將會擲不回任何例外狀況。  
  
 `ReadXmlSchema`方法一般叫用之前叫用<xref:System.Data.DataTable.ReadXml%2A>方法用來填滿<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  建立使用 XML 結構描述的巢狀的關聯的方式是將隱含的巢狀項目。 此外，巢狀的關聯可以重新建立，以使用明確的資料行名稱。 它會隱含地在巢狀關聯中加入對應的 Datatable 的巢狀項目強制的。  
  
   
  
## Examples  
 下列主控台應用程式建立新<xref:System.Data.DataTable>，並將寫入至該資料表的結構描述<xref:System.IO.MemoryStream>。 然後，此範例會建立新<xref:System.Data.DataTable>及讀取其結構描述從已儲存的 XML 結構描述，使用<xref:System.Xml.XmlTextReader>(繼承自<xref:System.Xml.XmlReader>) 當做其來源。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> 物件。</param>
        <summary>從 XML 資料流讀取。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RejectChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>復原從資料表載入以來，或前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來，對該資料表所做的所有變更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Data.DataTable.RejectChanges%2A>呼叫時，任何<xref:System.Data.DataRow>仍處於編輯模式的物件取消編輯。 新的資料列被移除。 資料列<xref:System.Data.DataRowState>設`Modified`或`Deleted`傳回回其原始狀態。  
  
   
  
## Examples  
 下列範例使多項變更<xref:System.Data.DataTable>，但拒絕變更叫用<xref:System.Data.DataTable.RejectChanges%2A>方法。  
  
 [!code-csharp[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定序列化格式。</summary>
        <value>指定 <see langword="Binary" /> 或 <see langword="Xml" /> 序列化的 <see cref="T:System.Data.SerializationFormat" /> 列舉。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重設 <see cref="T:System.Data.DataTable" /> 為它的原始狀態。 重設會移除資料表的所有資料、索引、關聯和資料行。 如果資料集包含 DataTable，則重設資料表之後，資料表仍將是資料集的一部分。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowChanged As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在成功變更 <see cref="T:System.Data.DataRow" /> 之後發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowChanging As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在 <see cref="T:System.Data.DataRow" /> 正在變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleted">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDeleted As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowDeleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在資料表中的資料列已經刪除之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleting">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDeleting As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowDeleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在資料表中的資料列將要刪除之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱[處理 DataTable 的事件](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Data.DataRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRowCollection Rows" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Rows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rows As DataRowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRowCollection ^ Rows { System::Data::DataRowCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得屬於這個資料表的資料列集合。</summary>
        <value>
          <see cref="T:System.Data.DataRowCollection" /> (包含 <see cref="T:System.Data.DataRow" /> 物件)，否則為 Null 值 (如果 <see cref="T:System.Data.DataRow" /> 物件不存在)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立新<xref:System.Data.DataRow>，您必須使用<xref:System.Data.DataTable.NewRow%2A>方法以傳回新的物件。 根據定義的結構描述，會自動設定這類物件<xref:System.Data.DataTable>透過其集合<xref:System.Data.DataColumn>物件。 建立新的資料列和資料列中設定每個資料行的值之後, 加入的資料列<xref:System.Data.DataRowCollection>使用`Add`方法。  
  
 每個<xref:System.Data.DataRow>集合中代表資料表中的資料列。 若要認可變更資料列中的資料行的值，您必須叫用<xref:System.Data.DataTable.AcceptChanges%2A>方法。  
  
   
  
## Examples  
 以下顯示傳回和設定資料列的兩個的範例。 第一個範例會使用<xref:System.Data.DataTable.Rows%2A>屬性，並列印每個資料列的每個資料行的值。 第二個範例會使用<xref:System.Data.DataTable>物件的<xref:System.Data.DataTable.NewRow%2A>方法來建立新<xref:System.Data.DataRow>具有的結構描述物件<xref:System.Data.DataTable>。 設定資料列的值之後, 的資料列加入<xref:System.Data.DataRowCollection>透過`Add`方法。  
  
 [!code-csharp[Classic WebData DataTable.Rows Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Rows Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.AcceptChanges" />
        <altmember cref="T:System.Data.DataRow" />
        <altmember cref="T:System.Data.DataRowCollection" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得所有 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
        <returns>
          <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要確保適當的排序順序，指定排序準則<xref:System.Data.DataTable.Select%2A>或<xref:System.Data.DataTable.Select%2A>。  
  
   
  
## Examples  
 下列範例會傳回的陣列<xref:System.Data.DataRow>物件透過<xref:System.Data.DataTable.Select%2A>方法。  
  
 [!code-csharp[Classic WebData DataTable.Select Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/) (DataView RowFilter 語法 [C#])。</param>
        <summary>取得所有符合篩選準則之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
        <returns>
          <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立`filterExpression`引數，使用相同的規則套用至<xref:System.Data.DataColumn>類別的<xref:System.Data.DataColumn.Expression%2A>建立篩選的屬性值。  
  
 若要確保適當的排序順序，指定排序準則<xref:System.Data.DataTable.Select%2A>或<xref:System.Data.DataTable.Select%2A>。  
  
 如果篩選的資料行包含 null 值，它將無法在結果。  
  
   
  
## Examples  
 下列範例會使用篩選運算式傳回的陣列<xref:System.Data.DataRow>物件。  
  
 [!code-csharp[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String, sort As String) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression, System::String ^ sort);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/) (DataView RowFilter 語法 [C#])。</param>
        <param name="sort">指定資料行和排序方向的字串。</param>
        <summary>取得按照指定排序順序符合篩選條件的所有 <see cref="T:System.Data.DataRow" /> 物件之陣列。</summary>
        <returns>符合篩選條件運算式的 <see cref="T:System.Data.DataRow" /> 物件之陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表單`filterExpression`引數，使用相同的規則建立<xref:System.Data.DataColumn>類別的<xref:System.Data.DataColumn.Expression%2A>屬性值。 `Sort`引數也使用相同的規則來建立類別的<xref:System.Data.DataColumn.Expression%2A>字串。  
  
 如果篩選的資料行包含 null 值，它將無法在結果。  
  
   
  
## Examples  
 下列範例會使用篩選運算式傳回的陣列<xref:System.Data.DataRow>物件。  
  
 [!code-csharp[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort, valuetype System.Data.DataViewRowState recordStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String, sort As String, recordStates As DataViewRowState) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression, System::String ^ sort, System::Data::DataViewRowState recordStates);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="recordStates" Type="System.Data.DataViewRowState" />
      </Parameters>
      <Docs>
        <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/) (DataView RowFilter 語法 [C#])。</param>
        <param name="sort">指定資料行和排序方向的字串。</param>
        <param name="recordStates">其中一個 <see cref="T:System.Data.DataViewRowState" /> 值。</param>
        <summary>取得符合篩選條件 (按照排序順序，並符合指定狀態) 的所有 <see cref="T:System.Data.DataRow" /> 物件之陣列。</summary>
        <returns>
          <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表單`filterExpression`引數，使用相同的規則建立<xref:System.Data.DataColumn>類別的<xref:System.Data.DataColumn.Expression%2A>屬性值。 `Sort`引數也使用相同的規則來建立類別的<xref:System.Data.DataColumn.Expression%2A>字串。  
  
 如果篩選的資料行包含 null 值，它將無法在結果。  
  
   
  
## Examples  
 下列範例會使用篩選條件運算式和記錄狀態傳回的陣列<xref:System.Data.DataRow>物件。  
  
 [!code-csharp[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 站台繫結<xref:System.ComponentModel.Component>至<xref:System.ComponentModel.Container>和啟用它們之間的通訊，以及提供容器以管理其元件的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
        <value>
          如果集合為 <see cref="T:System.Collections.IList" /> 物件的集合，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.DataTable> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
        <returns>
          <see cref="T:System.Collections.IList" />，從物件繫結至資料來源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.DataTable> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XmlReader。</param>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">XmlWriter。</param>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.DataSet> 執行個體轉換成 <xref:System.Xml.Serialization.IXmlSerializable> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableCleared">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableCleared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableCleared" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableCleared" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableCleared As DataTableClearEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableClearEventHandler ^ TableCleared;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在清除 <see cref="T:System.Data.DataTable" /> 之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableCleared>事件引發之後的所有資料列已成功清除之前，立即<xref:System.Data.DataTable.Clear%2A>方法會傳回至呼叫端的控制項。 <xref:System.Data.DataTable.TableCleared>清除作業期間的任何例外狀況時，不會引發事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableClearing">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableClearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableClearing" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableClearing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableClearing As DataTableClearEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableClearEventHandler ^ TableClearing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於清除 <see cref="T:System.Data.DataTable" /> 時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableClearing>時會引發事件的處理之前<xref:System.Data.DataTable.Clear%2A>作業開始。 時會引發此事件一律時<xref:System.Data.DataTable.Clear%2A>方法會叫用，即使資料表包含零個資料列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Data.DataTable" /> 的名稱。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableName%2A>用來傳回此資料表，從父<xref:System.Data.DataSet>物件的<xref:System.Data.DataTableCollection>(傳回<xref:System.Data.DataSet.Tables%2A>屬性)。  
  
   
  
## Examples  
 下列範例會列印<xref:System.Data.DataTable.TableName%2A>的集合中每個資料表<xref:System.Data.DataTable>物件。  
  
 [!code-csharp[Classic WebData DataTable.TableName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.TableName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="null" /> 或空字串 ("") 會傳入，並且這個資料表屬於集合。</exception>
        <exception cref="T:System.Data.DuplicateNameException">資料表屬於已經具有相同名稱之資料表的集合  (比較是區分大小寫的)。</exception>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="P:System.Data.DataSet.Tables" />
      </Docs>
    </Member>
    <Member MemberName="TableNewRow">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableNewRowEventHandler TableNewRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableNewRowEventHandler TableNewRow" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableNewRow" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableNewRow As DataTableNewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableNewRowEventHandler ^ TableNewRow;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableNewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在插入新的 <see cref="T:System.Data.DataRow" /> 時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新之後引發<xref:System.Data.DataRow>使用已建立<xref:System.Data.DataTable.NewRow%2A>。 這個事件一經引發之前叫用`NewRow`方法會傳回。 新<xref:System.Data.DataRow>執行個體卸離; 尚未加入至集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果存在串連的字串，則取得 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />。</summary>
        <returns>字串，由 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值組成。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得<xref:System.Data.DataTable.TableName%2A>和<xref:System.Data.DataTable.DisplayExpression%2A>如<xref:System.Data.DataTable>。  
  
   
  
## Examples  
 下列範例會傳回<xref:System.Data.DataTable.TableName%2A>和<xref:System.Data.DataTable.DisplayExpression%2A>使用<xref:System.Data.DataTable.ToString%2A>方法。  
  
 [!code-csharp[Classic WebData DataTable.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Data.DataTable" /> 的目前內容寫成 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
   
  
## Examples  
 下列主控台應用程式會建立兩個<xref:System.Data.DataTable>執行個體時，會新增至每個<xref:System.Data.DataSet>，建立<xref:System.Data.DataRelation>相關的兩個資料表，然後再使用<xref:System.Data.DataTable.WriteXml%2A>方法寫入父資料表內所包含的資料<xref:System.IO.TextWriter>. 設定時，此範例會示範此行為`writeHierarchy`其值的每個參數。  
  
> [!NOTE]
>  這個範例示範如何使用其中一種 WriteXml 多載版本。 如需可能會提供其他範例，請參閱個別的多載的主題。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/VB/source.vb#1)]  
  
 此範例會在主控台視窗中顯示以下輸出：  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">將資料寫入其中的資料流。</param>
        <summary>使用指定的 <see cref="T:System.IO.Stream" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">用來撰寫內容的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <see cref="T:System.IO.TextWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要寫入 XML 資料的檔案。</param>
        <summary>使用指定的檔案，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫成 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">要用來寫入內容的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">將資料寫入其中的資料流。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.IO.Stream" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 為目前的資料表和所有子系，將資料寫入相關資料表，請呼叫的方法與`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">將資料寫入其中的資料流。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">用來撰寫內容的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.IO.TextWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 若要寫入目前的資料表和其所有子系、 相關資料表的資料，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
   
  
## Examples  
 下列主控台應用程式會建立兩個<xref:System.Data.DataTable>執行個體時，會新增至每個<xref:System.Data.DataSet>，建立<xref:System.Data.DataRelation>相關的兩個資料表，然後再使用<xref:System.Data.DataTable.WriteXml%2A>方法寫入父資料表內所包含的資料<xref:System.IO.TextWriter>. 設定時，此範例會示範此行為`writeHierarchy`參數`true`。  
  
 [!code-csharp[DataWorks DataTable.WriteXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">寫入文件所用的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">要寫入 XML 資料的檔案。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的檔案，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫成 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 為目前的資料表和所有子系，將資料寫入相關資料表，請呼叫的方法與`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">資料將寫入其中的檔案名稱。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <summary>使用指定的檔案和 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">要用來寫入內容的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 若要寫入目前的資料表和整個子系、 相關資料表的資料，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">將資料寫入其中的資料流。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從`DataTable`XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含`XmlWriteMode`參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 一般來說，`WriteXml`方法會將儲存在目前資料表的資料。 `WriteXml`方法提供說明如何撰寫，不論是資料或資料和結構描述從`DataTable`XML 文件，而`WriteXmlSchema`方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含`XmlWriteMode`參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 為目前的資料表和所有子系，將資料寫入相關資料表，請呼叫的方法與`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">寫入文件所用的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 一般來說，`WriteXml`方法會將儲存在目前資料表的資料。 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，其中包含<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 為目前的資料表和所有子系，將資料寫入相關資料表，請呼叫的方法與`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
   
  
## Examples  
 下列主控台應用程式會建立兩個<xref:System.Data.DataTable>執行個體時，會新增至每個<xref:System.Data.DataSet>，建立<xref:System.Data.DataRelation>相關的兩個資料表，然後再使用<xref:System.Data.DataTable.WriteXml%2A>方法寫入父資料表內所包含的資料<xref:System.IO.TextWriter>. 設定時，此範例會示範此行為`writeHierarchy`其值的每個參數。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/VB/source.vb#1)]  
  
 此範例會在主控台視窗中顯示以下輸出：  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">資料將寫入其中的檔案名稱。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的檔案和 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 一般來說，`WriteXml`方法會將儲存在目前資料表的資料。 如果您想要儲存目前的資料表和的結構描述中，所有的資料<xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 若要寫入目前的資料表和所有子系、 相關資料表的資料，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>方法提供說明如何撰寫，不論是資料或資料和結構描述從<xref:System.Data.DataTable>XML 文件，而<xref:System.Data.DataTable.WriteXmlSchema%2A>方法會寫入的結構描述。 寫入資料和結構描述，請使用其中一個多載，包括<xref:System.Data.XmlWriteMode>參數，並將其值設定為`WriteSchema`。  
  
 請注意，也適用於<xref:System.Data.DataTable.ReadXml%2A>和<xref:System.Data.DataTable.ReadXmlSchema%2A>方法，分別。 讀取 XML 資料，或結構描述和資料`DataTable`，使用`ReadXml`方法。 若要讀取的結構描述，使用`ReadXmlSchema`方法。  
  
 通常`WriteXml`方法將僅針對目前資料表的資料。 若要寫入目前的資料表和整個子系、 相關資料表的資料，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>會擲回的資料行類型`DataRow`正在讀取或寫入實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，但未實作<xref:System.Xml.Serialization.IXmlSerializable>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
   
  
## Examples  
 下列主控台應用程式會建立兩個<xref:System.Data.DataTable>執行個體時，會新增至每個<xref:System.Data.DataSet>，建立<xref:System.Data.DataRelation>相關的兩個資料表，然後再使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法寫入父資料表內所包含的資料<xref:System.IO.TextWriter>. 設定時，此範例會示範此行為`writeHierarchy`其值的每個參數。  
  
> [!NOTE]
>  這個範例示範如何使用其中一個多載版本`WriteXmlSchema`如，可能會有其他範例，請參閱個別的多載的主題。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/VB/source.vb#1)]  
  
 此範例會在主控台視窗中顯示以下輸出：  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XML 結構描述將寫入其中的資料流。</param>
        <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">要用來寫入的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.IO.TextWriter" /> 目前的資料結構撰寫成 XML 結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要使用的檔案名稱。</param>
        <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.Xml.XmlWriter" /> 目前的資料結構撰寫成 XML 結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">XML 結構描述將寫入其中的資料流。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
        <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的資料流。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 通常`WriteXmlSchema`方法會寫入只在目前資料表的結構描述。 若要寫入目前的資料表和整個子系、 相關資料表的結構描述，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">要用來寫入的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.IO.TextWriter" /> 目前的資料結構撰寫成 XML 結構描述。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 通常`WriteXmlSchema`方法會寫入只在目前資料表的結構描述。 若要寫入目前的資料表和整個子系、 相關資料表的結構描述，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
   
  
## Examples  
 下列主控台應用程式會建立兩個<xref:System.Data.DataTable>執行個體時，會新增至每個<xref:System.Data.DataSet>，建立<xref:System.Data.DataRelation>相關的兩個資料表，然後再使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法寫入父資料表內所包含的資料<xref:System.IO.TextWriter>. 設定時，此範例會示範此行為`writeHierarchy`其值的每個參數。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/VB/source.vb#1)]  
  
 此範例會在主控台視窗中顯示以下輸出：  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">要使用的檔案名稱。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
        <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的檔案。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 通常`WriteXmlSchema`方法會寫入只在目前資料表的結構描述。 若要寫入目前的資料表和整個子系、 相關資料表的結構描述，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, bool writeHierarchy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
        <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.Xml.XmlWriter" /> 目前的資料結構撰寫成 XML 結構描述。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.DataTable.WriteXmlSchema%2A>方法來寫入的結構描述<xref:System.Data.DataTable>XML 文件。 結構描述包含資料表、 關聯和條件約束的定義。  
  
 使用 XSD 標準寫入 XML 結構描述。  
  
 若要將資料寫入 XML 文件中，使用<xref:System.Data.DataTable.WriteXml%2A>方法。  
  
 通常`WriteXmlSchema`方法會寫入只在目前資料表的結構描述。 若要寫入目前的資料表和整個子系、 相關資料表的結構描述，使用呼叫方法`writeHierarchy`參數設定為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>