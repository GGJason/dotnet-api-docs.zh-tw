<Type Name="GCSettings" FullName="System.Runtime.GCSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0baf797ee3c7130da2de1bdbad1affd3838bdcef" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30488832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GCSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GCSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.GCSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class GCSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class GCSettings abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定目前處理序的記憶體回收設定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.GCSettings.IsServerGC%2A>屬性來判斷目前的處理序是否已啟用伺服器記憶體回收。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsServerGC">
      <MemberSignature Language="C#" Value="public static bool IsServerGC { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsServerGC" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.IsServerGC" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsServerGC As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsServerGC { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示伺服器記憶體回收是否已啟用。</summary>
        <value>
          如果伺服器記憶體回收已啟用，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 伺服器記憶體回收的相關資訊，請參閱中的 「 工作站和伺服器記憶體回收 > 一節[Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md)。  
  
 如果未啟用伺服器記憶體回收，工作站記憶體回收是作用中 （或不同時回收）。 只有在多處理器電腦上使用伺服器記憶體回收。  
  
 受管理的主機可以要求伺服器記憶體回收，而且主機要求會覆寫組態檔設定。 如果主機未指定的記憶體回收的類型，您可以使用組態檔設定來指定伺服器記憶體回收。 此設定只能在應用程式組態檔中，不在電腦組態檔中是有效 (請參閱[設定應用程式](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f))。 下列範例會顯示啟用伺服器記憶體回收的範例應用程式組態檔的內容。  
  
```  
<configuration>  
  <runtime>  
    <gcServer enabled="true" />  
  </runtime>  
</configuration>  
```  
  
   
  
## Examples  
 下列範例會指出是否在主機電腦正在使用伺服器或工作站記憶體回收。  
  
 [!code-csharp[Environment.IsServerGC#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]
 [!code-vb[Environment.IsServerGC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargeObjectHeapCompactionMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { System::Runtime::GCLargeObjectHeapCompactionMode get(); void set(System::Runtime::GCLargeObjectHeapCompactionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLargeObjectHeapCompactionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[在 .NET Framework 4.5.1 及更新版本中支援]  
  
 取得或設定值，這個值表示完整的封鎖記憶體回收是否壓縮大型物件堆積 (LOH)。</summary>
        <value>其中一個表示完整封鎖記憶體回收是否壓縮 LOH 的列舉值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 LOH 用於需要多個 85,000 個位元組的大型物件 （例如陣列） 所配置的記憶體。 複製大型區塊的記憶體的效能影響，因為記憶體回收行程通常掃 LOH，包括建立一份無作用物件所佔據的而且可以重複滿足未來的要求使用的記憶體位置大型物件的記憶體配置。 不過，進行廣泛的應用程式中使用的 LOH 儲存暫時性物件，分散也造成負面影響效能的記憶體。 在此情況下，便可使用<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>至精簡而不是只需掃掠 LOH 記憶體回收期間的屬性。  
  
 預設值<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>屬性是<xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>，表示在記憶體回收期間不會壓縮 LOH。 如果您指派屬性值為<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>、 LOH 會在下一個完整封鎖記憶體回收期間，壓縮和屬性值會重設為<xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>。  
  
> [!NOTE]
>  背景記憶體回收不會封鎖。 這表示，如果您設定<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>屬性<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>、 任何背景層代 2 回收，會發生後續不會壓縮 LOH。 只有第一個封鎖層代 2 收集壓縮 LOH。  
  
 之後<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>屬性設定為<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>下, 一個完整封鎖記憶體回收 （和壓縮 LOH），就會發生在不確定的未來時間。 您可以立即壓縮 LOH，使用程式碼如下所示：  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.GCLargeObjectHeapCompactionMode" />
      </Docs>
    </Member>
    <Member MemberName="LatencyMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLatencyMode LatencyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLatencyMode LatencyMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LatencyMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LatencyMode As GCLatencyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLatencyMode LatencyMode { System::Runtime::GCLatencyMode get(); void set(System::Runtime::GCLatencyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為記憶體回收取得或設定目前的延遲模式。</summary>
        <value>其中一個列舉值，指定延遲模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以設定您的應用程式中減少記憶體回收的干擾程度的層級<xref:System.Runtime.GCLatencyMode>至<xref:System.Runtime.GCLatencyMode.LowLatency>期間重要的作業。 這類作業都完成後，返回較高的延遲模式，使多個物件，可以增加記憶體回收。  
  
 一般情況下，您可以設定的值<xref:System.Runtime.GCSettings.LatencyMode%2A>屬性可定義記憶體回收行程的延遲模式。 不過，您無法設定無 GC 區域延遲模式，藉由指派<xref:System.Runtime.GCLatencyMode.NoGCRegion?displayProperty=nameWithType>列舉值，以<xref:System.Runtime.GCSettings.LatencyMode%2A>屬性。 請改為呼叫<xref:System.GC.TryStartNoGCRegion%2A?displayProperty=nameWithType>方法開始無 GC 區域延遲模式，而且您呼叫<xref:System.GC.EndNoGCRegion%2A?displayProperty=nameWithType>來結束該處理序。  
  
 請參閱[延遲模式](~/docs/standard/garbage-collection/latency.md)如需如何回收的執行階段組態設定會影響的預設值的討論<xref:System.Runtime.GCLatencyMode>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 屬性已設定為無效值。  
  
 -或-  
  
 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 屬性無法設定為 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
  </Members>
</Type>