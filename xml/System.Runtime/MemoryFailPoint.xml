<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="358c0-101">在執行作業前檢查記憶體資源是否足夠。</span><span class="sxs-lookup"><span data-stu-id="358c0-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="358c0-102">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="358c0-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="358c0-103">這個類別僅供進階程式開發中的使用。</span><span class="sxs-lookup"><span data-stu-id="358c0-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="358c0-104">建立的執行個體<xref:System.Runtime.MemoryFailPoint>類別建立記憶體閘道。</span><span class="sxs-lookup"><span data-stu-id="358c0-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="358c0-105">記憶體閘檢查足夠的資源，再起始活動需要大量的記憶體。</span><span class="sxs-lookup"><span data-stu-id="358c0-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="358c0-106">在檢查失敗會導致<xref:System.InsufficientMemoryException>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="358c0-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="358c0-107">這個例外狀況會防止從正在啟動作業，並減少可能的失敗，因為缺少資源。</span><span class="sxs-lookup"><span data-stu-id="358c0-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="358c0-108">這樣做可讓您降低效能，以避免<xref:System.OutOfMemoryException>例外狀況，可能導致不適當的程式碼中的任意位置中的例外狀況處理的任何狀態損毀。</span><span class="sxs-lookup"><span data-stu-id="358c0-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="358c0-109">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="358c0-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="358c0-110">當您完成使用類型時，您應該會處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="358c0-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="358c0-111">若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="358c0-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="358c0-112">若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="358c0-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="358c0-113">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="358c0-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="358c0-114">藉由擲回<xref:System.InsufficientMemoryException>例外狀況，應用程式可以區分作業將無法完成評估部分完成的作業可能已損毀的應用程式狀態。</span><span class="sxs-lookup"><span data-stu-id="358c0-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="358c0-115">這可讓應用程式的封閉式擴大原則，這可能需要卸載目前頻率減少為<xref:System.AppDomain>或回收處理序。</span><span class="sxs-lookup"><span data-stu-id="358c0-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="358c0-116"><xref:System.Runtime.MemoryFailPoint> 檢查是否足夠的記憶體和連續虛擬位址空間可以在所有記憶體回收堆積，而且可能會增加分頁檔大小。</span><span class="sxs-lookup"><span data-stu-id="358c0-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="358c0-117"><xref:System.Runtime.MemoryFailPoint> 可讓長期記憶體可用性的閘道，但呼叫端的存留期間不保證一定要使用<xref:System.Runtime.MemoryFailPoint.Dispose%2A>方法，以確保資源聯<xref:System.Runtime.MemoryFailPoint>並釋出。</span><span class="sxs-lookup"><span data-stu-id="358c0-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="358c0-118">若要使用的記憶體閘道，您必須建立<xref:System.Runtime.MemoryFailPoint>物件，並指定百萬位元組 (MB) 的記憶體數目預期在下次執行作業使用。</span><span class="sxs-lookup"><span data-stu-id="358c0-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="358c0-119">如果記憶體不足，無法使用，<xref:System.InsufficientMemoryException>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="358c0-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="358c0-120">建構函式的參數必須是正整數。</span><span class="sxs-lookup"><span data-stu-id="358c0-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="358c0-121">負值會引發<xref:System.ArgumentOutOfRangeException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="358c0-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="358c0-122"><xref:System.Runtime.MemoryFailPoint> 16 MB 的資料粒度的運作方式。</span><span class="sxs-lookup"><span data-stu-id="358c0-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="358c0-123">任何小於 16 MB 的值會被視為 16 MB，和其他值會被視為 16 MB 的下一個最大倍數。</span><span class="sxs-lookup"><span data-stu-id="358c0-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="358c0-124"><xref:System.Runtime.MemoryFailPoint> 讓應用程式緩慢其本身，以避免記憶體不足以損毀的方式。</span><span class="sxs-lookup"><span data-stu-id="358c0-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="358c0-125">它應語彙範圍內。</span><span class="sxs-lookup"><span data-stu-id="358c0-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="358c0-126">下列範例會啟動執行緒處理的工作佇列中的項目。</span><span class="sxs-lookup"><span data-stu-id="358c0-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="358c0-127">每個執行緒啟動之前，可用的記憶體資源已使用<xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="358c0-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="358c0-128">如果擲回例外狀況，main 方法會等候直到記憶體可供使用才能啟動下一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="358c0-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="358c0-129">用於呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="358c0-129">for calling unmanaged code.</span></span> <span data-ttu-id="358c0-130">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="358c0-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="358c0-131">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="358c0-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="358c0-132">所需的記憶體大小，以 MB 為單位。</span><span class="sxs-lookup"><span data-stu-id="358c0-132">The required memory size, in megabytes.</span></span> <span data-ttu-id="358c0-133">這個必須是正值。</span><span class="sxs-lookup"><span data-stu-id="358c0-133">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="358c0-134">初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 類別的新執行個體，並指定順利執行所需的記憶體容量。</span><span class="sxs-lookup"><span data-stu-id="358c0-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c0-135">可以憑應用程式所處理的工作項目使用的記憶體數量。</span><span class="sxs-lookup"><span data-stu-id="358c0-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="358c0-136">若要估計您應用程式需要處理要求的記憶體數量，請考慮使用<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>方法，以判斷數量記憶體可用之前與之後呼叫此方法會處理工作項目。</span><span class="sxs-lookup"><span data-stu-id="358c0-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="358c0-137">請參閱<xref:System.Runtime.MemoryFailPoint>類別程式碼範例以動態方式決定的值`sizeInMegabytes`參數。</span><span class="sxs-lookup"><span data-stu-id="358c0-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="358c0-138">下列範例會示範如何判斷方法要求執行時的記憶體數量。</span><span class="sxs-lookup"><span data-stu-id="358c0-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="358c0-139">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Runtime.MemoryFailPoint>類別。</span><span class="sxs-lookup"><span data-stu-id="358c0-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="358c0-140">指定的記憶體大小為負數。</span><span class="sxs-lookup"><span data-stu-id="358c0-140">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="358c0-141">記憶體不足，無法開始執行閘道所保護的程式碼。</span><span class="sxs-lookup"><span data-stu-id="358c0-141">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="358c0-142">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="358c0-142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="358c0-143">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="358c0-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="358c0-144">釋放 <see cref="T:System.Runtime.MemoryFailPoint" /> 所使用的所有資源。</span><span class="sxs-lookup"><span data-stu-id="358c0-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c0-145"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="358c0-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="358c0-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法會將 <xref:System.Runtime.MemoryFailPoint> 保留在無法使用的狀態。</span><span class="sxs-lookup"><span data-stu-id="358c0-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="358c0-147">在呼叫<xref:System.Runtime.MemoryFailPoint>，您必須釋放所有參考<xref:System.Runtime.MemoryFailPoint>讓記憶體回收行程可以回收記憶體的<xref:System.Runtime.MemoryFailPoint>所佔用。</span><span class="sxs-lookup"><span data-stu-id="358c0-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="358c0-148">如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="358c0-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="358c0-149">在您釋放最後一個 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="358c0-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="358c0-150">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Runtime.MemoryFailPoint> 物件的 `Finalize` 方法。</span><span class="sxs-lookup"><span data-stu-id="358c0-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="358c0-151">確認釋出資源，並在記憶體回收行程再利用 <see cref="T:System.Runtime.MemoryFailPoint" /> 物件時執行其他清除作業。</span><span class="sxs-lookup"><span data-stu-id="358c0-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c0-152">記憶體回收行程呼叫<xref:System.Runtime.MemoryFailPoint.Finalize%2A>方法準備最終處理而目前的物件時。</span><span class="sxs-lookup"><span data-stu-id="358c0-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>