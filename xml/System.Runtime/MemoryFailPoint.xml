<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e44bc871caa29f826e0555271beb6a45d2de1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>在執行作業前檢查記憶體資源是否足夠。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個類別僅供進階程式開發中的使用。  
  
 建立的執行個體<xref:System.Runtime.MemoryFailPoint>類別建立記憶體閘道。 記憶體閘檢查足夠的資源，再起始活動需要大量的記憶體。 在檢查失敗會導致<xref:System.InsufficientMemoryException>擲回例外狀況。 這個例外狀況會防止從正在啟動作業，並減少可能的失敗，因為缺少資源。 這樣做可讓您降低效能，以避免<xref:System.OutOfMemoryException>例外狀況，可能導致不適當的程式碼中的任意位置中的例外狀況處理的任何狀態損毀。  
  
> [!IMPORTANT]
>  此類型會實作<xref:System.IDisposable>介面。 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。  
  
 藉由擲回<xref:System.InsufficientMemoryException>例外狀況，應用程式可以區分作業將無法完成評估部分完成的作業可能已損毀的應用程式狀態。 這可讓應用程式的封閉式擴大原則，這可能需要卸載目前頻率減少為<xref:System.AppDomain>或回收處理序。  
  
 <xref:System.Runtime.MemoryFailPoint> 檢查是否足夠的記憶體和連續虛擬位址空間可以在所有記憶體回收堆積，而且可能會增加分頁檔大小。  <xref:System.Runtime.MemoryFailPoint> 可讓長期記憶體可用性的閘道，但呼叫端的存留期間不保證一定要使用<xref:System.Runtime.MemoryFailPoint.Dispose%2A>方法，以確保資源聯<xref:System.Runtime.MemoryFailPoint>並釋出。  
  
 若要使用的記憶體閘道，您必須建立<xref:System.Runtime.MemoryFailPoint>物件，並指定百萬位元組 (MB) 的記憶體數目預期在下次執行作業使用。 如果記憶體不足，無法使用，<xref:System.InsufficientMemoryException>擲回例外狀況。  
  
 建構函式的參數必須是正整數。 負值會引發<xref:System.ArgumentOutOfRangeException>例外狀況。  
  
 <xref:System.Runtime.MemoryFailPoint> 16 MB 的資料粒度的運作方式。 任何小於 16 MB 的值會被視為 16 MB，和其他值會被視為 16 MB 的下一個最大倍數。  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> 讓應用程式緩慢其本身，以避免記憶體不足以損毀的方式。  它應語彙範圍內。  下列範例會啟動執行緒處理的工作佇列中的項目。  每個執行緒啟動之前，可用的記憶體資源已使用<xref:System.Runtime.MemoryFailPoint>。  如果擲回例外狀況，main 方法會等候直到記憶體可供使用才能啟動下一個執行緒。  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">所需的記憶體大小，以 MB 為單位。 這個必須是正值。</param>
        <summary>初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 類別的新執行個體，並指定順利執行所需的記憶體容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以憑應用程式所處理的工作項目使用的記憶體數量。  若要估計您應用程式需要處理要求的記憶體數量，請考慮使用<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>方法，以判斷數量記憶體可用之前與之後呼叫此方法會處理工作項目。 請參閱<xref:System.Runtime.MemoryFailPoint>類別程式碼範例以動態方式決定的值`sizeInMegabytes`參數。  
  
   
  
## Examples  
 下列範例會示範如何判斷方法要求執行時的記憶體數量。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Runtime.MemoryFailPoint>類別。  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的記憶體大小為負數。</exception>
        <exception cref="T:System.InsufficientMemoryException">記憶體不足，無法開始執行閘道所保護的程式碼。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.Runtime.MemoryFailPoint" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Runtime.MemoryFailPoint>。 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法會將 <xref:System.Runtime.MemoryFailPoint> 保留在無法使用的狀態。 在呼叫<xref:System.Runtime.MemoryFailPoint>，您必須釋放所有參考<xref:System.Runtime.MemoryFailPoint>讓記憶體回收行程可以回收記憶體的<xref:System.Runtime.MemoryFailPoint>所佔用。 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Runtime.MemoryFailPoint>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Runtime.MemoryFailPoint> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>確認釋出資源，並在記憶體回收行程再利用 <see cref="T:System.Runtime.MemoryFailPoint" /> 物件時執行其他清除作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 記憶體回收行程呼叫<xref:System.Runtime.MemoryFailPoint.Finalize%2A>方法準備最終處理而目前的物件時。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>