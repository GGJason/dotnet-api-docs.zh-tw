<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd86c9e8585771817dff9c403cde415163613389" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30488272" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>根據先前編譯期間所建立的設定檔，對可能要執行的方法執行背景編譯，改善需要 Just-In-Time (JIT) 編譯器之應用程式的應用程式定義域啟動效能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  設定檔最佳化需要多核心電腦。 方法會忽略其他電腦上。  
  
 已建立在先前使用的設定檔會讀取每次啟動應用程式定義域中的設定檔最佳化。 設定檔中的資訊可用來引導背景編譯藉由識別最有可能在啟動期間執行的方法。 在多核心電腦上已經是一種方法的機會，這項提升編譯所需要的讓主應用程式執行緒並沒有呼叫 JIT 編譯器的時間。  
  
 讓它一律包含最新的資訊了解哪種方法可用來在啟動期間，在每個使用時，會覆寫的設定檔。  
  
 最佳化的設定檔不受限制應用程式定義域的啟動。 它們可以用於任何活動都將需要大量 JIT 編譯器使用。 您可以維護應用程式定義域的多個設定檔，使每個這類活動具有自己的設定檔。  
  
 若要使用最佳化的設定檔，應用程式定義域中，您必須呼叫<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法並指定儲存設定檔的資料夾。 該資料夾必須已經存在。 若要開始使用設定檔，請呼叫<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法並指定設定檔的檔案名稱。 如果沒有先前記錄的檔案，它會建立第一次使用。 沒有效能優點第一個時間在建立設定檔。  
  
 設定檔最佳化不會變更的方法會執行的順序。 方法不會在背景執行緒上執行如果方法是編譯，但永遠不會呼叫，它就只是無法使用。 如果設定檔已損毀或無法寫入指定的資料夾 （例如，因為資料夾不存在），程式會繼續執行而不在最佳化程式碼剖析。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">存放設定檔（用於目前應用程式定義域）的資料夾的完整路徑。</param>
        <summary>啟用對目前應用程式定義域的最佳化程式碼剖析，並設定儲存最佳化設定檔的資料夾。 單核心電腦上，這個方法會被忽略。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須先呼叫這個方法，才能呼叫<xref:System.Runtime.ProfileOptimization.StartProfile%2A>第一次目前的應用程式定義域中的方法。 如果您呼叫<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>超過一次在相同的應用程式網域中，第一個以外的所有呼叫會被都忽略。  
  
 指定的資料夾必須已經存在。 如果不存在，呼叫這個方法不會建立它，而且沒有程式碼剖析。  
  
 在電腦上沒有多個核心，這個方法會被忽略。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">要使用的設定檔的檔案名稱。</param>
        <summary>在背景執行緒中，對先前指定設定檔名稱中記錄的方法啟動 just-in-time (JIT) 編譯。 開始錄製目前的方法使用，稍後會覆寫指定的設定檔檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的設定檔存在於所指定的資料夾<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法，其內含的資訊用來決定的順序編譯背景執行緒的方法。 <xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法建立設定檔，如果它不存在，並初始錄製的方法使用。  
  
 記錄實際呼叫的方法，不論它們所編譯的背景執行緒上或在主應用程式的執行緒上。 如果應用程式需要呼叫它的背景執行緒已編譯它之前，會在主應用程式的執行緒上編譯方法。  
  
 執行記錄的程式碼追蹤的速率，此時方法會進行編譯，包括主執行緒和背景執行緒上所編譯的方法。 當速率低於預先決定的層級，記錄就會停止。 如果在 JIT 編譯的速率超過預先決定的時間上限，也會停止錄製。  
  
 如果<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不針對目前的應用程式定義域中，呼叫方法或如果電腦沒有多個核心，<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法沒有任何作用。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
  </Members>
</Type>