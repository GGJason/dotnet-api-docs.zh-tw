<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7ff57-101">根據先前編譯期間所建立的設定檔，對可能要執行的方法執行背景編譯，改善需要 Just-In-Time (JIT) 編譯器之應用程式的應用程式定義域啟動效能。</span><span class="sxs-lookup"><span data-stu-id="7ff57-101">Improves the startup performance of application domains in applications that require the just-in-time (JIT) compiler by performing background compilation of methods that are likely to be executed, based on profiles created during previous compilations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7ff57-102">設定檔最佳化需要多核心電腦。</span><span class="sxs-lookup"><span data-stu-id="7ff57-102">Profile optimization requires a multicore computer.</span></span> <span data-ttu-id="7ff57-103">方法會忽略其他電腦上。</span><span class="sxs-lookup"><span data-stu-id="7ff57-103">The methods are ignored on other computers.</span></span>  
  
 <span data-ttu-id="7ff57-104">已建立在先前使用的設定檔會讀取每次啟動應用程式定義域中的設定檔最佳化。</span><span class="sxs-lookup"><span data-stu-id="7ff57-104">Each time you initiate profile optimization in an application domain, the profile that was created during the previous use is read.</span></span> <span data-ttu-id="7ff57-105">設定檔中的資訊可用來引導背景編譯藉由識別最有可能在啟動期間執行的方法。</span><span class="sxs-lookup"><span data-stu-id="7ff57-105">The information in the profile is used to guide background compilation by identifying the methods that are most likely to be executed during startup.</span></span> <span data-ttu-id="7ff57-106">在多核心電腦上已經是一種方法的機會，這項提升編譯所需要的讓主應用程式執行緒並沒有呼叫 JIT 編譯器的時間。</span><span class="sxs-lookup"><span data-stu-id="7ff57-106">On multicore computers, this increases the chances that a method is already compiled by the time it is needed so that the main application thread does not have to call the JIT compiler.</span></span>  
  
 <span data-ttu-id="7ff57-107">讓它一律包含最新的資訊了解哪種方法可用來在啟動期間，在每個使用時，會覆寫的設定檔。</span><span class="sxs-lookup"><span data-stu-id="7ff57-107">The profile file is overwritten on each use, so it always contains the most recent information about which methods are used during startup.</span></span>  
  
 <span data-ttu-id="7ff57-108">最佳化的設定檔不受限制應用程式定義域的啟動。</span><span class="sxs-lookup"><span data-stu-id="7ff57-108">Optimization profiles are not restricted to application domain startup.</span></span> <span data-ttu-id="7ff57-109">它們可以用於任何活動都將需要大量 JIT 編譯器使用。</span><span class="sxs-lookup"><span data-stu-id="7ff57-109">They can be used for any activity that will require heavy use of the JIT compiler.</span></span> <span data-ttu-id="7ff57-110">您可以維護應用程式定義域的多個設定檔，使每個這類活動具有自己的設定檔。</span><span class="sxs-lookup"><span data-stu-id="7ff57-110">You can maintain multiple profiles for an application domain so that each such activity has its own profile.</span></span>  
  
 <span data-ttu-id="7ff57-111">若要使用最佳化的設定檔，應用程式定義域中，您必須呼叫<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法並指定儲存設定檔的資料夾。</span><span class="sxs-lookup"><span data-stu-id="7ff57-111">To use optimization profiles in an application domain, you must call the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method and specify the folder where profiles are stored.</span></span> <span data-ttu-id="7ff57-112">該資料夾必須已經存在。</span><span class="sxs-lookup"><span data-stu-id="7ff57-112">The folder must already exist.</span></span> <span data-ttu-id="7ff57-113">若要開始使用設定檔，請呼叫<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法並指定設定檔的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="7ff57-113">To begin using a profile, call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method and specify the file name of the profile.</span></span> <span data-ttu-id="7ff57-114">如果沒有先前記錄的檔案，它會建立第一次使用。</span><span class="sxs-lookup"><span data-stu-id="7ff57-114">If the file was not recorded previously, it is created on first use.</span></span> <span data-ttu-id="7ff57-115">沒有效能優點第一個時間在建立設定檔。</span><span class="sxs-lookup"><span data-stu-id="7ff57-115">There is no performance benefit the first time a profile is created.</span></span>  
  
 <span data-ttu-id="7ff57-116">設定檔最佳化不會變更的方法會執行的順序。</span><span class="sxs-lookup"><span data-stu-id="7ff57-116">Profile optimization does not change the order in which methods are executed.</span></span> <span data-ttu-id="7ff57-117">方法不會在背景執行緒上執行如果方法是編譯，但永遠不會呼叫，它就只是無法使用。</span><span class="sxs-lookup"><span data-stu-id="7ff57-117">Methods are not executed on the background thread; if a method is compiled but never called, it is simply not used.</span></span> <span data-ttu-id="7ff57-118">如果設定檔已損毀或無法寫入指定的資料夾 （例如，因為資料夾不存在），程式會繼續執行而不在最佳化程式碼剖析。</span><span class="sxs-lookup"><span data-stu-id="7ff57-118">If a profile file is corrupt or cannot be written to the specified folder (for example, because the folder does not exist), program execution continues without optimization profiling.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath"><span data-ttu-id="7ff57-119">存放設定檔（用於目前應用程式定義域）的資料夾的完整路徑。</span><span class="sxs-lookup"><span data-stu-id="7ff57-119">The full path to the folder where profile files are stored for the current application domain.</span></span></param>
        <summary><span data-ttu-id="7ff57-120">啟用對目前應用程式定義域的最佳化程式碼剖析，並設定儲存最佳化設定檔的資料夾。</span><span class="sxs-lookup"><span data-stu-id="7ff57-120">Enables optimization profiling for the current application domain, and sets the folder where the optimization profile files are stored.</span></span> <span data-ttu-id="7ff57-121">單核心電腦上，這個方法會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7ff57-121">On a single-core computer, the method is ignored.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ff57-122">您必須先呼叫這個方法，才能呼叫<xref:System.Runtime.ProfileOptimization.StartProfile%2A>第一次目前的應用程式定義域中的方法。</span><span class="sxs-lookup"><span data-stu-id="7ff57-122">You must call this method before you call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method for the first time in the current application domain.</span></span> <span data-ttu-id="7ff57-123">如果您呼叫<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>超過一次在相同的應用程式網域中，第一個以外的所有呼叫會被都忽略。</span><span class="sxs-lookup"><span data-stu-id="7ff57-123">If you call <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> more than once in the same application domain, all calls after the first are ignored.</span></span>  
  
 <span data-ttu-id="7ff57-124">指定的資料夾必須已經存在。</span><span class="sxs-lookup"><span data-stu-id="7ff57-124">The specified folder must already exist.</span></span> <span data-ttu-id="7ff57-125">如果不存在，呼叫這個方法不會建立它，而且沒有程式碼剖析。</span><span class="sxs-lookup"><span data-stu-id="7ff57-125">If it does not exist, calling this method does not create it, and no profiling occurs.</span></span>  
  
 <span data-ttu-id="7ff57-126">在電腦上沒有多個核心，這個方法會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7ff57-126">On computers that do not have multiple cores, this method is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="7ff57-127">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="7ff57-127">requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ff57-128">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="7ff57-128">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile"><span data-ttu-id="7ff57-129">要使用的設定檔的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="7ff57-129">The file name of the profile to use.</span></span></param>
        <summary><span data-ttu-id="7ff57-130">在背景執行緒中，對先前指定設定檔名稱中記錄的方法啟動 just-in-time (JIT) 編譯。</span><span class="sxs-lookup"><span data-stu-id="7ff57-130">Starts just-in-time (JIT) compilation of the methods that were previously recorded in the specified profile file, on a background thread.</span></span> <span data-ttu-id="7ff57-131">開始錄製目前的方法使用，稍後會覆寫指定的設定檔檔案。</span><span class="sxs-lookup"><span data-stu-id="7ff57-131">Starts the process of recording current method use, which later overwrites the specified profile file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ff57-132">如果指定的設定檔存在於所指定的資料夾<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法，其內含的資訊用來決定的順序編譯背景執行緒的方法。</span><span class="sxs-lookup"><span data-stu-id="7ff57-132">If the specified profile exists in the folder specified by the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method, the information it contains is used to determine the order in which methods are compiled on the background thread.</span></span> <span data-ttu-id="7ff57-133"><xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法建立設定檔，如果它不存在，並初始錄製的方法使用。</span><span class="sxs-lookup"><span data-stu-id="7ff57-133">The <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method creates the profile if it does not already exist, and initiates the recording of method use.</span></span>  
  
 <span data-ttu-id="7ff57-134">記錄實際呼叫的方法，不論它們所編譯的背景執行緒上或在主應用程式的執行緒上。</span><span class="sxs-lookup"><span data-stu-id="7ff57-134">Only methods that are actually called are recorded, regardless of whether they were compiled on the background thread or on the main application thread.</span></span> <span data-ttu-id="7ff57-135">如果應用程式需要呼叫它的背景執行緒已編譯它之前，會在主應用程式的執行緒上編譯方法。</span><span class="sxs-lookup"><span data-stu-id="7ff57-135">A method is compiled on the main application thread if the application needs to call it before the background thread has compiled it.</span></span>  
  
 <span data-ttu-id="7ff57-136">執行記錄的程式碼追蹤的速率，此時方法會進行編譯，包括主執行緒和背景執行緒上所編譯的方法。</span><span class="sxs-lookup"><span data-stu-id="7ff57-136">The code that performs the recording tracks the rate at which methods are compiled, including methods that are compiled on both the background thread and on the main thread.</span></span> <span data-ttu-id="7ff57-137">當速率低於預先決定的層級，記錄就會停止。</span><span class="sxs-lookup"><span data-stu-id="7ff57-137">When the rate falls below a predetermined level, recording stops.</span></span> <span data-ttu-id="7ff57-138">如果在 JIT 編譯的速率超過預先決定的時間上限，也會停止錄製。</span><span class="sxs-lookup"><span data-stu-id="7ff57-138">Recording also stops if the rate of JIT compilation exceeds a predetermined upper limit.</span></span>  
  
 <span data-ttu-id="7ff57-139">如果<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不針對目前的應用程式定義域中，呼叫方法或如果電腦沒有多個核心，<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="7ff57-139">If the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method has not been called for the current application domain, or if the computer does not have multiple cores, the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="7ff57-140">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="7ff57-140">requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ff57-141">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="7ff57-141">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>