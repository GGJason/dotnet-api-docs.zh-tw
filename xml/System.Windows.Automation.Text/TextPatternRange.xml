<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef0652356d536636531ed444533877bd5e2bb994" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37583476" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <TypeSignature Language="F#" Value="type TextPatternRange = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2cdb5-101">代表 <see cref="T:System.Windows.Automation.TextPattern" /> 容器中的一段連續文字。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2cdb5-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-102">A<xref:System.Windows.Automation.Text.TextPatternRange>插入點、 子集或所有的文字中可代表<xref:System.Windows.Automation.TextPattern>容器。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="2cdb5-103">A<xref:System.Windows.Automation.Text.TextPatternRange>將變成無效，發生下列其中之一： 中的文字<xref:System.Windows.Automation.TextPattern>容器的變更，因為某些使用者活動，或<xref:System.Windows.Automation.ValuePattern.SetValue%2A>方法<xref:System.Windows.Automation.ValuePattern>用來以程式設計方式變更中文字的值<xref:System.Windows.Automation.TextPattern>容器。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="member this.AddToSelection : unit -&gt; unit" Usage="textPatternRange.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-104">加入至文字容器中反白的文字集合，此容器支援多次斷續選取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-104">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-105">文字插入點是移至新的選取範圍的區域。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-105">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="2cdb5-106">提供的變質文字範圍移動插入點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-106">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2cdb5-107">如果文字提供者不支援 Multiple，則為斷續的選取範圍 (例如，<see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> 必須擁有 <see langword="Multiple" /> 這個值)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-107">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-108">擷取新的 <see cref="T:System.Windows.Automation.Text.TextPatternRange" />，與原始 <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> 相同且繼承其所有屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-108">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-109">新的文字範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-109">The new text range.</span>
          </span>
          <span data-ttu-id="2cdb5-110">從未傳回 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-110">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-111">或者，建立新<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>從<xref:System.Windows.Automation.TextPattern>並移動到原始的文字範圍的結束點對應至兩個端點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-111">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="2cdb5-112">新的範圍可以從原始獨立進行操作。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-112">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberSignature Language="F#" Value="member this.Compare : System.Windows.Automation.Text.TextPatternRange -&gt; bool" Usage="textPatternRange.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range">
          <span data-ttu-id="2cdb5-113">要比較的文字範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-113">A text range to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-114">傳回 <see cref="T:System.Boolean" /> 值，表示文字範圍的跨幅 (<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 端點至 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 端點) 與另一個文字範圍是否相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-114">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-115">如果兩個文字範圍的跨幅相同，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-115">
              <see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2cdb5-116">如果要比較的範圍不是來自相同的文字提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-116">If the range being compared does not come from the same text provider.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="textPatternRange.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="2cdb5-117">呼叫端的 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 或 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-117">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="2cdb5-118">比較的目標範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-118">The target range for comparison.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="2cdb5-119">目標的 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 或 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-120">傳回 <see cref="T:System.Int32" />，表示兩個文字範圍是否有相同的端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-120">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-121">如果呼叫端的端點在文字中比目標端點更早出現，則傳回負值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-121">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span>
          </span>
          <span data-ttu-id="2cdb5-122">如果呼叫端的端點與目標端點在相同位置，則傳回零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-122">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span>
          </span>
          <span data-ttu-id="2cdb5-123">如果呼叫端的端點在文字中比目標端點更晚出現，則傳回正值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-123">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-124">藉由比較相同的文字範圍的開始和結束端點中，您可以識別變質文字範圍時，或如果端點是以邏輯的文字流向順序。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-124">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2cdb5-125">如果範圍是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-125">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2cdb5-126">如果範圍來自另一個容器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-126">If range is from another container.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="member this.ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="textPatternRange.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="2cdb5-127">文字單元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-127">The textual unit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-128">將文字範圍擴展至指定的 <see cref="T:System.Windows.Automation.Text.TextUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-128">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-129">如果範圍是已指定的單位中確切的數量，則會維持不變。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-129">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="2cdb5-130">為了讓<xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A>方法執行成功，在幕後執行一連串的動作。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-130">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="2cdb5-131">的文字範圍已正規化;也就是文字範圍已摺疊為變質範圍，以在<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start>端點，讓<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>端點變成多餘。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-131">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="2cdb5-132">需要此步驟，才能移除模稜兩可情況下，文字範圍跨越`unit`界限; 例如，"{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/)內嵌於文字"其中"{"和"}"是文字範圍端點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-132">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="2cdb5-133">結果產生的範圍會在 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 中向後移至所要求 `unit` 界限的開頭。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-133">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="2cdb5-134">範圍會在 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 中依所要求的 `unit` 界限數目向前或向後移動。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-134">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="2cdb5-135">範圍會接著依一個要求的 `unit` 界限移動 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 端點，從變質範圍狀態展開。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-135">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="2cdb5-136">![範圍由 Move 和 expandtoenclosingunit 進行調整](~/add/media/uia-textpattern-moveandexpand-examples.png "範圍由 Move 和 expandtoenclosingunit 進行調整")</span><span class="sxs-lookup"><span data-stu-id="2cdb5-136">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="2cdb5-137">如何針對 Move() 和 ExpandToEnclosingUnit() 調整文字範圍的範例</span><span class="sxs-lookup"><span data-stu-id="2cdb5-137">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdb5-138">這些步驟是必要的因為它是很常見的螢幕助讀程式讀取出完整的單字、 句子或在插入點或任何虛擬的游標位置的整個段落。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-138">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="2cdb5-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> 尊重隱藏與顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="2cdb5-140">使用者介面自動化用戶端可以檢查<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>文字可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-140">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="2cdb5-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> 會延後到下一個最大<xref:System.Windows.Automation.Text.TextUnit>如果給定<xref:System.Windows.Automation.Text.TextUnit>控制項不支援。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="2cdb5-142">如下所示的順序，從最大、 最小單位。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-142">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="member this.FindAttribute : System.Windows.Automation.AutomationTextAttribute * obj * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="2cdb5-143">要搜尋的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-143">The attribute to search for.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2cdb5-144">要搜尋的屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-144">The attribute value to search for.</span>
          </span>
          <span data-ttu-id="2cdb5-145">這個值必須符合屬性的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-145">This value must match the type specified for the attribute.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="2cdb5-146">如果傳回的是最後產生的文字範圍，而不是第一個文字範圍，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-146">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-147">傳回具有指定之屬性值的文字範圍子集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-147">Returns a text range subset that has the specified attribute value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-148">具有相符屬性和屬性值的文字範圍；否則為 Null (在 Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-148">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-149">隱藏與顯示的文字之間沒有差異。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-149">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="2cdb5-150">使用者介面自動化用戶端可以使用<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>檢查文字方塊的可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-150">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdb5-151">使用<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>搜尋整份文件。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-151">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="member this.FindText : string * bool * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="2cdb5-152">要搜尋的文字字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-152">The text string to search for.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="2cdb5-153">如果傳回的是最後產生的文字範圍，而不是第一個文字範圍，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-153">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2cdb5-154">如果要忽略大小寫，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-154">
              <see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-155">傳回包含指定文字的文字範圍子集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-155">Returns a text range subset that contains the specified text.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-156">符合指定之文字的文字範圍；否則為 Null (在 Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-156">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-157">隱藏與顯示的文字之間沒有差異。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-157">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="2cdb5-158">使用者介面自動化用戶端可以使用<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>檢查文字方塊的可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-158">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdb5-159">使用<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>搜尋整份文件。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-159">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeValue : System.Windows.Automation.AutomationTextAttribute -&gt; obj" Usage="textPatternRange.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="2cdb5-160">文字屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-160">The text attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-161">傳回整個文字範圍中指定之屬性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-161">Returns the value of the specified attribute across the entire text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-162">傳回指定之屬性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-162">Returns the value of the specified attribute.</span>
          </span>
          <span data-ttu-id="2cdb5-163">例如，GetAttributeValue(TextPattern.FontNameAttribute) 會傳回字串，代表文字範圍的字型名稱 (如果是唯一的)，GetAttributeValue(TextPattern.IsItalicAttribute) 會傳回布林值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-163">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span>
          </span>
          <span data-ttu-id="2cdb5-164">如果指定之屬性的值在文字範圍內會變動，則傳回 <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-164">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span>
          </span>
          <span data-ttu-id="2cdb5-165">如果提供者或控制項不支援指定的屬性，則傳回 <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-165">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-166">隱藏與顯示的文字之間沒有差異。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-166">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="2cdb5-167">使用者介面自動化用戶端可以使用<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>檢查文字方塊的可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-167">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2cdb5-168">如果指定的屬性無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-168">If the specified attribute is not valid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="member this.GetBoundingRectangles : unit -&gt; System.Windows.Rect[]" Usage="textPatternRange.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-169">對文字範圍中每一個完整或部分可見的文字行，擷取週框的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-169">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-170">由文字範圍中每一個完整或部分可見的文字行所構成的週框陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-170">An array of bounding rectangles for each full or partial line of text in a text range.</span>
          </span>
          <span data-ttu-id="2cdb5-171">變質文字範圍的空陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-171">An empty array for a degenerate text range.</span>
          </span>
          <span data-ttu-id="2cdb5-172">具有螢幕座標之文字範圍的空陣列，這些座標讓文字範圍完全放在螢幕之外、捲動到檢視之外，或被重疊的視窗遮蔽。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-172">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="member this.GetChildren : unit -&gt; System.Windows.Automation.AutomationElement[]" Usage="textPatternRange.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-173">擷取文字範圍內所有內嵌物件的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-173">Retrieves a collection of all embedded objects that fall within the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-174">落在範圍內之所有子物件的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-174">A collection of all child objects that fall within the range.</span>
          </span>
          <span data-ttu-id="2cdb5-175">如果子系與範圍重疊，但未被範圍完全圍住，則也會包含在集合中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-175">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span>
          </span>
          <span data-ttu-id="2cdb5-176">如果沒有子物件，則傳回空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-176">Returns an empty collection if there are no child objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="member this.GetEnclosingElement : unit -&gt; System.Windows.Automation.AutomationElement" Usage="textPatternRange.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-177">傳回圍住文字範圍的最內層 <see cref="T:System.Windows.Automation.AutomationElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-177">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-178">封入呼叫端的最內層項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-178">The innermost element enclosing the caller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-179">封閉式<xref:System.Windows.Automation.AutomationElement>，通常是提供文字範圍的文字提供者。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-179">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="2cdb5-180">但是，如果文字提供者支援子項目，例如表格或超連結，則封入項目可以為文字提供者的子代。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-180">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="member this.GetText : int -&gt; string" Usage="textPatternRange.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">
          <span data-ttu-id="2cdb5-181">傳回之字串的最大長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-181">The maximum length of the string to return.</span>
          </span>
          <span data-ttu-id="2cdb5-182">如果不需要限制，請使用 <c>-1</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-182">Use <c>-1</c> if no limit is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-183">傳回文字範圍的純文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-183">Returns the plain text of the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-184">文字範圍的純文字，可能會依指定的 <paramref name="maxLength" /> 截斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-184">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> 尊重隱藏與顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="2cdb5-186">使用者介面自動化用戶端可以檢查<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>文字可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-186">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="2cdb5-187">如果`maxLength`大於的長度的呼叫端的文字範圍內，傳回的字串將會是純文字的文字範圍。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-187">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="2cdb5-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> 將不會影響文字流向; 中的端點的順序它一律會傳回文字之間的邏輯文字流程順序中的文字範圍的開始和結束端點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2cdb5-189">如果 <paramref name="maxLength" /> 小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-189">If <paramref name="maxLength" /> is less than -1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="2cdb5-190">文字單元界限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-190">The text unit boundary.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2cdb5-191">要移動的文字單元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-191">The number of text units to move.</span>
          </span>
          <span data-ttu-id="2cdb5-192">正值會將文字範圍向前移動，負值會將文字範圍向後移動，0 沒有作用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-192">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-193">將文字範圍移動指定的文字單元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-193">Moves the text range the specified number of text units.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-194">實際移動的單元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-194">The number of units actually moved.</span>
          </span>
          <span data-ttu-id="2cdb5-195">如果新的文字範圍端點大於或小於 <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> 端點，則此值會小於要求的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-195">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-196">如需周遊文字範圍的內容，則應在幕後執行一連串的步驟，才能成功執行 <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-196">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="2cdb5-197">文字範圍已正規化；也就是，文字範圍已在 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 端點摺疊為變質範圍，以致 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 端點變成多餘的。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-197">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="2cdb5-198">需要此步驟，才能移除模稜兩可情況下，文字範圍跨越`unit`界限; 例如，"{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/)內嵌於文字"其中"{"和"}"是文字範圍端點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-198">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="2cdb5-199">結果產生的範圍會在 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 中向後移至所要求 `unit` 界限的開頭。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-199">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="2cdb5-200">範圍會在 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 中依所要求的 `unit` 界限數目向前或向後移動。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-200">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="2cdb5-201">範圍會接著依一個要求的 `unit` 界限移動 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 端點，從變質範圍狀態展開。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-201">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="2cdb5-202">![範圍由 Move 和 expandtoenclosingunit 進行調整](~/add/media/uia-textpattern-moveandexpand-examples.png "範圍由 Move 和 expandtoenclosingunit 進行調整")</span><span class="sxs-lookup"><span data-stu-id="2cdb5-202">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="2cdb5-203">如何針對 Move() 和 ExpandToEnclosingUnit() 調整文字範圍的範例</span><span class="sxs-lookup"><span data-stu-id="2cdb5-203">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="2cdb5-204">在 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 樹狀目錄的控制項檢視和內容檢視 (例如超連結或表格儲存格) 中，文字容器和內嵌物件的文字內容 (或內部文字) 會公開為單一連續的文字資料流； 物件界限會被忽略。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-204">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="2cdb5-205">如果使用者介面自動化用戶端為了以某種方式進行敘述、解譯或分析而擷取文字，則應檢查特殊案例 (例如具有文字內容或其他內嵌物件的表格) 的文字範圍。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-205">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="2cdb5-206">這可藉由呼叫<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A>來取得<xref:System.Windows.Automation.AutomationElement>每個內嵌物件，然後再呼叫<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A>取得文字範圍的每個項目; 這會以遞迴方式，直到擷取所有的文字內容為止。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-206">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="2cdb5-207">![合併的內嵌物件的文字範圍。](~/add/media/uia-textpattern-embeddedobjecttextranges.png "合併內嵌物件的文字範圍。")</span><span class="sxs-lookup"><span data-stu-id="2cdb5-207">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="2cdb5-208">具有內嵌物件及其範圍的文字資料流範例</span><span class="sxs-lookup"><span data-stu-id="2cdb5-208">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="2cdb5-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> 尊重隱藏與顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="2cdb5-210">使用者介面自動化用戶端可以檢查<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>文字可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-210">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="2cdb5-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> 會延後到下一個最大<xref:System.Windows.Automation.Text.TextUnit>如果給定<xref:System.Windows.Automation.Text.TextUnit>控制項不支援。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="2cdb5-212">如下所示的順序，從最大、 最小單位。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-212">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="2cdb5-213">因為只是文字範圍跨越的不同部分文字，文字不會以任何方式改變。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-213">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="textPatternRange.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="2cdb5-214">要移動的端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-214">The endpoint to move.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="2cdb5-215">來自相同文字提供者的另一個範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-215">Another range from the same text provider.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="2cdb5-216">另一個範圍上的端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-216">An endpoint on the other range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-217">將文字範圍的一個端點移至第二個文字範圍上指定的端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-217">Moves one endpoint of a text range to the specified endpoint of a second text range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-218">如果要移動的端點跨越相同的文字範圍的另一個端點，則導致變質範圍，並確保正確的順序，端點的同時，移動該另一個端點 (也就是<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start>一定會小於或等於<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="2cdb5-218">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="2cdb5-219">要移動的端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-219">The endpoint to move.</span>
          </span>
        </param>
        <param name="unit">
          <span data-ttu-id="2cdb5-220">要移動的文字單元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-220">The textual unit for moving.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2cdb5-221">要移動的單位數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-221">The number of units to move.</span>
          </span>
          <span data-ttu-id="2cdb5-222">正計數會將端點向前移動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-222">A positive count moves the endpoint forward.</span>
          </span>
          <span data-ttu-id="2cdb5-223">負計數會向後移動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-223">A negative count moves backward.</span>
          </span>
          <span data-ttu-id="2cdb5-224">計數為 0 沒有作用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-224">A count of 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-225">在文件範圍內，將文字範圍的一個端點移動指定的 <see cref="T:System.Windows.Automation.Text.TextUnit" /> 數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-225">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2cdb5-226">實際移動的單元數，如果移動端點會碰到文件的開頭或結尾，則會小於要求的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-226">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-227">如需周遊文字範圍的內容，則應在幕後執行一連串的步驟，才能成功執行 <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-227">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="2cdb5-228">文字範圍已正規化；也就是，文字範圍已在 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 端點摺疊為變質範圍，以致 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 端點變成多餘的。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-228">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="2cdb5-229">需要此步驟，才能移除模稜兩可情況下，文字範圍跨越`unit`界限; 例如，"{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/)內嵌於文字"其中"{"和"}"是文字範圍端點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-229">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="2cdb5-230">結果產生的範圍會在 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 中向後移至所要求 `unit` 界限的開頭。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-230">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="2cdb5-231">範圍會接著依一個要求的 `unit` 界限移動 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 端點，從變質範圍狀態展開。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-231">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="2cdb5-232">![範圍由 Move 和 expandtoenclosingunit 進行調整](~/add/media/uia-textpattern-moveandexpand-examples.png "範圍由 Move 和 expandtoenclosingunit 進行調整")</span><span class="sxs-lookup"><span data-stu-id="2cdb5-232">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="2cdb5-233">如何針對 Move() 和 ExpandToEnclosingUnit() 調整文字範圍的範例</span><span class="sxs-lookup"><span data-stu-id="2cdb5-233">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="2cdb5-234">在 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 樹狀目錄的控制項檢視和內容檢視 (例如超連結或表格儲存格) 中，文字容器和內嵌物件的文字內容 (或內部文字) 會公開為單一連續的文字資料流； 物件界限會被忽略。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-234">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="2cdb5-235">如果使用者介面自動化用戶端為了以某種方式進行敘述、解譯或分析而擷取文字，則應檢查特殊案例 (例如具有文字內容或其他內嵌物件的表格) 的文字範圍。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-235">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="2cdb5-236">這可藉由呼叫<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A>來取得<xref:System.Windows.Automation.AutomationElement>每個內嵌物件，然後再呼叫<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A>取得文字範圍的每個項目; 這會以遞迴方式，直到擷取所有的文字內容為止。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-236">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="2cdb5-237">![合併的內嵌物件的文字範圍。](~/add/media/uia-textpattern-embeddedobjecttextranges.png "合併內嵌物件的文字範圍。")</span><span class="sxs-lookup"><span data-stu-id="2cdb5-237">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="2cdb5-238">具有內嵌物件及其範圍的文字資料流範例</span><span class="sxs-lookup"><span data-stu-id="2cdb5-238">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="2cdb5-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> 會延後到下一個最大<xref:System.Windows.Automation.Text.TextUnit>如果給定<xref:System.Windows.Automation.Text.TextUnit>控制項不支援。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="2cdb5-240">如下所示的順序，從最大、 最小單位。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-240">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="member this.RemoveFromSelection : unit -&gt; unit" Usage="textPatternRange.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-241">從支援多次斷續選取的文字容器中現有反白的文字集合，移除反白的文字區段，此區段對應至呼叫端文字範圍的 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 和 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-241">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-242">文字插入點會移至反白顯示的已移除的區域。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-242">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="2cdb5-243">提供的變質文字範圍，將會移動插入點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-243">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2cdb5-244">如果文字提供者不支援 Multiple，則為斷續的選取範圍 (例如，<see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> 必須擁有 <see langword="Multiple" /> 這個值)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-244">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="textPatternRange.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">
          <span data-ttu-id="2cdb5-245">如果應該捲動文字控制項，讓文字範圍與檢視區的頂端齊平，則為 <see langword="true" />；如果應該與檢視區的底端齊平，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-245">
              <see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2cdb5-246">導致文字控制項垂直捲動，直到在檢視區看到文字範圍為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-246">Causes the text control to scroll vertically until the text range is visible in the viewport.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> 尊重隱藏與顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="2cdb5-248">使用者介面自動化用戶端可以檢查<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>文字可見性。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-248">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="2cdb5-249">如果文字範圍已隱藏，只能在隱藏的文字中的檢視區有錨點，會捲動文字控制項。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-249">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2cdb5-250">如果控制項不支援捲動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-250">If scrolling is not supported by the control.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="textPatternRange.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-251">反白文字控制項的文字，此文字對應至文字範圍的 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 和 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 端點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-251">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdb5-252">如果提供的變質文字範圍，則文字插入點會移到<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start>文字範圍的結束點。</span><span class="sxs-lookup"><span data-stu-id="2cdb5-252">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2cdb5-253">發生於文字控制項不支援文字選取範圍時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-253">Occurs when text selection is not supported by the text control.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextPattern : System.Windows.Automation.TextPattern" Usage="System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2cdb5-254">取得與文字範圍關聯的 <see cref="T:System.Windows.Automation.TextPattern" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-254">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2cdb5-255">文字提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2cdb5-255">The text provider.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>