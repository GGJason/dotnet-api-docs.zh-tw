<Type Name="LogPolicy" FullName="System.IO.Log.LogPolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b9d3c8c1afc2decef19b4893282643554ba0484" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30418282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogPolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogPolicy sealed" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>代表與 <see cref="T:System.IO.Log.LogStore" /> 相關聯的原則。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 原則是 <xref:System.IO.Log.LogStore> 執行個體及其用戶端所應遵循的規則集。 您可以使用 <xref:System.IO.Log.LogPolicy> 執行個體來檢查和修改與特定 <xref:System.IO.Log.LogStore> 相關聯的原則。 原則可以描述允許的記錄檔大小上限及下限，或描述允許 <xref:System.IO.Log.LogStore> 執行個體擴增的方式。 此外，您還可以控制是否封存 <xref:System.IO.Log.LogStore> 執行個體。  
  
 在變更任何屬性之後，您應該使用 <xref:System.IO.Log.LogPolicy.Commit%2A> 方法，以確保這項變更會套用至 <xref:System.IO.Log.LogStore>。 您可以呼叫 <xref:System.IO.Log.LogPolicy.Refresh%2A> 方法來捨棄變更，或取得最新的原則。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AutoGrow">
      <MemberSignature Language="C#" Value="public bool AutoGrow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGrow" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.AutoGrow" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGrow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGrow { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示 <see cref="T:System.IO.Log.LogStore" /> 是否可以自動擴增。</summary>
        <value>
          如果 <see langword="true" /> 可以自動擴增其大小，則為 <see cref="T:System.IO.Log.LogStore" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoShrinkPercentage">
      <MemberSignature Language="C#" Value="public int AutoShrinkPercentage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AutoShrinkPercentage" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.AutoShrinkPercentage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoShrinkPercentage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AutoShrinkPercentage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.IO.Log.LogStore" /> 可以縮減的可用空間百分比。</summary>
        <value>
          <see cref="T:System.IO.Log.LogStore" /> 可以縮減的可用空間百分比。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 <xref:System.IO.Log.LogStore> 中的可用空間數量大於這個屬性指定的數量時，<xref:System.IO.Log.LogStore> 會自動將大小減少到 <xref:System.IO.Log.LogPolicy.MinimumExtentCount%2A> 屬性所指定的大小。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogPolicy.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個原則設定為 <see cref="T:System.IO.Log.LogStore" /> 的目前原則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在進行任何變更之後，您必須呼叫 <xref:System.IO.Log.LogPolicy.Commit%2A> 以確保將此變更記錄下來。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">記錄上安裝的一組原則無效。  
  
 -或-  
  
 記錄檔的原則阻礙這項作業完成。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">目前的平台不支援設定這個原則。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.PathTooLongException">新延伸區的前置詞無效或太長。 必須提供有效的前置詞。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="GrowthRate">
      <MemberSignature Language="C#" Value="public System.IO.Log.PolicyUnit GrowthRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.PolicyUnit GrowthRate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.GrowthRate" />
      <MemberSignature Language="VB.NET" Value="Public Property GrowthRate As PolicyUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::PolicyUnit GrowthRate { System::IO::Log::PolicyUnit get(); void set(System::IO::Log::PolicyUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.PolicyUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.IO.Log.LogStore" /> 的自動擴增速率。</summary>
        <value>
          <see cref="T:System.IO.Log.LogStore" /> 的自動擴增速率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 <xref:System.IO.Log.LogStore> 已滿時，這個原則值會決定可以增加的空間數量。 如果這會讓 <xref:System.IO.Log.LogStore> 中的延伸區數目超過 <xref:System.IO.Log.LogPolicy.MaximumExtentCount%2A>，就不會增加空間。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumExtentCount">
      <MemberSignature Language="C#" Value="public int MaximumExtentCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumExtentCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.MaximumExtentCount" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumExtentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumExtentCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.IO.Log.LogExtent" /> 可以包含之 <see cref="T:System.IO.Log.LogStore" /> 執行個體的最大數目。</summary>
        <value>
          <see cref="T:System.IO.Log.LogExtent" /> 可以包含之 <see cref="T:System.IO.Log.LogStore" /> 執行個體的最大數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumExtentCount">
      <MemberSignature Language="C#" Value="public int MinimumExtentCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumExtentCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.MinimumExtentCount" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumExtentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumExtentCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.IO.Log.LogExtent" /> 可以包含之 <see cref="T:System.IO.Log.LogStore" /> 執行個體的最小數目。</summary>
        <value>整數，指定 <see cref="T:System.IO.Log.LogExtent" /> 可以包含之 <see cref="T:System.IO.Log.LogStore" /> 執行個體的最小數目。 因為 CLFS 要求最小的延伸區計數必須是 2 個延伸區，所以這個值應該至少是 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewExtentPrefix">
      <MemberSignature Language="C#" Value="public string NewExtentPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewExtentPrefix" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.NewExtentPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property NewExtentPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewExtentPrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定自動建立之延伸區的前置字串。</summary>
        <value>自動建立之延伸區的前置字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個字串可以包含建立新延伸區所在之目錄的完整路徑。 延伸區的預設路徑是包含基底 <xref:System.IO.Log.LogStore> 檔案的目錄。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextExtentSuffix">
      <MemberSignature Language="C#" Value="public long NextExtentSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NextExtentSuffix" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.NextExtentSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Property NextExtentSuffix As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NextExtentSuffix { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定新延伸區的後置數字。</summary>
        <value>新延伸區的後置數字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PinnedTailThreshold">
      <MemberSignature Language="C#" Value="public System.IO.Log.PolicyUnit PinnedTailThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.PolicyUnit PinnedTailThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.PinnedTailThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Property PinnedTailThreshold As PolicyUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::PolicyUnit PinnedTailThreshold { System::IO::Log::PolicyUnit get(); void set(System::IO::Log::PolicyUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.PolicyUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="E:System.IO.Log.LogRecordSequence.TailPinned" /> 事件要求將記錄檔基底往前移動時所需的空間量。</summary>
        <value>
          <see cref="E:System.IO.Log.LogRecordSequence.TailPinned" /> 事件要求將記錄檔基底往前移動時所需的空間量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空間量可以表示為百分比或位元組，而此值會取捨至 CLFS 中最接近的容器。 預設為 35 %。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogPolicy.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>讀取 <see cref="T:System.IO.Log.LogStore" /> 的目前原則，並捨棄可能已進行的任何變更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogPolicy> 類別來為記錄檔記錄順序設定原則。  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">記錄上安裝的一組原則無效。  
  
 -或-  
  
 記錄檔的原則阻礙這項作業完成。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">目前的平台不支援設定這個原則。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
  </Members>
</Type>