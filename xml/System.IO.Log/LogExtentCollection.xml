<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6312f62a7271a3ae638fe385dad862891597930" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51304369" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示與 <see cref="T:System.IO.Log.LogExtent" /> 關聯的 <see cref="T:System.IO.Log.LogStore" /> 物件集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別包含與 <xref:System.IO.Log.LogExtent> 關聯的 <xref:System.IO.Log.LogStore> 物件集合。 <xref:System.IO.Log.LogStore> 執行個體會將它的資料儲存在 <xref:System.IO.Log.LogExtent> 執行個體所代表的延伸磁碟區集合中。 特定 <xref:System.IO.Log.LogExtent> 只會與一個 <xref:System.IO.Log.LogStore> 相關聯，而且在同一個 <xref:System.IO.Log.LogExtent> 中的 <xref:System.IO.Log.LogStore> 物件的大小都相同。 在 <xref:System.IO.Log.LogStore> 執行個體中新增及移除空間時，將會以延伸區的倍數來進行。  
  
 雖然 <xref:System.IO.Log.LogExtent> 物件會在磁碟上以檔案形式表示，但是您不可以將它們當做一般的檔案來移動或刪除。 您應該改用此類別所提供的方法來直接新增及刪除 <xref:System.IO.Log.LogExtent> 執行個體。 當延伸區不再包含任何使用中的資料時，通常會將延伸區移除。 不過，如果 `force` 方法中的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 參數為 `true`，當無法立即移除延伸區時就會擲回例外狀況。  
  
 <xref:System.IO.Log.LogExtentCollection> 中的最後一個延伸區無法移除，意指 <xref:System.IO.Log.LogExtentCollection.Count%2A> 屬性在加入延伸區之後不可以為零。  
  
   
  
## Examples  
 這個範例示範如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 類別，在記錄順序中新增及模擬延伸區。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立新的 <see cref="T:System.IO.Log.LogExtent" />，並將其加入至集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要新增之延伸記錄區的路徑。</param>
        <summary>將 <see cref="T:System.IO.Log.LogExtent" /> 執行個體新增至集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新加入的 <xref:System.IO.Log.LogExtent> 執行個體大小與集合中現有的 <xref:System.IO.Log.LogExtent> 執行個體大小相同。  
  
> [!NOTE]
>  請勿使用此方法將第一個 <xref:System.IO.Log.LogExtent> 新增至集合。  
  
   
  
## Examples  
 這個範例示範如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 類別，在記錄順序中新增及模擬延伸區。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 所指定的記錄存放區檔案名稱無效。</exception>
        <exception cref="T:System.InvalidOperationException">必須指定第一個延伸區的大小。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為檔案或目錄已存在，所以無法建立 <paramref name="path" /> 所指定的檔案。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。  
  
-或- 
儲存磁碟或媒體已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">延伸記錄區的路徑。</param>
        <param name="size">延伸記錄區的大小。</param>
        <summary>建立指定大小的新 <see cref="T:System.IO.Log.LogExtent" />，並將其加入至集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果集合不是空的，則指定大小必須至少要與集合中其他延伸區的大小相同。 在此情況下，會忽略 `size` 參數，並建立大小與集合中其他延伸區相同的延伸區。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="size" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" /> 不在有效範圍內。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 所指定的記錄存放區檔案名稱無效。  
  
 <paramref name="size" /> 小於存放區中其他延伸區的大小。</exception>
        <exception cref="T:System.InvalidOperationException">必須指定第一個延伸區的大小。  
  
-或- 
不可使用重覆的延伸區名稱。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為檔案或目錄已存在，所以無法建立 <paramref name="path" /> 所指定的檔案。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。  
  
-或- 
儲存磁碟或媒體已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得集合中延伸記錄區的數目。</summary>
        <value>集合中延伸記錄區的數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例示範如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 類別，在記錄順序中新增及模擬延伸區。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">記錄存放區已經過處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得集合中可用的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體數目，也就是不包含任何資料的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體數目。</summary>
        <value>集合中可用的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例示範如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 類別，在記錄順序中新增及模擬延伸區。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">記錄存放區已經過處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得此集合中 <see cref="T:System.IO.Log.LogExtent" /> 執行個體的列舉值。 這個方法無法被繼承。</summary>
        <returns>此集合中 <see cref="T:System.IO.Log.LogExtent" /> 執行個體的列舉值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">因為下列其中一個原因而導致作業無效： 
-   列舉已經結束。  
  
-   集合已經過修改。  
  
-   列舉尚未啟動。 必須呼叫 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>移除集合中的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">要移除的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體。</param>
        <param name="force">如果要立即移除延伸區則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>移除集合中的指定 <see cref="T:System.IO.Log.LogExtent" /> 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有在 <xref:System.IO.Log.LogExtent> 執行個體不屬於 <xref:System.IO.Log.LogStore> 使用中區域的一部分時，才能將其從集合中移除。 如果 `force` 參數為 `true`，而且無法立即移除延伸區，就會擲回例外狀況。 如果 `force` 參數為 `false`，而且無法立即移除延伸區，該移除作業會延後，直到該延伸區不再屬於使用中區域的一部分為止。  
  
 <xref:System.IO.Log.LogExtentCollection> 中的最後一個延伸區無法移除，意指 <xref:System.IO.Log.LogExtentCollection.Count%2A> 屬性在新增延伸區之後不可以為零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extent" /> 或 <paramref name="force" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在集合中找不到 <paramref name="extent" />。</exception>
        <exception cref="T:System.InvalidOperationException">無法移除 <paramref name="extent" />。 該延伸區仍是使用中區域的一部分，或是存取遭拒。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
 無法刪除 <paramref name="extent" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">要移除之 <see cref="T:System.IO.Log.LogExtent" /> 的路徑。</param>
        <param name="force">如果要立即移除延伸區則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>移除集合中具有指定路徑的 <see cref="T:System.IO.Log.LogExtent" /> 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有在 <xref:System.IO.Log.LogExtent> 執行個體不屬於 <xref:System.IO.Log.LogStore> 使用中區域的一部分時，才能將其從集合中移除。 如果 `force` 參數為 `true`，而且無法立即移除延伸區，就會擲回例外狀況。 如果 `force` 參數為 `false`，而且無法立即移除延伸區，該移除作業會延後，直到該延伸區不再屬於使用中區域的一部分為止。  
  
 <xref:System.IO.Log.LogExtentCollection> 中的最後一個延伸區無法移除，意指 <xref:System.IO.Log.LogExtentCollection.Count%2A> 屬性在新增延伸區之後不可以為零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="force" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在集合中找不到 <paramref name="path" /> 指定的延伸區。</exception>
        <exception cref="T:System.InvalidOperationException">無法移除 <paramref name="path" /> 指定的延伸區。 該延伸區仍是使用中區域的一部分，或是存取遭拒。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
無法刪除 <paramref name="path" /> 指定的延伸區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得此集合中 <see cref="T:System.IO.Log.LogExtent" /> 執行個體的列舉值。 這個方法無法被繼承。</summary>
        <returns>此集合中 <see cref="T:System.IO.Log.LogExtent" /> 執行個體的列舉值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>