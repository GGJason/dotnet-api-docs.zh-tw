<Type Name="IRecordSequence" FullName="System.IO.Log.IRecordSequence">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffdfe5ac704327420d0d6e8650da73efc0cde964" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57931346" /></Metadata><TypeSignature Language="C#" Value="public interface IRecordSequence : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRecordSequence implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.IRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRecordSequence&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRecordSequence : IDisposable" />
  <TypeSignature Language="F#" Value="type IRecordSequence = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7a079-101">提供記錄順序的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="7a079-101">Provides a generic interface to a sequence of records.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-102"><xref:System.IO.Log.IRecordSequence> 介面會提供記錄導向資料流的抽象介面。</span><span class="sxs-lookup"><span data-stu-id="7a079-102">The <xref:System.IO.Log.IRecordSequence> interface provides an abstract interface to a record-oriented stream.</span></span> <span data-ttu-id="7a079-103"><xref:System.IO.Log.IRecordSequence> 執行個體可以用來讀取和寫入記錄檔記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-103">A <xref:System.IO.Log.IRecordSequence> instance can be used to read and write log records.</span></span>  
  
 <span data-ttu-id="7a079-104"><xref:System.IO.Log.IRecordSequence> 介面提供下列功能：</span><span class="sxs-lookup"><span data-stu-id="7a079-104">The <xref:System.IO.Log.IRecordSequence> interface provides the following capabilities,</span></span>  
  
-   <span data-ttu-id="7a079-105">使用 <xref:System.IO.Log.IRecordSequence.Append%2A> 方法，附加記錄檔記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-105">Append log records using the <xref:System.IO.Log.IRecordSequence.Append%2A> methods.</span></span>  
  
-   <span data-ttu-id="7a079-106">使用 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 方法，讀取附加的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-106">Read the appended records using the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
-   <span data-ttu-id="7a079-107">使用 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 方法，寫入特殊的重新啟動記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-107">Write a special restart record using the <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
-   <span data-ttu-id="7a079-108">使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法，從最近寫入的重新啟動記錄中讀取重新啟動記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-108">Read restart records from the most recently written restart record using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
-   <span data-ttu-id="7a079-109">使用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法，將記錄清除至永久性存放區。</span><span class="sxs-lookup"><span data-stu-id="7a079-109">Flush the records to durable store using the  <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
-   <span data-ttu-id="7a079-110">保留空間以便附加記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-110">Reserve space for appending records.</span></span>  
  
-   <span data-ttu-id="7a079-111">將記錄檔基底往前移以釋放記錄空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-111">Free log space by advancing the base of the log.</span></span>  
  
-   <span data-ttu-id="7a079-112">接收 <xref:System.IO.Log.IRecordSequence.TailPinned> 事件通知以移動記錄檔基底來釋放空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-112">Receive <xref:System.IO.Log.IRecordSequence.TailPinned> event notifications to move the base of the log to free space.</span></span>  
  
 <span data-ttu-id="7a079-113">記錄檔記錄會附加到 <xref:System.IO.Log.IRecordSequence> 執行個體，而且每個記錄檔記錄會被賦予唯一的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-113">Log records are appended to a <xref:System.IO.Log.IRecordSequence> instance, and each log record is given a unique sequence number.</span></span> <span data-ttu-id="7a079-114">序號會在指定的記錄順序中嚴謹地以固定方式增加。</span><span class="sxs-lookup"><span data-stu-id="7a079-114">Sequence numbers are strictly monotonically increasing within a given record sequence.</span></span> <span data-ttu-id="7a079-115">記錄檔記錄由不透明的資料組成，這些資料是提供給位元組 ArraySegments 之 <xref:System.IO.Log.IRecordSequence> 中的 <xref:System.Collections.IList> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="7a079-115">A log record consists of opaque data, supplied to the <xref:System.IO.Log.IRecordSequence> instance in an <xref:System.Collections.IList> of ArraySegments of bytes.</span></span>  
  
 <span data-ttu-id="7a079-116"><xref:System.IO.Log.IRecordSequence> 介面也會公開一些提供記錄界限相關資訊的基本屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-116">The <xref:System.IO.Log.IRecordSequence> interface also exposes a few basic properties which provides information about log boundaries.</span></span>  
  
-   <span data-ttu-id="7a079-117"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 屬性包含記錄順序中第一個有效記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-117">The <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> property contains the sequence number of the first valid record in the record sequence.</span></span>  
  
-   <span data-ttu-id="7a079-118"><xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 屬性包含保證大於上一個附加記錄之序號的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-118">The <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span>  
  
-   <span data-ttu-id="7a079-119"><xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> 屬性包含最後一個寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-119">The <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> property contains the sequence number of the last written restart area.</span></span>  
  
-   <span data-ttu-id="7a079-120"><xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> 屬性包含可在順序中附加或讀取之最大記錄的大小。</span><span class="sxs-lookup"><span data-stu-id="7a079-120">The <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> property contains the size of the largest record that can be appended to, or read from the sequence.</span></span>  
  
-   <span data-ttu-id="7a079-121"><xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> 屬性包含在此記錄順序中建立之所有保留區的總大小。</span><span class="sxs-lookup"><span data-stu-id="7a079-121">The <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> property contains the total size of all reservations made in this record sequence.</span></span>  
  
-   <span data-ttu-id="7a079-122">如果 <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> 屬性設為 `true`，且 <xref:System.IO.Log.IRecordSequence.Append%2A> 作業因為順序中沒有空間而失敗，則記錄順序會嘗試釋放空間，然後重試此「附加」作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-122">If the <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> property is set to `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit" Usage="iRecordSequence.AdvanceBaseSequenceNumber newBaseSequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-123">記錄順序的新基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-123">The new base sequence number of the record sequence.</span></span></param>
        <summary><span data-ttu-id="7a079-124">將記錄檔的基底序號往前移動。</span><span class="sxs-lookup"><span data-stu-id="7a079-124">Moves the base sequence number of the log forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-125">當您使用 <xref:System.IO.Log.LogRecordSequence> 執行個體並嘗試將序號往前移以釋放記錄檔中的空間時，新的基底序號必須是在不同的延伸記錄區，才能將上一個延伸區標示為空白。</span><span class="sxs-lookup"><span data-stu-id="7a079-125">When you use a <xref:System.IO.Log.LogRecordSequence> instance and try to advance the sequence number to free up space in the log, the new base sequence number must reside in a different log extent for the previous extent to be marked as empty.</span></span> <span data-ttu-id="7a079-126">不支援部分釋放延伸區。</span><span class="sxs-lookup"><span data-stu-id="7a079-126">Freeing extents partially is not supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-127"><paramref name="newBaseSequenceNumber" /> 無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-127"><paramref name="newBaseSequenceNumber" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7a079-128"><paramref name="newBaseSequenceNumber" /> 無法在記錄檔中使用。</span><span class="sxs-lookup"><span data-stu-id="7a079-128"><paramref name="newBaseSequenceNumber" /> is not active in the log.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-129">修改序列時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-129">An I/O error occurred while modifying the sequence.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-130">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-130">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-131">記錄順序已滿。</span><span class="sxs-lookup"><span data-stu-id="7a079-131">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-132">在衍生類別中覆寫時，將記錄檔記錄寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-132">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-133">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-133">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-134">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-134">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-135">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-135">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-136"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-136">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="7a079-137">在衍生類別中覆寫時，將記錄檔記錄寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-137">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="7a079-138">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-138">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-139">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-139">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-140">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-140">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-141">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-141">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-142">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-142">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-143">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-143">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-144">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-144">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-145">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-145">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-146">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-146">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-147">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-147">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-148">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-148">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-149">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-149">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-150"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-150">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="7a079-151">在衍生類別中覆寫時，將記錄檔記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-151">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="7a079-152">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-152">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-153">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-153">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-154">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-154">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-155">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-155">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-156">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-156">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-157">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-157">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-158">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-158">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-159">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-159">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-160">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-160">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-161">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-161">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-162">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-162">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-163">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-163">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-164"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-164">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-165"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-165">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="7a079-166">在衍生類別中覆寫時，使用之前在順序中保留的空間，將記錄檔記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-166">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-167">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-167">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-168">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-168">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-169">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-169">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-170">附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-170">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="7a079-171">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-171">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-172">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-172">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-173">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-173">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-174">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-174">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-175">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-175">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-176">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-176">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-177">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-177">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-178">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-178">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-179">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-179">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-180">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-180">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-181"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-181">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-182"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-182">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="7a079-183">在衍生類別中覆寫時，使用之前在順序中保留的空間，將記錄檔記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-183">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-184">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-184">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-185">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-185">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-186">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-186">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-187">附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-187">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="7a079-188">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-188">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-189">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-189">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-190">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-190">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-191">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-191">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-192">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-192">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-193">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-193">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-194">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-194">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-195">在衍生類別中覆寫時，取得目前 <see cref="T:System.IO.Log.IRecordSequence" /> 中第一個有效記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-195">When overridden in a derived class, gets the sequence number of the first valid record in the current <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <value><span data-ttu-id="7a079-196">對應至 <see cref="T:System.IO.Log.IRecordSequence" /> 中之有效記錄的最小序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-196">The lowest sequence number that corresponds to a valid record in the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-197">有效的序號會大於或等於 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="7a079-197">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
 <span data-ttu-id="7a079-198">這個屬性的值可藉由呼叫 <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> 或 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 方法加以變更。</span><span class="sxs-lookup"><span data-stu-id="7a079-198">The value of this property can be changed by calling the <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> or <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-199">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-199">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-200">在衍生類別中覆寫時，開始非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-200">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-201">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-201">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-202">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-202">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-203">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-203">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-204"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-204">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-205">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-205">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-206">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-206">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-207">在衍生類別中覆寫時，開始非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-207">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-208"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-208">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-209">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-209">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-210">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-210">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-211">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-211">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-212">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-212">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-213">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-213">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-214">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-214">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-215">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-215">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-216">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-216">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-217">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-217">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-218">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-218">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-219">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-219">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-220">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-220">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-221">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-221">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-222"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-222">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-223">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-223">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-224">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-224">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-225">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-225">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-226"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-226">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-227">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-227">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-228">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-228">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-229">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-229">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-230">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-230">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-231">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-231">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-232">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-232">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-233">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-233">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-234">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-234">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-235">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-235">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-236">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-236">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-237">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-237">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-238">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-238">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-239">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-239">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-240"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-240">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-241"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-241">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-242">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-242">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-243">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-243">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-244">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-244">When overridden in a derived class, begins an asynchronous append operation using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-245"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-245">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-246">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-246">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-247">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-247">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-248">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-248">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-249">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-249">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-250">附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-250">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="7a079-251">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-251">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-252">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-252">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-253">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-253">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-254">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-254">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-255">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-255">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-256">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-256">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-257">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-257">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousUndoRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousUndoRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousUndoRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-258">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-258">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-259">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-259">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousUndoRecord"><span data-ttu-id="7a079-260">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-260">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-261"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-261">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-262"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-262">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-263">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-263">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-264">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-264">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-265">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-265">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-266"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-266">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-267">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-267">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-268">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-268">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-269">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-269">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-270">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-270">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-271">附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-271">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="7a079-272">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-272">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-273">此方法通常會在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-273">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="7a079-274">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-274">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-275">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-275">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-276">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-276">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-277">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-277">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-278">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-278">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginFlush (sequenceNumber, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="7a079-279">必須寫入之最新記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-279">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="7a079-280">如果這個 <see cref="T:System.IO.Log.SequenceNumber" /> 無效，則必須寫入所有的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-280">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-281">選擇性的非同步回呼，在清除完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-281">An optional asynchronous callback, to be called when the flush is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-282">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步清除的要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-282">A user-provided object that distinguishes this particular asynchronous flush request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-283">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的清除作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-283">When overridden in a derived class, begins an asynchronous flush operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-284"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步清除作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-284">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous flush operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-285">您應該將目前方法傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 方法，以確保清除完成，並適當釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-285">You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately.</span></span> <span data-ttu-id="7a079-286">如果在非同步清除期間發生錯誤，則必須在使用這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 呼叫 <xref:System.IAsyncResult> 方法後才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-286">If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-287">呼叫這個方法可以確保已永久寫入附加到 <xref:System.IO.Log.IRecordSequence> 的所有記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-287">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> are durably written.</span></span>  
  
 <span data-ttu-id="7a079-288">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-288">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-289">在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤)，會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-289">Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-290">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-290">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-291">清除資料時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-291">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-292">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-292">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-293">在衍生類別中覆寫時，開始非同步的保留和附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-293">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-294">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-294">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-295">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-295">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-296">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-296">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-297"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-297">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="7a079-298">要在其中建立保留區的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-298">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-299">要建立的保留區 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-299">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-300">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-300">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-301">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-301">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-302">在衍生類別中覆寫時，開始非同步的保留和附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-302">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-303"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的這項非同步作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-303">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-304">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-304">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-305">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-305">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-306">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-306">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-307">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-307">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-308">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-308">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="7a079-309">如果附加失敗，就不會保留任何空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-309">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="7a079-310">這個方法通常可以在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-310">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="7a079-311">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-311">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-312">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-312">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-313">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-313">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-314">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-314">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-315">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-315">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-316">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-316">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-317">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-317">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-318">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-318">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-319">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-319">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-320">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-320">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-321"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-321">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="7a079-322">要在其中建立保留區的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-322">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-323">要建立的保留區 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-323">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-324">選擇性的非同步回呼，在附加完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-324">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-325">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-325">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-326">在衍生類別中覆寫時，開始非同步的保留和附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-326">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-327"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的這項非同步作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-327">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-328">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-328">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-329">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-329">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-330">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-330">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-331">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-331">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-332">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-332">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="7a079-333">如果附加失敗，就不會保留任何空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-333">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="7a079-334">這個方法通常可以在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-334">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="7a079-335">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-335">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-336">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-336">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-337">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-337">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-338">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-338">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-339">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-339">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-340">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-340">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-341">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-341">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-342">在衍生類別中覆寫時，開始非同步的重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-342">When overridden in a derived class, begins an asynchronous restart area write operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-343">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-343">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-344">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-344">The new base sequence number.</span></span> <span data-ttu-id="7a079-345">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-345">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="7a079-346"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-346">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-347">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-347">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-348">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-348">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-349">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-349">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-350"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-350">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-351">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-351">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-352">如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-352">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-353">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-353">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-354">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-354">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-355">當這個作業成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-355">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-356">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-356">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="7a079-357">如果已指定 <xref:System.IO.Log.ReservationCollection>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-357">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="7a079-358">如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-358">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-359">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-359">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-360">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-360">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-361">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-361">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-362">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-362">The new base sequence number.</span></span> <span data-ttu-id="7a079-363">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-363">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="7a079-364"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-364">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="7a079-365">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7a079-365">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7a079-366">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-366">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="7a079-367">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-367">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-368"><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-368">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-369">您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="7a079-369">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="7a079-370">如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-370">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="7a079-371">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-371">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-372">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-372">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-373">當這個作業成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-373">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-374">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-374">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="7a079-375">如果已指定 <xref:System.IO.Log.ReservationCollection>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-375">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="7a079-376">如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-376">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-377">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-377">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-378">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-378">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-379">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-379">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-380">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-380">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-381">記錄順序無法騰出足夠的可用空間來容納新的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-381">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-382">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-382">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection" Usage="iRecordSequence.CreateReservationCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a079-383">在衍生類別中覆寫時，建立新的 <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-383">When overridden in a derived class, creates a new <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></summary>
        <returns><span data-ttu-id="7a079-384">新建立的 <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-384">The newly created <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-385">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-385">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7a079-386">未處理的非同步 I/O 要求的參考。</span><span class="sxs-lookup"><span data-stu-id="7a079-386">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="7a079-387">在衍生類別中覆寫時，結束非同步的附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-387">When overridden in a derived class, ends an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-388">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-388">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-389">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="7a079-389">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="7a079-390">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 時顯示出來。</span><span class="sxs-lookup"><span data-stu-id="7a079-390">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="7a079-391">在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> 上必須剛好呼叫這個方法一次。</span><span class="sxs-lookup"><span data-stu-id="7a079-391">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-392">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-392">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-393">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-393">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndFlush result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7a079-394">未處理的非同步 I/O 要求的參考。</span><span class="sxs-lookup"><span data-stu-id="7a079-394">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="7a079-395">在衍生類別中覆寫時，結束非同步的清除作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-395">When overridden in a derived class, ends an asynchronous flush operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-396">上一筆寫入之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-396">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-397">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="7a079-397">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="7a079-398">在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 時顯示出來。</span><span class="sxs-lookup"><span data-stu-id="7a079-398">Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndFlush%2A> is called.</span></span>  
  
 <span data-ttu-id="7a079-399">在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> 上必須剛好呼叫這個方法一次。</span><span class="sxs-lookup"><span data-stu-id="7a079-399">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-400">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-400">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-401">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-401">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndReserveAndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7a079-402">未處理的非同步 I/O 要求的參考。</span><span class="sxs-lookup"><span data-stu-id="7a079-402">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="7a079-403">在衍生類別中覆寫時，結束非同步的保留和附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-403">When overridden in a derived class, ends an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-404">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-404">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-405">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="7a079-405">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="7a079-406">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 時顯示出來。</span><span class="sxs-lookup"><span data-stu-id="7a079-406">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="7a079-407">在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> 上必須剛好呼叫這個方法一次。</span><span class="sxs-lookup"><span data-stu-id="7a079-407">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-408">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-408">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-409">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-409">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndWriteRestartArea result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7a079-410">未處理的非同步 I/O 要求的參考。</span><span class="sxs-lookup"><span data-stu-id="7a079-410">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="7a079-411">在衍生類別中覆寫時，結束非同步的重新啟動區域寫入作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-411">When overridden in a derived class, ends an asynchronous restart area write operation.</span></span></summary>
        <returns><span data-ttu-id="7a079-412">已寫入之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-412">The sequence number of the written log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-413">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="7a079-413">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="7a079-414">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 時顯示出來。</span><span class="sxs-lookup"><span data-stu-id="7a079-414">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> is called.</span></span>  
  
 <span data-ttu-id="7a079-415">在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> 上必須剛好呼叫這個方法一次。</span><span class="sxs-lookup"><span data-stu-id="7a079-415">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-416">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-416">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-417">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-417">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-418">在衍生類別中覆寫時，促使附加的記錄寫入。</span><span class="sxs-lookup"><span data-stu-id="7a079-418">When overridden in a derived class, causes appended records to be written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a079-419">在衍生類別中覆寫時，確定已寫入所有附加的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-419">When overridden in a derived class, ensures that all appended records have been written.</span></span></summary>
        <returns><span data-ttu-id="7a079-420">上一筆寫入之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-420">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-421">呼叫這個方法可以確保已永久寫入附加到 <xref:System.IO.Log.IRecordSequence>的所有記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-421">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-422">清除資料時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-422">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-423">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-423">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush sequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="7a079-424">必須寫入之最新記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-424">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="7a079-425">如果這個 <see cref="T:System.IO.Log.SequenceNumber" /> 無效，則必須寫入所有的記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-425">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <summary><span data-ttu-id="7a079-426">在衍生類別中覆寫時，確定已將內含指定序號的所有附加記錄永久寫入。</span><span class="sxs-lookup"><span data-stu-id="7a079-426">When overridden in a derived class, ensures that all appended records up to and including the record with the specified sequence number have been durably written.</span></span></summary>
        <returns><span data-ttu-id="7a079-427">上一筆寫入之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-427">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-428">呼叫這個方法可以確保已將內含指定序號的所有記錄永久寫入。</span><span class="sxs-lookup"><span data-stu-id="7a079-428">Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-429">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-429">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-430">清除資料時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-430">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-431">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-431">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-432">在衍生類別中覆寫時，取得大於上一筆附加記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-432">When overridden in a derived class, gets the sequence number which is greater than the last record appended.</span></span></summary>
        <value><span data-ttu-id="7a079-433">大於上一筆附加記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-433">A sequence number which is greater than the last record appended.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-434">這個屬性包含保證大於上一個附加記錄之序號的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-434">This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span> <span data-ttu-id="7a079-435">有效的序號會大於或等於 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="7a079-435">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a079-436">使用 <xref:System.IO.Log.LogRecordSequence> 執行個體時，<xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> 值可能會在將記錄清除至記錄檔之前變成過期的。</span><span class="sxs-lookup"><span data-stu-id="7a079-436">When using a <xref:System.IO.Log.LogRecordSequence> instance, the <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> value can become out of date until records are flushed to the log.</span></span> <span data-ttu-id="7a079-437">請參閱<xref:System.IO.Log.IRecordSequence.Flush%2A>和<xref:System.IO.Log.RecordAppendOptions>如需有關清除記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-437">See <xref:System.IO.Log.IRecordSequence.Flush%2A> and <xref:System.IO.Log.RecordAppendOptions> for more information on flushing records.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-438">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-438">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRecordLength : int64" Usage="System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-439">在衍生類別中覆寫時，取得可在此順序中附加或讀取的最大記錄大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-439">When overridden in a derived class, gets the size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></summary>
        <value><span data-ttu-id="7a079-440">可在此順序中附加或讀取的最大記錄大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-440">The size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-441">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-441">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="F#" Value="abstract member ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadLogRecords (start, logRecordEnum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="7a079-442">開始讀取之第一筆記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-442">The sequence number of the first record where the reading starts.</span></span></param>
        <param name="logRecordEnum"><span data-ttu-id="7a079-443"><see cref="T:System.IO.Log.LogRecordEnumeratorType" /> 的有效值，其中指定從 <see cref="T:System.IO.Log.LogRecordSequence" /> 讀取記錄的方式 (即往前或往後讀取)。</span><span class="sxs-lookup"><span data-stu-id="7a079-443">A valid <see cref="T:System.IO.Log.LogRecordEnumeratorType" /> value that specifies the manner (that is, forward or backward) in which records should be read from a <see cref="T:System.IO.Log.LogRecordSequence" />.</span></span></param>
        <summary><span data-ttu-id="7a079-444">在衍生類別中覆寫時，將順序中的記錄的可列舉集合傳回。</span><span class="sxs-lookup"><span data-stu-id="7a079-444">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-445">順序中的記錄的可列舉集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-445">An enumerable collection of records in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-446">在衍生類別中覆寫時，將順序中的記錄的可列舉集合傳回。</span><span class="sxs-lookup"><span data-stu-id="7a079-446">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span> <span data-ttu-id="7a079-447">列舉的記錄順序取決於 `logRecordEnum` 參數的值。</span><span class="sxs-lookup"><span data-stu-id="7a079-447">The order of the enumerated records depends on the value of the `logRecordEnum` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a079-448">這個範例將示範如何使用 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-448">This sample demonstrates the use of the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
```csharp  
using System;  
 using System.IO;  
 using System.IO.Log;  
  
 class ReadRecordsSample  
 {  
     static SequenceNumber AppendRecord(IRecordSequence sequence,  
                                        string message,  
                                        SequenceNumber user,  
                                        SequenceNumber previous)  
     {  
         MemoryStream data = new MemoryStream();  
         BinaryWriter writer = new BinaryWriter(data);  
         writer.Write(message);  
  
         ArraySegment<byte>[] segments;  
         segments = new ArraySegment<byte>[1];  
         segments[0] = new ArraySegment(data.GetBuffer(),  
                                        0,  
                                        Data.Length);  
  
         return sequence.Append(segments,  
                                user,  
                                previous,  
                                WriteFlags.None);  
     }  
  
     public static void Main(string[] args)  
     {  
         IRecordSequence sequence;  
         sequence = new FileIRecordSequence(args[0]);  
  
         SequenceNumber a, b, c, d;  
  
         a = AppendRecord(sequence,  
                          "This is record A",  
                          SequenceNumber.Invalid,  
                          SequenceNumber.Invalid);  
         Console.WriteLine("Record A has sequence number System.IO.Log", a);  
  
         b = AppendRecord(sequence,  
                          "This is record B",  
                          a,  
                          a);  
         Console.WriteLine("Record B has sequence number System.IO.Log", b);  
  
         c = AppendRecord(sequence,  
                          "This is record C",  
                          a,  
                          a);  
         Console.WriteLine("Record C has sequence number System.IO.Log", c);  
  
         d = AppendRecord(sequence,  
                          "This is record D",  
                          b,  
                          c);  
         Console.WriteLine("Record D has sequence number System.IO.Log", d);  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(a, ReadDirection.Forward))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.User))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.Previous))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
     }  
       }  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-449">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-449">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-450">讀取記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-450">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-451">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-451">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberSignature Language="F#" Value="abstract member ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadRestartAreas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a079-452">在衍生類別中覆寫時，將順序中的重新啟動區域的可列舉集合傳回。</span><span class="sxs-lookup"><span data-stu-id="7a079-452">When overridden in a derived class, returns an enumerable collection of the restart areas in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-453">順序中的重新啟動區域的可列舉集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-453">An enumerable collection of the restart areas in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-454">列舉重新啟動區域的方式是依照序號的相反順序列舉，也就是由最大序號到最小序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-454">The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.</span></span> <span data-ttu-id="7a079-455">只會列舉含有介於最後一個序號和基底序號之間序號的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-455">Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a079-456">如果包含 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 的延伸記錄區已損毀，這個方法可能會擲回 <xref:System.IO.IOException>，並出現錯誤訊息「由於意外的 I/O 例外狀況，所以無法執行要求。</span><span class="sxs-lookup"><span data-stu-id="7a079-456">If the log extent containing the <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> becomes corrupted, this method can throw an <xref:System.IO.IOException> with the error message "The request could not be performed because of an unexpected I/O exception.</span></span> <span data-ttu-id="7a079-457">傳回下列錯誤碼：'80070026'".</span><span class="sxs-lookup"><span data-stu-id="7a079-457">The following error code was returned: '80070026'".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-458">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-458">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-459">讀取記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-459">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-460">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-460">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-461">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</span><span class="sxs-lookup"><span data-stu-id="7a079-461">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-462">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-462">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-463">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-463">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-464">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-464">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-465"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-465">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="7a079-466"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含要在其中建立保留區的集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-466">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-467">要建立的保留區 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-467">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="7a079-468">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</span><span class="sxs-lookup"><span data-stu-id="7a079-468">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-469">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-469">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-470">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-470">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-471">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-471">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-472">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-472">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="7a079-473">如果附加失敗，就不會保留任何空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-473">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="7a079-474">這個方法通常可以在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-474">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="7a079-475">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-475">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-476">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-476">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-477">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-477">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-478">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-478">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-479">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-479">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-480">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-480">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="7a079-481">下一筆記錄的序號 (依照使用者指定的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-481">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="7a079-482">下一筆記錄的序號 (依照之前的順序)。</span><span class="sxs-lookup"><span data-stu-id="7a079-482">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="7a079-483"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</span><span class="sxs-lookup"><span data-stu-id="7a079-483">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="7a079-484">要在其中建立保留區的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-484">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="7a079-485">要建立的保留區 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="7a079-485">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="7a079-486">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</span><span class="sxs-lookup"><span data-stu-id="7a079-486">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="7a079-487">已附加之記錄的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-487">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-488">包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-488">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-489">不過，在讀取記錄時，並不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-489">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="7a079-490">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</span><span class="sxs-lookup"><span data-stu-id="7a079-490">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="7a079-491">如果附加失敗，就不會保留任何空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-491">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="7a079-492">這個方法通常可以在寫入記錄前完成。</span><span class="sxs-lookup"><span data-stu-id="7a079-492">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="7a079-493">若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-493">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-494">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-494">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-495">附加記錄時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-495">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-496">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-496">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-497">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-497">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ReservedBytes : int64" Usage="System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-498">在衍生類別中覆寫時，取得已保留的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="7a079-498">When overridden in a derived class, gets the total number of bytes that have been reserved.</span></span></summary>
        <value><span data-ttu-id="7a079-499">在此記錄順序中建立之所有保留區的總共大小。</span><span class="sxs-lookup"><span data-stu-id="7a079-499">The total size of all reservations made in this record sequence.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-500">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-500">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.RestartSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-501">在衍生類別中覆寫時，取得最近寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-501">When overridden in a derived class, gets the sequence number of the most recently written restart area.</span></span></summary>
        <value><span data-ttu-id="7a079-502">最近寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-502">The sequence number of the most recently written restart area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-503">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-503">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-504">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-504">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-505">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-505">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-506">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-506">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetryAppend : bool with get, set" Usage="System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-507">取得或設定值，這個值表示是否在記錄檔已滿時自動重試附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-507">Gets or sets a value indicating whether appends are automatically retried if the log is full.</span></span></summary>
        <value><span data-ttu-id="7a079-508">如果要在記錄檔已滿時自動重試附加作業，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-508"><see langword="true" /> if appends are automatically retried if the log is full; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7a079-509">預設為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-509">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-510">如果這個屬性的值是 `true`，且 <xref:System.IO.Log.IRecordSequence.Append%2A> 呼叫因為順序中的空間不足而失敗，記錄順序將會嘗試釋放空間，並重試附加作業。</span><span class="sxs-lookup"><span data-stu-id="7a079-510">If the value of this property is `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-511">已在處置序列之後存取此屬性。</span><span class="sxs-lookup"><span data-stu-id="7a079-511">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.IRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberSignature Language="F#" Value="member this.TailPinned : EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " Usage="member this.TailPinned : System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a079-512">會在記錄順序判斷必須將結尾往前移動時發生。</span><span class="sxs-lookup"><span data-stu-id="7a079-512">Occurs when the record sequence determines that the tail must be moved forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-513">您可以在記錄順序的空間用完時引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="7a079-513">You can fire this event when the record sequence has run out of space.</span></span> <span data-ttu-id="7a079-514">這個事件一經引發，就會將順序的結尾 (即基底序號) 往前移動以釋放空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-514">When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a079-515">在衍生類別中覆寫時，將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-515">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-516">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-516">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-517">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-517">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-518">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-518">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-519">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-519">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-520">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-520">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="7a079-521">在衍生類別中覆寫時，將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-521">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="7a079-522">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-522">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-523">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-523">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-524">一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。</span><span class="sxs-lookup"><span data-stu-id="7a079-524">The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.</span></span> <span data-ttu-id="7a079-525">當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-525">When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-526">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-526">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 <span data-ttu-id="7a079-527">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-527">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-528">位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-528">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-529">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-529">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-530">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-530">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-531">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-531">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-532">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-532">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-533">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-533">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-534">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-534">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="7a079-535">在衍生類別中覆寫時，將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</span><span class="sxs-lookup"><span data-stu-id="7a079-535">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="7a079-536">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-536">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-537">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-537">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-538">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-538">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-539">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-539">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-540">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-540">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-541">位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-541">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-542">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-542">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-543">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-543">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-544">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-544">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-545">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-545">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-546">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-546">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-547">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-547">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-548">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-548">The new base sequence number.</span></span> <span data-ttu-id="7a079-549">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-549">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="7a079-550">在衍生類別中覆寫時，將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />，並更新基底序號</span><span class="sxs-lookup"><span data-stu-id="7a079-550">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="7a079-551">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-551">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-552">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-552">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-553">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-553">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-554">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-554">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-555">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-555">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-556">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-556">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-557">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-557">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="7a079-558">當這個方法成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-558">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-559">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-559">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-560">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-560">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-561">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-561">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-562">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-562">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-563">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-563">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-564">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-564">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-565">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-565">The new base sequence number.</span></span> <span data-ttu-id="7a079-566">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-566">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="7a079-567">在衍生類別中覆寫時，將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />，並更新基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-567">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="7a079-568">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-568">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-569">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-569">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-570">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-570">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-571">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-571">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-572">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-572">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-573">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-573">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-574">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-574">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="7a079-575">當這個方法成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-575">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-576">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-576">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-577">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-577">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-578">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-578">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-579">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-579">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-580">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-580">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-581">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-581">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-582">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-582">The new base sequence number.</span></span> <span data-ttu-id="7a079-583">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-583">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="7a079-584"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-584">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="7a079-585">在衍生類別中覆寫時，使用保留區將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />，並更新基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-585">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="7a079-586">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-586">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-587">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-587">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-588">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-588">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-589">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-589">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-590">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-590">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-591">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-591">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-592">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-592">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="7a079-593">如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-593">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="7a079-594">如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-594">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-595">當這個方法成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-595">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-596">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-596">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="7a079-597">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-597">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-598">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-598">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-599">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-599">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-600">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-600">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-601">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-601">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-602">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-602">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7a079-603">即將串連並附加成記錄之位元組陣列區段的清單。</span><span class="sxs-lookup"><span data-stu-id="7a079-603">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="7a079-604">新的基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-604">The new base sequence number.</span></span> <span data-ttu-id="7a079-605">指定的序號必須大於或等於目前基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-605">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="7a079-606"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</span><span class="sxs-lookup"><span data-stu-id="7a079-606">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="7a079-607">在衍生類別中覆寫時，使用保留區將重新啟動區域寫入 <see cref="T:System.IO.Log.IRecordSequence" />，並更新基底序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-607">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="7a079-608">寫入之重新啟動區域的序號。</span><span class="sxs-lookup"><span data-stu-id="7a079-608">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a079-609">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="7a079-609">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="7a079-610">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</span><span class="sxs-lookup"><span data-stu-id="7a079-610">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="7a079-611">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</span><span class="sxs-lookup"><span data-stu-id="7a079-611">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="7a079-612">您可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-612">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="7a079-613">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</span><span class="sxs-lookup"><span data-stu-id="7a079-613">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="7a079-614">在讀取重新啟動區域時，不會將資料分割回陣列區段。</span><span class="sxs-lookup"><span data-stu-id="7a079-614">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="7a079-615">如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</span><span class="sxs-lookup"><span data-stu-id="7a079-615">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="7a079-616">如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。</span><span class="sxs-lookup"><span data-stu-id="7a079-616">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="7a079-617">當這個方法成功完成時，基底序號已經更新。</span><span class="sxs-lookup"><span data-stu-id="7a079-617">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="7a079-618">只要是序號小於新基底序號的所有記錄都無法存取。</span><span class="sxs-lookup"><span data-stu-id="7a079-618">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="7a079-619">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-619">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="7a079-620">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7a079-620">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a079-621">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="7a079-621">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7a079-622">寫入重新啟動區域時發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="7a079-622">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="7a079-623">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</span><span class="sxs-lookup"><span data-stu-id="7a079-623">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a079-624">已在處置序列之後呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="7a079-624">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>