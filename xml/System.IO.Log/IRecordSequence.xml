<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRecordSequence.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac555071e6e771f10cc96e2985b37bd85ac9623b58a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55071e6e771f10cc96e2985b37bd85ac9623b58a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>Provides a generic interface to a sequence of records.</source>
          <target state="translated">提供記錄順序的泛型介面。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> interface provides an abstract interface to a record-oriented stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 介面會提供記錄導向資料流的抽象介面。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>A <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> instance can be used to read and write log records.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 執行個體可以用來讀取和寫入記錄檔記錄。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> interface provides the following capabilities,</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 介面提供下列功能：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Append log records using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> methods.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> 方法，附加記錄檔記錄。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Read the appended records using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A&gt;</ph> method.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A&gt;</ph> 方法，讀取附加的記錄。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Write a special restart record using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A&gt;</ph> method.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A&gt;</ph> 方法，寫入特殊的重新啟動記錄。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Read restart records from the most recently written restart record using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法，從最近寫入的重新啟動記錄中讀取重新啟動記錄。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Flush the records to durable store using the  <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法，將記錄清除至永久性存放區。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Reserve space for appending records.</source>
          <target state="translated">保留空間以便附加記錄。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Free log space by advancing the base of the log.</source>
          <target state="translated">將記錄檔基底往前移以釋放記錄空間。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Receive <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.TailPinned&gt;</ph> event notifications to move the base of the log to free space.</source>
          <target state="translated">接收 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.TailPinned&gt;</ph> 事件通知以移動記錄檔基底來釋放空間。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Log records are appended to a <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> instance, and each log record is given a unique sequence number.</source>
          <target state="translated">記錄檔記錄會附加到 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 執行個體，而且每個記錄檔記錄會被賦予唯一的序號。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>Sequence numbers are strictly monotonically increasing within a given record sequence.</source>
          <target state="translated">序號會在指定的記錄順序中嚴謹地以固定方式增加。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>A log record consists of opaque data, supplied to the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> instance in an <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> of ArraySegments of bytes.</source>
          <target state="translated">記錄檔記錄由不透明的資料組成，這些資料是提供給位元組 ArraySegments 之 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 中的 <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> 執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> interface also exposes a few basic properties which provides information about log boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 介面也會公開一些提供記錄界限相關資訊的基本屬性。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> property contains the sequence number of the first valid record in the record sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> 屬性包含記錄順序中第一個有效記錄的序號。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph> property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph> 屬性包含保證大於上一個附加記錄之序號的序號。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A&gt;</ph> property contains the sequence number of the last written restart area.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A&gt;</ph> 屬性包含最後一個寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A&gt;</ph> property contains the size of the largest record that can be appended to, or read from the sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A&gt;</ph> 屬性包含可在順序中附加或讀取之最大記錄的大小。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>The <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReservedBytes%2A&gt;</ph> property contains the total size of all reservations made in this record sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReservedBytes%2A&gt;</ph> 屬性包含在此記錄順序中建立之所有保留區的總大小。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.RetryAppend%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, and an <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.</source>
          <target state="translated">如果 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.RetryAppend%2A&gt;</ph> 屬性設為 <ph id="ph2">`true`</ph>，且 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> 作業因為順序中沒有空間而失敗，則記錄順序會嘗試釋放空間，然後重試此「附加」作業。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>The new base sequence number of the record sequence.</source>
          <target state="translated">記錄順序的新基底序號。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>Moves the base sequence number of the log forward.</source>
          <target state="translated">將記錄檔的基底序號往前移動。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>When you use a <ph id="ph1">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> instance and try to advance the sequence number to free up space in the log, the new base sequence number must reside in a different log extent for the previous extent to be marked as empty.</source>
          <target state="translated">當您使用 <ph id="ph1">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> 執行個體並嘗試將序號往前移以釋放記錄檔中的空間時，新的基底序號必須是在不同的延伸記錄區，才能將上一個延伸區標示為空白。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>Freeing extents partially is not supported.</source>
          <target state="translated">不支援部分釋放延伸區。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source><ph id="ph1">&lt;paramref name="newBaseSequenceNumber" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newBaseSequenceNumber" /&gt;</ph> 無效。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source><ph id="ph1">&lt;paramref name="newBaseSequenceNumber" /&gt;</ph> is not active in the log.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newBaseSequenceNumber" /&gt;</ph> 無法在記錄檔中使用。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>An I/O error occurred while modifying the sequence.</source>
          <target state="translated">修改序列時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)">
          <source>The record sequence is full.</source>
          <target state="translated">記錄順序已滿。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, writes a log record to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將記錄檔記錄寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>When overridden in a derived class, writes a log record to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將記錄檔記錄寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>When overridden in a derived class, appends a log record to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將記錄檔記錄附加到 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this record.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含這筆記錄所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>When overridden in a derived class, appends a log record to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用之前在順序中保留的空間，將記錄檔記錄附加到 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id="ph1">`reservations`</ph> parameter.</source>
          <target state="translated">附加的記錄將會使用 <ph id="ph1">`reservations`</ph> 參數指定的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</source>
          <target state="translated">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this record.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含這筆記錄所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>When overridden in a derived class, appends a log record to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用之前在順序中保留的空間，將記錄檔記錄附加到 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id="ph1">`reservations`</ph> parameter.</source>
          <target state="translated">附加的記錄將會使用 <ph id="ph1">`reservations`</ph> 參數指定的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</source>
          <target state="translated">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.BaseSequenceNumber">
          <source>When overridden in a derived class, gets the sequence number of the first valid record in the current <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，取得目前 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> 中第一個有效記錄的序號。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.BaseSequenceNumber">
          <source>The lowest sequence number that corresponds to a valid record in the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">對應至 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> 中之有效記錄的最小序號。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.BaseSequenceNumber">
          <source>Valid sequence numbers are greater than or equal to <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph>.</source>
          <target state="translated">有效的序號會大於或等於 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph>，而且小於 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.BaseSequenceNumber">
          <source>The value of this property can be changed by calling the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A&gt;</ph> method.</source>
          <target state="translated">這個屬性的值可藉由呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A&gt;</ph> 方法加以變更。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.BaseSequenceNumber">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, begins an asynchronous append operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous append operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous append, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步附加作業。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous append, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步附加作業。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this record.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含這筆記錄所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous append operation using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous append, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步附加作業。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id="ph1">`reservations`</ph> parameter.</source>
          <target state="translated">附加的記錄將會使用 <ph id="ph1">`reservations`</ph> 參數指定的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</source>
          <target state="translated">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this record.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含這筆記錄所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous append, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步附加作業。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id="ph1">`reservations`</ph> parameter.</source>
          <target state="translated">附加的記錄將會使用 <ph id="ph1">`reservations`</ph> 參數指定的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</source>
          <target state="translated">如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Normally, this method completes before the record has been written.</source>
          <target state="translated">此方法通常會在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>The sequence number of the latest record that must be written.</source>
          <target state="translated">必須寫入之最新記錄的序號。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>If this <ph id="ph1">&lt;see cref="T:System.IO.Log.SequenceNumber" /&gt;</ph> is invalid, then all records must be written.</source>
          <target state="translated">如果這個 <ph id="ph1">&lt;see cref="T:System.IO.Log.SequenceNumber" /&gt;</ph> 無效，則必須寫入所有的記錄。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the flush is complete.</source>
          <target state="translated">選擇性的非同步回呼，在清除完成時呼叫。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous flush request from other requests.</source>
          <target state="translated">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步清除的要求。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous flush operation, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的清除作業。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous flush operation, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步清除作業。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by the current method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> method to ensure that the flush completes and resources are freed appropriately.</source>
          <target state="translated">您應該將目前方法傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> 方法，以確保清除完成，並適當釋放資源。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous flush, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步清除期間發生錯誤，則必須在使用這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法後才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>Calling this method ensures that all records that have been appended to the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> are durably written.</source>
          <target state="translated">呼叫這個方法可以確保已永久寫入附加到 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> 的所有記錄。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤)，會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while flushing the data.</source>
          <target state="translated">清除資料時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, begins an asynchronous reserve and append operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的保留和附加作業。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The reservation collection to make reservations in.</source>
          <target state="translated">要在其中建立保留區的保留區集合。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The reservations to make, in bytes.</source>
          <target state="translated">要建立的保留區 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous reserve and append operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的保留和附加作業。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents this asynchronous operation, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的這項非同步作業。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</source>
          <target state="translated">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If the append fails, no space is reserved.</source>
          <target state="translated">如果附加失敗，就不會保留任何空間。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Normally, this method may complete before the record has been written.</source>
          <target state="translated">這個方法通常可以在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record, or to make the reservation.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The reservation collection to make reservations in.</source>
          <target state="translated">要在其中建立保留區的保留區集合。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The reservations to make, in bytes.</source>
          <target state="translated">要建立的保留區 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the append is complete.</source>
          <target state="translated">選擇性的非同步回呼，在附加完成時呼叫。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous append request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous reserve and append operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的保留和附加作業。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents this asynchronous operation, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的這項非同步作業。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法，以確定附加作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</source>
          <target state="translated">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If the append fails, no space is reserved.</source>
          <target state="translated">如果附加失敗，就不會保留任何空間。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Normally, this method may complete before the record has been written.</source>
          <target state="translated">這個方法通常可以在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record, or to make the reservation.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, begins an asynchronous restart area write operation.</source>
          <target state="translated">在衍生類別中覆寫時，開始非同步的重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this restart area.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含此重新啟動區域所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the restart area write is complete.</source>
          <target state="translated">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method, to assure that the restart area write operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When the operation successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個作業成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If a <ph id="ph1">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</source>
          <target state="translated">如果已指定 <ph id="ph1">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</source>
          <target state="translated">如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this restart area.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含此重新啟動區域所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the restart area write is complete.</source>
          <target state="translated">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</source>
          <target state="translated">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，使用先前在順序中保留的空間，開始非同步的重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，表示可能還在暫止中的非同步重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>You should pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method to ensure that the restart area write operation has completed and resources can be freed appropriately.</source>
          <target state="translated">您應該將這個方法所傳回的 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 傳遞給 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.</source>
          <target state="translated">如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 呼叫 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 方法時，才會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>When the operation successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個作業成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If a <ph id="ph1">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</source>
          <target state="translated">如果已指定 <ph id="ph1">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</source>
          <target state="translated">如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The record sequence could not make enough free space to contain the new record.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.CreateReservationCollection">
          <source>When overridden in a derived class, creates a new <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，建立新的 <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.CreateReservationCollection">
          <source>The newly created <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>.</source>
          <target state="translated">新建立的 <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.CreateReservationCollection">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">未處理的非同步 I/O 要求的參考。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>When overridden in a derived class, ends an asynchronous append operation.</source>
          <target state="translated">在衍生類別中覆寫時，結束非同步的附加作業。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">這個方法會封鎖，直到 I/O 作業完成為止。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> is called.</source>
          <target state="translated">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndAppend%2A&gt;</ph> 時顯示出來。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>This method must be called exactly once on every <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginAppend%2A&gt;</ph> method.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 方法傳回的每一個 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginAppend%2A&gt;</ph> 上必須剛好呼叫這個方法一次。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">未處理的非同步 I/O 要求的參考。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>When overridden in a derived class, ends an asynchronous flush operation.</source>
          <target state="translated">在衍生類別中覆寫時，結束非同步的清除作業。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>The sequence number of the last record written.</source>
          <target state="translated">上一筆寫入之記錄的序號。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">這個方法會封鎖，直到 I/O 作業完成為止。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> is called.</source>
          <target state="translated">在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndFlush%2A&gt;</ph> 時顯示出來。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>This method must be called exactly once on every <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginFlush%2A&gt;</ph> method.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 方法傳回的每一個 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginFlush%2A&gt;</ph> 上必須剛好呼叫這個方法一次。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">未處理的非同步 I/O 要求的參考。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>When overridden in a derived class, ends an asynchronous reserve and append operation.</source>
          <target state="translated">在衍生類別中覆寫時，結束非同步的保留和附加作業。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">這個方法會封鎖，直到 I/O 作業完成為止。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> is called.</source>
          <target state="translated">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 時顯示出來。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>This method must be called exactly once on every <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A&gt;</ph> method.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 方法傳回的每一個 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A&gt;</ph> 上必須剛好呼叫這個方法一次。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">未處理的非同步 I/O 要求的參考。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>When overridden in a derived class, ends an asynchronous restart area write operation.</source>
          <target state="translated">在衍生類別中覆寫時，結束非同步的重新啟動區域寫入作業。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>The sequence number of the written log record.</source>
          <target state="translated">已寫入之記錄的序號。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">這個方法會封鎖，直到 I/O 作業完成為止。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> is called.</source>
          <target state="translated">在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A&gt;</ph> 時顯示出來。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>This method must be called exactly once on every <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A&gt;</ph> method.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 方法傳回的每一個 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A&gt;</ph> 上必須剛好呼叫這個方法一次。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, causes appended records to be written.</source>
          <target state="translated">在衍生類別中覆寫時，促使附加的記錄寫入。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush">
          <source>When overridden in a derived class, ensures that all appended records have been written.</source>
          <target state="translated">在衍生類別中覆寫時，確定已寫入所有附加的記錄。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush">
          <source>The sequence number of the last record written.</source>
          <target state="translated">上一筆寫入之記錄的序號。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Flush">
          <source>Calling this method ensures that all records that have been appended to the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> have been durably written.</source>
          <target state="translated">呼叫這個方法可以確保已永久寫入附加到 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph>的所有記錄。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush">
          <source>An I/O error occurred while flushing the data.</source>
          <target state="translated">清除資料時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>The sequence number of the latest record that must be written.</source>
          <target state="translated">必須寫入之最新記錄的序號。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>If this <ph id="ph1">&lt;see cref="T:System.IO.Log.SequenceNumber" /&gt;</ph> is invalid, then all records must be written.</source>
          <target state="translated">如果這個 <ph id="ph1">&lt;see cref="T:System.IO.Log.SequenceNumber" /&gt;</ph> 無效，則必須寫入所有的記錄。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>When overridden in a derived class, ensures that all appended records up to and including the record with the specified sequence number have been durably written.</source>
          <target state="translated">在衍生類別中覆寫時，確定已將內含指定序號的所有附加記錄永久寫入。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>The sequence number of the last record written.</source>
          <target state="translated">上一筆寫入之記錄的序號。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.</source>
          <target state="translated">呼叫這個方法可以確保已將內含指定序號的所有記錄永久寫入。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>An I/O error occurred while flushing the data.</source>
          <target state="translated">清除資料時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>When overridden in a derived class, gets the sequence number which is greater than the last record appended.</source>
          <target state="translated">在衍生類別中覆寫時，取得大於上一筆附加記錄的序號。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>A sequence number which is greater than the last record appended.</source>
          <target state="translated">大於上一筆附加記錄的序號。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</source>
          <target state="translated">這個屬性包含保證大於上一個附加記錄之序號的序號。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>Valid sequence numbers are greater than or equal to <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph>.</source>
          <target state="translated">有效的序號會大於或等於 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph>，而且小於 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>When using a <ph id="ph1">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> instance, the <ph id="ph2">&lt;xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A&gt;</ph> value can become out of date until records are flushed to the log.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> 執行個體時，<ph id="ph2">&lt;xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A&gt;</ph> 值可能會在將記錄清除至記錄檔之前變成過期的。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>See <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Log.RecordAppendOptions&gt;</ph> for more information on flushing records..</source>
          <target state="translated">如需有關清除記錄的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.IO.Log.RecordAppendOptions&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.LastSequenceNumber">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.MaximumRecordLength">
          <source>When overridden in a derived class, gets the size of the largest record that can be appended to or read from this sequence, in bytes.</source>
          <target state="translated">在衍生類別中覆寫時，取得可在此順序中附加或讀取的最大記錄大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.MaximumRecordLength">
          <source>The size of the largest record that can be appended to or read from this sequence, in bytes.</source>
          <target state="translated">可在此順序中附加或讀取的最大記錄大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.MaximumRecordLength">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>The sequence number of the first record where the reading starts.</source>
          <target state="translated">開始讀取之第一筆記錄的序號。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>A valid <ph id="ph1">&lt;see cref="T:System.IO.Log.LogRecordEnumeratorType" /&gt;</ph> value that specifies the manner (that is, forward or backward) in which records should be read from a <ph id="ph2">&lt;see cref="T:System.IO.Log.LogRecordSequence" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.LogRecordEnumeratorType" /&gt;</ph> 的有效值，其中指定從 <ph id="ph2">&lt;see cref="T:System.IO.Log.LogRecordSequence" /&gt;</ph> 讀取記錄的方式 (即往前或往後讀取)。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>When overridden in a derived class, returns an enumerable collection of records in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，將順序中的記錄的可列舉集合傳回。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>An enumerable collection of records in the sequence.</source>
          <target state="translated">順序中的記錄的可列舉集合。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>When overridden in a derived class, returns an enumerable collection of records in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，將順序中的記錄的可列舉集合傳回。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>The order of the enumerated records depends on the value of the <ph id="ph1">`logRecordEnum`</ph> parameter.</source>
          <target state="translated">列舉的記錄順序取決於 <ph id="ph1">`logRecordEnum`</ph> 參數的值。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>This sample demonstrates the use of the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A&gt;</ph> method.</source>
          <target state="translated">這個範例將示範如何使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>An I/O error occurred while reading the record.</source>
          <target state="translated">讀取記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>When overridden in a derived class, returns an enumerable collection of the restart areas in the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，將順序中的重新啟動區域的可列舉集合傳回。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>An enumerable collection of the restart areas in the sequence.</source>
          <target state="translated">順序中的重新啟動區域的可列舉集合。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.</source>
          <target state="translated">列舉重新啟動區域的方式是依照序號的相反順序列舉，也就是由最大序號到最小序號。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.</source>
          <target state="translated">只會列舉含有介於最後一個序號和基底序號之間序號的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>If the log extent containing the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> becomes corrupted, this method can throw an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> with the error message "The request could not be performed because of an unexpected I/O exception.</source>
          <target state="translated">如果包含 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A&gt;</ph> 的延伸記錄區已損毀，這個方法可能會擲回 <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>，並出現錯誤訊息「由於意外的 I/O 例外狀況，所以無法執行要求。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>The following error code was returned: '80070026'".</source>
          <target state="translated">傳回下列錯誤碼: '80070026'」。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>An I/O error occurred while reading the record.</source>
          <target state="translated">讀取記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReadRestartAreas">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the collection to make reservations in.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含要在其中建立保留區的集合。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The reservations to make, in bytes.</source>
          <target state="translated">要建立的保留區 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</source>
          <target state="translated">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>If the append fails, no space is reserved.</source>
          <target state="translated">如果附加失敗，就不會保留任何空間。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>Normally, this method may complete before the record has been written.</source>
          <target state="translated">這個方法通常可以在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The record sequence could not make enough free space to contain the new record, or to make the reservation.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the next record in the user-specified order.</source>
          <target state="translated">下一筆記錄的序號 (依照使用者指定的順序)。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the next record in Previous order.</source>
          <target state="translated">下一筆記錄的序號 (依照之前的順序)。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>A valid value of <ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> that specifies how the data should be written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.RecordAppendOptions" /&gt;</ph> 的有效值，其中指定資料的寫入方式。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The reservation collection to make reservations in.</source>
          <target state="translated">要在其中建立保留區的保留區集合。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The reservations to make, in bytes.</source>
          <target state="translated">要建立的保留區 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</source>
          <target state="translated">在衍生類別中覆寫時，自動建立單一保留區，並將記錄附加至順序。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The sequence number of the appended log record.</source>
          <target state="translated">已附加之記錄的序號。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>Data contained in the <ph id="ph1">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">包含在 <ph id="ph1">`data`</ph> 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>However, no provision is made for splitting data back into array segments when the record is read.</source>
          <target state="translated">不過，在讀取記錄時，並不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</source>
          <target state="translated">指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>If the append fails, no space is reserved.</source>
          <target state="translated">如果附加失敗，就不會保留任何空間。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>Normally, this method may complete before the record has been written.</source>
          <target state="translated">這個方法通常可以在寫入記錄前完成。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>To ensure that a record has been written, either specify the <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id="ph2">`recordAppendOptions`</ph> parameter, or call the <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.</source>
          <target state="translated">若要確定已寫入某筆記錄，請使用 <ph id="ph1">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> 參數指定 <ph id="ph2">`recordAppendOptions`</ph> 旗標，或是呼叫 <ph id="ph3">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>An I/O error occurred while appending the record.</source>
          <target state="translated">附加記錄時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The record sequence could not make enough free space to contain the new record, or to make the reservation.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.ReservedBytes">
          <source>When overridden in a derived class, gets the total number of bytes that have been reserved.</source>
          <target state="translated">在衍生類別中覆寫時，取得已保留的位元組總數。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.ReservedBytes">
          <source>The total size of all reservations made in this record sequence.</source>
          <target state="translated">在此記錄順序中建立之所有保留區的總共大小。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.ReservedBytes">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>When overridden in a derived class, gets the sequence number of the most recently written restart area.</source>
          <target state="translated">在衍生類別中覆寫時，取得最近寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>The sequence number of the most recently written restart area.</source>
          <target state="translated">最近寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.RestartSequenceNumber">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.RetryAppend">
          <source>Gets or sets a value indicating whether appends are automatically retried if the log is full.</source>
          <target state="translated">取得或設定值，這個值表示是否在記錄檔已滿時自動重試附加作業。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RetryAppend">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if appends are automatically retried if the log is full; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要在記錄檔已滿時自動重試附加作業，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RetryAppend">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Log.IRecordSequence.RetryAppend">
          <source>If the value of this property is <ph id="ph1">`true`</ph>, and an <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.</source>
          <target state="translated">如果這個屬性的值是 <ph id="ph1">`true`</ph>，且 <ph id="ph2">&lt;xref:System.IO.Log.IRecordSequence.Append%2A&gt;</ph> 呼叫因為順序中的空間不足而失敗，記錄順序將會嘗試釋放空間，並重試附加作業。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="P:System.IO.Log.IRecordSequence.RetryAppend">
          <source>The property was accessed after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後存取此屬性。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="E:System.IO.Log.IRecordSequence.TailPinned">
          <source>Occurs when the record sequence determines that the tail must be moved forward.</source>
          <target state="translated">會在記錄順序判斷必須將結尾往前移動時發生。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.Log.IRecordSequence.TailPinned">
          <source>You can fire this event when the record sequence has run out of space.</source>
          <target state="translated">您可以在記錄順序的空間用完時引發這個事件。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.Log.IRecordSequence.TailPinned">
          <source>When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.</source>
          <target state="translated">這個事件一經引發，就會將順序的結尾 (即基底序號) 往前移動以釋放空間。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="T:System.IO.Log.IRecordSequence">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Log.IRecordSequence">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.</source>
          <target state="translated">一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>The data in the byte array segments will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中覆寫時，將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>The data in the byte array segments will be concatenated into a single byte array for appending as the record.</source>
          <target state="translated">位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> and updates the base sequence number</source>
          <target state="translated">在衍生類別中覆寫時，將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>，並更新基底序號</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</source>
          <target state="translated">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>When this method successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個方法成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> and updates the base sequence number.</source>
          <target state="translated">在衍生類別中覆寫時，將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>，並更新基底序號。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</source>
          <target state="translated">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>When this method successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個方法成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this restart area.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含此重新啟動區域所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> using a reservation, and updates the base sequence number</source>
          <target state="translated">在衍生類別中覆寫時，使用保留區將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>，並更新基底序號。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</source>
          <target state="translated">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</source>
          <target state="translated">如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</source>
          <target state="translated">如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When this method successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個方法成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A list of byte array segments that will be concatenated and appended as the record.</source>
          <target state="translated">即將串連並附加成記錄之位元組陣列區段的清單。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The new base sequence number.</source>
          <target state="translated">新的基底序號。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The specified sequence number must be greater than or equal to the current base sequence number.</source>
          <target state="translated">指定的序號必須大於或等於目前基底序號。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph> that contains the reservation that should be used for this restart area.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Log.ReservationCollection" /&gt;</ph>，其中包含此重新啟動區域所應使用的保留區。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When overridden in a derived class, writes a restart area to the <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph> using a reservation, and updates the base sequence number.</source>
          <target state="translated">在衍生類別中覆寫時，使用保留區將重新啟動區域寫入 <ph id="ph1">&lt;see cref="T:System.IO.Log.IRecordSequence" /&gt;</ph>，並更新基底序號。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The sequence number of the written restart area.</source>
          <target state="translated">寫入之重新啟動區域的序號。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A restart area is used to temporarily store information containing a client's last checkpoint operation.</source>
          <target state="translated">重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</source>
          <target state="translated">當需要復原時，您可以剖析重新啟動區域，以便從上一個檢查點作業擷取所有資料。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</source>
          <target state="translated">這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>A restart area can be read using the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> method.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A&gt;</ph> 方法來讀取重新啟動區域。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</source>
          <target state="translated">當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>No provision is made for splitting data back into array segments when the restart area is read.</source>
          <target state="translated">在讀取重新啟動區域時，不會將資料分割回陣列區段。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</source>
          <target state="translated">如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</source>
          <target state="translated">如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>When this method successfully completes, the base sequence number has been updated.</source>
          <target state="translated">當這個方法成功完成時，基底序號已經更新。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>All log records with sequence numbers less than the new base sequence number are inaccessible.</source>
          <target state="translated">只要是序號小於新基底序號的所有記錄都無法存取。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</source>
          <target state="translated">如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.</source>
          <target state="translated">在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <ph id="ph1">&lt;xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A&gt;</ph> 方法時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">一或多個引數無效。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>An I/O error occurred while writing the restart area.</source>
          <target state="translated">寫入重新啟動區域時發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The record sequence could not make enough free space to contain the new restart area.</source>
          <target state="translated">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)">
          <source>The method was called after the sequence has been disposed of.</source>
          <target state="translated">已在處置序列之後呼叫此方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>