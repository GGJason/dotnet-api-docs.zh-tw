<Type Name="LogRecordSequence" FullName="System.IO.Log.LogRecordSequence">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7156e4e610a9d14909a701b75c25fcdefeaf4c8c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37655520" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogRecordSequence : IDisposable, System.IO.Log.IRecordSequence" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogRecordSequence extends System.Object implements class System.IDisposable, class System.IO.Log.IRecordSequence" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogRecordSequence&#xA;Implements IDisposable, IRecordSequence" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogRecordSequence sealed : IDisposable, System::IO::Log::IRecordSequence" />
  <TypeSignature Language="F#" Value="type LogRecordSequence = class&#xA;    interface IRecordSequence&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IO.Log.IRecordSequence</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示 <see cref="T:System.IO.Log.LogStore" /> 中儲存的記錄順序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogRecordSequence> 類別會在一般記錄檔系統 (CLFS) 記錄頂端提供記錄順序介面實作。 除了標準的記錄導向功能之外，它還提供了一個原則模型，可用來避免記錄檔已滿狀況，以及在同一實體檔案上進行用戶端多工。 它會搭配使用 <xref:System.IO.Log.LogStore> 類別，這個類別會提供用來直接操作和管理 CLFS 記錄檔的介面。 <xref:System.IO.Log.LogStore> 類別與 <xref:System.IO.Log.LogRecordSequence> 類別的關係就如同磁碟檔案與 <xref:System.IO.FileStream> 物件的關係。 磁碟檔案提供實際的儲存區且具有「長度」和「上次存取時間」等屬性，而 <xref:System.IO.FileStream> 物件則提供檔案的檢視，可用來讀取和寫入檔案。 同樣地，<xref:System.IO.Log.LogStore> 類別也具有原則和延伸磁碟區集合等屬性；而 <xref:System.IO.Log.LogRecordSequence> 類別則會提供用來讀取和寫入資料的記錄導向機制。  
  
   
  
## Examples  
 這個範例會說明如何使用 <xref:System.IO.Log.LogRecordSequence> 類別：  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (System.IO.Log.LogStore logStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Log.LogStore logStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::IO::Log::LogStore ^ logStore);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : System.IO.Log.LogStore -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence logStore" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logStore" Type="System.IO.Log.LogStore" />
      </Parameters>
      <Docs>
        <param name="logStore">這個記錄順序應該使用的 <see cref="T:System.IO.Log.LogStore" />。</param>
        <summary>使用指定的記錄存放區，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 緩衝區大小決定了可以附加或讀取的記錄大小上限。 在這個建構函式中，會設為預設值 64。 需要的緩衝區數量設為 10。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="logStore" /> 無效。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::String ^ path, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : string * System.IO.FileMode -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (path, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <summary>使用指定的記錄存放區路徑和存取模式，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會在新的 <xref:System.IO.Log.LogRecordSequence> 物件上初始化新的 <xref:System.IO.Log.LogStore>，而這個物件是以指定的路徑和模式所開啟的。 會給予存放區的讀取/寫入權限，並且會開啟存放區的共用讀取權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogRecordSequence" />。 如果 CLFS 元件適用於您的平台，請進行安裝，或請使用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (System.IO.Log.LogStore logStore, int bufferSize, int bufferCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Log.LogStore logStore, int32 bufferSize, int32 bufferCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::IO::Log::LogStore ^ logStore, int bufferSize, int bufferCount);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : System.IO.Log.LogStore * int * int -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (logStore, bufferSize, bufferCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logStore" Type="System.IO.Log.LogStore" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="bufferCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="logStore">這個記錄順序應該使用的 <see cref="T:System.IO.Log.LogStore" />。</param>
        <param name="bufferSize">需要的緩衝區大小 (以位元組為單位)。 緩衝區大小決定了可以附加或讀取的記錄大小上限。</param>
        <param name="bufferCount">需要的緩衝區數量。</param>
        <summary>使用指定的記錄存放區、每個記錄的緩衝區大小和緩衝區數目，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要指定 `bufferSize` 和 `bufferCount` 值，而且不想使用 `bufferSize` 的預設值 64 和 `bufferCount` 的預設值 10，可以使用這個建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="logStore" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> 為負值或零。  
  
-或- 
 <paramref name="bufferCount" /> 為負值或零。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (path, mode, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <summary>使用指定的記錄存放區路徑以及存取和共用模式，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式 (Constructor) 會在新的 <xref:System.IO.Log.LogRecordSequence> 物件上初始化新的 <xref:System.IO.Log.LogStore>，而這個物件是以指定的路徑、模式和存取權限所開啟的。 存放區便會開啟，並且共用讀取權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogRecordSequence" />。 如果 CLFS 元件適用於您的平台，請進行安裝，或請使用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (path, mode, access, share)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <param name="share">其中一個 <see cref="T:System.IO.FileShare" /> 值，可決定在處理序之間共用記錄存放區的方式。</param>
        <summary>使用指定的記錄存放區路徑和存取模式，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式 (Constructor) 會在新的 <xref:System.IO.Log.LogRecordSequence> 物件上初始化新的 <xref:System.IO.Log.LogStore>，而這個物件是以指定的路徑、模式和存取權限所開啟的。 存放區會開啟，並且共用指定的存取權限。  
  
   
  
## Examples  
 這個範例會說明如何使用這個 <xref:System.IO.Log.LogRecordSequence> 建構函式：  
  
 [!code-csharp[S_UELogRecordSequence#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#1)]
 [!code-vb[S_UELogRecordSequence#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogRecordSequence" />。 如果 CLFS 元件適用於您的平台，請進行安裝，或請使用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, int bufferCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, int32 bufferCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, bufferCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, int bufferCount);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * int -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (path, mode, access, share, bufferSize, bufferCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="bufferCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <param name="share">其中一個 <see cref="T:System.IO.FileShare" /> 值，可決定在處理序之間共用記錄存放區的方式。</param>
        <param name="bufferSize">需要的緩衝區大小 (以位元組為單位)。 緩衝區大小決定了可以附加或讀取的記錄大小上限。</param>
        <param name="bufferCount">需要的緩衝區數量。</param>
        <summary>使用指定的記錄存放區路徑、檔案權限、存取與共用模式，以及緩衝區大小和記錄計數，初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式 (Constructor) 會在新的 <xref:System.IO.Log.LogRecordSequence> 物件上初始化新的 <xref:System.IO.Log.LogStore>，而這個物件是以指定的路徑、模式和存取權限所開啟的。 存放區會開啟，並且共用指定的存取權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogRecordSequence" />。 如果 CLFS 元件適用於您的平台，請進行安裝，或請使用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, int bufferCount, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, int32 bufferCount, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogRecordSequence(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, int bufferCount, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogRecordSequence : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * int * System.Security.AccessControl.FileSecurity -&gt; System.IO.Log.LogRecordSequence" Usage="new System.IO.Log.LogRecordSequence (path, mode, access, share, bufferSize, bufferCount, fileSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="bufferCount" Type="System.Int32" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">有效的 <see cref="T:System.IO.FileMode" /> 值，其決定如何開啟或建立存放區。</param>
        <param name="access">有效的 <see cref="T:System.IO.FileAccess" /> 值，決定如何存取記錄存放區。</param>
        <param name="share">有效的 <see cref="T:System.IO.FileShare" /> 值，可決定在處理序之間共用記錄存放區的方式。</param>
        <param name="bufferSize">需要的緩衝區大小 (以位元組為單位)。 緩衝區大小決定了可以附加或讀取的記錄大小上限。</param>
        <param name="bufferCount">需要的緩衝區數量。</param>
        <param name="fileSecurity">有效的 <see cref="T:System.Security.AccessControl.FileSecurity" /> 值，可指定要針對新建立的存放區設定的安全性 (如果必須建立存放區的話)。</param>
        <summary>初始化 <see cref="T:System.IO.Log.LogRecordSequence" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 指定的檔案無效。  
  
-或- 
指定的記錄存放區檔案名稱無效。  
  
-或- 
 <paramref name="mode" /> 具有 <see cref="F:System.IO.FileMode.CreateNew" /> 的值，而且無法在沒有寫入權限的情況下使用。  
  
-或- 
 <paramref name="mode" /> 具有 <see cref="F:System.IO.FileMode.OpenOrCreate" /> 的值，而且無法在沒有寫入權限的情況下使用。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">一或多個引數超出範圍。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path" /> 指定的檔案。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為另一個處理序正在使用 <paramref name="path" /> 所指定的檔案，所以無法存取該檔案。  
  
-或- 
因為檔案或目錄已存在，所以無法建立 <paramref name="path" /> 所指定的檔案。  
  
-或- 
記錄檔控制代碼無法繫結至執行緒集區。  
  
-或- 
指定的記錄檔格式或版本無效。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogRecordSequence" />。 如果 CLFS 元件適用於您的平台，請進行安裝，或請使用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit&#xA;override this.AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit" Usage="logRecordSequence.AdvanceBaseSequenceNumber newBaseSequenceNumber" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber">指定記錄的新基底 <see cref="T:System.IO.Log.SequenceNumber" />。 必須介於記錄的目前基底序號和最後一個序號之間。</param>
        <summary>將記錄檔的基底序號往前移動。 這個方法無法被繼承。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法通常與 <xref:System.IO.Log.LogRecordSequence.TailPinned> 事件搭配使用，以釋放記錄中的空間。 <xref:System.IO.Log.LogRecordSequence.TailPinned> 事件表示，必須將順序的結尾 (即基底序號) 往前移動才能釋放空間。 使用 <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> 方法寫入重新啟動區域，或是截斷記錄並使用 <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> 方法將記錄基底序號依照 `newBaseSequenceNumber` 參數所指定的往前移一個號碼，都可以達到釋放空間的目的。 ＜範例＞一節中，程式碼範例會示範其第二種處理方式。  
  
 請注意，呼叫這個方法與使用 <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> 方法設定新基底序號的效果一樣，都不會在記錄中寫入重新啟動記錄。  
  
   
  
## Examples  
 這個範例將示範如何使用 <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> 方法搭配 <xref:System.IO.Log.LogRecordSequence.TailPinned> 事件來釋放記錄順序中的空間。  
  
```  
recordSequence.RetryAppend = true;  
recordSequence.TailPinned += new EventHandler<TailPinnedEventArgs>(HandleTailPinned);  
  
void HandleTailPinned(object sender, TailPinnedEventArgs tailPinnedEventArgs)  
{  
   // tailPinnedEventArgs.TargetSequenceNumber is the target   
   // sequence number to free up space to.    
   // However, this sequence number is not necessarily valid.  We have  
   // to use this sequence number as a starting point for finding a  
   // valid point within the log to advance toward. You need to  
   // identify a record with a sequence number equal to, or greater  
   // than TargetSequenceNumber; let's call this   
   // realTargetSequenceNumber. Once found, move the base  
  
   recordSequence.AdvanceBaseSequenceNumber(realTargetSequenceNumber);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newBaseSequenceNumber" /> 對此順序無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。  
  
-或- 
 <paramref name="newBaseSequenceNumber" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">指定的記錄沒有任何延伸區。 必須先建立一或多個延伸區，才能使用記錄順序。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將記錄寫入 <see cref="T:System.IO.Log.IRecordSequence" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例會說明如何使用 <xref:System.IO.Log.LogRecordSequence.Append%2A> 成員。  
  
 [!code-csharp[S_UELogRecordSequence#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#5)]
 [!code-vb[S_UELogRecordSequence#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber&#xA;override this.Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <summary>將記錄寫入 <see cref="T:System.IO.Log.LogRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
   
  
## Examples  
 下列範例將示範如何使用這個方法，將記錄附加到順序。  
  
 [!code-csharp[S_UELogRecordSequence#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#13)]
 [!code-vb[S_UELogRecordSequence#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber&#xA;override this.Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Append (data, userRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <summary>將記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber&#xA;override this.Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservations"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</param>
        <summary>使用之前在順序中保留的空間，將記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。 如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber&#xA;override this.Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Append (data, userRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservations"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</param>
        <summary>使用之前在順序中保留的空間，將記錄附加到 <see cref="T:System.IO.Log.IRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。 如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogRecordSequence.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.BaseSequenceNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.IO.Log.LogRecordSequence" />中第一個有效記錄的序號。</summary>
        <value>對應至 <see cref="T:System.IO.Log.LogRecordSequence" /> 中之有效記錄的最小序號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有效的序號會大於或等於 <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>。  
  
 這個屬性的值可藉由呼叫 <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> 方法或 <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> 方法加以變更。  
  
   
  
## Examples  
 這個範例會說明如何使用迴圈中的 <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> 成員。  
  
 [!code-csharp[S_UELogRecordSequence#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#10)]
 [!code-vb[S_UELogRecordSequence#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始執行非同步的附加作業。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="nextUndoRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nextUndoRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginAppend (data, userRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservations"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。 如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginAppend (data, userRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservations"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含這筆記錄所應使用的保留區。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步附加作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 附加的記錄將會使用 `reservations` 參數指定的保留區，以取用先前所保留的空間。 如果附加成功，則會使用可以保存資料的最小保留區域，而且該保留區域將會從集合移除。  
  
 此方法通常會在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginFlush (sequenceNumber, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">必須寫入之最新記錄的序號。 如果這個 <see cref="T:System.IO.Log.SequenceNumber" /> 無效，則必須寫入所有的記錄。</param>
        <param name="callback">選擇性的非同步回呼，在清除完成時呼叫。</param>
        <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步清除的要求。</param>
        <summary>使用先前保留在順序中的空間，開始執行非同步的清除作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步清除作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將目前方法傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> 方法，以確保清除完成，並適當釋放資源。 如果在非同步清除期間發生錯誤，則必須在使用這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> 呼叫 <xref:System.IAsyncResult> 方法後才會擲回例外狀況。  
  
 呼叫這個方法可以確保已永久寫入附加到 <xref:System.IO.Log.LogRecordSequence> 的所有記錄。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤)，會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sequenceNumber" /> 對此順序無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sequenceNumber" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">指定的記錄沒有任何延伸區。 必須先建立一或多個延伸區，才能使用記錄順序。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始執行非同步的保留和附加作業。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservationCollection">要在其中建立保留區的保留區集合。</param>
        <param name="reservations">要建立的保留區 (以位元組為單位)。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的保留和附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的這項非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。 如果附加失敗，就不會保留任何空間。  
  
 這個方法通常可以在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginReserveAndAppend (data, userRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservationCollection">要在其中建立保留區的保留區集合。</param>
        <param name="reservations">要建立的保留區 (以位元組為單位)。</param>
        <param name="callback">選擇性的非同步回呼，在附加完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步附加要求與其他要求。</param>
        <summary>開始執行非同步的保留和附加作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的這項非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法，以確定附加作業已完成，而且可以適當地釋放資源。 如果在非同步附加期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。 如果附加失敗，就不會保留任何空間。  
  
 這個方法通常可以在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">附加記錄時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始執行非同步的重新啟動區域寫入作業。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSeqNum As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSeqNum, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginWriteRestartArea (data, newBaseSeqNum, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄的位元組陣列區段。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <param name="reservation"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</param>
        <param name="callback">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</param>
        <summary>使用先前保留在順序中的空間，開始執行非同步的重新啟用區域寫入作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步重新啟動區域寫入作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。 如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 當這個作業成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果已指定 <xref:System.IO.Log.ReservationCollection>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。 如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newBaseSeqNum" /> 對此順序無效。  
  
-或- 
指定的記錄列舉起始序號無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservation" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。  
  
-或- 
 <paramref name="newBaseSeqNum" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservationCollection, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum, class System.IO.Log.ReservationCollection reservationCollection, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSeqNum, System::IO::Log::ReservationCollection ^ reservationCollection, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="logRecordSequence.BeginWriteRestartArea (data, newBaseSeqNum, reservationCollection, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <param name="reservationCollection"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</param>
        <param name="callback">選擇性的非同步回呼 (Callback)，在重新啟動區域寫入完成時呼叫。</param>
        <param name="state">使用者所提供的物件，可區別此特定非同步重新啟動區域寫入要求與其他要求。</param>
        <summary>使用先前保留在順序中的空間，開始執行非同步的重新啟用區域寫入作業。 這個方法無法被繼承。</summary>
        <returns><see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步重新啟動區域寫入作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該將這個方法所傳回的 <xref:System.IAsyncResult> 傳遞給 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 方法，以確定重新啟動區域寫入作業已完成，而且可以適當地釋放資源。 如果在非同步重新啟動區域寫入作業期間發生錯誤，就要等到系統以這個方法傳回的 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 呼叫 <xref:System.IAsyncResult> 方法時，才會擲回例外狀況。  
  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 當這個作業成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果已指定 <xref:System.IO.Log.ReservationCollection>，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。 如果此方法成功，便會取用可以保存資料的最小保留區，而且該保留區將會從集合移除。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newBaseSeqNum" /> 對此順序無效。  
  
-或- 
指定的記錄列舉起始序號無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservationCollection" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。  
  
-或- 
 <paramref name="newBaseSeqNum" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection&#xA;override this.CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection" Usage="logRecordSequence.CreateReservationCollection " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.CreateReservationCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立新的 <see cref="T:System.IO.Log.ReservationCollection" />。 這個方法無法被繼承。</summary>
        <returns>新建立的 <see cref="T:System.IO.Log.ReservationCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 您可以透過兩種方式執行保留，如下列範例所示。 您可以採用範例中的做法進行穩固的處理。 請注意，您只能在使用 CLFS 的 <xref:System.IO.Log.LogRecordSequence> 類別時執行這項工作。  
  
```  
//Using the ReserveAndAppend Method  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
long[] lengthOfUndoRecords = new long[] { 1000 };  
recordSequence.ReserveAndAppend(recordData,  
                                                     userSqn,  
                                                     previousSqn,  
                                                     RecordSequenceAppendOptions.None,  
                                                     reservations,  
                                                     lengthOfUndoRecords);  
recordSequence.Append(undoRecordData,    // If necessary …  
                                    userSqn,  
                                    previousSqn,  
                                    RecordSequenceAppendOptions.ForceFlush,  
                                    reservations);  
  
// Using the Manual Approach  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="logRecordSequence.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放由元件使用的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範如何使用<xref:System.IO.Log.LogRecordSequence.Dispose%2A>釋放資源：  
  
 [!code-csharp[S_UELogRecordSequence#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#11)]
 [!code-vb[S_UELogRecordSequence#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#11)]  
  
 [!code-csharp[S_UELogRecordSequence#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#12)] 
 [!code-vb[S_UELogRecordSequence#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#12)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber&#xA;override this.EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.EndAppend result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">未處理的非同步 I/O 要求的參考。</param>
        <summary>結束執行非同步的附加作業。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖，直到 I/O 作業完成為止。 在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> 時顯示出來。  
  
 在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.LogRecordSequence.BeginAppend%2A> 上必須剛好呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="result" /> 無效。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">已經針對此非同步作業呼叫 <see langword="End" />。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber&#xA;override this.EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.EndFlush result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">未處理的非同步 I/O 要求的參考。</param>
        <summary>結束執行非同步的清除作業。 這個方法無法被繼承。</summary>
        <returns>上一筆寫入之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖，直到 I/O 作業完成為止。 在非同步清除要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> 時顯示出來。  
  
 在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.LogRecordSequence.BeginFlush%2A> 上必須剛好呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="result" /> 無效。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">已經針對此非同步作業呼叫 <see langword="End" />。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber&#xA;override this.EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.EndReserveAndAppend result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">未處理的非同步 I/O 要求的參考。</param>
        <summary>結束執行非同步的保留和附加作業。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖，直到 I/O 作業完成為止。 在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 時顯示出來。  
  
 在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A> 上必須剛好呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="result" /> 無效。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">已經針對此非同步作業呼叫 <see langword="End" />。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber&#xA;override this.EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.EndWriteRestartArea result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">未處理的非同步 I/O 要求的參考。</param>
        <summary>結束執行非同步的重新啟動區域寫入作業。 這個方法無法被繼承。</summary>
        <returns>已寫入之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖，直到 I/O 作業完成為止。 在非同步寫入要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會在呼叫 <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> 時顯示出來。  
  
 在 <xref:System.IAsyncResult> 方法傳回的每一個 <xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A> 上必須剛好呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="result" /> 無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">已經針對此非同步作業呼叫 <see langword="End" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>永久地寫入附加的記錄</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; System.IO.Log.SequenceNumber&#xA;override this.Flush : unit -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Flush " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Flush</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>確定已寫入所有附加的記錄。 這個方法無法被繼承。</summary>
        <returns>上一筆寫入之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法可以確保已永久寫入附加到 <xref:System.IO.Log.LogRecordSequence>的所有記錄。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">清除資料時發生 I/O 錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.NotSupportedException">不支援此作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.InvalidOperationException">指定的記錄沒有任何延伸區。 必須先建立一或多個延伸區，才能使用記錄順序。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber&#xA;override this.Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.Flush sequenceNumber" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">必須寫入之最新記錄的序號。 如果這個 <see cref="T:System.IO.Log.SequenceNumber" /> 無效，則必須寫入所有的記錄。</param>
        <summary>確保已將內含指定序號的所有附加記錄永久寫入。 這個方法無法被繼承。</summary>
        <returns>上一筆寫入之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法可以確保已將內含指定序號的所有記錄永久寫入。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sequenceNumber" /> 對此順序無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sequenceNumber" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。</exception>
        <exception cref="T:System.InvalidOperationException">指定的記錄沒有任何延伸區。 必須先建立一或多個延伸區，才能使用記錄順序。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogRecordSequence.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.LastSequenceNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得大於上一筆附加記錄的序號</summary>
        <value>大於上一筆附加記錄的序號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性包含保證大於上一個附加記錄之序號的序號。 有效的序號會大於或等於 <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>。 其他所有序號全都無效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="LogStore">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogStore LogStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Log.LogStore LogStore" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.LogStore" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogStore As LogStore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogStore ^ LogStore { System::IO::Log::LogStore ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogStore : System.IO.Log.LogStore" Usage="System.IO.Log.LogRecordSequence.LogStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.IO.Log.LogStore" />，包含這個記錄順序的資料。 這個方法無法被繼承。</summary>
        <value><see cref="T:System.IO.Log.LogStore" />，包含這個記錄順序的資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例會示範如何使用 <xref:System.IO.Log.LogRecordSequence.LogStore%2A> 成員來新增延伸區。  
  
 [!code-csharp[S_UELogRecordSequence#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#11)]
 [!code-vb[S_UELogRecordSequence#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRecordLength : int64" Usage="System.IO.Log.LogRecordSequence.MaximumRecordLength" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.MaximumRecordLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可以新增至這個記錄順序的記錄大小上限。</summary>
        <value>可以新增至這個記錄順序的記錄大小上限。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="F#" Value="abstract member ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;&#xA;override this.ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="logRecordSequence.ReadLogRecords (start, logRecordEnum)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start">開始讀取之第一筆記錄的序號。</param>
        <param name="logRecordEnum"><see cref="T:System.IO.Log.LogRecordEnumeratorType" /> 的有效值，其中指定從 <see cref="T:System.IO.Log.LogRecordSequence" /> 讀取記錄的方式 (即往前或往後讀取)。</param>
        <summary>傳回順序中之記錄的可列舉集合。 這個方法無法被繼承。</summary>
        <returns>順序中的記錄的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回順序中之記錄的可列舉集合。 列舉的記錄順序取決於 `logRecordEnum` 參數的值。  
  
   
  
## Examples  
 這個範例會說明如何在迴圈中使用 <xref:System.IO.Log.LogRecordSequence.ReadLogRecords%2A>。  
  
 [!code-csharp[S_UELogRecordSequence#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#10)]
 [!code-vb[S_UELogRecordSequence#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="start" /> 對此順序無效。  
  
-或- 
 <paramref name="logRecordEnum" /> 無效。  
  
-或- 
在集合中找不到特定的項目。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。  
  
-或- 
用來寫入記錄的緩衝區大小，大於用來讀取記錄的緩衝區大小。  
  
-或- 
記錄順序已損毀。  
  
-或- 
指定的記錄檔格式或版本無效。  
  
-或- 
記錄是以不相容的記錄順序版本所寫入。</exception>
        <exception cref="T:System.InvalidOperationException">因為列舉尚未啟動，因此作業無效。 必須呼叫 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberSignature Language="F#" Value="abstract member ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;&#xA;override this.ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="logRecordSequence.ReadRestartAreas " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.ReadRestartAreas</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回序列中重新啟動區域的可列舉集合。 這個方法無法被繼承。</summary>
        <returns>順序中的重新啟動區域的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列舉重新啟動區域的方式是依照序號的相反順序列舉，也就是由最大序號到最小序號。 只會列舉含有介於最後一個序號和基底序號之間序號的重新啟動區域。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。  
  
-或- 
用來寫入記錄的緩衝區大小，大於用來讀取記錄的緩衝區大小。  
  
-或- 
記錄順序已損毀。  
  
-或- 
指定的記錄檔格式或版本無效。  
  
-或- 
記錄是以不相容的記錄順序版本所寫入。</exception>
        <exception cref="T:System.InvalidOperationException">因為列舉尚未啟動，因此作業無效。 必須呼叫 <see cref="M:System.Collections.IEnumerator.MoveNext" />。  
  
-或- 
列舉已經結束。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>自動建立單一保留區，並將記錄附加至順序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber&#xA;override this.ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="nextUndoRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservationCollection"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含要在其中建立保留區的集合。</param>
        <param name="reservations">要建立的保留區 (以位元組為單位)。</param>
        <summary>自動建立單一保留區，並將記錄附加至順序。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。 如果附加失敗，就不會保留任何空間。  
  
 這個方法通常可以在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
   
  
## Examples  
 下列範例顯示如何使用這個方法來建立保留區。 請注意，您只能在使用 CLFS 的 <xref:System.IO.Log.LogRecordSequence> 類別時執行這項工作。  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
long[] lengthOfUndoRecords = new long[] { 1000 };  
recordSequence.ReserveAndAppend(recordData,  
                                                     userSqn,  
                                                     previousSqn,  
                                                     RecordSequenceAppendOptions.None,  
                                                     reservations,  
                                                     lengthOfUndoRecords);  
recordSequence.Append(undoRecordData,    // If necessary …  
                                    userSqn,  
                                    previousSqn,  
                                    RecordSequenceAppendOptions.ForceFlush,  
                                    reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="nextUndoRecord" /> 或 <paramref name="previousRecord" /> 對此順序無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservations" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nextUndoRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber userRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber userRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber&#xA;override this.ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.ReserveAndAppend (data, userRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="userRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="userRecord">下一筆記錄的序號 (依照使用者指定的順序)。</param>
        <param name="previousRecord">下一筆記錄的序號 (依照之前的順序)。</param>
        <param name="recordAppendOptions"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的有效值，其中指定資料的寫入方式。</param>
        <param name="reservationCollection">要在其中建立保留區的保留區集合。</param>
        <param name="reservations">要建立的保留區 (以位元組為單位)。</param>
        <summary>自動建立單一保留區，並將記錄附加至順序。 這個方法無法被繼承。</summary>
        <returns>已附加之記錄的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含在 `data` 參數中的資料將串連至單一位元組陣列中，以便附加成記錄。 不過，在讀取記錄時，並不會將資料分割回陣列區段。  
  
 指定的保留區會在不可部分完成的作業 (Atomic Operation) 與記錄附加作業中，加入至提供的保留區集合。 如果附加失敗，就不會保留任何空間。  
  
 這個方法通常可以在寫入記錄前完成。 若要確定已寫入某筆記錄，請使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 參數指定 `recordAppendOptions` 旗標，或是呼叫 <xref:System.IO.Log.LogRecordSequence.Flush%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">附加記錄時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的記錄或建立保留區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="userRecord" /> 或 <paramref name="previousRecord" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.NotSupportedException">記錄順序是以唯讀存取所開啟，無法執行作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.ReservationNotFoundException">在 <paramref name="data" /> 找不到有足夠空間可以容納 <paramref name="reservations" /> 的保留區。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ReservedBytes : int64" Usage="System.IO.Log.LogRecordSequence.ReservedBytes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.ReservedBytes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得保留的位元組總數。</summary>
        <value>在此記錄順序中建立之所有保留區的總共大小。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.RestartSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogRecordSequence.RestartSequenceNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.RestartSequenceNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得最接近記錄結尾之重新啟動區域的序號。</summary>
        <value>最接近記錄結尾之重新啟動區域的序號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 使用 <xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A> 方法，您就可以移除最近寫入的重新啟動區域。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetryAppend : bool with get, set" Usage="System.IO.Log.LogRecordSequence.RetryAppend" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IO.Log.IRecordSequence.RetryAppend</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否在記錄已滿時自動重試附加作業。</summary>
        <value>如果要在記錄檔已滿時自動重試附加作業，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性的值是 `true`，且 <xref:System.IO.Log.LogRecordSequence.Append%2A> 呼叫因為順序中的空間不足而失敗，記錄順序將會嘗試釋放空間，並重試附加作業。  
  
   
  
## Examples  
 這個範例會說明如何使用 <xref:System.IO.Log.LogRecordSequence.RetryAppend%2A> 屬性。  
  
 [!code-csharp[S_UELogRecordSequence#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#3)]
 [!code-vb[S_UELogRecordSequence#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLastRecord">
      <MemberSignature Language="C#" Value="public void SetLastRecord (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLastRecord(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.SetLastRecord(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLastRecord(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="member this.SetLastRecord : System.IO.Log.SequenceNumber -&gt; unit" Usage="logRecordSequence.SetLastRecord sequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><see cref="T:System.IO.Log.LogRecordSequence" /> 中最新的序號。  
  
這指的是目前在記錄中的最新有效記錄。</param>
        <summary>設定 <see cref="T:System.IO.Log.LogRecordSequence" /> 中的最後一個記錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的序號必須大於基底序號。  
  
 當這個方法完成時，先前附加序號大於指定序號的所有記錄會變成不可存取。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sequenceNumber" /> 對此順序無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。  
  
-或- 
 <paramref name="sequenceNumber" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
已經達到記錄的結尾。  
  
-或- 
指定的記錄檔格式或版本無效。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.LogRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberSignature Language="F#" Value="member this.TailPinned : EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " Usage="member this.TailPinned : System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.IO.Log.IRecordSequence.TailPinned</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標示需要移動順序結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以在記錄順序的空間用完時引發這個事件。 這個事件一經引發，就會將順序的結尾 (即基底序號) 往前移動以釋放空間。  
  
 當記錄順序基於任何理由決定必須釋放空間時，隨時都可以引發這個事件。 例如，當 CLFS 原則引擎判斷兩個共用同一記錄檔之記錄用戶端的結尾相距過遠時，就可能會決定引發事件。 寫入重新啟動區域，或是截斷記錄檔並使用 <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> 方法清除空間，都可以達到釋放空間的目的。 ＜範例＞一節中，程式碼範例會示範其第二種處理方式。  
  
 您也可以在 <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> 事件外部呼叫 <xref:System.IO.Log.LogRecordSequence.TailPinned> 方法來釋放空間。 重新啟動區域類似於其他記錄處理系統中的檢查點。 呼叫這個方法，就表示應用程式會將所有在重新啟動區域之前的記錄都視為完全完成，而且可供日後附加記錄之用。 與任何其他記錄相同，這個方法所寫入的記錄必須在記錄檔中有實際的可用空間，才會正常運作。  
  
   
  
## Examples  
 這個範例會說明如何使用 <xref:System.IO.Log.LogRecordSequence.TailPinned> 事件。  
  
```  
recordSequence.RetryAppend = true;  
recordSequence.TailPinned += new EventHandler<TailPinnedEventArgs>(HandleTailPinned);  
  
void HandleTailPinned(object sender, TailPinnedEventArgs tailPinnedEventArgs)  
{  
   // tailPinnedEventArgs.TargetSequenceNumber is the target   
   // sequence number to free up space to.    
   // However, this sequence number is not necessarily valid.  We have  
   // to use this sequence number as a starting point for finding a  
   // valid point within the log to advance toward. You need to  
   // identify a record with a sequence number equal to, or greater  
   // than TargetSequenceNumber; let's call this   
   // realTargetSequenceNumber. Once found, move the base  
  
   recordSequence.AdvanceBaseSequenceNumber(realTargetSequenceNumber);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄的陣列區段。</param>
        <summary>將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">寫入重新啟動區域時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <summary>將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 位元組陣列區段中的資料將串連至單一位元組陣列中，以便附加成記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">寫入重新啟動區域時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個引數為 <see langword="null" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSeqNum As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSeqNum);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea (data, newBaseSeqNum)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <summary>將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />，並更新基底序號。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 當這個方法成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">寫入重新啟動區域時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSeqNum As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSeqNum);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea (data, newBaseSeqNum)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <summary>將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />，並更新基底序號。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 當這個方法成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">寫入重新啟動區域時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSeqNum As SequenceNumber, reservations As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSeqNum, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea (data, newBaseSeqNum, reservations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <param name="reservations"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</param>
        <summary>使用保留區將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />，並更新基底序號。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。 如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。  
  
 當這個方法成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
        <exception cref="T:System.IO.IOException">寫入重新啟動區域時發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序無法騰出足夠的可用空間來容納新的重新啟動區域。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservationCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSeqNum, class System.IO.Log.ReservationCollection reservationCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSeqNum, System::IO::Log::ReservationCollection ^ reservationCollection);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber&#xA;override this.WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="logRecordSequence.WriteRestartArea (data, newBaseSeqNum, reservationCollection)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSeqNum" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">即將串連並附加成記錄之位元組陣列區段的清單。</param>
        <param name="newBaseSeqNum">新的基底序號。 指定的序號必須大於或等於目前基底序號。</param>
        <param name="reservationCollection"><see cref="T:System.IO.Log.ReservationCollection" />，其中包含此重新啟動區域所應使用的保留區。</param>
        <summary>使用保留區將重新啟動區域寫入 <see cref="T:System.IO.Log.LogRecordSequence" />，並更新基底序號。 這個方法無法被繼承。</summary>
        <returns>寫入之重新啟動區域的序號。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新啟動區域可用來暫時儲存包含用戶端上一個檢查點作業的資訊。 一般記錄檔系統 (CLFS) 會維護兩個重新啟動區域，以保證至少有一個有效區域永遠可供使用。 當需要復原時，CLFS 會讀取其重新啟動區域，以及上一個檢查點作業傳回的所有資料。 這些資料會初始化異動資料表、中途分頁資料表和開啟檔案資料表，好讓它們可用於復原程序。  
  
 您可以使用 <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> 方法來讀取重新啟動區域。  
  
 當寫入重新啟動區域時，位元組陣列區段中的資料會串連至單一位元組陣列，以便附加為記錄。 在讀取重新啟動區域時，不會將資料分割回陣列區段。  
  
 如果已指定保留區，寫入的重新啟動區域將會使用包含在集合中的保留區，以取用先前所保留的空間。 如果此方法成功，便會取用可以容納資料的最小保留區，而且該保留區將會從集合移除。  
  
 當這個方法成功完成時，基底序號已經更新。 只要是序號小於新基底序號的所有記錄都無法存取。  
  
 如果處置了記錄順序，或是您傳遞了無效的引數，就會立即在此作業中擲回例外狀況。 在非同步附加要求期間發生的錯誤 (例如，在 I/O 要求期間發生的磁碟錯誤) 會導致在呼叫 <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> 方法時擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newBaseSeqNum" /> 對此順序無效。  
  
-或- 
指定的記錄列舉起始序號無效。  
  
-或- 
 無法附加 <paramref name="data" />，因為它已超過記錄大小上限。  
  
-或- 
 <paramref name="reservationCollection" /> 不是由此記錄順序所建立。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新的或現有封存結尾或作用中記錄的基底無效。  
  
-或- 
 <paramref name="newBaseSeqNum" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.IO.IOException">由於意外的 I/O 例外狀況，所以無法執行要求。  
  
-或- 
因為 I/O 裝置錯誤，所以無法執行要求。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄順序遭作業系統拒絕。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
      </Docs>
    </Member>
  </Members>
</Type>