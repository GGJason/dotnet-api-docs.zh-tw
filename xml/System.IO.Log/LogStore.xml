<Type Name="LogStore" FullName="System.IO.Log.LogStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e09c8f57cbb65b4338595c8c78cf1de13180ff3f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37759109" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogStore : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogStore extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogStore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogStore&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogStore sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type LogStore = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>代表記錄結構化儲存區。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogRecordSequence> 類別會在一般記錄檔系統 (CLFS) 記錄頂端提供記錄順序介面實作。 它會搭配使用 <xref:System.IO.Log.LogStore> 類別，這個類別會提供用來直接操作和管理 CLFS 記錄檔的介面。 記錄存放區會在一組延伸磁碟區中提供僅能附加的儲存區。 <xref:System.IO.Log.LogStore> 類別代表這個儲存區，並且提供用來加入和移除容器、設定原則以及建立封存檔的方法， 但是不提供讀取和寫入儲存區的方法；這些方法會由 <xref:System.IO.Log.LogRecordSequence> 類別提供。  
  
 <xref:System.IO.Log.LogStore> 類別與 <xref:System.IO.Log.LogRecordSequence> 類別的關係就如同磁碟檔案與 <xref:System.IO.FileStream> 物件的關係。 磁碟檔案提供實際的儲存區且具有「長度」和「上次存取時間」等屬性，而 <xref:System.IO.FileStream> 物件則提供檔案的檢視，可用來讀取和寫入檔案。 同樣地，<xref:System.IO.Log.LogStore> 類別也具有原則和延伸磁碟區集合等屬性，而 <xref:System.IO.Log.LogRecordSequence> 類別則會提供用來讀取和寫入資料的記錄導向機制。  
  
 與 <xref:System.IO.Log.FileRecordSequence> 類別所代表的檔案記錄順序不同，<xref:System.IO.Log.LogStore> 執行個體會將它的資料儲存在 <xref:System.IO.Log.LogExtent> 執行個體所代表的延伸磁碟區集合中。 指定 <xref:System.IO.Log.LogStore> 執行個體中的延伸區大小均等，而在 <xref:System.IO.Log.LogStore> 執行個體中新增和移除空間時，將會以延伸區累加的方式來進行。 若要新增及移除延伸記錄區，請使用 <xref:System.IO.Log.LogExtentCollection.Add%2A> 物件的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 和 <xref:System.IO.Log.LogExtentCollection> 方法，這個物件可以由 <xref:System.IO.Log.LogStore.Extents%2A> 屬性傳回。  
  
 <xref:System.IO.Log.LogStore> 執行個體可能會有與它相關聯的原則。 這些原則是以可由 <xref:System.IO.Log.LogPolicy> 屬性傳回的 <xref:System.IO.Log.LogStore.Policy%2A> 執行個體來代表。 原則會規定記錄檔所要遵循的規則，例如延伸區的數目上限和大小下限，以及在特定條件下擴大或縮小 <xref:System.IO.Log.LogStore> 的相關指示。 此外，您還可以指定是否可以封存 <xref:System.IO.Log.LogStore> 執行個體。 原則是針對個別記錄檔設定的，而且是變動的 (Volatile)，代表一旦關閉記錄檔的所有控制代碼，就不再會有原則存在。  
  
   
  
## Examples  
 下列範例示範如何將 <xref:System.IO.Log.LogStore> 封存至 XML 文件。  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (Microsoft.Win32.SafeHandles.SafeFileHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : Microsoft.Win32.SafeHandles.SafeFileHandle -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
      </Parameters>
      <Docs>
        <param name="handle">目前 <see cref="T:System.IO.Log.LogStore" /> 物件所封裝之記錄檔的檔案控制代碼。</param>
        <summary>為指定的控制代碼初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">記錄檔控制代碼無法繫結至執行緒集區。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <summary>使用指定的路徑和模式初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個建構函式，以指定的路徑和模式來開啟記錄存放區。 存放區便會以讀取/寫入權限開啟，並且共用讀取權限。  
  
 `path` 參數應使用下列語法：  
  
 `log:<physical log name>[::<log client name>]`  
  
 其中 `<physical log name>` 是記錄檔的有效路徑，而 `<log client name>` 則是唯一的用戶端識別項。 記錄存放區必須是實體記錄存放區或虛擬記錄存放區，但不會同時為這兩者。 一旦建立實體或虛擬記錄存放區，其狀態就會永久保持不變。 實體記錄存放區的建立方式是單獨指定實體記錄名稱。 虛擬記錄存放區的建立方式是同時指定實體記錄名稱和記錄用戶端名稱。  
  
 實體記錄名稱相同的用戶端，其延伸區集合和原則也會相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogStore" />。 如果 CLFS 元件適用於您的平台，請加以安裝或改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <summary>使用指定的路徑、模式和存取權限初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個建構函式，以指定的路徑、模式和存取權限來開啟新的記錄存放區。 存放區便會開啟，並且共用讀取權限。  
  
 `path` 參數應使用下列語法：  
  
 `log:<physical log name>[::<log client name>]`  
  
 其中 `<physical log name>` 是記錄檔的有效路徑，而 `<log client name>` 則是唯一的用戶端識別項。 記錄存放區必須是實體記錄存放區或虛擬記錄存放區，但不會同時為這兩者。 一旦建立實體或虛擬記錄存放區，其狀態就會永久保持不變。 實體記錄存放區的建立方式是單獨指定實體記錄名稱。 虛擬記錄存放區的建立方式是同時指定實體記錄名稱和記錄用戶端名稱。  
  
 實體記錄名稱相同的用戶端，其延伸區集合和原則也會相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。  
  
-或- 
 <paramref name="access" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogStore" />。 如果 CLFS 元件適用於您的平台，請加以安裝或改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access, share)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <param name="share">其中一個 <see cref="T:System.IO.FileShare" /> 值，可決定在處理序之間共用記錄存放區的方式。</param>
        <summary>初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會初始化新的 <xref:System.IO.Log.LogStore> 物件，而這個物件是以指定的路徑、模式和存取權限所開啟的。 存放區會開啟，並且共用指定的存取權限。  
  
 `path` 參數應使用下列語法：  
  
 `log:<physical log name>[::<log client name>]`  
  
 其中 `<physical log name>` 是記錄檔的有效路徑，而 `<log client name>` 則是唯一的用戶端識別項。 記錄存放區必須是實體記錄存放區或虛擬記錄存放區，但不會同時為這兩者。 一旦建立實體或虛擬記錄存放區，其狀態就會永久保持不變。 實體記錄存放區的建立方式是單獨指定實體記錄名稱。 虛擬記錄存放區的建立方式是同時指定實體記錄名稱和記錄用戶端名稱。  
  
 實體記錄名稱相同的用戶端，其延伸區集合和原則也會相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。  
  
-或- 
 <paramref name="access" /> 包含無效的值。  
  
-或- 
 <paramref name="share" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogStore" />。 如果 CLFS 元件適用於您的平台，請加以安裝或改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * System.Security.AccessControl.FileSecurity -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access, share, fileSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">要開啟之記錄存放區基底檔案的相對或絕對路徑。</param>
        <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值，可決定如何開啟或建立存放區。</param>
        <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值，可決定 <see cref="T:System.IO.Log.LogStore" /> 可以如何存取檔案。</param>
        <param name="share">其中一個 <see cref="T:System.IO.FileShare" /> 值，可決定在處理序之間共用記錄存放區的方式。</param>
        <param name="fileSecurity">其中一個 <see cref="T:System.Security.AccessControl.FileSecurity" /> 值，可指定要針對新建立的存放區設定的安全性 (如果必須建立存放區的話)。</param>
        <summary>初始化 <see cref="T:System.IO.Log.LogStore" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會初始化新的 <xref:System.IO.Log.LogStore> 物件，而這個物件是以指定的路徑、模式和存取權限所開啟的。 存放區會開啟，並且共用指定的存取權限。 `path` 參數應遵循下列語法：  
  
 `log:<physical log name>[::<log client name>]`  
  
 其中 `<physical log name>` 是記錄檔的有效路徑，而 `<log client name>` 則是唯一的用戶端識別項。 記錄存放區必須是實體記錄存放區或虛擬記錄存放區，但不會同時為這兩者。 一旦建立實體或虛擬記錄存放區，其狀態就會永久保持不變。 實體記錄存放區的建立方式是單獨指定實體記錄名稱。 虛擬記錄存放區的建立方式是同時指定實體記錄名稱和記錄用戶端名稱。  
  
 實體記錄名稱相同的用戶端，其延伸區集合和原則也會相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 所指定的記錄存放區檔案名稱無效。  
  
-或- 
 <paramref name="Mode" /> 為 <see langword="CreateNew" />；因此，如果沒有寫入權限，就無法加以使用。  
  
-或- 
 <paramref name="Mode" /> 為 <see langword="OpenOrCreate" />；因此，如果沒有寫入權限，就無法加以使用。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含無效的值。  
  
-或- 
 <paramref name="access" /> 包含無效的值。  
  
-或- 
 <paramref name="share" /> 包含無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。  
  
因為另一個處理序正在使用 <paramref name="path" /> 所指定的檔案，所以無法存取該檔案。  
  
-或- 
因為檔案或目錄已存在，所以無法建立 <paramref name="path" /> 所指定的檔案。  
  
-或- 
記錄檔控制代碼無法繫結至執行緒集區。  
  
-或- 
指定的記錄檔格式或版本無效。</exception>
        <exception cref="T:System.PlatformNotSupportedException">因為尚未安裝所需的一般記錄檔系統 (CLFS) 元件，所以無法使用 <see cref="T:System.IO.Log.LogStore" />。 如果 CLFS 元件適用於您的平台，請加以安裝或改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 類別。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Archivable">
      <MemberSignature Language="C#" Value="public bool Archivable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Archivable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Archivable" />
      <MemberSignature Language="VB.NET" Value="Public Property Archivable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Archivable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Archivable : bool with get, set" Usage="System.IO.Log.LogStore.Archivable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來表示是否可以封存這個 <see cref="T:System.IO.Log.LogStore" /> 執行個體的值。</summary>
        <value>如果可以封存這個 <see langword="true" /> 執行個體，則為 <see cref="T:System.IO.Log.LogStore" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果無法封存 <xref:System.IO.Log.LogStore>，呼叫 <xref:System.IO.Log.LogStore.CreateLogArchiveSnapshot%2A> 和 <xref:System.IO.Log.LogStore.SetArchiveTail%2A> 方法便會導致擲回 <xref:System.NotSupportedException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogStore.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得對應至這個 <see cref="T:System.IO.Log.LogStore" /> 執行個體中有效記錄的最小序號。</summary>
        <value>對應至這個 <see cref="T:System.IO.Log.LogStore" /> 執行個體中有效記錄的最小序號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有效的序號會大於或等於 <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLogArchiveSnapshot">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得製作備份所需的記錄存放區狀態快照 (Snapshot)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLogArchiveSnapshot">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.CreateLogArchiveSnapshot" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogArchiveSnapshot () As LogArchiveSnapshot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::LogArchiveSnapshot ^ CreateLogArchiveSnapshot();" />
      <MemberSignature Language="F#" Value="member this.CreateLogArchiveSnapshot : unit -&gt; System.IO.Log.LogArchiveSnapshot" Usage="logStore.CreateLogArchiveSnapshot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogArchiveSnapshot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得記錄存放區狀態的快照 (Snapshot)，以便製作備份。</summary>
        <returns><see cref="T:System.IO.Log.LogArchiveSnapshot" /> 物件，其中包含製作封存檔所需的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何將 <xref:System.IO.Log.LogStore> 封存至 XML 文件。  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">無法封存記錄存放區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.IO.IOException">建立封存快照時發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentException">引數無效。</exception>
        <exception cref="T:System.InvalidOperationException">已經執行無效的作業。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateLogArchiveSnapshot">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot (System.IO.Log.SequenceNumber first, System.IO.Log.SequenceNumber last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot(valuetype System.IO.Log.SequenceNumber first, valuetype System.IO.Log.SequenceNumber last) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogArchiveSnapshot (first As SequenceNumber, last As SequenceNumber) As LogArchiveSnapshot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::LogArchiveSnapshot ^ CreateLogArchiveSnapshot(System::IO::Log::SequenceNumber first, System::IO::Log::SequenceNumber last);" />
      <MemberSignature Language="F#" Value="member this.CreateLogArchiveSnapshot : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; System.IO.Log.LogArchiveSnapshot" Usage="logStore.CreateLogArchiveSnapshot (first, last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogArchiveSnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="last" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="first">要封存之範圍的起始序號。</param>
        <param name="last">要封存之範圍的結束序號。</param>
        <summary>取得介於指定之序號間的記錄存放區狀態快照 (Snapshot)，以便製作備份。</summary>
        <returns><see cref="T:System.IO.Log.LogArchiveSnapshot" /> 物件，其中包含製作封存檔所需的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的封存快照 (Snapshot) 包含由基底序號或封存序號 (較小者) 到最後一個序號的資訊， 其中不含最後一個序號，代表封存檔只包含直到最後一個之前的所有記錄。 此外，使用這個方法時，起始的 SequenceNumber 必須等於 BaseSequenceNumber，才能讓這個封存保持一致。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first" /> 或 <paramref name="last" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="first" /> 大於 <paramref name="last" />。</exception>
        <exception cref="T:System.InvalidOperationException">已經執行無效的作業。</exception>
        <exception cref="T:System.IO.IOException">建立封存快照時發生 I/O 錯誤。</exception>
        <exception cref="T:System.NotSupportedException">無法封存記錄存放區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">記錄順序已滿。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.IO.Log.LogStore.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要移除之記錄存放區基底檔案的相對或絕對路徑。</param>
        <summary>移除記錄存放區。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為空字串 ("")。  
  
-或- 
 <paramref name="path" /> 僅包含泛空白字元。  
  
-或- 
 <paramref name="path" /> 包含一或多個無效的字元。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
        <exception cref="T:System.IO.IOException">開啟記錄存放區時發生 I/O 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="logStore.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.IO.Log.LogStore" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogStore.Dispose%2A> 使用完畢時，請呼叫 <xref:System.IO.Log.LogStore>。 <xref:System.IO.Log.LogStore.Dispose%2A> 方法會將 <xref:System.IO.Log.LogStore> 保留在無法使用的狀態。 在呼叫 <xref:System.IO.Log.LogStore.Dispose%2A> 後，您必須釋放所有對 <xref:System.IO.Log.LogStore> 的參考，讓記憶體回收行程可以取回 <xref:System.IO.Log.LogStore> 佔用的記憶體。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.IO.Log.LogStore.Dispose%2A> 參考之前，請務必呼叫 <xref:System.IO.Log.LogStore>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.IO.Log.LogStore> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Extents">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogExtentCollection Extents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Log.LogExtentCollection Extents" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Extents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extents As LogExtentCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogExtentCollection ^ Extents { System::IO::Log::LogExtentCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extents : System.IO.Log.LogExtentCollection" Usage="System.IO.Log.LogStore.Extents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogExtentCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含這個記錄存放區資料的延伸記錄區集合。</summary>
        <value><see cref="T:System.IO.Log.LogExtentCollection" /> 執行個體，其中包含封裝這個記錄存放區資料的延伸記錄區集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogStore> 執行個體會將它的資料儲存在 <xref:System.IO.Log.LogExtent> 執行個體所代表的延伸磁碟區集合中。 指定 <xref:System.IO.Log.LogStore> 執行個體中的延伸區大小均等，而在 <xref:System.IO.Log.LogStore> 執行個體中新增和移除空間時，將會以延伸區累加的方式來進行。 若要新增及移除延伸記錄區，請使用 <xref:System.IO.Log.LogExtentCollection.Add%2A> 物件的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 和 <xref:System.IO.Log.LogExtentCollection> 方法，這個物件是由這個屬性所傳回的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeBytes">
      <MemberSignature Language="C#" Value="public long FreeBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 FreeBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.FreeBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long FreeBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeBytes : int64" Usage="System.IO.Log.LogStore.FreeBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得記錄存放區中可用的位元組數目。</summary>
        <value>記錄存放區中可用的位元組數目。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeFileHandle Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeFileHandle Handle" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As SafeFileHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeFileHandle ^ Handle { Microsoft::Win32::SafeHandles::SafeFileHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.Log.LogStore.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.IO.Log.LogStore" /> 執行個體所封裝之記錄檔的作業系統檔案控制代碼。</summary>
        <value>目前 <see cref="T:System.IO.Log.LogStore" /> 執行個體所封裝之記錄檔的作業系統檔案控制代碼。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogStore.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得要附加至記錄存放區之下一筆記錄的序號。</summary>
        <value>要附加至記錄存放區之下一筆記錄的序號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有效的序號會大於或等於 <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A>，而且小於 <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.Log.LogStore.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得記錄存放區的大小 (以位元組為單位)。</summary>
        <value>記錄存放區的大小 (以位元組為單位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 記錄存放區的大小是延伸記錄區大小的總和。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後存取此屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Policy">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogPolicy Policy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Log.LogPolicy Policy" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Policy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Policy As LogPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogPolicy ^ Policy { System::IO::Log::LogPolicy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Policy : System.IO.Log.LogPolicy" Usage="System.IO.Log.LogStore.Policy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與此記錄存放區相關聯的原則。</summary>
        <value><see cref="T:System.IO.Log.LogPolicy" /> 執行個體，代表與此記錄存放區相關聯的原則。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性所傳回的 <xref:System.IO.Log.LogPolicy> 執行個體，檢查和操作與這個 <xref:System.IO.Log.LogStore> 相關聯的記錄原則。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArchiveTail">
      <MemberSignature Language="C#" Value="public void SetArchiveTail (System.IO.Log.SequenceNumber archiveTail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetArchiveTail(valuetype System.IO.Log.SequenceNumber archiveTail) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.SetArchiveTail(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetArchiveTail (archiveTail As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetArchiveTail(System::IO::Log::SequenceNumber archiveTail);" />
      <MemberSignature Language="F#" Value="member this.SetArchiveTail : System.IO.Log.SequenceNumber -&gt; unit" Usage="logStore.SetArchiveTail archiveTail" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveTail" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="archiveTail">封存結尾的序號。</param>
        <summary>設定封存結尾的序號。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基底序號和封存結尾這兩者中較小的，會決定記錄檔的結尾。  
  
   
  
## Examples  
 下列範例示範如何將 <xref:System.IO.Log.LogStore> 封存至 XML 文件。  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" /> 不是介於這個順序的基底序號和最後一個序號之間。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="archiveTail" /> 對此順序無效。</exception>
        <exception cref="T:System.InvalidOperationException">已經執行無效的作業。</exception>
        <exception cref="T:System.IO.IOException">建立封存快照時發生 I/O 錯誤。</exception>
        <exception cref="T:System.NotSupportedException">無法封存記錄存放區。</exception>
        <exception cref="T:System.ObjectDisposedException">已在處置序列之後呼叫此方法。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可以繼續執行程式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存取指定的記錄存放區遭作業系統拒絕。</exception>
      </Docs>
    </Member>
    <Member MemberName="StreamCount">
      <MemberSignature Language="C#" Value="public int StreamCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StreamCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.StreamCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StreamCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StreamCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.StreamCount : int" Usage="System.IO.Log.LogStore.StreamCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個記錄存放區的記錄資料流數目。</summary>
        <value>這個記錄存放區的記錄資料流數目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>