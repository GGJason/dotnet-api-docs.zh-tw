<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6225284e1ba227a6a73f861d5fdaba59c0849938" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541472" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fcf27-101">定義不透明的類型，以保留和儲存必須提供給 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的所有相關狀態資訊，以便在處理未完成資料之後繼續讀取。</span><span class="sxs-lookup"><span data-stu-id="fcf27-101">Defines an opaque type that holds and saves all the relevant state information, which must be provided to the <see cref="T:System.Text.Json.Utf8JsonReader" /> to continue reading after processing incomplete data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fcf27-102">`JsonReaderState` 需要支援重新進入，讀取不完整的資料時，以及更多資料可用之後，請繼續閱讀。</span><span class="sxs-lookup"><span data-stu-id="fcf27-102">`JsonReaderState` is required to support reentrancy when reading incomplete data, and to continue reading once more data is available.</span></span> <span data-ttu-id="fcf27-103">不同於<xref:System.Text.Json.Utf8JsonReader>結構，也就是 ref struct、 跨 async/await 界限，不會受此型別和因此，您需要提供支援以非同步方式讀取更多資料，再繼續進行的新執行個體<xref:System.Text.Json.Utf8JsonReader>。</span><span class="sxs-lookup"><span data-stu-id="fcf27-103">Unlike the <xref:System.Text.Json.Utf8JsonReader> struct, which is a ref struct, this type can survive across async/await boundaries, and hence it's required to provide support for reading more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (int maxDepth = 64, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 maxDepth, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Int32,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional maxDepth As Integer = 64, Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : int * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState (maxDepth, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maxDepth" Type="System.Int32" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="maxDepth"><span data-ttu-id="fcf27-104">讀取 JSON 時允許的最大深度。</span><span class="sxs-lookup"><span data-stu-id="fcf27-104">The maximum depth allowed when reading JSON.</span></span> <span data-ttu-id="fcf27-105">這是選擇性參數，其預設值為 64。</span><span class="sxs-lookup"><span data-stu-id="fcf27-105">This is an optional parameter, and its default value is 64.</span></span> <span data-ttu-id="fcf27-106">讀取超過這個深度就會擲回 <see cref="T:System.Text.Json.JsonReaderException" /></span><span class="sxs-lookup"><span data-stu-id="fcf27-106">Reading past this depth throws a <see cref="T:System.Text.Json.JsonReaderException" /></span></span></param>
        <param name="options"><span data-ttu-id="fcf27-107"><see cref="T:System.Text.Json.Utf8JsonReader" /> 的自訂行為不同於 JSON RFC (例如，處理註解的方式)。</span><span class="sxs-lookup"><span data-stu-id="fcf27-107">The customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that is different from the JSON RFC (for example, how to handle comments).</span></span>
<span data-ttu-id="fcf27-108">這是選擇性參數，根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 結構會嚴格遵循 JSON RFC (也就是說，JSON 內的註解無效)。</span><span class="sxs-lookup"><span data-stu-id="fcf27-108">This is an optional parameter and, by default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct follows the JSON RFC strictly (that is, comments within the JSON are invalid).</span></span></param>
        <summary><span data-ttu-id="fcf27-109">初始化 <see cref="T:System.Text.Json.JsonReaderState" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="fcf27-109">Initializes a new instance of the <see cref="T:System.Text.Json.JsonReaderState" /> struct.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="fcf27-110">A<xref:System.Text.Json.JsonReaderState>執行個體必須傳遞給<xref:System.Text.Json.Utf8JsonReader>建構函式的 JSON 資料。</span><span class="sxs-lookup"><span data-stu-id="fcf27-110">A <xref:System.Text.Json.JsonReaderState> instance must be passed to the <xref:System.Text.Json.Utf8JsonReader> constructor with the JSON data.</span></span>
<span data-ttu-id="fcf27-111">不同於<xref:System.Text.Json.Utf8JsonReader>，這是 ref struct、 狀態時仍可存留跨 async/await 界限，並且因此這個型別才可提供支援以非同步方式讀取更多資料，再繼續進行的新執行個體<xref:System.Text.Json.Utf8JsonReader>類別。</span><span class="sxs-lookup"><span data-stu-id="fcf27-111">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader> class.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fcf27-112"><paramref name="maxDepth" /> 小於或等於 0。</span><span class="sxs-lookup"><span data-stu-id="fcf27-112"><paramref name="maxDepth" /> is less than or equal to 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fcf27-113">取得 <see cref="T:System.Text.Json.Utf8JsonReader" /> 到目前為止為所指定 UTF-8 編碼輸入文字所耗用的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="fcf27-113">Gets the total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far for the given UTF-8 encoded input text.</span></span></summary>
        <value><span data-ttu-id="fcf27-114">所耗用的位元組總數<see cref="T:System.Text.Json.Utf8JsonReader" />為止。</span><span class="sxs-lookup"><span data-stu-id="fcf27-114">The total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int" Usage="System.Text.Json.JsonReaderState.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fcf27-115">取得讀取 JSON 時允許的最大深度。</span><span class="sxs-lookup"><span data-stu-id="fcf27-115">Gets the maximum depth allowed when reading JSON.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks
        
<span data-ttu-id="fcf27-116">讀取過去`MaxDepth`會擲回<xref:System.Text.Json.JsonReaderException>。</span><span class="sxs-lookup"><span data-stu-id="fcf27-116">Reading past `MaxDepth` throws a <xref:System.Text.Json.JsonReaderException>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fcf27-117">取得使用 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構讀取 JSON 資料時要使用的自訂行為，該結構可能會偏離嚴格遵守的 JSON 規格，這是預設行為。</span><span class="sxs-lookup"><span data-stu-id="fcf27-117">Gets the custom behavior to use when reading JSON data using the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct that may deviate from strict adherence to the JSON specification, which is the default behavior.</span></span></summary>
        <value><span data-ttu-id="fcf27-118">讀取 JSON 資料時要使用自訂的行為。</span><span class="sxs-lookup"><span data-stu-id="fcf27-118">The custom behavior to use when reading JSON data.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fcf27-119">取得所提供 UTF-8 編碼輸入 ReadOnlySequence&lt;byte&gt; 內目前的 <see cref="T:System.SequencePosition" />。</span><span class="sxs-lookup"><span data-stu-id="fcf27-119">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt;.</span></span> <span data-ttu-id="fcf27-120">如果改用 ReadOnlySpan&lt;byte&gt; 來建構 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構，這一律會傳回預設 <see cref="T:System.SequencePosition" />。</span><span class="sxs-lookup"><span data-stu-id="fcf27-120">If the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition" />.</span></span></summary>
        <value><span data-ttu-id="fcf27-121">目前<see cref="T:System.SequencePosition" />內提供 utf-8 編碼輸入 ReadOnlySequence&lt;位元組&gt;。</span><span class="sxs-lookup"><span data-stu-id="fcf27-121">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
