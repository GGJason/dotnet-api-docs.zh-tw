<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541641" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c4a74-101">提供高效能 API，以便對 UTF-8 編碼的 JSON 文字進行非快取的順向寫入。</span><span class="sxs-lookup"><span data-stu-id="c4a74-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="c4a74-102">`Utf8JsonWriter` 寫入的文字，以循序方式使用無快取，並依預設會遵守[JSON RFC](https://tools.ietf.org/html/rfc8259)，除了撰寫註解。</span><span class="sxs-lookup"><span data-stu-id="c4a74-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="c4a74-103">方法嘗試寫入無效的 JSON，驗證時，啟用會擲回<xref:System.InvalidOperationException>使用特定內容的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="c4a74-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="c4a74-104">因為此類型為 ref struct，它並不直接支援非同步。</span><span class="sxs-lookup"><span data-stu-id="c4a74-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="c4a74-105">不過，它提供將部分資料，並繼續在區塊中撰寫的重新進入的支援。</span><span class="sxs-lookup"><span data-stu-id="c4a74-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="c4a74-106">若要能泛空白字元與縮排輸出格式，或略過驗證，建立的執行個體<xref:System.Text.Json.JsonWriterState>並將其在傳遞至寫入器。</span><span class="sxs-lookup"><span data-stu-id="c4a74-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="c4a74-107">作為 JSON 文字寫入目的地使用的 <see cref="T:System.Buffers.IBufferWriter`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="c4a74-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="c4a74-108">包含讀取器狀態的結構。</span><span class="sxs-lookup"><span data-stu-id="c4a74-108">A struct that contains the reader state.</span></span> <span data-ttu-id="c4a74-109">在第一次呼叫建構函式時，它應該會反映為預設狀態；否則，它應該擷取前一個 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 執行個體的狀態，並將其傳回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="c4a74-110">使用指定的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 初始化 <paramref name="bufferWriter" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="c4a74-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="c4a74-111">因為此類型為 ref struct，它是僅限堆疊的類型，和 ref 結構的所有限制會都套用至它。</span><span class="sxs-lookup"><span data-stu-id="c4a74-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="c4a74-112">這是為什麼建構函式可接受的原因<xref:System.Text.Json.JsonWriterState>。</span><span class="sxs-lookup"><span data-stu-id="c4a74-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4a74-113"><paramref name="bufferWriter" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4a74-114">取得 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 到目前為止為 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 目前執行個體認可至輸出的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="c4a74-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="c4a74-115">這表示 <see cref="T:System.Buffers.IBufferWriter`1" /> 的進展程度。</span><span class="sxs-lookup"><span data-stu-id="c4a74-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="c4a74-116">所輸出的認可位元組總數<see cref="T:System.Text.Json.Utf8JsonWriter" />為止。</span><span class="sxs-lookup"><span data-stu-id="c4a74-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4a74-117">取得 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 到目前為止為 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 目前執行個體所寫入的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="c4a74-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="c4a74-118">這包括超出已認可內容的所寫入資料。</span><span class="sxs-lookup"><span data-stu-id="c4a74-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="c4a74-119">寫入的位元組總數<see cref="T:System.Text.Json.Utf8JsonWriter" />為止。</span><span class="sxs-lookup"><span data-stu-id="c4a74-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4a74-120">取得目前權杖的深度。</span><span class="sxs-lookup"><span data-stu-id="c4a74-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="c4a74-121">目前的語彙基元的深度。</span><span class="sxs-lookup"><span data-stu-id="c4a74-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="c4a74-122">`CurrentDepth`屬性會追蹤的遞迴深度的巢狀的物件 / 陣列寫入到目前為止在 JSON 文字中。</span><span class="sxs-lookup"><span data-stu-id="c4a74-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="c4a74-123"><see langword="true" /> 表示不會寫入更多的資料；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="c4a74-124">如果沒有更多要追蹤的資料，這用來驗證到目前為止寫入的 JSON 在結構上是否有效。</span><span class="sxs-lookup"><span data-stu-id="c4a74-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="c4a74-125">根據到目前為止已寫入的內容推進基礎 <see cref="T:System.Buffers.IBufferWriter`1" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-126">已寫入不完整的 JSON，且 <paramref name="isFinalBlock" /> 為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="c4a74-127">例如，必須關閉已開啟的物件或陣列時。</span><span class="sxs-lookup"><span data-stu-id="c4a74-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-128">傳回 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 狀態的目前快照集，該狀態必須由呼叫端擷取，並傳回至具有更多資料的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 建構函式。</span><span class="sxs-lookup"><span data-stu-id="c4a74-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="c4a74-129"><see cref="T:System.Text.Json.Utf8JsonWriter" /> 狀態的目前快照集。</span><span class="sxs-lookup"><span data-stu-id="c4a74-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="c4a74-130">不同於<xref:System.Text.Json.Utf8JsonWriter>，這是 ref struct、 狀態時仍可存留跨 async/await 界限，並且因此這種類型，才可提供更多資料的新執行個體繼續之前，以非同步方式讀取支援<xref:System.Text.Json.Utf8JsonWriter>。</span><span class="sxs-lookup"><span data-stu-id="c4a74-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="c4a74-131">取得用於建立新的狀態<see cref="T:System.Text.Json.Utf8JsonWriter" />結構，而不需要第一個認可已寫入的資料會導致不一致的狀態。</span><span class="sxs-lookup"><span data-stu-id="c4a74-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="c4a74-132">呼叫<xref:System.Text.Json.Utf8JsonWriter.Flush%2A>之前取得的目前狀態。</span><span class="sxs-lookup"><span data-stu-id="c4a74-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-133">JSON 資料已寫入並緩衝處理，但是尚未排清至 <see cref="T:System.Buffers.IBufferWriter`1" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-134">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-135">要以 JSON 常值 "true" 或 "false" 寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-136"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-137">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-138">寫入屬性名稱和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 "true" 或 "false") 作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-139"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-140">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-141">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-142">要以 JSON 常值 "true" 或 "false" 寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-143"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-144">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-145">寫入屬性名稱和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 "true" 或 "false")，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-146"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-147">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-148">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-149">要以 JSON 常值 "true" 或 "false" 寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-150"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-151">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-152">寫入屬性名稱和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 "true" 或 "false")，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-153"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-154">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-155">要以 JSON 陣列的元素寫入為 JSON 常值 "true" 或 "false" 的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-156">寫入 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 "true" 或 "false") 作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-157">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="c4a74-158">要寫入作為 JSON 註解的 UTF-8 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-159"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-160">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-161">寫入 UTF-8 文字值作為 JSON 註解 (在 <c>/*..*/</c> 內)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-162"><paramref name="utf8Value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-163">要寫入作為 UTF-8 轉碼 JSON 註解的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-164"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-165">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-166">寫入 UTF-16 文字值作為 JSON 註解 (在 <c>/*..*/</c> 內)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-167"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-168">要寫入作為 UTF-8 轉碼 JSON 註解的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-169"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-170">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-171">寫入字串文字值作為 JSON 註解 (在 <c>/*..*/</c> 內)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-172"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-173">寫入 JSON 陣列的結尾。</span><span class="sxs-lookup"><span data-stu-id="c4a74-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-174">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-175">寫入 JSON 物件的結尾。</span><span class="sxs-lookup"><span data-stu-id="c4a74-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-176">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-177">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-178"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-179">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-180">寫入屬性名稱和 JSON 常值 "null"，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-181"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-182">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-183">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-184"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-185">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-186">寫入屬性名稱和 JSON 常值 "null"，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-187"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-188">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-189">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-190"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-191">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-192">寫入屬性名稱和 JSON 常值 "null"，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-193"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-194">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-195">寫入 JSON 常值 "null"，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-196">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-197">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-198">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-199"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-200">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-201">寫入屬性名稱和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-202">寫入<see cref="T:System.Decimal" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-203"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-204">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-205">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-206">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-207"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-208">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-209">寫入屬性名稱和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-210">寫入<see cref="T:System.Double" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-211"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-212">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-213">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-214">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-215"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-216">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-217">寫入屬性名稱和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-218">寫入<see cref="T:System.Int32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-219">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-220"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-221">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-222">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-223">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-224"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-225">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-226">寫入屬性名稱和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-227">寫入<see cref="T:System.Int64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-228">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-229"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-230">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-231">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-232">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-233"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-234">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-235">寫入屬性名稱和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-236">寫入<see cref="T:System.Single" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-237"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-238">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-239">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-240">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-241"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-242">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-243">寫入屬性名稱和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-244">寫入<see cref="T:System.UInt32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-245">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-246"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-247">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-248">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-249">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-250"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-251">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-252">寫入屬性名稱和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-253">寫入<see cref="T:System.UInt64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-254">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-255"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-256">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-257">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-258">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-259"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-260">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-261">寫入屬性名稱和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-262">寫入<see cref="T:System.Decimal" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-263"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-264">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-265">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-266">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-267"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-268">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-269">寫入屬性名稱和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-270">寫入<see cref="T:System.Double" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-271"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-272">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-273">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-274">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-275"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-276">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-277">寫入屬性名稱和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-278">寫入<see cref="T:System.Int32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-279">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-280"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-281">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-282">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-283">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-284"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-285">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-286">寫入屬性名稱和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-287">寫入<see cref="T:System.Int64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-288">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-289"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-290">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-291">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-292">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-293"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-294">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-295">寫入屬性名稱和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-296">寫入<see cref="T:System.Single" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-297"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-298">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-299">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-300">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-301"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-302">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-303">寫入屬性名稱和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-304">寫入<see cref="T:System.UInt32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-305">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-306"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-307">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-308">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-309">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-310"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-311">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-312">寫入屬性名稱和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-313">寫入<see cref="T:System.UInt64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-314">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-315"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-316">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-317">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-318">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-319"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-320">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-321">寫入屬性名稱和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-322">寫入<see cref="T:System.Decimal" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-323"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-324">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-325">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-326">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-327"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-328">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-329">寫入屬性名稱和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-330">寫入<see cref="T:System.Double" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-331"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-332">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-333">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-334">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-335"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-336">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-337">寫入屬性名稱和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-338">寫入<see cref="T:System.Int32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-339">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-340"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-341">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-342">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-343">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-344"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-345">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-346">寫入屬性名稱和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-347">寫入<see cref="T:System.Int64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-348">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-349"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-350">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-351">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-352">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-353"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-354">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-355">寫入屬性名稱和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-356">寫入<see cref="T:System.Single" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-357"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-358">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-359">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-360">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-361"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-362">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-363">寫入屬性名稱和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-364">寫入<see cref="T:System.UInt32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-365">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-366"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-367">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-368">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-369">要以 JSON 數字寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-370"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-371">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-372">寫入屬性名稱和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-373">寫入<see cref="T:System.UInt64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-374">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-375"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-376">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-377">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-378">寫入 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-379">寫入<see cref="T:System.Decimal" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-380">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-381">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-382">寫入 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-383">寫入<see cref="T:System.Double" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-384">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-385">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-386">寫入 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-387">寫入<see cref="T:System.Int32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-388">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-389">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-390">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-391">寫入 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-392">寫入<see cref="T:System.Int64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-393">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-394">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-395">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-396">寫入 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-397">寫入<see cref="T:System.Single" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-398">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-399">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-400">寫入 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-401">寫入<see cref="T:System.UInt32" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-402">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-403">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-404">要以 JSON 數字寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-405">寫入 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-406">寫入<see cref="T:System.UInt64" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是 ' G')。</span><span class="sxs-lookup"><span data-stu-id="c4a74-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="c4a74-407">比方說，是 32767。</span><span class="sxs-lookup"><span data-stu-id="c4a74-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-408">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-409">寫入 JSON 陣列的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-410">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-411">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-411">-or-</span></span>

<span data-ttu-id="c4a74-412">如果這會導致寫入無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-413">要寫入之 JSON 陣列的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-414"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-415">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-416">以屬性名稱作為索引鍵，寫入 JSON 陣列的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-417"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-418">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-419">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-419">-or-</span></span>

<span data-ttu-id="c4a74-420">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-421">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-422"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-423">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-424">以屬性名稱作為索引鍵，寫入 JSON 陣列的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-425"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-426">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-427">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-427">-or-</span></span>

<span data-ttu-id="c4a74-428">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-429">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-430"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-431">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-432">以屬性名稱作為索引鍵，寫入 JSON 陣列的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-433"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-434">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-435">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-435">-or-</span></span>

<span data-ttu-id="c4a74-436">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4a74-437">寫入 JSON 物件的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-438">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-439">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-439">-or-</span></span>

<span data-ttu-id="c4a74-440">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-441">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-442"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-443">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-444">以屬性名稱作為索引鍵，寫入 JSON 物件的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-445"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-446">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-447">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-447">-or-</span></span>

<span data-ttu-id="c4a74-448">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-449">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-450"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-451">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-452">以屬性名稱作為索引鍵，寫入 JSON 物件的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-453"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-454">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-455">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-455">-or-</span></span>

<span data-ttu-id="c4a74-456">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-457">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-458"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-459">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-460">以屬性名稱作為索引鍵，寫入 JSON 物件的開頭。</span><span class="sxs-lookup"><span data-stu-id="c4a74-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-461"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-462">JSON 的深度已超過最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="c4a74-463">-或-</span><span class="sxs-lookup"><span data-stu-id="c4a74-463">-or-</span></span>

<span data-ttu-id="c4a74-464">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-465">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-466">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-467"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-468">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-469">寫入屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-470">寫入<see cref="T:System.DateTime" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-471">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-472"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-473">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-474">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-475">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-476"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-477">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-478">寫入屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-479">寫入<see cref="T:System.DateTimeOffset" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-480">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="c4a74-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-481"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-482">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-483">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-484">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-485"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-486">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-487">寫入屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-488">寫入<see cref="T:System.Guid" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是有 ')，做為表單： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="c4a74-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-489"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-490">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-491">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="c4a74-492">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-493">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-494">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-495">寫入 UTF-8 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-496">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-497">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-498">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-499">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-500">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-501">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-502">寫入 UTF-8 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-503">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-504">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="c4a74-505">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-506">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-507">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-508">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-509">寫入 UTF-8 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-510">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-511">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-512">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-513">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-514"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-515">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-516">寫入屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-517">寫入<see cref="T:System.DateTime" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-518">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-519"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-520">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-521">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-522">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-523"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-524">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-525">寫入屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-526">寫入<see cref="T:System.DateTimeOffset" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-527">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="c4a74-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-528"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-529">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-530">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-531">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-532"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-533">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-534">寫入屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-535">寫入<see cref="T:System.Guid" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是有 ')，做為表單： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="c4a74-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-536"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-537">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-538">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="c4a74-539">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-540">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-541">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-542">寫入 UTF-16 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-543">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-544">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-545">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-546">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-547">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-548">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-549">寫入 UTF-16 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-550">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-551">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-552">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-553">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-554">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-555">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-556">寫入 UTF-16 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-557">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-558">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-559">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-560">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-561"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-562">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-563">寫入屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-564">寫入<see cref="T:System.DateTime" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-565">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-566"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-567">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-568">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-569">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-570"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-571">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-572">寫入屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-573">寫入<see cref="T:System.DateTimeOffset" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-574">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="c4a74-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-575"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-576">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-577">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-578">要以 JSON 字串寫入作為名稱/值組一部分的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-579"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-580">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-581">寫入屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-582">寫入<see cref="T:System.Guid" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是有 ')，做為表單： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="c4a74-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-583"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-584">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-585">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="c4a74-586">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-587">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-588">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-589">寫入屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-590">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-591">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-592">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-593">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-594">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-595">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-596">寫入屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-597">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-598">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="c4a74-599">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="c4a74-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="c4a74-600">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-601">如果此值設為 false，寫入器會假設屬性名稱正確逸出並略過逸出的步驟。</span><span class="sxs-lookup"><span data-stu-id="c4a74-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="c4a74-602">該值一律會逸出</span><span class="sxs-lookup"><span data-stu-id="c4a74-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="c4a74-603">寫入屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</span><span class="sxs-lookup"><span data-stu-id="c4a74-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-604">當指定的屬性名稱或值太大時，便會擲回。</span><span class="sxs-lookup"><span data-stu-id="c4a74-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-605">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-606">要以 JSON 字串寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-607">寫入 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-608">寫入<see cref="T:System.DateTime" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="c4a74-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="c4a74-609">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="c4a74-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-610">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-611">要以 JSON 字串寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-612">寫入 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-613">寫入<see cref="T:System.DateTimeOffset" />使用往返 (' o ') <see cref="T:System.Buffers.StandardFormat" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="c4a74-614">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="c4a74-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-615">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-616">要以 JSON 字串寫入作為 JSON 陣列元素的值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="c4a74-617">寫入 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="c4a74-618">寫入<see cref="T:System.Guid" />使用預設<see cref="T:System.Buffers.StandardFormat" />(也就是有 ')，做為表單： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="c4a74-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-619">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="c4a74-620">要以 JSON 字串寫入作為 JSON 陣列元素的 UTF-8 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-621"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-622">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-623">寫入 UTF-8 文字值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-624"><paramref name="utf8Value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-625">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-626">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-627"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-628">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-629">寫入 UTF-16 文字值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-630"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-631">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c4a74-632">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</span><span class="sxs-lookup"><span data-stu-id="c4a74-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="c4a74-633"><see langword="false" /> 表示寫入器應該假設屬性名稱正確逸出並略過逸出的步驟；否則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="c4a74-634">這是選擇性參數，其預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="c4a74-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c4a74-635">寫入字串文字值 (以 JSON 字串)，作為 JSON 陣列的元素。</span><span class="sxs-lookup"><span data-stu-id="c4a74-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4a74-636"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="c4a74-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4a74-637">要寫入的 JSON 資料會是無效 JSON (雖然已啟用驗證)。</span><span class="sxs-lookup"><span data-stu-id="c4a74-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
