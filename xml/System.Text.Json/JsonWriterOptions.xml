<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="604c56611ba309e0717259c0da05485dda26d67c" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541693" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="94ffa-101">可讓使用者在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 撰寫 JSON 時，定義自訂行為。</span><span class="sxs-lookup"><span data-stu-id="94ffa-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="94ffa-102">根據預設，JSON 會寫入不含任何縮排或額外的空白字元。</span><span class="sxs-lookup"><span data-stu-id="94ffa-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="94ffa-103">此外，<xref:System.Text.Json.Utf8JsonWriter>擲回例外狀況，如果使用者嘗試寫入結構無效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="94ffa-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="94ffa-104">取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應將 JSON 輸出格式化，其中包含縮排巢狀 JSON 權杖、新增新行，以及在屬性名稱與值之間新增空白字元。</span><span class="sxs-lookup"><span data-stu-id="94ffa-104">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="94ffa-105"><see langword="true" /> 若要格式化 JSON 輸出;<see langword="false" />撰寫不含任何額外的空白字元。</span><span class="sxs-lookup"><span data-stu-id="94ffa-105"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="94ffa-106">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="94ffa-106">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="94ffa-107">取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應該略過結構化驗證，並允許使用者寫入無效 JSON。</span><span class="sxs-lookup"><span data-stu-id="94ffa-107">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="94ffa-108"><see langword="true" /> 略過結構化驗證，並允許無效的 JSON;<see langword="false" />擲回<see cref="T:System.InvalidOperationException" />嘗試寫入無效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="94ffa-108"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="94ffa-109">如果要寫入的 JSON 已知正確無誤，然後略過驗證 (藉由將此屬性設定為`true`) 可改善效能。</span><span class="sxs-lookup"><span data-stu-id="94ffa-109">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="94ffa-110">無效的 JSON，將會在擲回的寫入器的範例 (當`SkipValidation`設為`false`) 是當您撰寫不含屬性名稱的 JSON 物件內的值。</span><span class="sxs-lookup"><span data-stu-id="94ffa-110">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>