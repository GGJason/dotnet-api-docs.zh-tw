<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c8b70f84f6227059b8b978c586d8a6659cab5711" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39793669" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type List&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="4d240-101">清單中項目的類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="4d240-102">表示可以依照索引存取的強類型物件清單。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-102">Represents a strongly typed list of objects that can be accessed by index.</span>
      </span>
      <span data-ttu-id="4d240-103">提供搜尋、排序和管理清單的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-103">Provides methods to search, sort, and manipulate lists.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-104"><xref:System.Collections.Generic.List%601>類別相當於一般的<xref:System.Collections.ArrayList>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-104">The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class.</span></span> <span data-ttu-id="4d240-105">它會實作<xref:System.Collections.Generic.IList%601>需要使用陣列做為動態增加其大小的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-105">It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.</span></span>  
  
 <span data-ttu-id="4d240-106">您可以將項目加入<xref:System.Collections.Generic.List%601>利用<xref:System.Collections.Generic.List%601.Add%2A>或<xref:System.Collections.Generic.List%601.AddRange%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-106">You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.</span></span>  
  
 <span data-ttu-id="4d240-107"><xref:System.Collections.Generic.List%601>類別會使用相等比較子和排序比較子。</span><span class="sxs-lookup"><span data-stu-id="4d240-107">The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.</span></span>  
  
-   <span data-ttu-id="4d240-108">這類方法<xref:System.Collections.Generic.List%601.Contains%2A>， <xref:System.Collections.Generic.List%601.IndexOf%2A>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A>，和<xref:System.Collections.Generic.Dictionary%602.Remove%2A>清單元素使用相等比較子。</span><span class="sxs-lookup"><span data-stu-id="4d240-108">Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements.</span></span> <span data-ttu-id="4d240-109">類型的預設相等比較子`T`決定，如下所示。</span><span class="sxs-lookup"><span data-stu-id="4d240-109">The default equality comparer for type `T` is determined as follows.</span></span> <span data-ttu-id="4d240-110">如果型別`T`會實作<xref:System.IEquatable%601>泛型介面，則相等比較子會是<xref:System.IEquatable%601.Equals%28%600%29>方法，該介面; 的預設相等比較子是的否則為<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4d240-110">If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4d240-111">這類方法<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>用於清單項目中的排序比較子。</span><span class="sxs-lookup"><span data-stu-id="4d240-111">Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements.</span></span> <span data-ttu-id="4d240-112">類型的預設比較子`T`決定，如下所示。</span><span class="sxs-lookup"><span data-stu-id="4d240-112">The default comparer for type `T` is determined as follows.</span></span>  <span data-ttu-id="4d240-113">如果型別`T`實作<xref:System.IComparable%601>泛型介面，則預設比較子會是<xref:System.IComparable%601.CompareTo%28%600%29>方法的介面; 否則如果型別`T`實作非泛型<xref:System.IComparable>介面，則預設值比較子會是<xref:System.IComparable.CompareTo%28System.Object%29>該介面的方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-113">If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface.</span></span> <span data-ttu-id="4d240-114">如果型別`T`實作以上兩者的介面，則沒有任何預設比較子，而且必須明確地提供比較子或比較委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-114">If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</span></span>  
  
 <span data-ttu-id="4d240-115"><xref:System.Collections.Generic.List%601>不保證排序。</span><span class="sxs-lookup"><span data-stu-id="4d240-115">The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="4d240-116">您必須排序<xref:System.Collections.Generic.List%601>再執行作業 (例如<xref:System.Collections.Generic.List%601.BinarySearch%2A>)，您需要<xref:System.Collections.Generic.List%601>排序。</span><span class="sxs-lookup"><span data-stu-id="4d240-116">You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.</span></span>  
  
 <span data-ttu-id="4d240-117">可以使用整數索引來存取這個集合中的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-117">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="4d240-118">這個集合中的索引都是以零為起始的。</span><span class="sxs-lookup"><span data-stu-id="4d240-118">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="4d240-119">針對非常大型<xref:System.Collections.Generic.List%601>物件，您可以藉由設定增加到 64 位元系統上的 2 億個元素的最大容量`enabled`屬性的組態項目`true`在執行階段環境中。</span><span class="sxs-lookup"><span data-stu-id="4d240-119">For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="4d240-120"><xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-120"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="4d240-121">不可變的新版<xref:System.Collections.Generic.List%601>類別，請參閱<xref:System.Collections.Immutable.ImmutableList%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-121">For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="4d240-122">效能考量</span><span class="sxs-lookup"><span data-stu-id="4d240-122">Performance Considerations</span></span>  
 <span data-ttu-id="4d240-123">在決定是否要使用<xref:System.Collections.Generic.List%601>或是<xref:System.Collections.ArrayList>類別，這兩者都有類似的功能，請記住，<xref:System.Collections.Generic.List%601>類別在大部分情況下，執行得更好且型別安全。</span><span class="sxs-lookup"><span data-stu-id="4d240-123">In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe.</span></span> <span data-ttu-id="4d240-124">如果是參考型別用於型別`T`的<xref:System.Collections.Generic.List%601>類別，這兩個類別的行為完全相同。</span><span class="sxs-lookup"><span data-stu-id="4d240-124">If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical.</span></span> <span data-ttu-id="4d240-125">不過，如果實值型別用於型別`T`，您需要考慮實作和 boxing 問題。</span><span class="sxs-lookup"><span data-stu-id="4d240-125">However, if a value type is used for type `T`, you need to consider implementation and boxing issues.</span></span>  
  
 <span data-ttu-id="4d240-126">如果實值型別用於型別`T`，則編譯器會產生的實作<xref:System.Collections.Generic.List%601>類別特別針對該實值型別。</span><span class="sxs-lookup"><span data-stu-id="4d240-126">If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type.</span></span> <span data-ttu-id="4d240-127">這表示清單項目<xref:System.Collections.Generic.List%601>物件沒有可用的項目，並建立約 500 名 list 元素之後儲存不 boxing list 元素的記憶體大於用來產生的類別實作的記憶體之前會進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-127">That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</span></span>  
  
 <span data-ttu-id="4d240-128">請確定用於類型的實值型別`T`實作<xref:System.IEquatable%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-128">Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="4d240-129">如果不是，這類方法<xref:System.Collections.Generic.List%601.Contains%2A>必須呼叫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法，方塊的受影響的清單項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-129">If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, which boxes the affected list element.</span></span> <span data-ttu-id="4d240-130">如果實作實值型別<xref:System.IComparable>介面，且您擁有原始程式碼、 也實作<xref:System.IComparable%601>泛型介面，以防止<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>boxing 清單項目中的方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-130">If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements.</span></span> <span data-ttu-id="4d240-131">如果您並未擁有原始碼，傳遞<xref:System.Collections.Generic.IComparer%601>物件至<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>方法</span><span class="sxs-lookup"><span data-stu-id="4d240-131">If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods</span></span>  
  
 <span data-ttu-id="4d240-132">它會使用特定類型實作的優點<xref:System.Collections.Generic.List%601>類別，而不是使用<xref:System.Collections.ArrayList>類別或撰寫您自己的強型別包裝函式集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-132">It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself.</span></span> <span data-ttu-id="4d240-133">原因是您的實作必須執行.NET Framework 的功能，和 common language runtime 可以在 Microsoft 中繼語言程式碼和中繼資料，您的實作不能共用。</span><span class="sxs-lookup"><span data-stu-id="4d240-133">The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</span></span>  
  
## <a name="f-considerations"></a><span data-ttu-id="4d240-134">F # 的考量</span><span class="sxs-lookup"><span data-stu-id="4d240-134">F# Considerations</span></span>  
 <span data-ttu-id="4d240-135"><xref:System.Collections.Generic.List%601>類別不常用於 F # 程式碼。</span><span class="sxs-lookup"><span data-stu-id="4d240-135">The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.</span></span>  <span data-ttu-id="4d240-136">相反地，[列出](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)，是不可變、 單一連結清單中，為通常慣用。</span><span class="sxs-lookup"><span data-stu-id="4d240-136">Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred.</span></span> <span data-ttu-id="4d240-137">F # 清單提供排序、 不可變的系列的值，並支援函式型開發中使用。</span><span class="sxs-lookup"><span data-stu-id="4d240-137">An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</span></span> <span data-ttu-id="4d240-138">從 F # 中，當<xref:System.Collections.Generic.List%601>類別通常都有[ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx)類型縮寫，以避免命名衝突與 F # 清單</span><span class="sxs-lookup"><span data-stu-id="4d240-138">When used from F#, the <xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-139">下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-139">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="4d240-140">下列範例示範數個屬性和方法<xref:System.Collections.Generic.List%601>是字串類型的泛型類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-140">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string.</span></span> <span data-ttu-id="4d240-141">(如需<xref:System.Collections.Generic.List%601>複雜類型，請參閱<xref:System.Collections.Generic.List%601.Contains%2A>方法。)</span><span class="sxs-lookup"><span data-stu-id="4d240-141">(For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)</span></span>  
  
 <span data-ttu-id="4d240-142">預設建構函式用來建立字串清單的預設容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-142">The default constructor is used to create a list of strings with the default capacity.</span></span> <span data-ttu-id="4d240-143"><xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示，然後<xref:System.Collections.Generic.List%601.Add%2A>方法用來新增數個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-143">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="4d240-144">列出的項目，而<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示同樣地，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。</span><span class="sxs-lookup"><span data-stu-id="4d240-144">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="4d240-145"><xref:System.Collections.Generic.List%601.Contains%2A>方法用來測試是否存在的項目在清單中，<xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入中間清單中，新的項目和清單的內容會顯示一次。</span><span class="sxs-lookup"><span data-stu-id="4d240-145">The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</span></span>  
  
 <span data-ttu-id="4d240-146">預設值<xref:System.Collections.Generic.List%601.Item%2A>屬性 （C# 中為索引子） 用來擷取項目，<xref:System.Collections.Generic.List%601.Remove%2A>方法用來移除重複的項目之前，新增第一個執行個體和內容會顯示一次。</span><span class="sxs-lookup"><span data-stu-id="4d240-146">The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</span></span> <span data-ttu-id="4d240-147"><xref:System.Collections.Generic.List%601.Remove%2A>方法一律會移除第一個遇到的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-147">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 <span data-ttu-id="4d240-148"><xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數，而<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-148">The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="4d240-149">如果未使用的容量已低於 10%的總容量，清單會不具有已調整大小。</span><span class="sxs-lookup"><span data-stu-id="4d240-149">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span>  
  
 <span data-ttu-id="4d240-150">最後，<xref:System.Collections.Generic.List%601.Clear%2A>方法用來從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-150">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="4d240-151">公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-151">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="4d240-152">不保證任何執行個體成員是安全執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-152">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="4d240-153">安全地執行多個讀取的操作<see cref="T:System.Collections.Generic.List`1" />，但如果集合已修改正在讀取時，可能會發生問題。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-153">It is safe to perform multiple read operations on a <see cref="T:System.Collections.Generic.List`1" />, but issues can occur if the collection is modified while it’s being read.</span>
      </span>
      <span data-ttu-id="4d240-154">若要確保執行緒安全，讀取過程中鎖定集合，或寫入作業。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-154">To ensure thread safety, lock the collection during a read or write operation.</span>
      </span>
      <span data-ttu-id="4d240-155">若要啟用的讀取和寫入的多個執行緒存取集合，您必須實作自己的同步處理。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-155">To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
      <span data-ttu-id="4d240-156">對於內建的同步處理的集合，請參閱中的類別<see cref="N:System.Collections.Concurrent" />命名空間。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-156">For collections with built-in synchronization, see the classes in the <see cref="N:System.Collections.Concurrent" /> namespace.</span>
      </span>
      <span data-ttu-id="4d240-157">如需原本就是安全執行緒 – 替代方法，請參閱<see cref="T:System.Collections.Immutable.ImmutableList`1" />類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d240-157">For an inherently thread–safe alternative, see the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-158">初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-158">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-159">初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-159">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-160">容量<xref:System.Collections.Generic.List%601>是的項目數，<xref:System.Collections.Generic.List%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="4d240-160">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="4d240-161">當項目新增至<xref:System.Collections.Generic.List%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-161">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="4d240-162">如果集合的大小可以估計，使用<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>建構函式，並指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-162">If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-163">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確。</span><span class="sxs-lookup"><span data-stu-id="4d240-163">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="4d240-164">減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-164">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-165">這個建構函式是 o （1） 的作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-165">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-166">下列範例示範的預設建構函式<xref:System.Collections.Generic.List%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-166">The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="4d240-167">預設建構函式會建立預設容量，以清單顯示所示<xref:System.Collections.Generic.List%601.Capacity%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-167">The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
 <span data-ttu-id="4d240-168">範例會新增、 插入，並移除項目，顯示如何隨著這些方法會使用而變更容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-168">The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="4d240-169">將其項目複製到新清單的來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-169">The collection whose elements are copied to the new list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-170">初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，其包含從指定之集合複製的項目，且具有容納複製之項目數目的足夠容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-171">將元素複製到<xref:System.Collections.Generic.List%601>集合的列舉值所讀取的順序相同。</span><span class="sxs-lookup"><span data-stu-id="4d240-171">The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.</span></span>  
  
 <span data-ttu-id="4d240-172">這個建構函式是 O (*n*) 運算，其中*n*是中的項目數`collection`。</span><span class="sxs-lookup"><span data-stu-id="4d240-172">This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-173">下列範例示範<xref:System.Collections.Generic.List%601.%23ctor%2A>建構函式和各種方法<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-173">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-174">字串陣列建立並傳遞至建構函式，填入陣列的項目清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-174">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="4d240-175"><xref:System.Collections.Generic.List%601.Capacity%2A>就顯示屬性，以顯示的初始容量是完全保留輸入的項目所需條件為何。</span><span class="sxs-lookup"><span data-stu-id="4d240-175">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-176">
            <paramref name="collection" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-176">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="4d240-177">新清單一開始能夠儲存的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-177">The number of elements that the new list can initially store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-178">為具有指定初始容量且為空的 <see cref="T:System.Collections.Generic.List`1" /> 類別，初始化新的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-178">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-179">容量<xref:System.Collections.Generic.List%601>是的項目數，<xref:System.Collections.Generic.List%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="4d240-179">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="4d240-180">當項目新增至<xref:System.Collections.Generic.List%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-180">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="4d240-181">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-181">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-182">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確。</span><span class="sxs-lookup"><span data-stu-id="4d240-182">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="4d240-183">減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-183">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-184">這個建構函式是 O (*n*) 運算，其中*n*是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="4d240-184">This constructor is an O(*n*) operation, where *n* is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-185">下列範例示範<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="4d240-185">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="4d240-186">A<xref:System.Collections.Generic.List%601>的容量為 4 的字串會建立，因為清單的最終大小已知為完全 4。</span><span class="sxs-lookup"><span data-stu-id="4d240-186">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="4d240-187">此清單會填入四個字串，和唯讀複本由使用<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-187">The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-188">
            <paramref name="capacity" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-188">
              <paramref name="capacity" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="list.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-189">要加入至 <see cref="T:System.Collections.Generic.List`1" /> 結尾的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-189">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-190">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-190">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-191">將物件加入至 <see cref="T:System.Collections.Generic.List`1" /> 的末端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-191">Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-192"><xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-192"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="4d240-193">如果<xref:System.Collections.Generic.List%601.Count%2A>已等於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-193">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="4d240-194">如果<xref:System.Collections.Generic.List%601.Count%2A>是小於<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-194">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="4d240-195">如果容量需要增加，以容納新的項目，這個方法會變成 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-195">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-196">下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-196">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="4d240-197">下列範例示範數個屬性和方法<xref:System.Collections.Generic.List%601>泛型類別，包括<xref:System.Collections.Generic.List%601.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-197">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method.</span></span> <span data-ttu-id="4d240-198">預設建構函式用來建立容量為 0 的字串清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-198">The default constructor is used to create a list of strings with a capacity of 0.</span></span> <span data-ttu-id="4d240-199"><xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示，然後<xref:System.Collections.Generic.List%601.Add%2A>方法用來新增數個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-199">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="4d240-200">列出的項目，而<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示同樣地，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。</span><span class="sxs-lookup"><span data-stu-id="4d240-200">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="4d240-201">其他屬性和方法用來搜尋、 插入和移除項目從清單中，最後要清除的清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-201">Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="list.AddRange collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="4d240-202">集合，其項目應加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-202">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-203">集合本身不可為 <see langword="null" />，但如果類型 <c>T</c> 是參考型別，則其可以包含為 <see langword="null" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-203">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-204">將特定集合的項目加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-204">Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-205">集合中項目的順序會保留在<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-205">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-206">如果新<xref:System.Collections.Generic.List%601.Count%2A>(目前<xref:System.Collections.Generic.List%601.Count%2A>再加上集合的大小) 將會大於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>自動重新配置內部的陣列，以容納新的項目，會增加，加入新項目之前，現有的項目會複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-206">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="4d240-207">如果<xref:System.Collections.Generic.List%601>可以容納新的項目，而不會增加<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 O (*n*) 運算，其中*n*是要加入的項目數。</span><span class="sxs-lookup"><span data-stu-id="4d240-207">If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added.</span></span> <span data-ttu-id="4d240-208">如果容量需要增加，以容納新的項目，這個方法會變成 O (*n* + *m*) 作業，其中*n*是項目數目要加入及*m*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-208">If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-209">下列範例示範<xref:System.Collections.Generic.List%601.AddRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-209">The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-210">字串陣列建立並傳遞至建構函式，填入陣列的項目清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-210">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="4d240-211"><xref:System.Collections.Generic.List%601.AddRange%2A>呼叫方法時，作為其引數清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-211">The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument.</span></span> <span data-ttu-id="4d240-212">結果是，清單的目前項目會新增至清單中，複製所有項目結尾。</span><span class="sxs-lookup"><span data-stu-id="4d240-212">The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-213">
            <paramref name="collection" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-213">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.AsReadOnly : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="list.AsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-214">傳回目前集合的唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-214">Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-215">此物件作為唯讀包裝函式包住目前的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-215">An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-216">若要防止修改<xref:System.Collections.Generic.List%601>物件，只會透過這個包裝函式將它公開。</span><span class="sxs-lookup"><span data-stu-id="4d240-216">To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper.</span></span> <span data-ttu-id="4d240-217">A<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>物件不會公開修改集合的方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-217">A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection.</span></span> <span data-ttu-id="4d240-218">不過，如果變更基礎<xref:System.Collections.Generic.List%601>物件、 唯讀集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="4d240-218">However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4d240-219">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-219">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-220">下列範例示範<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-220">The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span> <span data-ttu-id="4d240-221">A<xref:System.Collections.Generic.List%601>的容量為 4 的字串會建立，因為清單的最終大小已知為完全 4。</span><span class="sxs-lookup"><span data-stu-id="4d240-221">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="4d240-222">此清單會填入四個字串，而<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法用來取得唯讀<xref:System.Collections.Generic.IList%601>包裝原始清單的泛型介面實作。</span><span class="sxs-lookup"><span data-stu-id="4d240-222">The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.</span></span>  
  
 <span data-ttu-id="4d240-223">將原始清單的項目設定為"Coelophysis 」 使用<xref:System.Collections.Generic.List%601.Item%2A>屬性 (C# 索引子） 和唯讀清單的內容會顯示一次來示範它是只是原始的清單包裝函式。</span><span class="sxs-lookup"><span data-stu-id="4d240-223">An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-224">使用二進位搜尋演算法來尋找在排序的 <see cref="T:System.Collections.Generic.List`1" /> 中或在其中一部分中的特定項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-224">Uses a binary search algorithm to locate a specific element in the sorted <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="list.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-225">要尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-225">The object to locate.</span>
          </span>
          <span data-ttu-id="4d240-226">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-226">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-227">使用預設的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-227">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-228">如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-228">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-229">這個方法會使用預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型別的`T`來決定清單項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-229">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="4d240-230"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>屬性檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-230">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-231">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-231">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-232">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-232">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-233"><xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。</span><span class="sxs-lookup"><span data-stu-id="4d240-233">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="4d240-234">比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-234">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="4d240-235">排序時，`null`會被視為小於任何其他物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-235">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="4d240-236">如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。</span><span class="sxs-lookup"><span data-stu-id="4d240-236">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="4d240-237">如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。</span><span class="sxs-lookup"><span data-stu-id="4d240-237">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="4d240-238">您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d240-238">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="4d240-239">當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。</span><span class="sxs-lookup"><span data-stu-id="4d240-239">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="4d240-240">這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。</span><span class="sxs-lookup"><span data-stu-id="4d240-240">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-241">下列範例示範<xref:System.Collections.Generic.List%601.Sort>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-241">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="4d240-242">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-242">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="4d240-243">清單是顯示、 排序，並且再次顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-243">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="4d240-244"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載則用來搜尋不在清單中，兩個字串和<xref:System.Collections.Generic.List%601.Insert%2A>方法用來將其插入。</span><span class="sxs-lookup"><span data-stu-id="4d240-244">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="4d240-245">傳回值<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法是在每個案例中，負數的因為字串不在清單中。</span><span class="sxs-lookup"><span data-stu-id="4d240-245">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="4d240-246">採取的位元補數 (~ 運算子在 C# 和 Visual c + +， `Xor` Visual Basic 中的-1) 的這個負數的數字會產生此位置是大於搜尋字串，並插入清單中的第一個元素的索引會保留排序順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-246">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="4d240-247">第二個搜尋字串大於任何項目在清單中，所以位於清單結尾的插入位置。</span><span class="sxs-lookup"><span data-stu-id="4d240-247">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-248">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或型別 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-248">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-249">要尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-249">The object to locate.</span>
          </span>
          <span data-ttu-id="4d240-250">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-250">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="4d240-251">比較項目時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-251">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span>
          </span>
          <span data-ttu-id="4d240-252">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-252">-or-</span>
          </span>
          <span data-ttu-id="4d240-253">
            <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-253">
              <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-254">使用指定的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-254">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-255">如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-255">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-256">比較子會自訂如何比較項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-256">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="4d240-257">例如，您可以使用<xref:System.Collections.CaseInsensitiveComparer>作為要執行不區分大小寫的字串搜尋的比較子的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-257">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="4d240-258">如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>會指定使用指定的值比較<xref:System.Collections.Generic.IComparer%601>實作。</span><span class="sxs-lookup"><span data-stu-id="4d240-258">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="4d240-259">如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-259">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-260">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-260">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-261">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-261">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-262"><xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。</span><span class="sxs-lookup"><span data-stu-id="4d240-262">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="4d240-263">比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-263">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="4d240-264">排序時，`null`會被視為小於任何其他物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-264">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="4d240-265">如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。</span><span class="sxs-lookup"><span data-stu-id="4d240-265">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="4d240-266">如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。</span><span class="sxs-lookup"><span data-stu-id="4d240-266">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="4d240-267">您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d240-267">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="4d240-268">當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。</span><span class="sxs-lookup"><span data-stu-id="4d240-268">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="4d240-269">這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。</span><span class="sxs-lookup"><span data-stu-id="4d240-269">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-270">下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-270">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="4d240-271">此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-271">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="4d240-272">比較子的運作方式如下： 第一次，針對測試比較元`null`，和 null 的參考會被視為少於一個非 null。</span><span class="sxs-lookup"><span data-stu-id="4d240-272">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="4d240-273">第二，比較字串的長度，和較長的字串會被視為更高。</span><span class="sxs-lookup"><span data-stu-id="4d240-273">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="4d240-274">第三，如果長度相等，就會使用一般的字串比較。</span><span class="sxs-lookup"><span data-stu-id="4d240-274">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="4d240-275">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-275">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="4d240-276">清單會顯示，使用替代的比較子，排序並且再次顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-276">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="4d240-277"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載則用來搜尋不在清單中，採用替代的比較子的數個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-277">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="4d240-278"><xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-278">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="4d240-279">這兩種方法都位於名為函式`SearchAndInsert`，以及程式碼，要採取的位元補數 (~ 運算子在 C# 和 Visual c + + 中， `Xor` -1，在 Visual Basic 中的) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>，做為索引插入新的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-279">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-280">
            <paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-280">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-281">要搜尋範圍內之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-281">The zero-based starting index of the range to search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-282">搜尋範圍的長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-282">The length of the range to search.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4d240-283">要尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-283">The object to locate.</span>
          </span>
          <span data-ttu-id="4d240-284">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-284">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="4d240-285">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-285">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-286">使用指定的比較子在已經過排序之 <see cref="T:System.Collections.Generic.List`1" /> 內，搜尋某範圍的項目，並傳回該項目以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-286">Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-287">如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-287">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-288">比較子會自訂如何比較項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-288">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="4d240-289">例如，您可以使用<xref:System.Collections.CaseInsensitiveComparer>作為要執行不區分大小寫的字串搜尋的比較子的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-289">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="4d240-290">如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>會指定使用指定的值比較<xref:System.Collections.Generic.IComparer%601>實作。</span><span class="sxs-lookup"><span data-stu-id="4d240-290">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="4d240-291">如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-291">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-292">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-292">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-293">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-293">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-294"><xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。</span><span class="sxs-lookup"><span data-stu-id="4d240-294">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="4d240-295">比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-295">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="4d240-296">排序時，`null`會被視為小於任何其他物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-296">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="4d240-297">如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。</span><span class="sxs-lookup"><span data-stu-id="4d240-297">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="4d240-298">如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。</span><span class="sxs-lookup"><span data-stu-id="4d240-298">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="4d240-299">您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d240-299">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="4d240-300">當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。</span><span class="sxs-lookup"><span data-stu-id="4d240-300">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="4d240-301">這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。</span><span class="sxs-lookup"><span data-stu-id="4d240-301">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-302">下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-302">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="4d240-303">此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-303">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="4d240-304">比較子的運作方式如下： 第一次，針對測試比較元`null`，和 null 的參考會被視為少於一個非 null。</span><span class="sxs-lookup"><span data-stu-id="4d240-304">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="4d240-305">第二，比較字串的長度，和較長的字串會被視為更高。</span><span class="sxs-lookup"><span data-stu-id="4d240-305">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="4d240-306">第三，如果長度相等，就會使用一般的字串比較。</span><span class="sxs-lookup"><span data-stu-id="4d240-306">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="4d240-307">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有五個 herbivorous 恐龍和三個肉食恐龍的名稱。</span><span class="sxs-lookup"><span data-stu-id="4d240-307">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="4d240-308">每兩個群組的名稱不是任何特定的排序順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-308">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="4d240-309">清單會顯示、 使用替代的比較子，來排序的草食範圍和清單會顯示一次。</span><span class="sxs-lookup"><span data-stu-id="4d240-309">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="4d240-310"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus 「 搜尋範圍是從草食然後使用方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-310">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="4d240-311">找不到字串，以及位元補數 (~ 運算子在 C# 和 Visual c + + 中，`Xor`在 Visual Basic 中的-1) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法做為索引插入新的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-311">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-312">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-312">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-313">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-313">-or-</span>
          </span>
          <span data-ttu-id="4d240-314">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-314">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-315">
            <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-315">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-316">
            <paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-316">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-317">在不需要調整大小之下，取得或設定內部資料結構可以保存的項目總數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-317">Gets or sets the total number of elements the internal data structure can hold without resizing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-318">需要調整大小之前，<see cref="T:System.Collections.Generic.List`1" /> 可包含的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-318">The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-319"><xref:System.Collections.Generic.List%601.Capacity%2A> 是的項目數，<xref:System.Collections.Generic.List%601>可以儲存，才能調整大小是必要的而<xref:System.Collections.Generic.List%601.Count%2A>是實際的項目數<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-319"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-320"><xref:System.Collections.Generic.List%601.Capacity%2A> 永遠是大於或等於<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-320"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="4d240-321">如果<xref:System.Collections.Generic.List%601.Count%2A>超過<xref:System.Collections.Generic.List%601.Capacity%2A>同時新增項目，將舊的項目複製並加入新項目之前，會自動重新配置內部陣列增加容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-321">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="4d240-322">如果容量遠比計數，而且您想要降低所使用的記憶體<xref:System.Collections.Generic.List%601>，您可以藉由呼叫來減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確設為較低的值。</span><span class="sxs-lookup"><span data-stu-id="4d240-322">If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value.</span></span> <span data-ttu-id="4d240-323">當值<xref:System.Collections.Generic.List%601.Capacity%2A>設定明確地內部陣列也已重新配置以符合指定的容量，並複製所有項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-323">When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</span></span>  
  
 <span data-ttu-id="4d240-324">擷取這個屬性的值是 o （1） 的作業;將屬性設定為 O (*n*) 運算，其中*n*是新的容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-324">Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-325">下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-325">The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-326">下列範例所示<xref:System.Collections.Generic.List%601.Capacity%2A>的數個點的清單中的生命週期的屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-326">The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list.</span></span> <span data-ttu-id="4d240-327">預設建構函式用來建立一份字串容量為 0，而<xref:System.Collections.Generic.List%601.Capacity%2A>顯示屬性，以示範這種情況。</span><span class="sxs-lookup"><span data-stu-id="4d240-327">The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this.</span></span> <span data-ttu-id="4d240-328">之後<xref:System.Collections.Generic.List%601.Add%2A>方法來新增數個項目，會列出項目，然後<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示一次，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。</span><span class="sxs-lookup"><span data-stu-id="4d240-328">After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="4d240-329"><xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示之後，再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數。</span><span class="sxs-lookup"><span data-stu-id="4d240-329">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count.</span></span> <span data-ttu-id="4d240-330">最後，<xref:System.Collections.Generic.List%601.Clear%2A>方法用來從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示一次。</span><span class="sxs-lookup"><span data-stu-id="4d240-330">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-331">
            <see cref="P:System.Collections.Generic.List`1.Capacity" /> 是設定為小於 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-331">
              <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="4d240-332">系統上沒有足夠的記憶體可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-332">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="list.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-333">移除 <see cref="T:System.Collections.Generic.List`1" /> 中的所有項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-333">Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-334"><xref:System.Collections.Generic.List%601.Count%2A> 設定為 0，並且從項目集合中的其他物件的參考也釋出。</span><span class="sxs-lookup"><span data-stu-id="4d240-334"><xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="4d240-335"><xref:System.Collections.Generic.List%601.Capacity%2A> 會維持不變。</span><span class="sxs-lookup"><span data-stu-id="4d240-335"><xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="4d240-336">若要重設的容量<xref:System.Collections.Generic.List%601>，呼叫<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或一組<xref:System.Collections.Generic.List%601.Capacity%2A>直接屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-336">To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly.</span></span> <span data-ttu-id="4d240-337">減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-337">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span> <span data-ttu-id="4d240-338">修剪空白<xref:System.Collections.Generic.List%601>設定的容量<xref:System.Collections.Generic.List%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-338">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="4d240-339">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-339">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-340">下列範例示範<xref:System.Collections.Generic.List%601.Clear%2A>方法和各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-340">The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="4d240-341"><xref:System.Collections.Generic.List%601.Clear%2A>結尾的程式，使用方法，是將它從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性隨即顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-341">The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="list.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-342">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-342">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-343">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-343">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-344">判斷某項目是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-344">Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-345">如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Generic.List`1" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-345">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-346">這個方法會判斷所使用的預設相等比較子，等號比較物件的實作所定義<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法`T`（清單中的值類型）。</span><span class="sxs-lookup"><span data-stu-id="4d240-346">This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method for `T` (the type of values in the list).</span></span>  
  
 <span data-ttu-id="4d240-347">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-347">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-348">下列範例示範<xref:System.Collections.Generic.List%601.Contains%2A>並<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含實作簡單商務物件<xref:System.IEquatable%601.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-348">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-349">下列範例包含複雜型別之物件的清單`Cube`。</span><span class="sxs-lookup"><span data-stu-id="4d240-349">The following example contains a list of complex objects of type `Cube`.</span></span> <span data-ttu-id="4d240-350">`Cube`類別會實作<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法使兩個 cube 都視為相等，如果是相同的維度。</span><span class="sxs-lookup"><span data-stu-id="4d240-350">The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method so that two cubes are considered equal if their dimensions are the same.</span></span> <span data-ttu-id="4d240-351">在此範例中，<xref:System.Collections.Generic.List%601.Contains%2A>方法會傳回`true`，因為已指定的維度的 cube 已在集合中。</span><span class="sxs-lookup"><span data-stu-id="4d240-351">In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Converter&lt;'T, 'Output&gt; -&gt; System.Collections.Generic.List&lt;'Output&gt;" Usage="list.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4d240-352">目標陣列項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-352">The type of the elements of the target array.</span>
          </span>
        </typeparam>
        <param name="converter">
          <span data-ttu-id="4d240-353">
            <see cref="T:System.Converter`2" /> 委派，可將某一個類型的每一個項目轉換成另一個類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-353">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-354">將目前 <see cref="T:System.Collections.Generic.List`1" /> 中的項目轉換成另一個類型，並傳回包含轉換過的項目清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-354">Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-355">目標類型的 <see cref="T:System.Collections.Generic.List`1" />，包含從目前 <see cref="T:System.Collections.Generic.List`1" /> 中轉換過的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-355">A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-356"><xref:System.Converter%602>是將物件轉換成目標型別方法的委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-356">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="4d240-357">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Converter%602>委派，以及已轉換的項目會儲存在新<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-357">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-358">目前<xref:System.Collections.Generic.List%601>會維持不變。</span><span class="sxs-lookup"><span data-stu-id="4d240-358">The current <xref:System.Collections.Generic.List%601> remains unchanged.</span></span>  
  
 <span data-ttu-id="4d240-359">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-359">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-360">下列範例會定義名為的方法`PointFToPoint`以將轉換成<xref:System.Drawing.PointF>結構<xref:System.Drawing.Point>結構。</span><span class="sxs-lookup"><span data-stu-id="4d240-360">The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="4d240-361">這個範例會建立<xref:System.Collections.Generic.List%601>的<xref:System.Drawing.PointF>結構，則會建立`Converter\<PointF, Point>`委派 (`Converter(Of PointF, Point)` Visual Basic 中) 來代表`PointFToPoint`方法，並傳遞至委派<xref:System.Collections.Generic.List%601.ConvertAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-361">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method.</span></span> <span data-ttu-id="4d240-362"><xref:System.Collections.Generic.List%601.ConvertAll%2A>方法會傳遞至輸入清單的每個項目`PointFToPoint`方法並將已轉換的項目放入新的清單<xref:System.Drawing.Point>結構。</span><span class="sxs-lookup"><span data-stu-id="4d240-362">The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="4d240-363">這兩份清單會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-363">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-364">
            <paramref name="converter" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-364">
              <paramref name="converter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-365">將 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分複製到陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-365">Copies the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it to an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="list.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="4d240-366">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-366">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-367">
            <see cref="T:System.Array" /> 必須有以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-367">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-368">從目標陣列的開頭開始，將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-368">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-369">這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-369">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="4d240-370">將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-370">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-371">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-371">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-372">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-372">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="4d240-373">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-373">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="4d240-374">建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-374">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="4d240-375"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-375">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="4d240-376">最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-376">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="4d240-377">陣列的內容隨即顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-377">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-378">
            <paramref name="array" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-378">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-379">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數大於目的 <paramref name="array" /> 可包含的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-379">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="list.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="4d240-380">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-380">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-381">
            <see cref="T:System.Array" /> 必須有以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-381">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="4d240-382">
            <c>array</c> 中以零起始的索引，複製作業從此處開始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-382">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-383">從目標陣列的指定索引處開始，將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-383">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-384">這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-384">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="4d240-385">將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-385">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-386">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-386">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-387">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-387">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="4d240-388">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-388">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="4d240-389">建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-389">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="4d240-390"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-390">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="4d240-391">最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-391">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="4d240-392">陣列的內容隨即顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-392">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-393">
            <paramref name="array" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-393">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-394">
            <paramref name="arrayIndex" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-394">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-395">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-395">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="list.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-396">來源 <see cref="T:System.Collections.Generic.List`1" /> 中以零為起始的索引，位於複製開始的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-396">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</span>
          </span>
        </param>
        <param name="array">
          <span data-ttu-id="4d240-397">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-397">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-398">
            <see cref="T:System.Array" /> 必須有以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-398">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="4d240-399">
            <c>array</c> 中以零起始的索引，複製作業從此處開始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-399">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-400">要複製的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-400">The number of elements to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-401">從目標陣列的指定索引處開始，將項目範圍從 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-401">Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-402">這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-402">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="4d240-403">將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-403">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-404">這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-404">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-405">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-405">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="4d240-406">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-406">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="4d240-407">建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-407">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="4d240-408"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-408">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="4d240-409">最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。</span><span class="sxs-lookup"><span data-stu-id="4d240-409">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="4d240-410">陣列的內容隨即顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-410">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-411">
            <paramref name="array" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-411">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-412">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-412">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-413">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-413">-or-</span>
          </span>
          <span data-ttu-id="4d240-414">
            <paramref name="arrayIndex" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-414">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-415">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-415">-or-</span>
          </span>
          <span data-ttu-id="4d240-416">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-416">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-417">
            <paramref name="index" /> 等於或大於來源 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-417">
              <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-418">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-418">-or-</span>
          </span>
          <span data-ttu-id="4d240-419">從 <paramref name="index" /> 到來源 <see cref="T:System.Collections.Generic.List`1" /> 結尾的項目數目，大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-419">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.List&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-420">取得 <see cref="T:System.Collections.Generic.List`1" /> 中所包含的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-420">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-421">
            <see cref="T:System.Collections.Generic.List`1" /> 中所包含的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-421">The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-422"><xref:System.Collections.Generic.List%601.Capacity%2A> 是的項目數，<xref:System.Collections.Generic.List%601>需要調整大小之前，可以儲存。</span><span class="sxs-lookup"><span data-stu-id="4d240-422"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required.</span></span> <span data-ttu-id="4d240-423"><xref:System.Collections.Generic.List%601.Count%2A> 是實際的項目數<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-423"><xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-424"><xref:System.Collections.Generic.List%601.Capacity%2A> 永遠是大於或等於<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-424"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="4d240-425">如果<xref:System.Collections.Generic.List%601.Count%2A>超過<xref:System.Collections.Generic.List%601.Capacity%2A>同時新增項目，將舊的項目複製並加入新項目之前，會自動重新配置內部陣列增加容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-425">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="4d240-426">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-426">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-427">下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-427">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-428">下列範例顯示的值<xref:System.Collections.Generic.List%601.Count%2A>在清單中的生命週期各個點上的屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-428">The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list.</span></span> <span data-ttu-id="4d240-429">已建立並填入清單並顯示其項目之後,<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-429">After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="4d240-430">這些屬性會顯示之後，再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法已被呼叫，並在清單的內容之後，再次會被清除。</span><span class="sxs-lookup"><span data-stu-id="4d240-430">These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="list.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-431">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-431">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-432">判斷 <see cref="T:System.Collections.Generic.List`1" /> 是否包含符合指定之述詞所定義之條件的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-432">Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-433">如果 <see cref="T:System.Collections.Generic.List`1" /> 包含的一或多個項目符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-433">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-434"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-434">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-435">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>的委派，以及處理已停止時找到相符項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-435">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="4d240-436">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-436">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-437">下列範例示範<xref:System.Collections.Generic.List%601.Contains%2A>並<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含實作簡單商務物件<xref:System.IEquatable%601.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-437">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-438">下列範例示範<xref:System.Collections.Generic.List%601.Exists%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-438">The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="4d240-439">A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。</span><span class="sxs-lookup"><span data-stu-id="4d240-439">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="4d240-440">此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。</span><span class="sxs-lookup"><span data-stu-id="4d240-440">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="4d240-441"><xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，並<xref:System.Collections.Generic.List%601.FindAll%2A>方法來搜尋述詞的方法中，搜尋清單，然後<xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用來移除結尾"saurus"的所有項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-441">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span>  
  
 <span data-ttu-id="4d240-442">最後，<xref:System.Collections.Generic.List%601.Exists%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-442">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called.</span></span> <span data-ttu-id="4d240-443">從一開始，再傳遞給每個項目周遊清單`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-443">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="4d240-444">搜尋會停止，且這個方法會傳回`true`如果`EndsWithSaurus`方法會傳回`true`的任何項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-444">The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element.</span></span> <span data-ttu-id="4d240-445"><xref:System.Collections.Generic.List%601.Exists%2A>方法會傳回`false`由於所有這類項目已經移除。</span><span class="sxs-lookup"><span data-stu-id="4d240-445">The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-446">在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。</span><span class="sxs-lookup"><span data-stu-id="4d240-446">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="4d240-447">這些語言推斷正確的委派，從內容，並自動建立。</span><span class="sxs-lookup"><span data-stu-id="4d240-447">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-448">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-448">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-449">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-449">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-450">搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一個相符的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-450">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-451">第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-451">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-452"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-452">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-453">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，在中向前移動<xref:System.Collections.Generic.List%601>、 第一個元素開始和結尾的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="4d240-453">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="4d240-454">找到相符項目時，會停止處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-454">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d240-455">搜尋時包含實值類型的清單，請確定類型的預設值不符合搜尋述詞。</span><span class="sxs-lookup"><span data-stu-id="4d240-455">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="4d240-456">否則，會沒有辦法分辨預設值，指出沒有相符項目找不到和剛好有類型的預設值的清單項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-456">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="4d240-457">預設值符合搜尋述詞，如果使用<xref:System.Collections.Generic.List%601.FindIndex%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="4d240-457">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="4d240-458">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-458">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-459">下列範例示範<xref:System.Collections.Generic.List%601.Find%2A>方法<xref:System.Collections.Generic.List%601>包含簡單的複雜物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-459">The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-460">下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-460">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="4d240-461">範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔： 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="4d240-461">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="4d240-462">`FillList`方法，在此範例會使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-462">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="4d240-463">下表說明提供給 find 方法範例。</span><span class="sxs-lookup"><span data-stu-id="4d240-463">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="4d240-464">方法</span><span class="sxs-lookup"><span data-stu-id="4d240-464">Method</span></span>|<span data-ttu-id="4d240-465">範例</span><span class="sxs-lookup"><span data-stu-id="4d240-465">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-466">找到識別碼使用的一本書`IDToFind`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-466">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-467">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-467">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-468">尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-468">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-469">在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-469">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-470">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-470">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-471">尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-471">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-472">尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-472">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-473">尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-473">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-474">尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-474">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-475">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-475">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-476">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-476">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-477">擷取符合指定之述詞所定義的條件之所有項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-477">Retrieves all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-478">
            <see cref="T:System.Collections.Generic.List`1" />，其中包含符合指定之述詞所定義的條件之所有項目 (如有找到)，否則為空的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-478">A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-479"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-479">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-480">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及符合條件的項目會儲存在傳回<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-480">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-481">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-481">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-482">下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-482">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="4d240-483">範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔： 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="4d240-483">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="4d240-484">`FillList`方法，在此範例會使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-484">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="4d240-485">下表說明提供給 find 方法範例。</span><span class="sxs-lookup"><span data-stu-id="4d240-485">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="4d240-486">方法</span><span class="sxs-lookup"><span data-stu-id="4d240-486">Method</span></span>|<span data-ttu-id="4d240-487">範例</span><span class="sxs-lookup"><span data-stu-id="4d240-487">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-488">找到識別碼使用的一本書`IDToFind`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-488">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-489">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-489">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-490">尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-490">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-491">在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-491">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-492">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-492">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-493">尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-493">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-494">尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-494">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-495">尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-495">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-496">尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-496">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-497">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-497">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-498">搜尋符合指定述詞所定義之條件的項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 內第一次出現或為其一部分之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-498">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
          <span data-ttu-id="4d240-499">如果找不到符合條件的項目，這個方法會傳回 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-499">This method returns -1 if an item that matches the conditions is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-500">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-500">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-501">搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一次出現之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-501">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-502">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-502">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-503"><xref:System.Collections.Generic.List%601>向前第一個項目開始和結束時間的最後一個項目搜尋。</span><span class="sxs-lookup"><span data-stu-id="4d240-503">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="4d240-504"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-504">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-505">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-505">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="4d240-506">委派的簽章：</span><span class="sxs-lookup"><span data-stu-id="4d240-506">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="4d240-507">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-507">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-508">下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="4d240-508">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="4d240-509">它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="4d240-509">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="4d240-510">請注意此方法的簽章</span><span class="sxs-lookup"><span data-stu-id="4d240-510">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="4d240-511">對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-511">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="4d240-512">此範例會具現化`List<Employee>`物件，加入一些`Employee`上限到它，然後再呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋整個集合，也就是第一個第一次`Employee`物件，其`Name`欄位開始"J"，與第二次的前`Employee`物件，其`Name`欄位開頭為"Ju"。</span><span class="sxs-lookup"><span data-stu-id="4d240-512">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with "J", and the second time for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-513">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-513">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="4d240-514">搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-514">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="4d240-515">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-515">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-516">搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 內 (從指定之索引延伸到最後一個項目)，於某項目範圍中第一次出現之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-516">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-517">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-517">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-518"><xref:System.Collections.Generic.List%601>往前開始搜尋`startIndex`並結束於最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-518">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="4d240-519"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-519">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-520">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-520">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="4d240-521">委派的簽章：</span><span class="sxs-lookup"><span data-stu-id="4d240-521">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="4d240-522">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*中的項目數目`startIndex`結尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-522">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-523">下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="4d240-523">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="4d240-524">它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="4d240-524">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="4d240-525">請注意此方法的簽章</span><span class="sxs-lookup"><span data-stu-id="4d240-525">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="4d240-526">對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-526">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="4d240-527">此範例會具現化`List<Employee>`物件，加入一些`Employee`上限，然後呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋開頭為其第五個成員 （也就是索引 4 成員） 的集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-527">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</span></span> <span data-ttu-id="4d240-528">第一次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"J"; 第二次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"Ju"。</span><span class="sxs-lookup"><span data-stu-id="4d240-528">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-529">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-529">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-530">
            <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-530">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="4d240-531">搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-531">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-532">區段中要搜尋的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-532">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="4d240-533">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-533">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-534">搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從指定之索引開始，且包含指定之項目數目的項目範圍內第一個符合項目之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-534">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-535">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-535">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-536"><xref:System.Collections.Generic.List%601>往前開始搜尋`startIndex`結尾`startIndex`加上`count`減 1，如果`count`大於 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-536">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="4d240-537"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-537">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-538">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-538">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="4d240-539">委派的簽章：</span><span class="sxs-lookup"><span data-stu-id="4d240-539">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="4d240-540">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-540">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-541">下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="4d240-541">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="4d240-542">它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="4d240-542">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="4d240-543">請注意此方法的簽章</span><span class="sxs-lookup"><span data-stu-id="4d240-543">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="4d240-544">對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-544">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="4d240-545">此範例會具現化`List<Employee>`物件，加入一些`Employee`上限到它，然後再呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋整個集合 (也就是成員從索引 0 到索引<xref:System.Collections.Generic.List%601.Count%2A>-1)。</span><span class="sxs-lookup"><span data-stu-id="4d240-545">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1).</span></span> <span data-ttu-id="4d240-546">第一次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"J"; 第二次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"Ju"。</span><span class="sxs-lookup"><span data-stu-id="4d240-546">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-547">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-547">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-548">
            <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-548">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-549">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-549">-or-</span>
          </span>
          <span data-ttu-id="4d240-550">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-550">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-551">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-551">-or-</span>
          </span>
          <span data-ttu-id="4d240-552">
            <paramref name="startIndex" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-552">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-553">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-553">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-554">搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一個相符的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-554">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-555">最後一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-555">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-556"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-556">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-557">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，在中向後移動<xref:System.Collections.Generic.List%601>、 的最後一個元素開始和結束的第一個元素。</span><span class="sxs-lookup"><span data-stu-id="4d240-557">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="4d240-558">找到相符項目時，會停止處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-558">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d240-559">搜尋時包含實值類型的清單，請確定類型的預設值不符合搜尋述詞。</span><span class="sxs-lookup"><span data-stu-id="4d240-559">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="4d240-560">否則，會沒有辦法分辨預設值，指出沒有相符項目找不到和剛好有類型的預設值的清單項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-560">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="4d240-561">預設值符合搜尋述詞，如果使用<xref:System.Collections.Generic.List%601.FindLastIndex%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="4d240-561">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="4d240-562">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-562">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-563">下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-563">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="4d240-564">範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔： 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="4d240-564">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="4d240-565">`FillList`方法，在此範例會使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-565">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="4d240-566">下表說明提供給 find 方法範例。</span><span class="sxs-lookup"><span data-stu-id="4d240-566">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="4d240-567">方法</span><span class="sxs-lookup"><span data-stu-id="4d240-567">Method</span></span>|<span data-ttu-id="4d240-568">範例</span><span class="sxs-lookup"><span data-stu-id="4d240-568">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-569">找到識別碼使用的一本書`IDToFind`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-569">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-570">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-570">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-571">尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-571">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-572">在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-572">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-573">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-573">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-574">尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-574">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-575">尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-575">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-576">尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-576">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-577">尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-577">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-578">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-578">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-579">搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中或其中一部分中最後一次出現之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-579">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-580">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-580">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-581">搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一次出現之以為零起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-581">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-582">符合 <paramref name="match" /> 所定義之條件且最後一次出現之項目的以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-582">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-583"><xref:System.Collections.Generic.List%601>向後最後一個項目開始和結束時間的第一個項目搜尋。</span><span class="sxs-lookup"><span data-stu-id="4d240-583">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="4d240-584"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-584">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-585">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-585">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="4d240-586">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-586">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-587">下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-587">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="4d240-588">範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔： 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="4d240-588">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="4d240-589">`FillList`方法，在此範例會使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-589">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="4d240-590">下表說明提供給 find 方法範例。</span><span class="sxs-lookup"><span data-stu-id="4d240-590">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="4d240-591">方法</span><span class="sxs-lookup"><span data-stu-id="4d240-591">Method</span></span>|<span data-ttu-id="4d240-592">範例</span><span class="sxs-lookup"><span data-stu-id="4d240-592">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-593">找到識別碼使用的一本書`IDToFind`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-593">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-594">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-594">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-595">尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-595">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-596">在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-596">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-597">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-597">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-598">尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-598">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-599">尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-599">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-600">尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-600">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-601">尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-601">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-602">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-602">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="4d240-603">向後搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-603">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="4d240-604">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-604">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-605">搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個項目延伸到指定之索引的項目範圍內，最後一個符合項目之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-605">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-606">符合 <paramref name="match" /> 所定義之條件且最後一次出現之項目的以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-606">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-607"><xref:System.Collections.Generic.List%601>會搜尋回溯開始`startIndex`和結束時間的第一個元素。</span><span class="sxs-lookup"><span data-stu-id="4d240-607">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="4d240-608"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-608">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-609">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-609">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="4d240-610">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是從開頭的項目數<xref:System.Collections.Generic.List%601>至`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="4d240-610">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-611">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-611">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-612">
            <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-612">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="4d240-613">向後搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-613">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-614">區段中要搜尋的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-614">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="4d240-615">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-615">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-616">搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定之項目數目，且結束於指定之索引的項目範圍內最後一個符合項目之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-616">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-617">符合 <paramref name="match" /> 所定義之條件且最後一次出現之項目的以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-617">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-618"><xref:System.Collections.Generic.List%601>會搜尋回溯開始`startIndex`結尾`startIndex`減去`count`再加上 1，如果`count`大於 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-618">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="4d240-619"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-619">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-620">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-620">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="4d240-621">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-621">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-622">下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-622">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="4d240-623">範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔： 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="4d240-623">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="4d240-624">`FillList`方法，在此範例會使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-624">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="4d240-625">下表說明提供給 find 方法範例。</span><span class="sxs-lookup"><span data-stu-id="4d240-625">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="4d240-626">方法</span><span class="sxs-lookup"><span data-stu-id="4d240-626">Method</span></span>|<span data-ttu-id="4d240-627">範例</span><span class="sxs-lookup"><span data-stu-id="4d240-627">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-628">找到識別碼使用的一本書`IDToFind`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-628">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-629">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-629">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-630">尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-630">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-631">在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-631">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="4d240-632">C# 範例會使用匿名委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-632">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-633">尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-633">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-634">尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-634">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-635">尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-635">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="4d240-636">尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-636">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-637">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-637">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-638">
            <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-638">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-639">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-639">-or-</span>
          </span>
          <span data-ttu-id="4d240-640">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-640">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-641">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-641">-or-</span>
          </span>
          <span data-ttu-id="4d240-642">
            <paramref name="startIndex" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-642">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="list.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="4d240-643">要在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個項目上執行的 <see cref="T:System.Action`1" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-643">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-644">在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個項目上執行指定之動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-644">Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-645"><xref:System.Action%601>物件執行的動作方法的委派傳遞給它。</span><span class="sxs-lookup"><span data-stu-id="4d240-645">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="4d240-646">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Action%601>委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-646">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.</span></span>  
  
 <span data-ttu-id="4d240-647">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-647">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="4d240-648">修改基礎集合中的主體<xref:System.Action%601>委派不支援，而且會導致未定義的行為。</span><span class="sxs-lookup"><span data-stu-id="4d240-648">Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-649">下列範例示範如何使用<xref:System.Action%601>要列印的內容委派<xref:System.Collections.Generic.List%601>物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-649">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="4d240-650">在此範例中`Print`方法用來對主控台顯示清單的內容。</span><span class="sxs-lookup"><span data-stu-id="4d240-650">In this example the `Print` method is used to display the contents of the list to the console.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-651">除了顯示使用內容`Print`方法中，C# 範例示範如何使用主控台顯示結果。</span><span class="sxs-lookup"><span data-stu-id="4d240-651">In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-652">
            <paramref name="action" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-652">
              <paramref name="action" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-653">集合中的項目已經過修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-653">An element in the collection has been modified.</span>
          </span>
        </exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.List&lt;'T&gt;.Enumerator" Usage="list.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-654">傳回在 <see cref="T:System.Collections.Generic.List`1" /> 中逐一查看的列舉值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-654">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-655">
            <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-655">A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-656">`foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="4d240-656">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="4d240-657">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="4d240-657">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4d240-658">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-658">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4d240-659">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="4d240-659">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4d240-660">在這個位置，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>未定義屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-660">At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="4d240-661">因此，您必須呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-661">Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4d240-662"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="4d240-662">The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="4d240-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4d240-664">如果<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-664">If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4d240-665">列舉值位於此位置，後續呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-665">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4d240-666">如果上次呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="4d240-666">If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4d240-667">您不能再次將 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-667">You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="4d240-668">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="4d240-668">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4d240-669">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>或是<xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-669">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-670">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="4d240-670">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4d240-671">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-671">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4d240-672">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-672">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4d240-673"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-673">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="4d240-674">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-674">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-675">範圍起始處之以零為起始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-675">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-676">範圍中的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-676">The number of elements in the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-677">為來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目範圍建立淺層複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-677">Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-678">來源 <see cref="T:System.Collections.Generic.List`1" /> 中項目範圍的淺層複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-678">A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-679">淺層複本的參考類型的集合或子集該集合中，只包含參考至集合的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-679">A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</span></span> <span data-ttu-id="4d240-680">不會複製物件本身。</span><span class="sxs-lookup"><span data-stu-id="4d240-680">The objects themselves are not copied.</span></span> <span data-ttu-id="4d240-681">新的清單中的參考會指向原始的清單中的參考相同的物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-681">The references in the new list point to the same objects as the references in the original list.</span></span>  
  
 <span data-ttu-id="4d240-682">淺層複本的實值型別的集合或子集該集合，包含集合的元素。</span><span class="sxs-lookup"><span data-stu-id="4d240-682">A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</span></span> <span data-ttu-id="4d240-683">不過，如果集合中的項目包含其他物件的參考，不會複製這些物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-683">However, if the elements of the collection contain references to other objects, those objects are not copied.</span></span> <span data-ttu-id="4d240-684">新集合的項目中的參考會指向原始集合的項目中參考相同的物件。</span><span class="sxs-lookup"><span data-stu-id="4d240-684">The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</span></span>  
  
 <span data-ttu-id="4d240-685">相反地，項目複製集合的深層複本，並直接或間接參考的元素，所有項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-685">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="4d240-686">這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-686">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-687">下列範例示範<xref:System.Collections.Generic.List%601.GetRange%2A>以及的其他方法<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-687">The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-688">在此範例中，結尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用來從清單中，開頭的索引位置 2 取得三個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-688">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="4d240-689"><xref:System.Collections.Generic.List%601.ToArray%2A>方法呼叫所產生的<xref:System.Collections.Generic.List%601>，建立三個元素的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-689">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="4d240-690">陣列的元素會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-690">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-691">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-691">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-692">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-692">-or-</span>
          </span>
          <span data-ttu-id="4d240-693">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-693">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-694">
            <paramref name="index" /> 和 <paramref name="count" /> 並不代表 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-694">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-695">傳回 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中，第一次出現某值之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-695">Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="list.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-696">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-696">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-697">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-697">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-698">搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中第一個出現之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-698">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-699">如果有找到，則是在整個 <paramref name="item" /> 內，<see cref="T:System.Collections.Generic.List`1" /> 之第一次出現的以零起始的索引，否則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-699">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-700"><xref:System.Collections.Generic.List%601>向前第一個項目開始和結束時間的最後一個項目搜尋。</span><span class="sxs-lookup"><span data-stu-id="4d240-700">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="4d240-701">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-701">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-702">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-702">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-703">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-703">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="4d240-704">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-704">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-705"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-705">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="4d240-706"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-706">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-707">最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，它會傳回 – 1，因為沒有在該範圍內搜尋字串的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-707">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="list.IndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-708">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-708">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-709">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-709">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="4d240-710">搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-710">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="4d240-711">0 (零) 在空白清單中有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-711">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-712">在 <see cref="T:System.Collections.Generic.List`1" /> 中從指定的索引開始到最後一個項目這段範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-712">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-713">在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始到最後一個項目的範圍內，第一次出現 <paramref name="item" /> 的位置之以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-713">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-714"><xref:System.Collections.Generic.List%601>往前開始搜尋`index`並結束於最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-714">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.</span></span>  
  
 <span data-ttu-id="4d240-715">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-715">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-716">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*中的項目數目`index`結尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-716">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-717">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-717">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="4d240-718">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-718">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-719"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-719">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="4d240-720"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-720">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-721">最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，它會傳回 – 1，因為沒有在該範圍內搜尋字串的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-721">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-722">
            <paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-722">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="list.IndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-723">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-723">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-724">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-724">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="4d240-725">搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-725">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="4d240-726">0 (零) 在空白清單中有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-726">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-727">區段中要搜尋的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-727">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-728">在 <see cref="T:System.Collections.Generic.List`1" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-728">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-729">在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始且包含 <paramref name="count" /> 個項目的範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-729">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-730"><xref:System.Collections.Generic.List%601>往前開始搜尋`index`結尾`index`加上`count`減 1，如果`count`大於 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-730">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="4d240-731">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-731">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-732">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-732">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-733">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-733">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="4d240-734">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-734">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-735"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-735">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="4d240-736"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-736">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-737">最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，它會傳回 – 1，因為沒有在該範圍內搜尋字串的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-737">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-738">
            <paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-738">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-739">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-739">-or-</span>
          </span>
          <span data-ttu-id="4d240-740">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-740">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-741">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-741">-or-</span>
          </span>
          <span data-ttu-id="4d240-742">
            <paramref name="index" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-742">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="list.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-743">應該插入 <c>item</c> 之以零起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-743">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4d240-744">要插入的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-744">The object to insert.</span>
          </span>
          <span data-ttu-id="4d240-745">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-745">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-746">將項目插入至 <see cref="T:System.Collections.Generic.List`1" /> 中指定的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-746">Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-747"><xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-747"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="4d240-748">如果<xref:System.Collections.Generic.List%601.Count%2A>已等於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-748">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="4d240-749">如果`index`等於<xref:System.Collections.Generic.List%601.Count%2A>，`item`新增至結尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-749">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-750">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-750">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-751">下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-751">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="4d240-752">下列範例示範<xref:System.Collections.Generic.List%601.Insert%2A>方法，以及各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-752">The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="4d240-753">建立清單之後，就會加入項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-753">After the list is created, elements are added.</span></span> <span data-ttu-id="4d240-754"><xref:System.Collections.Generic.List%601.Insert%2A>方法用來將項目插入清單的中間。</span><span class="sxs-lookup"><span data-stu-id="4d240-754">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list.</span></span> <span data-ttu-id="4d240-755">項目插入已重複，更新版本中移除使用<xref:System.Collections.Generic.List%601.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-755">The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-756">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-756">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-757">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-757">-or-</span>
          </span>
          <span data-ttu-id="4d240-758">
            <paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-758">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; unit" Usage="list.InsertRange (index, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-759">應插入新項目處的以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-759">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="collection">
          <span data-ttu-id="4d240-760">集合，其項目應插入至 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-760">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-761">集合本身不可為 <see langword="null" />，但如果類型 <c>T</c> 是參考型別，則其可以包含為 <see langword="null" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-761">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-762">將集合的項目插入位於指定索引的 <see cref="T:System.Collections.Generic.List`1" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-762">Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-763"><xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-763"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="4d240-764">如果新<xref:System.Collections.Generic.List%601.Count%2A>(目前<xref:System.Collections.Generic.List%601.Count%2A>再加上集合的大小) 將會大於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>自動重新配置內部的陣列，以容納新的項目，會增加，加入新項目之前，現有的項目會複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-764">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="4d240-765">如果`index`等於<xref:System.Collections.Generic.List%601.Count%2A>，項目結尾加入<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-765">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-766">集合中項目的順序會保留在<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-766">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-767">這個方法是 O (*n* \* *m*) 作業，其中*n*是要加入的項目數和*m*是<xref:System.Collections.Generic.List%601.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d240-767">This method is an O(*n* \* *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-768">下列範例示範<xref:System.Collections.Generic.List%601.InsertRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-768">The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-769">已建立的清單，並填入的數個祥和，脫離不工廠吃恐龍名稱之後<xref:System.Collections.Generic.List%601.InsertRange%2A>方法用來插入清單中，索引位置 3 開始的三個兇猛肉吃恐龍的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-769">After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-770">
            <paramref name="collection" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-770">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-771">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-771">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-772">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-772">-or-</span>
          </span>
          <span data-ttu-id="4d240-773">
            <paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-773">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-774">要取得或設定之以零為起始的項目索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-774">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-775">在指定的索引位置上取得或設定項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-775">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-776">在指定索引上的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-776">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-777"><xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-777"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="4d240-778">這個屬性可以使用下列語法提供存取集合中特定元素的能力：`myCollection[index]`。</span><span class="sxs-lookup"><span data-stu-id="4d240-778">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="4d240-779">擷取這個屬性的值是 o （1） 的作業;設定屬性，也是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-779">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-780">在本節中的範例會示範<xref:System.Collections.Generic.List%601.Item%2A>屬性 （C# 中為索引子） 和各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-780">The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="4d240-781">清單已建立並填入使用<xref:System.Collections.Generic.List%601.Add%2A>方法中，項目會擷取並顯示使用<xref:System.Collections.Generic.List%601.Item%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-781">After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="4d240-782">(如需使用的範例<xref:System.Collections.Generic.List%601.Item%2A>屬性來設定元素的值清單，請參閱<xref:System.Collections.Generic.List%601.AsReadOnly%2A>。)</span><span class="sxs-lookup"><span data-stu-id="4d240-782">(For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-783">Visual Basic、 C# 和 c + + 所有具有存取語法<xref:System.Collections.Generic.List%601.Item%2A>屬性，且不使用它的名稱。</span><span class="sxs-lookup"><span data-stu-id="4d240-783">Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name.</span></span> <span data-ttu-id="4d240-784">相反地，變數包含<xref:System.Collections.Generic.List%601>用於陣列一樣。</span><span class="sxs-lookup"><span data-stu-id="4d240-784">Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.</span></span>  
  
 <span data-ttu-id="4d240-785">C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.Generic.List%601.Item%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-785">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="4d240-786">Visual Basic 會將 <xref:System.Collections.Generic.List%601.Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="4d240-786">Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-787">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-787">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-788">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-788">-or-</span>
          </span>
          <span data-ttu-id="4d240-789">
            <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-789">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-790">傳回 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中最後一次出現某值之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-790">Returns the zero-based index of the last occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="list.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-791">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-791">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-792">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-792">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-793">搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中最後一個相符項目之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-793">Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-794">如果找到的話，則為整個 <see cref="T:System.Collections.Generic.List`1" /> 中最後一次出現 <paramref name="item" /> 之以零為起始的索引 (如有找到)，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-794">The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-795"><xref:System.Collections.Generic.List%601>向後最後一個項目開始和結束時間的第一個項目搜尋。</span><span class="sxs-lookup"><span data-stu-id="4d240-795">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="4d240-796">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-796">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-797">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-797">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-798">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-798">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="4d240-799">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-799">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-800"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-800">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-801"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-801">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="4d240-802">最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋四個項目，索引位置 4 開始，並向後擴充的範圍 （也就是說，它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回 – 1，因為沒有搜尋的執行個體在該範圍內的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-802">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="list.LastIndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-803">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-803">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-804">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-804">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="4d240-805">向後搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-805">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-806">在 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個項目開始到指定的索引這段範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-806">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-807">在 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個項目開始到 <paramref name="index" /> 這段範圍內，如果有找到指定的 <paramref name="item" /> 最後一次出現的位置，則為該位置以零為起始的索引，如未找到則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-807">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-808"><xref:System.Collections.Generic.List%601>會搜尋回溯開始`index`和結束時間的第一個元素。</span><span class="sxs-lookup"><span data-stu-id="4d240-808">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.</span></span>  
  
 <span data-ttu-id="4d240-809">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-809">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-810">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是從開頭的項目數<xref:System.Collections.Generic.List%601>至`index`。</span><span class="sxs-lookup"><span data-stu-id="4d240-810">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-811">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-811">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="4d240-812">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-812">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-813"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-813">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-814"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-814">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="4d240-815">最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋四個項目，索引位置 4 開始，並向後擴充的範圍 （也就是說，它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回 – 1，因為沒有搜尋的執行個體在該範圍內的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-815">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-816">
            <paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-816">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="list.LastIndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-817">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-817">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-818">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-818">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="4d240-819">向後搜尋之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-819">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-820">區段中要搜尋的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-820">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-821">在 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定個數項目且結尾位於指定索引的範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-821">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-822">在 <see cref="T:System.Collections.Generic.List`1" /> 中含有 <paramref name="count" /> 個項目且結尾位置為 <paramref name="index" /> 的範圍內，如果有找到指定的 <paramref name="item" /> 最後一次出現的位置，則為該位置的索引 (從零開始起算)，否則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-822">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-823"><xref:System.Collections.Generic.List%601>會搜尋回溯開始`index`結尾`index`減去`count`再加上 1，如果`count`大於 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-823">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="4d240-824">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-824">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-825">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-825">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-826">下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-826">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="4d240-827">A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-827">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="4d240-828"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-828">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="4d240-829"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-829">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="4d240-830">最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋一組 4 個項目，索引位置 4 開始，並向後擴充 （也就是它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回 – 1，因為沒有搜尋的執行個體在該範圍內的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-830">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-831">
            <paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-831">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-832">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-832">-or-</span>
          </span>
          <span data-ttu-id="4d240-833">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-833">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-834">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-834">-or-</span>
          </span>
          <span data-ttu-id="4d240-835">
            <paramref name="index" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-835">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="list.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-836">要從 <see cref="T:System.Collections.Generic.List`1" /> 移除的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-836">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-837">參考類型的值可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-837">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-838">從 <see cref="T:System.Collections.Generic.List`1" /> 移除特定物件之第一個符合的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-838">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-839">如果成功移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-839">
              <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-840">如果在 <see langword="false" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-840">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-841">如果型別`T`會實作<xref:System.IEquatable%601>泛型介面，等號比較子會是<xref:System.IEquatable%601.Equals%2A>方法，該介面; 的預設相等比較子是的否則為<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4d240-841">If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4d240-842">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-842">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-843">下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-843">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="4d240-844">下列範例示範<xref:System.Collections.Generic.List%601.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-844">The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span> <span data-ttu-id="4d240-845">數個屬性和方法<xref:System.Collections.Generic.List%601>泛型類別用來新增、 插入及搜尋清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-845">Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list.</span></span> <span data-ttu-id="4d240-846">這些作業之後，此清單包含重複。</span><span class="sxs-lookup"><span data-stu-id="4d240-846">After these operations, the list contains a duplicate.</span></span> <span data-ttu-id="4d240-847"><xref:System.Collections.Generic.List%601.Remove%2A>方法用來移除重複的項目，第一個執行個體，並顯示內容。</span><span class="sxs-lookup"><span data-stu-id="4d240-847">The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed.</span></span> <span data-ttu-id="4d240-848"><xref:System.Collections.Generic.List%601.Remove%2A>方法一律會移除第一個遇到的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-848">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; int" Usage="list.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-849">
            <see cref="T:System.Predicate`1" /> 委派，定義要移除項目的條件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-849">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-850">移除符合指定的述詞所定義之條件的所有項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-850">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-851">
            <see cref="T:System.Collections.Generic.List`1" /> 中已移除的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-851">The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-852"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-852">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-853">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及符合條件的項目會自<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-853">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="4d240-854">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-854">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-855">下列範例示範<xref:System.Collections.Generic.List%601.RemoveAll%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-855">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="4d240-856">A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。</span><span class="sxs-lookup"><span data-stu-id="4d240-856">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="4d240-857">此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。</span><span class="sxs-lookup"><span data-stu-id="4d240-857">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="4d240-858"><xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，和<xref:System.Collections.Generic.List%601.FindAll%2A>方法用來在清單中搜尋的搜尋述詞的方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-858">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.</span></span>  
  
 <span data-ttu-id="4d240-859"><xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用來移除結尾"saurus"的所有項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-859">The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span> <span data-ttu-id="4d240-860">從一開始，再傳遞給每個項目周遊清單`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-860">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="4d240-861">如果已移除的項目`EndsWithSaurus`方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="4d240-861">The element is removed if the `EndsWithSaurus` method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-862">在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。</span><span class="sxs-lookup"><span data-stu-id="4d240-862">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="4d240-863">這些語言推斷正確的委派，從內容，並自動建立。</span><span class="sxs-lookup"><span data-stu-id="4d240-863">These languages infer the correct delegate from context, and create it automatically.</span></span>  
  
 <span data-ttu-id="4d240-864">最後，<xref:System.Collections.Generic.List%601.Exists%2A>方法會驗證是否在清單中的沒有任何結尾為"saurus 」。</span><span class="sxs-lookup"><span data-stu-id="4d240-864">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with "saurus".</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-865">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-865">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="list.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-866">移除項目之以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-866">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-867">移除 <see cref="T:System.Collections.Generic.List`1" /> 中指定之索引處的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-867">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-868">當您呼叫<xref:System.Collections.Generic.List%601.RemoveAt%2A>移除項目，在清單中其餘的項目會重新編號來取代移除的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-868">When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item.</span></span> <span data-ttu-id="4d240-869">比方說，如果您移除位於索引 3 的項目時，索引 4 的項目移至 3 個位置。</span><span class="sxs-lookup"><span data-stu-id="4d240-869">For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</span></span> <span data-ttu-id="4d240-870">此外，在清單中的項目數 (表示的<xref:System.Collections.Generic.List%601.Count%2A>屬性) 會減 1。</span><span class="sxs-lookup"><span data-stu-id="4d240-870">In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.</span></span>  
  
 <span data-ttu-id="4d240-871">這個方法是 O (*n*) 運算，其中*n*是 (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)。</span><span class="sxs-lookup"><span data-stu-id="4d240-871">This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-872">下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="4d240-872">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-873">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-873">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-874">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-874">-or-</span>
          </span>
          <span data-ttu-id="4d240-875">
            <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-875">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="list.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-876">要移除之項目範圍內之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-876">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-877">要移除的項目數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-877">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-878">從 <see cref="T:System.Collections.Generic.List`1" /> 移除的項目範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-878">Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-879">移除項目，而且遵守這些建議中的所有元素<xref:System.Collections.Generic.List%601>有降低其索引`count`。</span><span class="sxs-lookup"><span data-stu-id="4d240-879">The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.</span></span>  
  
 <span data-ttu-id="4d240-880">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-880">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-881">下列範例示範<xref:System.Collections.Generic.List%601.RemoveRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-881">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-882">已建立的清單，並修改之後<xref:System.Collections.Generic.List%601.RemoveRange%2A>方法用來從清單中，索引位置 2 開始移除兩個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-882">After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-883">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-883">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-884">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-884">-or-</span>
          </span>
          <span data-ttu-id="4d240-885">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-885">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-886">
            <paramref name="index" /> 和 <paramref name="count" /> 並不代表 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-886">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-887">反轉 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中項目的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-887">Reverses the order of the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="list.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-888">反轉整個 <see cref="T:System.Collections.Generic.List`1" /> 中項目的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-888">Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-889">這個方法會使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>元素的順序相反。</span><span class="sxs-lookup"><span data-stu-id="4d240-889">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="4d240-890">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-890">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-891">下列範例將示範這兩個多載<xref:System.Collections.Generic.List%601.Reverse%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-891">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="4d240-892">此範例會建立<xref:System.Collections.Generic.List%601>的字串，並將六個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-892">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="4d240-893"><xref:System.Collections.Generic.List%601.Reverse>方法多載來反轉清單中，然後<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法多載來反轉清單中，開頭為 1 的項目，包含四個元素的中間。</span><span class="sxs-lookup"><span data-stu-id="4d240-893">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; unit" Usage="list.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-894">要反向範圍內之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-894">The zero-based starting index of the range to reverse.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-895">要反向範圍中的項目數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-895">The number of elements in the range to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-896">反向指定範圍中項目的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-896">Reverses the order of the elements in the specified range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-897">這個方法會使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>元素的順序相反。</span><span class="sxs-lookup"><span data-stu-id="4d240-897">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="4d240-898">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-898">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-899">下列範例將示範這兩個多載<xref:System.Collections.Generic.List%601.Reverse%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-899">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="4d240-900">此範例會建立<xref:System.Collections.Generic.List%601>的字串，並將六個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-900">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="4d240-901"><xref:System.Collections.Generic.List%601.Reverse>方法多載來反轉清單中，然後<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法多載來反轉清單中，開頭為 1 的項目，包含四個元素的中間。</span><span class="sxs-lookup"><span data-stu-id="4d240-901">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-902">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-902">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-903">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-903">-or-</span>
          </span>
          <span data-ttu-id="4d240-904">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-904">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-905">
            <paramref name="index" /> 和 <paramref name="count" /> 並不代表 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-905">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-906">排序 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-906">Sorts the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overloaded-method-syntax"></a><span data-ttu-id="4d240-907">多載的方法語法</span><span class="sxs-lookup"><span data-stu-id="4d240-907">Overloaded method syntax</span></span>  
 <span data-ttu-id="4d240-908"><xref:System.Collections.Generic.List%601.Sort%2A>方法可讓您在清單中，物件類型的預設比較子排序，或指定客戶排序方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-908">The  <xref:System.Collections.Generic.List%601.Sort%2A> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</span></span>  
  
 <span data-ttu-id="4d240-909">[清單\<T >。Sort （)](xref:System.Collections.Generic.List`1.Sort*)排序整個清單使用預設比較子物件型別中的項目保留在清單中。</span><span class="sxs-lookup"><span data-stu-id="4d240-909">[List\<T>.Sort()](xref:System.Collections.Generic.List`1.Sort*) Sorts the elements in the entire list using the default comparer of the object type held in the list.</span></span>  
  
 <span data-ttu-id="4d240-910">[清單\<T >。排序 M (比較\<T > 比較)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)排序整個清單使用指定的比較子中的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-910">[List\<T>.Sort M(Comparison\<T> comparison)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29) Sorts the elements in the entire list using the specified comparer.</span></span>  
  
 <span data-ttu-id="4d240-911">[清單\<T >。排序 (IComparer\<T > 比較子)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)排序整個使用指定的清單中的項目<xref:System.Comparison%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4d240-911">[List\<T>.Sort(IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in the entire list using the specified <xref:System.Comparison%601?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4d240-912">[清單\<T >。排序 (Int32 索引，Int32 計數 IComparer\<T > 比較子)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)排序範圍，以使用指定的比較子清單中的項目中的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-912">[List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.</span></span>  
  
## <a name="parameters"></a><span data-ttu-id="4d240-913">參數</span><span class="sxs-lookup"><span data-stu-id="4d240-913">Parameters</span></span>  
  
|<span data-ttu-id="4d240-914">參數</span><span class="sxs-lookup"><span data-stu-id="4d240-914">Parameter</span></span>|<span data-ttu-id="4d240-915">類型</span><span class="sxs-lookup"><span data-stu-id="4d240-915">Type</span></span>|<span data-ttu-id="4d240-916">描述</span><span class="sxs-lookup"><span data-stu-id="4d240-916">Description</span></span>|  
|---------------|----------|-----------------|  
|`comparison`|<xref:System.Comparison%601>|<span data-ttu-id="4d240-917">比較項目時要使用的委派方法</span><span class="sxs-lookup"><span data-stu-id="4d240-917">The delegate method to use when comparing elements</span></span>|  
|<span data-ttu-id="4d240-918">比較子</span><span class="sxs-lookup"><span data-stu-id="4d240-918">comparer</span></span>|<xref:System.Collections.Generic.IComparer%601>|<span data-ttu-id="4d240-919"><xref:System.Collections.Generic.IComparer%601>實作來比較項目時所使用，或 null 表示使用預設比較子<xref:System.Collections.Generic.Comparer%601.Default>。</span><span class="sxs-lookup"><span data-stu-id="4d240-919">The <xref:System.Collections.Generic.IComparer%601> implementation to use when comparing elements, or null to use the default comparer <xref:System.Collections.Generic.Comparer%601.Default>.</span></span>|  
|`index`|<xref:System.Int32>|<span data-ttu-id="4d240-920">要排序範圍內之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="4d240-920">The zero-based starting index of the range to sort.</span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="4d240-921">要排序的範圍長度。</span><span class="sxs-lookup"><span data-stu-id="4d240-921">The length of the range to sort.</span></span>|  
  
## <a name="exceptions"></a><span data-ttu-id="4d240-922">例外狀況</span><span class="sxs-lookup"><span data-stu-id="4d240-922">Exceptions</span></span>  
  
|<span data-ttu-id="4d240-923">例外</span><span class="sxs-lookup"><span data-stu-id="4d240-923">Exception</span></span>|<span data-ttu-id="4d240-924">條件</span><span class="sxs-lookup"><span data-stu-id="4d240-924">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="4d240-925">`comparer` 未指定或`null`，而且預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>找不到實作<xref:System.IComparable%601?displayProperty=nameWithType>泛型介面或<xref:System.IComparable?displayProperty=nameWithType>介面型別 t。</span><span class="sxs-lookup"><span data-stu-id="4d240-925">`comparer` is not specified or `null`, and the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> cannot find implementation of the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface or the <xref:System.IComparable?displayProperty=nameWithType> interface for type T.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="4d240-926">`comparison` 為 `null`。</span><span class="sxs-lookup"><span data-stu-id="4d240-926">`comparison` is `null`.</span></span>|  
|<xref:System.ArgumentException>|<span data-ttu-id="4d240-927">實作`comparison`或`comparer`在排序期間造成錯誤。</span><span class="sxs-lookup"><span data-stu-id="4d240-927">The implementation of `comparison` or `comparer` caused an error during the sort.</span></span> <span data-ttu-id="4d240-928">例如，在將項目與其本身比較時，`comparison` 可能不會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-928">For example, `comparison` might not return 0 when comparing an item with itself.</span></span><br /><br /> <span data-ttu-id="4d240-929">-或-</span><span class="sxs-lookup"><span data-stu-id="4d240-929">-or-</span></span><br /><br /> <span data-ttu-id="4d240-930">`index` 和 `count` 未指定 <xref:System.Collections.Generic.List%601> 中的有效範圍。</span><span class="sxs-lookup"><span data-stu-id="4d240-930">`index` and `count` do not specify a valid range in the <xref:System.Collections.Generic.List%601>.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="4d240-931">`index` 小於 0 或`count`小於 0。</span><span class="sxs-lookup"><span data-stu-id="4d240-931">`index` is less than 0 or `count` is less than 0.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="list.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-932">使用預設的比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-932">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-933">這個方法會使用預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型別的`T`來決定清單項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-933">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="4d240-934"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>屬性檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-934">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-935">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-935">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-936">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-936">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-937">這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，適用於內省式排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="4d240-937">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="4d240-938">如果分割區大小是 16 個項目，它會使用插入排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-938">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-939">如果資料分割數目超過 2 個記錄檔*n*，其中*n*是範圍的輸入陣列中，它會使用 Heapsort 演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-939">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-940">否則，它會使用快速排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-940">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="4d240-941">此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-941">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="4d240-942">相反地，穩定的排序會保留相等項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-942">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="4d240-943">平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-943">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-944">下列範例將某些名稱加入`List<String>`物件，會顯示未排序的順序，清單便會呼叫<xref:System.Collections.Generic.List%601.Sort%2A>方法，然後顯示已排序的清單。</span><span class="sxs-lookup"><span data-stu-id="4d240-944">The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 <span data-ttu-id="4d240-945">下列程式碼示範<xref:System.Collections.Generic.List%601.Sort>和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>簡單商務物件上的方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-945">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object.</span></span> <span data-ttu-id="4d240-946">呼叫<xref:System.Collections.Generic.List%601.Sort>方法會產生做為部分類型，使用預設比較子和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>方法藉由使用匿名方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-946">Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-947">下列範例示範<xref:System.Collections.Generic.List%601.Sort>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-947">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="4d240-948">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-948">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="4d240-949">清單是顯示、 排序，並且再次顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-949">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="4d240-950"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載則用來搜尋不在清單中，兩個字串和<xref:System.Collections.Generic.List%601.Insert%2A>方法用來將其插入。</span><span class="sxs-lookup"><span data-stu-id="4d240-950">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="4d240-951">傳回值<xref:System.Collections.Generic.List%601.BinarySearch%2A>方法是在每個案例中，負數的因為字串不在清單中。</span><span class="sxs-lookup"><span data-stu-id="4d240-951">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="4d240-952">採取的位元補數 (~ 運算子在 C# 和 Visual c + +， `Xor` Visual Basic 中的-1) 的這個負數的數字會產生此位置是大於搜尋字串，並插入清單中的第一個元素的索引會保留排序順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-952">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="4d240-953">第二個搜尋字串大於任何項目在清單中，所以位於清單結尾的插入位置。</span><span class="sxs-lookup"><span data-stu-id="4d240-953">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-954">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或型別 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-954">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="4d240-955">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-955">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-956">使用指定的比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-956">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-957">如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>實作。</span><span class="sxs-lookup"><span data-stu-id="4d240-957">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="4d240-958">如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-958">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-959">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-959">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-960">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-960">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-961">這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，適用於內省式排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="4d240-961">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="4d240-962">如果分割區大小是 16 個項目，它會使用插入排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-962">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-963">如果資料分割數目超過 2 個記錄檔*n*，其中*n*是範圍的輸入陣列中，它會使用 Heapsort 演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-963">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-964">否則，它會使用快速排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-964">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="4d240-965">此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-965">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="4d240-966">相反地，穩定的排序會保留相等項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-966">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="4d240-967">平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-967">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-968">下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-968">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="4d240-969">此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-969">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="4d240-970">比較子的運作方式如下： 第一次，針對測試比較元`null`，和 null 的參考會被視為少於一個非 null。</span><span class="sxs-lookup"><span data-stu-id="4d240-970">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="4d240-971">第二，比較字串的長度，和較長的字串會被視為更高。</span><span class="sxs-lookup"><span data-stu-id="4d240-971">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="4d240-972">第三，如果長度相等，就會使用一般的字串比較。</span><span class="sxs-lookup"><span data-stu-id="4d240-972">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="4d240-973">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-973">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="4d240-974">清單會顯示，使用替代的比較子，排序並且再次顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-974">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="4d240-975"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載則用來搜尋不在清單中，採用替代的比較子的數個字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-975">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="4d240-976"><xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-976">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="4d240-977">這兩種方法都位於名為函式`SearchAndInsert`，以及程式碼，要採取的位元補數 (~ 運算子在 C# 和 Visual c + + 中， `Xor` -1，在 Visual Basic 中的) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>，做為索引插入新的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-977">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-978">
            <paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-978">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-979">
            <paramref name="comparer" /> 的實作在排序期間造成錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-979">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="4d240-980">例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-980">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="list.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="4d240-981">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-981">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-982">使用指定的 <see cref="T:System.Comparison`1" /> 來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-982">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-983">如果`comparison`提供的項目<xref:System.Collections.Generic.List%601>seřazeny 使用委派所表示的方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-983">If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.</span></span>  
  
 <span data-ttu-id="4d240-984">如果`comparison`已`null`、<xref:System.ArgumentNullException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="4d240-984">If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="4d240-985">這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，套用內省式排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="4d240-985">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="4d240-986">如果分割區大小為 16 個項目，則會使用插入排序演算法</span><span class="sxs-lookup"><span data-stu-id="4d240-986">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="4d240-987">如果資料分割數目超過 2 個記錄檔*n*，其中*n*範圍的輸入陣列中，它會使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-987">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-988">否則，它會使用快速排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-988">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="4d240-989">此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-989">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="4d240-990">相反地，穩定的排序會保留相等項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-990">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="4d240-991">平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-991">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-992">下列程式碼示範<xref:System.Collections.Generic.List%601.Sort%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>簡單商務物件上的方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-992">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object.</span></span> <span data-ttu-id="4d240-993">呼叫<xref:System.Collections.Generic.List%601.Sort%2A>方法會產生做為部分類型，使用預設比較子和<xref:System.Collections.Generic.List%601.Sort%2A>使用匿名方法實作方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-993">Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-994">下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-994">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="4d240-995">此範例會定義名為字串的替代的比較方法`CompareDinosByLength`。</span><span class="sxs-lookup"><span data-stu-id="4d240-995">The example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="4d240-996">這個方法的運作方式如下： 第一次，針對測試比較元`null`，和 null 的參考會被視為少於一個非 null。</span><span class="sxs-lookup"><span data-stu-id="4d240-996">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="4d240-997">第二，比較字串的長度，和較長的字串會被視為更高。</span><span class="sxs-lookup"><span data-stu-id="4d240-997">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="4d240-998">第三，如果長度相等，就會使用一般的字串比較。</span><span class="sxs-lookup"><span data-stu-id="4d240-998">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="4d240-999">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-999">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="4d240-1000">清單也會包含空字串和 null 參考。</span><span class="sxs-lookup"><span data-stu-id="4d240-1000">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="4d240-1001">清單會顯示使用排序<xref:System.Comparison%601>代表的泛型委派`CompareDinosByLength`方法，並再次顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-1001">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-1002">
            <paramref name="comparison" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1002">
              <paramref name="comparison" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1003">
            <paramref name="comparison" /> 的實作在排序期間造成錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1003">The implementation of <paramref name="comparison" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="4d240-1004">例如，在將項目與其本身比較時，<paramref name="comparison" /> 可能不會傳回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1004">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-1005">要排序範圍內之以零為起始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1005">The zero-based starting index of the range to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="4d240-1006">要排序的範圍長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1006">The length of the range to sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="4d240-1007">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1007">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1008">使用指定的比較子對 <see cref="T:System.Collections.Generic.List`1" /> 中某段範圍內的項目進行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1008">Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1009">如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>實作。</span><span class="sxs-lookup"><span data-stu-id="4d240-1009">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="4d240-1010">如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4d240-1010">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="4d240-1011">否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-1011">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="4d240-1012">如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1012">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-1013">這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，套用內省式排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="4d240-1013">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="4d240-1014">如果分割區大小為 16 個項目，則會使用插入排序演算法</span><span class="sxs-lookup"><span data-stu-id="4d240-1014">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="4d240-1015">如果資料分割數目超過 2 個記錄檔*n*，其中*n*範圍的輸入陣列中，它會使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-1015">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="4d240-1016">否則，它會使用快速排序演算法。</span><span class="sxs-lookup"><span data-stu-id="4d240-1016">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="4d240-1017">此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1017">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="4d240-1018">相反地，穩定的排序會保留相等項目的順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1018">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="4d240-1019">平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-1019">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-1020">下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-1020">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="4d240-1021">此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。</span><span class="sxs-lookup"><span data-stu-id="4d240-1021">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="4d240-1022">比較子的運作方式如下： 第一次，針對測試比較元`null`，和 null 的參考會被視為少於一個非 null。</span><span class="sxs-lookup"><span data-stu-id="4d240-1022">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="4d240-1023">第二，比較字串的長度，和較長的字串會被視為更高。</span><span class="sxs-lookup"><span data-stu-id="4d240-1023">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="4d240-1024">第三，如果長度相等，就會使用一般的字串比較。</span><span class="sxs-lookup"><span data-stu-id="4d240-1024">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="4d240-1025">A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有五個 herbivorous 恐龍和三個肉食恐龍的名稱。</span><span class="sxs-lookup"><span data-stu-id="4d240-1025">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="4d240-1026">每兩個群組的名稱不是任何特定的排序順序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1026">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="4d240-1027">清單會顯示、 使用替代的比較子，來排序的草食範圍和清單會顯示一次。</span><span class="sxs-lookup"><span data-stu-id="4d240-1027">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="4d240-1028"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus 「 搜尋範圍是從草食然後使用方法多載。</span><span class="sxs-lookup"><span data-stu-id="4d240-1028">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="4d240-1029">找不到字串，以及位元補數 (~ 運算子在 C# 和 Visual c + + 中，`Xor`在 Visual Basic 中的-1) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法做為索引插入新的字串。</span><span class="sxs-lookup"><span data-stu-id="4d240-1029">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-1030">
            <paramref name="index" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1030">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4d240-1031">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1031">-or-</span>
          </span>
          <span data-ttu-id="4d240-1032">
            <paramref name="count" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1032">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1033">
            <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1033">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="4d240-1034">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1034">-or-</span>
          </span>
          <span data-ttu-id="4d240-1035">
            <paramref name="comparer" /> 的實作在排序期間造成錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1035">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="4d240-1036">例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1036">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d240-1037">
            <paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1037">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1038">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1038">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1039">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1039">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-1040">在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1040">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1041">唯讀的集合不允許在集合建立後增加、移除或修改項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1041">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="4d240-1042">是唯讀的集合是可防止修改集合的包裝函式集合因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="4d240-1042">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4d240-1043">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-1043">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1044">傳回逐一查看集合的列舉值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1044">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1045">
            <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1045">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1046">`foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="4d240-1046">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="4d240-1047">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="4d240-1047">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4d240-1048">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1048">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4d240-1049">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="4d240-1049">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4d240-1050">在這個位置，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>未定義屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-1050">At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined.</span></span> <span data-ttu-id="4d240-1051">因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1051">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="4d240-1052"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="4d240-1052">The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="4d240-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4d240-1054">如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-1054">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4d240-1055">列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-1055">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4d240-1056">如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="4d240-1056">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="4d240-1057">您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="4d240-1057">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="4d240-1058">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="4d240-1058">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4d240-1059">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1059">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-1060">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1060">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4d240-1061">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1061">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4d240-1062">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1062">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4d240-1063"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1063">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="4d240-1064">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-1064">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="4d240-1065">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1065">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="4d240-1066">
            <see cref="T:System.Array" /> 必須有以零為起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1066">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="4d240-1067">
            <c>array</c> 中以零起始的索引，複製作業從此處開始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1067">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1068">從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製至 <see cref="T:System.Array" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1068">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d240-1069">如果來源的類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型`array`，實作非泛型<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>擲回<xref:System.InvalidCastException>，而泛型實作擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1069">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="4d240-1070">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1070">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-1071">
            <paramref name="array" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1071">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-1072">
            <paramref name="arrayIndex" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1072">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1073">
            <paramref name="array" /> 是多維的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1073">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="4d240-1074">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1074">-or-</span>
          </span>
          <span data-ttu-id="4d240-1075">
            <paramref name="array" /> 沒有以零起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1075">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="4d240-1076">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1076">-or-</span>
          </span>
          <span data-ttu-id="4d240-1077">來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1077">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="4d240-1078">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1078">-or-</span>
          </span>
          <span data-ttu-id="4d240-1079">來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1079">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1080">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1080">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1081">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1081">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-1082">在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1082">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1083"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1083">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="4d240-1084">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1084">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="4d240-1085">在極少數的案例，其中列舉競用權限寫入，您可以鎖定整個列舉期間的集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1085">In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4d240-1086">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1086">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4d240-1087"><xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1087"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="4d240-1088">同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。</span><span class="sxs-lookup"><span data-stu-id="4d240-1088">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="4d240-1089">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-1089">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1090">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1090">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1091">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1091">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="4d240-1092">在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回目前的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1092">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1093"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1093">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="4d240-1094">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1094">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="4d240-1095">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1095">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4d240-1096">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1096">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4d240-1097"><xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1097"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="4d240-1098">同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。</span><span class="sxs-lookup"><span data-stu-id="4d240-1098">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="4d240-1099">下列程式碼示範如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-1099">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="4d240-1100">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-1100">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1101">傳回逐一查看集合的列舉值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1101">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1102">
            <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1102">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1103">`foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="4d240-1103">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="4d240-1104">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="4d240-1104">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4d240-1105">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1105">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4d240-1106">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="4d240-1106">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4d240-1107"><xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="4d240-1107"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="4d240-1108">在這個位置，<xref:System.Collections.IEnumerator.Current%2A>未定義屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-1108">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="4d240-1109">因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1109">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4d240-1110"><xref:System.Collections.IEnumerator.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="4d240-1110">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4d240-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4d240-1112">如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-1112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4d240-1113">列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-1113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4d240-1114">如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="4d240-1114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4d240-1115">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1115">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4d240-1116">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="4d240-1116">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4d240-1117">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1117">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="4d240-1118">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="4d240-1118">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="4d240-1119">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1119">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4d240-1120">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1120">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4d240-1121"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。</span><span class="sxs-lookup"><span data-stu-id="4d240-1121">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="4d240-1122">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-1122">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-1123">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1123">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1124">將項目加入至 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1124">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1125">插入新項目的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1125">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1126">如果<xref:System.Collections.Generic.List%601.Count%2A>是小於<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-1126">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="4d240-1127">如果容量需要增加，以容納新的項目，這個方法會變成 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1127">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1128">
            <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1128">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-1129">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1129">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1130">判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1130">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1131">如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1131">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1132">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-1132">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-1133">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1133">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-1134">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1134">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1135">判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1135">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1136">如果可在清單中找到，則為 <paramref name="item" /> 的索引，否則為 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1136">The index of <paramref name="item" /> if found in the list; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1137">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-1137">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-1138">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1138">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1139">
            <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1139">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-1140">應該插入 <c>item</c> 之以零起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1140">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4d240-1141">要插入 <see cref="T:System.Collections.IList" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1141">The object to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1142">將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1142">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1143">如果 `index` 等於 <xref:System.Collections.IList> 中的項目數目，則會將 `item` 附加至結尾。</span><span class="sxs-lookup"><span data-stu-id="4d240-1143">If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.</span></span>  
  
 <span data-ttu-id="4d240-1144">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1144">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-1145">
            <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1145">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1146">
            <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1146">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1147">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1147">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1148">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1148">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-1149">在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1149">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1150">具有固定大小的集合不允許在集合建立後新增或移除項目，但允許對現有項目進行修改。</span><span class="sxs-lookup"><span data-stu-id="4d240-1150">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="4d240-1151">具有固定大小集合是唯讀的集合只會防止新增和移除項目; 的包裝函式因此，如果變更基礎的集合，包括新增或移除項目，固定大小的集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="4d240-1151">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4d240-1152">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-1152">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1153">取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1153">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1154">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1154">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-1155">在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1155">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1156">唯讀的集合不允許在集合建立後增加、移除或修改項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1156">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="4d240-1157">是唯讀的集合是可防止修改集合的包裝函式集合因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="4d240-1157">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4d240-1158">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="4d240-1158">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4d240-1159">要取得或設定之以零為起始的項目索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1159">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1160">在指定的索引位置上取得或設定項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1160">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d240-1161">在指定索引上的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1161">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1162">使用 C# 語言[這](~/docs/csharp/language-reference/keywords/this.md)關鍵字來定義索引，而不必實作<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-1162">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="4d240-1163">Visual Basic 會將 <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="4d240-1163">Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="4d240-1164">擷取這個屬性的值是 o （1） 的作業;設定屬性，也是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="4d240-1164">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d240-1165">
            <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1165">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1166">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1166">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="4d240-1167">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1167">The object to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1168">從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1168">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1169">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="4d240-1169">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="4d240-1170">這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1170">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d240-1171">
            <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1171">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="list.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1172">將 <see cref="T:System.Collections.Generic.List`1" /> 的項目複製到新的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1172">Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1173">含有 <see cref="T:System.Collections.Generic.List`1" /> 的項目複本的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1173">An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1174">使用複製項目的<xref:System.Array.Copy%2A?displayProperty=nameWithType>，這是 O (*n*) 作業，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1174">The elements are copied using <xref:System.Array.Copy%2A?displayProperty=nameWithType>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="4d240-1175">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1175">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-1176">下列範例示範<xref:System.Collections.Generic.List%601.ToArray%2A>以及的其他方法<xref:System.Collections.Generic.List%601>處理範圍的類別。</span><span class="sxs-lookup"><span data-stu-id="4d240-1176">The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="4d240-1177">在此範例中，結尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用來從清單中，開頭的索引位置 2 取得三個項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1177">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="4d240-1178"><xref:System.Collections.Generic.List%601.ToArray%2A>方法呼叫所產生的<xref:System.Collections.Generic.List%601>，建立三個元素的陣列。</span><span class="sxs-lookup"><span data-stu-id="4d240-1178">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="4d240-1179">陣列的元素會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-1179">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="list.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d240-1180">將容量設為 <see cref="T:System.Collections.Generic.List`1" /> 中項目的實際數目，如果該數目小於臨界值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1180">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1181">這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。</span><span class="sxs-lookup"><span data-stu-id="4d240-1181">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="4d240-1182">重新配置及複製大型的成本<xref:System.Collections.Generic.List%601>不過，可能相當大，因此<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法不執行任何動作，如果清單是在多個容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="4d240-1182">The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="4d240-1183">這可避免產生大型的重新配置成本相對較小的改善。</span><span class="sxs-lookup"><span data-stu-id="4d240-1183">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-1184">90%的目前閾值可能在未來版本中變更。</span><span class="sxs-lookup"><span data-stu-id="4d240-1184">The current threshold of 90 percent might change in future releases.</span></span>  
  
 <span data-ttu-id="4d240-1185">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1185">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="4d240-1186">若要重設<xref:System.Collections.Generic.List%601>設為初始狀態，呼叫<xref:System.Collections.Generic.List%601.Clear%2A>方法之前呼叫<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-1186">To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="4d240-1187">修剪空白<xref:System.Collections.Generic.List%601>設定的容量<xref:System.Collections.Generic.List%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-1187">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="4d240-1188">容量也可以設定使用<xref:System.Collections.Generic.List%601.Capacity%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d240-1188">The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-1189">下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。</span><span class="sxs-lookup"><span data-stu-id="4d240-1189">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="4d240-1190">下列範例示範<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-1190">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="4d240-1191">數個屬性和方法<xref:System.Collections.Generic.List%601>類別用來新增、 插入和移除字串的清單中的項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1191">Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings.</span></span> <span data-ttu-id="4d240-1192">然後<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數，而<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。</span><span class="sxs-lookup"><span data-stu-id="4d240-1192">Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="4d240-1193">如果未使用的容量已低於 10%的總容量，清單會不具有已調整大小。</span><span class="sxs-lookup"><span data-stu-id="4d240-1193">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span> <span data-ttu-id="4d240-1194">最後，會清除清單的內容。</span><span class="sxs-lookup"><span data-stu-id="4d240-1194">Finally, the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="list.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="4d240-1195">
            <see cref="T:System.Predicate`1" /> 委派，可定義檢查項目所根據的條件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1195">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d240-1196">判斷 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個項目是否符合指定之述詞所定義的條件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1196">Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d240-1197">如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個項目都符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1197">
              <see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d240-1198">如果清單中沒有項目，則傳回值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1198">If the list has no elements, the return value is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d240-1199"><xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。</span><span class="sxs-lookup"><span data-stu-id="4d240-1199">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="4d240-1200">目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及處理在委派傳回時停止`false`的任何項目。</span><span class="sxs-lookup"><span data-stu-id="4d240-1200">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element.</span></span> <span data-ttu-id="4d240-1201">項目會依序處理，並在單一執行緒上進行所有的呼叫。</span><span class="sxs-lookup"><span data-stu-id="4d240-1201">The elements are processed in order, and all calls are made on a single thread.</span></span>  
  
 <span data-ttu-id="4d240-1202">這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d240-1202">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d240-1203">下列範例示範<xref:System.Collections.Generic.List%601.TrueForAll%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。</span><span class="sxs-lookup"><span data-stu-id="4d240-1203">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="4d240-1204">A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。</span><span class="sxs-lookup"><span data-stu-id="4d240-1204">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="4d240-1205">此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。</span><span class="sxs-lookup"><span data-stu-id="4d240-1205">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="4d240-1206"><xref:System.Collections.Generic.List%601.TrueForAll%2A>方法會周遊清單開始，再傳遞給每個項目`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="4d240-1206">The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="4d240-1207">搜尋停止的時機`EndsWithSaurus`方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="4d240-1207">The search stops when the `EndsWithSaurus` method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d240-1208">在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。</span><span class="sxs-lookup"><span data-stu-id="4d240-1208">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="4d240-1209">這些語言推斷正確的委派，從內容，並自動建立。</span><span class="sxs-lookup"><span data-stu-id="4d240-1209">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d240-1210">
            <paramref name="match" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d240-1210">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>