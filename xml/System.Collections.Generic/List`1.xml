<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d16038f88fec2c25538ccb923d037ef8e8246bb" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53229411" /></Metadata><TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type List&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">清單中項目的類型。</typeparam>
    <summary>表示可以依照索引存取的強類型物件清單。 提供搜尋、排序和管理清單的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>類別相當於一般的<xref:System.Collections.ArrayList>類別。 它會實作<xref:System.Collections.Generic.IList%601>需要使用陣列做為動態增加其大小的泛型介面。  
  
 您可以將項目加入<xref:System.Collections.Generic.List%601>利用<xref:System.Collections.Generic.List%601.Add%2A>或<xref:System.Collections.Generic.List%601.AddRange%2A>方法。  
  
 <xref:System.Collections.Generic.List%601>類別會使用相等比較子和排序比較子。  
  
-   這類方法<xref:System.Collections.Generic.List%601.Contains%2A>， <xref:System.Collections.Generic.List%601.IndexOf%2A>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A>，和<xref:System.Collections.Generic.Dictionary%602.Remove%2A>清單元素使用相等比較子。 類型的預設相等比較子`T`決定，如下所示。 如果型別`T`會實作<xref:System.IEquatable%601>泛型介面，則相等比較子會是<xref:System.IEquatable%601.Equals%28%600%29>方法，該介面; 的預設相等比較子是的否則為<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>。  
  
-   這類方法<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>用於清單項目中的排序比較子。 類型的預設比較子`T`決定，如下所示。  如果型別`T`實作<xref:System.IComparable%601>泛型介面，則預設比較子會是<xref:System.IComparable%601.CompareTo%28%600%29>方法的介面; 否則如果型別`T`實作非泛型<xref:System.IComparable>介面，則預設值比較子會是<xref:System.IComparable.CompareTo%28System.Object%29>該介面的方法。 如果型別`T`實作以上兩者的介面，則沒有任何預設比較子，而且必須明確地提供比較子或比較委派。  
  
 <xref:System.Collections.Generic.List%601>不保證排序。  您必須排序<xref:System.Collections.Generic.List%601>再執行作業 (例如<xref:System.Collections.Generic.List%601.BinarySearch%2A>)，您需要<xref:System.Collections.Generic.List%601>排序。  
  
 可以使用整數索引來存取這個集合中的項目。  這個集合中的索引都是以零為起始的。  
  
 針對非常大型<xref:System.Collections.Generic.List%601>物件，您可以藉由設定增加到 64 位元系統上的 2 億個元素的最大容量`enabled`屬性的組態項目`true`在執行階段環境中。  
  
 <xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
 不可變的新版<xref:System.Collections.Generic.List%601>類別，請參閱<xref:System.Collections.Immutable.ImmutableList%601>。  
  
## <a name="performance-considerations"></a>效能考量  
 在決定是否要使用<xref:System.Collections.Generic.List%601>或是<xref:System.Collections.ArrayList>類別，這兩者都有類似的功能，請記住，<xref:System.Collections.Generic.List%601>類別在大部分情況下，執行得更好且型別安全。 如果是參考型別用於型別`T`的<xref:System.Collections.Generic.List%601>類別，這兩個類別的行為完全相同。 不過，如果實值型別用於型別`T`，您需要考慮實作和 boxing 問題。  
  
 如果實值型別用於型別`T`，則編譯器會產生的實作<xref:System.Collections.Generic.List%601>類別特別針對該實值型別。 這表示清單項目<xref:System.Collections.Generic.List%601>物件沒有可用的項目，並建立約 500 名 list 元素之後儲存不 boxing list 元素的記憶體大於用來產生的類別實作的記憶體之前會進行 boxed 處理。  
  
 請確定用於類型的實值型別`T`實作<xref:System.IEquatable%601>泛型介面。 如果不是，這類方法<xref:System.Collections.Generic.List%601.Contains%2A>必須呼叫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法，方塊的受影響的清單項目。 如果實作實值型別<xref:System.IComparable>介面，且您擁有原始程式碼、 也實作<xref:System.IComparable%601>泛型介面，以防止<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>boxing 清單項目中的方法。 如果您並未擁有原始碼，傳遞<xref:System.Collections.Generic.IComparer%601>物件至<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>方法  
  
 它會使用特定類型實作的優點<xref:System.Collections.Generic.List%601>類別，而不是使用<xref:System.Collections.ArrayList>類別或撰寫您自己的強型別包裝函式集合。 原因是您的實作必須執行.NET Framework 的功能，和 common language runtime 可以在 Microsoft 中繼語言程式碼和中繼資料，您的實作不能共用。  
  
## <a name="f-considerations"></a>F#考量  
 <xref:System.Collections.Generic.List%601>類別不常用於F#程式碼。  相反地，[列出](https://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)，是不可變、 單一連結清單中，為通常慣用。 F#清單提供排序、 不可變的系列的值，並支援在函式型開發中使用。 從F#，則<xref:System.Collections.Generic.List%601>類別通常都有[ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx)類型縮寫，以避免命名衝突與F#列出  
  
   
  
## Examples  
 下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 下列範例示範數個屬性和方法<xref:System.Collections.Generic.List%601>是字串類型的泛型類別。 (如需<xref:System.Collections.Generic.List%601>複雜類型，請參閱<xref:System.Collections.Generic.List%601.Contains%2A>方法。)  
  
 預設建構函式用來建立字串清單的預設容量。 <xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示，然後<xref:System.Collections.Generic.List%601.Add%2A>方法用來新增數個項目。 列出的項目，而<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示同樣地，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。  
  
 <xref:System.Collections.Generic.List%601.Contains%2A>方法用來測試是否存在的項目在清單中，<xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入中間清單中，新的項目和清單的內容會顯示一次。  
  
 預設值<xref:System.Collections.Generic.List%601.Item%2A>屬性 （C# 中為索引子） 用來擷取項目，<xref:System.Collections.Generic.List%601.Remove%2A>方法用來移除重複的項目之前，新增第一個執行個體和內容會顯示一次。 <xref:System.Collections.Generic.List%601.Remove%2A>方法一律會移除第一個遇到的執行個體。  
  
 <xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數，而<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。 如果未使用的容量已低於 10%的總容量，清單會不具有已調整大小。  
  
 最後，<xref:System.Collections.Generic.List%601.Clear%2A>方法用來從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。 不保證任何執行個體成員是安全執行緒。  
  
安全地執行多個讀取的操作<see cref="T:System.Collections.Generic.List`1" />，但如果集合已修改正在讀取時，可能會發生問題。 若要確保執行緒安全，讀取過程中鎖定集合，或寫入作業。 若要啟用的讀取和寫入的多個執行緒存取集合，您必須實作自己的同步處理。 對於內建的同步處理的集合，請參閱中的類別<see cref="N:System.Collections.Concurrent" />命名空間。 如需原本就是執行緒安全替代方法，請參閱<see cref="T:System.Collections.Immutable.ImmutableList`1" />類別。</threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器 (C# 和 Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量<xref:System.Collections.Generic.List%601>是的項目數，<xref:System.Collections.Generic.List%601>可以保存。 當項目新增至<xref:System.Collections.Generic.List%601>，自動增加容量的要求以重新配置內部陣列。  
  
 如果集合的大小可以估計，使用<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>建構函式，並指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.List%601>。  
  
 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確。 減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。  
  
 這個建構函式是 o （1） 的作業。  
  
   
  
## Examples  
 下列範例示範的預設建構函式<xref:System.Collections.Generic.List%601>泛型類別。 預設建構函式會建立預設容量，以清單顯示所示<xref:System.Collections.Generic.List%601.Capacity%2A>屬性。  
  
 範例會新增、 插入，並移除項目，顯示如何隨著這些方法會使用而變更容量。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">將其項目複製到新清單的來源集合。</param>
        <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，其包含從指定之集合複製的項目，且具有容納複製之項目數目的足夠容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將元素複製到<xref:System.Collections.Generic.List%601>集合的列舉值所讀取的順序相同。  
  
 這個建構函式是 O (*n*) 運算，其中*n*是中的項目數`collection`。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.%23ctor%2A>建構函式和各種方法<xref:System.Collections.Generic.List%601>處理範圍的類別。 字串陣列建立並傳遞至建構函式，填入陣列的項目清單。 <xref:System.Collections.Generic.List%601.Capacity%2A>就顯示屬性，以顯示的初始容量是完全保留輸入的項目所需條件為何。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">新清單一開始能夠儲存的項目數目。</param>
        <summary>為具有指定初始容量且為空的 <see cref="T:System.Collections.Generic.List`1" /> 類別，初始化新的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量<xref:System.Collections.Generic.List%601>是的項目數，<xref:System.Collections.Generic.List%601>可以保存。 當項目新增至<xref:System.Collections.Generic.List%601>，自動增加容量的要求以重新配置內部陣列。  
  
 如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.List%601>。  
  
 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確。 減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。  
  
 這個建構函式是 O (*n*) 運算，其中*n*是`capacity`。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>建構函式。 A<xref:System.Collections.Generic.List%601>的容量為 4 的字串會建立，因為清單的最終大小已知為完全 4。 此清單會填入四個字串，和唯讀複本由使用<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> 小於 0。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="list.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要加入至 <see cref="T:System.Collections.Generic.List`1" /> 結尾的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>將物件加入至 <see cref="T:System.Collections.Generic.List`1" /> 的末端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
 如果<xref:System.Collections.Generic.List%601.Count%2A>已等於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。  
  
 如果<xref:System.Collections.Generic.List%601.Count%2A>是小於<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 o （1） 作業。 如果容量需要增加，以容納新的項目，這個方法會變成 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 下列範例示範數個屬性和方法<xref:System.Collections.Generic.List%601>泛型類別，包括<xref:System.Collections.Generic.List%601.Add%2A>方法。 預設建構函式用來建立容量為 0 的字串清單。 <xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示，然後<xref:System.Collections.Generic.List%601.Add%2A>方法用來新增數個項目。 列出的項目，而<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示同樣地，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。  
  
 其他屬性和方法用來搜尋、 插入和移除項目從清單中，最後要清除的清單。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="list.AddRange collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">集合，其項目應加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。 集合本身不可為 <see langword="null" />，但如果類型 <paramref name="T" /> 是參考類型，則其可以包含為 <see langword="null" /> 的項目。</param>
        <summary>將特定集合的項目加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中項目的順序會保留在<xref:System.Collections.Generic.List%601>。  
  
 如果新<xref:System.Collections.Generic.List%601.Count%2A>(目前<xref:System.Collections.Generic.List%601.Count%2A>再加上集合的大小) 將會大於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>自動重新配置內部的陣列，以容納新的項目，會增加，加入新項目之前，現有的項目會複製到新陣列。  
  
 如果<xref:System.Collections.Generic.List%601>可以容納新的項目，而不會增加<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 O (*n*) 運算，其中*n*是要加入的項目數。 如果容量需要增加，以容納新的項目，這個方法會變成 O (*n* + *m*) 作業，其中*n*是項目數目要加入及*m*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.AddRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。 字串陣列建立並傳遞至建構函式，填入陣列的項目清單。 <xref:System.Collections.Generic.List%601.AddRange%2A>呼叫方法時，作為其引數清單。 結果是，清單的目前項目會新增至清單中，複製所有項目結尾。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.AsReadOnly : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="list.AsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前集合的唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式。</summary>
        <returns>此物件作為唯讀包裝函式包住目前的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要防止修改<xref:System.Collections.Generic.List%601>物件，只會透過這個包裝函式將它公開。 A<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>物件不會公開修改集合的方法。 不過，如果變更基礎<xref:System.Collections.Generic.List%601>物件、 唯讀集合會反映這些變更。  
  
 這個方法是 o （1） 作業。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。 A<xref:System.Collections.Generic.List%601>的容量為 4 的字串會建立，因為清單的最終大小已知為完全 4。 此清單會填入四個字串，而<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法用來取得唯讀<xref:System.Collections.Generic.IList%601>包裝原始清單的泛型介面實作。  
  
 將原始清單的項目設定為"Coelophysis 」 使用<xref:System.Collections.Generic.List%601.Item%2A>屬性 (C# 索引子） 和唯讀清單的內容會顯示一次來示範它是只是原始的清單包裝函式。  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用二進位搜尋演算法來尋找在排序的 <see cref="T:System.Collections.Generic.List`1" /> 中或在其中一部分中的特定項目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="list.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>使用預設的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</summary>
        <returns>如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型別的`T`來決定清單項目的順序。 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>屬性檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 <xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。  
  
 比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。 排序時，`null`會被視為小於任何其他物件。  
  
 如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。  
  
 如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。 您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。 當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。  
  
 這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載。 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。 清單是顯示、 排序，並且再次顯示。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載則用來搜尋不在清單中，兩個字串和<xref:System.Collections.Generic.List%601.Insert%2A>方法用來將其插入。 傳回值<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法是在每個案例中，負數的因為字串不在清單中。 採取的位元補數 (~ 運算子在 C# 和 Visual c + +， `Xor` Visual Basic 中的-1) 的這個負數的數字會產生此位置是大於搜尋字串，並插入清單中的第一個元素的索引會保留排序順序。 第二個搜尋字串大於任何項目在清單中，所以位於清單結尾的插入位置。  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。  
  
-或- 
 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
        <summary>使用指定的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</summary>
        <returns>如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較子會自訂如何比較項目。 例如，您可以使用<xref:System.Collections.CaseInsensitiveComparer>作為要執行不區分大小寫的字串搜尋的比較子的執行個體。  
  
 如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>會指定使用指定的值比較<xref:System.Collections.Generic.IComparer%601>實作。  
  
 如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 <xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。  
  
 比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。 排序時，`null`會被視為小於任何其他物件。  
  
 如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。  
  
 如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。 您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。 當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。  
  
 這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。  
  
 此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。 比較子的運作方式，如下所示：第一次，針對測試比較元`null`，而且為 null 參考被視為少於一個非 null。 第二，比較字串的長度，和較長的字串會被視為更高。 第三，如果長度相等，就會使用一般的字串比較。  
  
 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。 清單會顯示，使用替代的比較子，排序並且再次顯示。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載則用來搜尋不在清單中，採用替代的比較子的數個字串。 <xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入字串。 這兩種方法都位於名為函式`SearchAndInsert`，以及程式碼，要採取的位元補數 (~ 運算子在 C# 和 Visual c + + 中， `Xor` -1，在 Visual Basic 中的) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>，做為索引插入新的字串。  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">要搜尋範圍內之以零為起始的起始索引。</param>
        <param name="count">搜尋範圍的長度。</param>
        <param name="item">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="comparer">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
        <summary>使用指定的比較子在已經過排序之 <see cref="T:System.Collections.Generic.List`1" /> 內，搜尋某範圍的項目，並傳回該項目以零為起始的索引。</summary>
        <returns>如果有找到 <paramref name="item" />，則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較子會自訂如何比較項目。 例如，您可以使用<xref:System.Collections.CaseInsensitiveComparer>作為要執行不區分大小寫的字串搜尋的比較子的執行個體。  
  
 如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>會指定使用指定的值比較<xref:System.Collections.Generic.IComparer%601>實作。  
  
 如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 <xref:System.Collections.Generic.List%601>必須已排序依據的比較子實作; 否則結果就是不正確。  
  
 比較`null`具有任何參考型別允許和不會產生例外狀況，當使用<xref:System.IComparable%601>泛型介面。 排序時，`null`會被視為小於任何其他物件。  
  
 如果<xref:System.Collections.Generic.List%601>只會包含一個以上的項目具有相同的值，此方法會傳回其中一個相符項目，而且它可能會傳回任何一個的相符項目中，而不一定是第一個。  
  
 如果<xref:System.Collections.Generic.List%601>不包含指定的值，方法會傳回負整數。 您可以將位元補數運算 （~） 套用至這個負整數，以取得大於搜尋值的第一個元素的索引。 當將值插入<xref:System.Collections.Generic.List%601>，此索引應做為插入點用來維護的排序次序。  
  
 這個方法是 O (log *n*) 的作業，其中*n*是範圍內的項目數。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。  
  
 此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。 比較子的運作方式，如下所示：第一次，針對測試比較元`null`，而且為 null 參考被視為少於一個非 null。 第二，比較字串的長度，和較長的字串會被視為更高。 第三，如果長度相等，就會使用一般的字串比較。  
  
 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有五個 herbivorous 恐龍和三個肉食恐龍的名稱。 每兩個群組的名稱不是任何特定的排序順序。 清單會顯示、 使用替代的比較子，來排序的草食範圍和清單會顯示一次。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus 「 搜尋範圍是從草食然後使用方法多載。 找不到字串，以及位元補數 (~ 運算子在 C# 和 Visual c + + 中，`Xor`在 Visual Basic 中的-1) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法做為索引插入新的字串。  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在不需要調整大小之下，取得或設定內部資料結構可以保存的項目總數。</summary>
        <value>需要調整大小之前，<see cref="T:System.Collections.Generic.List`1" /> 可包含的項目數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 是的項目數，<xref:System.Collections.Generic.List%601>可以儲存，才能調整大小是必要的而<xref:System.Collections.Generic.List%601.Count%2A>是實際的項目數<xref:System.Collections.Generic.List%601>。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 永遠是大於或等於<xref:System.Collections.Generic.List%601.Count%2A>。 如果<xref:System.Collections.Generic.List%601.Count%2A>超過<xref:System.Collections.Generic.List%601.Capacity%2A>同時新增項目，將舊的項目複製並加入新項目之前，會自動重新配置內部陣列增加容量。  
  
 如果容量遠比計數，而且您想要降低所使用的記憶體<xref:System.Collections.Generic.List%601>，您可以藉由呼叫來減少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或藉由設定<xref:System.Collections.Generic.List%601.Capacity%2A>屬性明確設為較低的值。 當值<xref:System.Collections.Generic.List%601.Capacity%2A>設定明確地內部陣列也已重新配置以符合指定的容量，並複製所有項目。  
  
 擷取這個屬性的值是 o （1） 的作業;將屬性設定為 O (*n*) 運算，其中*n*是新的容量。  
  
   
  
## Examples  
 下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 下列範例所示<xref:System.Collections.Generic.List%601.Capacity%2A>的數個點的清單中的生命週期的屬性。 預設建構函式用來建立一份字串容量為 0，而<xref:System.Collections.Generic.List%601.Capacity%2A>顯示屬性，以示範這種情況。 之後<xref:System.Collections.Generic.List%601.Add%2A>方法來新增數個項目，會列出項目，然後<xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示一次，連同<xref:System.Collections.Generic.List%601.Count%2A>屬性，以顯示所需的容量，已增加。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A>屬性會顯示之後，再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數。 最後，<xref:System.Collections.Generic.List%601.Clear%2A>方法用來從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示一次。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Collections.Generic.List`1.Capacity" /> 是設定為小於 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。</exception>
        <exception cref="T:System.OutOfMemoryException">系統上沒有足夠的記憶體可用。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="list.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除 <see cref="T:System.Collections.Generic.List`1" /> 中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Count%2A> 設定為 0，並且從項目集合中的其他物件的參考也釋出。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 會維持不變。 若要重設的容量<xref:System.Collections.Generic.List%601>，呼叫<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或一組<xref:System.Collections.Generic.List%601.Capacity%2A>直接屬性。 減少容量重新配置記憶體，並將在中的所有項目複製<xref:System.Collections.Generic.List%601>。 修剪空白<xref:System.Collections.Generic.List%601>設定的容量<xref:System.Collections.Generic.List%601>預設容量。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Clear%2A>方法和各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。 <xref:System.Collections.Generic.List%601.Clear%2A>結尾的程式，使用方法，是將它從清單中，移除所有項目和<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性隨即顯示。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="list.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>判斷某項目是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。</summary>
        <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Generic.List`1" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷所使用的預設相等比較子，等號比較物件的實作所定義<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法`T`（清單中的值類型）。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Contains%2A>並<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含實作簡單商務物件<xref:System.IEquatable%601.Equals%2A>。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 下列範例包含複雜型別之物件的清單`Cube`。 `Cube`類別會實作<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法使兩個 cube 都視為相等，如果是相同的維度。 在此範例中，<xref:System.Collections.Generic.List%601.Contains%2A>方法會傳回`true`，因為已指定的維度的 cube 已在集合中。  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Converter&lt;'T, 'Output&gt; -&gt; System.Collections.Generic.List&lt;'Output&gt;" Usage="list.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">目標陣列項目的類型。</typeparam>
        <param name="converter"><see cref="T:System.Converter`2" /> 委派，可將某一個類型的每一個項目轉換成另一個類型。</param>
        <summary>將目前 <see cref="T:System.Collections.Generic.List`1" /> 中的項目轉換成另一個類型，並傳回包含轉換過的項目清單。</summary>
        <returns>目標類型的 <see cref="T:System.Collections.Generic.List`1" />，包含從目前 <see cref="T:System.Collections.Generic.List`1" /> 中轉換過的項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Converter%602>是將物件轉換成目標型別方法的委派。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Converter%602>委派，以及已轉換的項目會儲存在新<xref:System.Collections.Generic.List%601>。  
  
 目前<xref:System.Collections.Generic.List%601>會維持不變。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例會定義名為的方法`PointFToPoint`以將轉換成<xref:System.Drawing.PointF>結構<xref:System.Drawing.Point>結構。 這個範例會建立<xref:System.Collections.Generic.List%601>的<xref:System.Drawing.PointF>結構，則會建立`Converter\<PointF, Point>`委派 (`Converter(Of PointF, Point)` Visual Basic 中) 來代表`PointFToPoint`方法，並傳遞至委派<xref:System.Collections.Generic.List%601.ConvertAll%2A>方法。 <xref:System.Collections.Generic.List%601.ConvertAll%2A>方法會傳遞至輸入清單的每個項目`PointFToPoint`方法並將已轉換的項目放入新的清單<xref:System.Drawing.Point>結構。 這兩份清單會顯示。  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="converter" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分複製到陣列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="list.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <summary>從目標陣列的開頭開始，將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。  
  
 將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。 建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。 最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。 陣列的內容隨即顯示。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數大於目的 <paramref name="array" /> 可包含的項目數。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="list.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="arrayIndex"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
        <summary>從目標陣列的指定索引處開始，將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。  
  
 將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。 建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。 最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。 陣列的內容隨即顯示。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="list.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">來源 <see cref="T:System.Collections.Generic.List`1" /> 中以零為起始的索引，位於複製開始的位置。</param>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="arrayIndex"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
        <param name="count">要複製的項目數目。</param>
        <summary>從目標陣列的指定索引處開始，將項目範圍從 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。  
  
 將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.List%601>。  
  
 這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有 5 個字串。 建立空的字串陣列的 15 個元素，而<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法多載用來將清單中的所有元素都複製到陣列的第一個項目開頭的陣列。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法多載用來複製所有的項目至的陣列索引 6 開始的陣列清單 （離開索引 5 空白）。 最後，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法多載用來複製 3 個元素，從清單中，從索引 2 開始，到開始於陣列的陣列編製索引 12 （離開索引 11 空白）。 陣列的內容隨即顯示。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="arrayIndex" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 等於或大於來源 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="P:System.Collections.Generic.List`1.Count" />。  
  
-或- 
從 <paramref name="index" /> 到來源 <see cref="T:System.Collections.Generic.List`1" /> 結尾的項目數目，大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.List&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.Generic.List`1" /> 中所包含的項目數。</summary>
        <value><see cref="T:System.Collections.Generic.List`1" /> 中所包含的項目數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 是的項目數，<xref:System.Collections.Generic.List%601>需要調整大小之前，可以儲存。 <xref:System.Collections.Generic.List%601.Count%2A> 是實際的項目數<xref:System.Collections.Generic.List%601>。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 永遠是大於或等於<xref:System.Collections.Generic.List%601.Count%2A>。 如果<xref:System.Collections.Generic.List%601.Count%2A>超過<xref:System.Collections.Generic.List%601.Capacity%2A>同時新增項目，將舊的項目複製並加入新項目之前，會自動重新配置內部陣列增加容量。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
   
  
## Examples  
 下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 下列範例顯示的值<xref:System.Collections.Generic.List%601.Count%2A>在清單中的生命週期各個點上的屬性。 已建立並填入清單並顯示其項目之後,<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。 這些屬性會顯示之後，再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法已被呼叫，並在清單的內容之後，再次會被清除。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="list.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>判斷 <see cref="T:System.Collections.Generic.List`1" /> 是否包含符合指定之述詞所定義之條件的項目。</summary>
        <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 包含的一或多個項目符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>的委派，以及處理已停止時找到相符項目。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Contains%2A>並<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含實作簡單商務物件<xref:System.IEquatable%601.Equals%2A>。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 下列範例示範<xref:System.Collections.Generic.List%601.Exists%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。  
  
 A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。 此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，並<xref:System.Collections.Generic.List%601.FindAll%2A>方法來搜尋述詞的方法中，搜尋清單，然後<xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用來移除結尾"saurus"的所有項目。  
  
 最後，<xref:System.Collections.Generic.List%601.Exists%2A>呼叫方法。 從一開始，再傳遞給每個項目周遊清單`EndsWithSaurus`方法。 搜尋會停止，且這個方法會傳回`true`如果`EndsWithSaurus`方法會傳回`true`的任何項目。 <xref:System.Collections.Generic.List%601.Exists%2A>方法會傳回`false`由於所有這類項目已經移除。  
  
> [!NOTE]
>  在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。 這些語言推斷正確的委派，從內容，並自動建立。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一個相符的項目。</summary>
        <returns>第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，在中向前移動<xref:System.Collections.Generic.List%601>、 第一個元素開始和結尾的最後一個元素。  找到相符項目時，會停止處理。  
  
> [!IMPORTANT]
>  搜尋時包含實值類型的清單，請確定類型的預設值不符合搜尋述詞。 否則，會沒有辦法分辨預設值，指出沒有相符項目找不到和剛好有類型的預設值的清單項目。 預設值符合搜尋述詞，如果使用<xref:System.Collections.Generic.List%601.FindIndex%2A>方法改為。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Find%2A>方法<xref:System.Collections.Generic.List%601>包含簡單的複雜物件。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。 範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔：書籍 (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`方法，在此範例會使用[LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。  
  
 下表說明提供給 find 方法範例。  
  
|方法|範例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|找到識別碼使用的一本書`IDToFind`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>擷取符合指定之述詞所定義的條件之所有項目。</summary>
        <returns><see cref="T:System.Collections.Generic.List`1" />，其中包含符合指定之述詞所定義的條件之所有項目 (如有找到)，否則為空的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及符合條件的項目會儲存在傳回<xref:System.Collections.Generic.List%601>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。 範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔：書籍 (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`方法，在此範例會使用[LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。  
  
 下表說明提供給 find 方法範例。  
  
|方法|範例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|找到識別碼使用的一本書`IDToFind`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>搜尋符合指定述詞所定義之條件的項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 內第一次出現或為其一部分之以零為起始的索引。 如果找不到符合條件的項目，這個方法會傳回 -1。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一次出現之以零為起始的索引。</summary>
        <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>向前第一個項目開始和結束時間的最後一個項目搜尋。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。 委派的簽章：  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。 它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。 請注意此方法的簽章  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。 此範例會具現化`List<Employee>`物件，加入一些`Employee`上限到它，然後再呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋整個集合，也就是第一個第一次`Employee`物件，其`Name`欄位開始"J"，與第二次的前`Employee`物件，其`Name`欄位開頭為"Ju"。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">搜尋之以零為起始的起始索引。</param>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 內 (從指定之索引延伸到最後一個項目)，於某項目範圍中第一次出現之以零為起始的索引。</summary>
        <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>往前開始搜尋`startIndex`並結束於最後一個項目。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。 委派的簽章：  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*中的項目數目`startIndex`結尾<xref:System.Collections.Generic.List%601>。  
  
   
  
## Examples  
 下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。 它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。 請注意此方法的簽章  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。 此範例會具現化`List<Employee>`物件，加入一些`Employee`上限，然後呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋開頭為其第五個成員 （也就是索引 4 成員） 的集合。 第一次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"J"; 第二次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"Ju"。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">搜尋之以零為起始的起始索引。</param>
        <param name="count">區段中要搜尋的項目數目。</param>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從指定之索引開始，且包含指定之項目數目的項目範圍內第一個符合項目之以零為起始的索引。</summary>
        <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>往前開始搜尋`startIndex`結尾`startIndex`加上`count`減 1，如果`count`大於 0。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。 委派的簽章：  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例會定義`Employee`類別的兩個欄位`Name`和`Id`。 它也會定義`EmployeeSearch`類別具有單一方法`StartsWith`，表示是否`Employee.Name`欄位的開頭指定的子字串提供給`EmployeeSearch`類別建構函式。 請注意此方法的簽章  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 對應至可傳遞至委派的簽章<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。 此範例會具現化`List<Employee>`物件，加入一些`Employee`上限到它，然後再呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法兩次來搜尋整個集合 (也就是成員從索引 0 到索引<xref:System.Collections.Generic.List%601.Count%2A>-1)。 第一次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"J"; 第二次，它會搜尋第一個`Employee`物件，其`Name`欄位開頭為"Ju"。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。  
  
-或- 
 <paramref name="count" /> 小於 0。  
  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.Generic.List`1" /> 的有效區段。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一個相符的項目。</summary>
        <returns>最後一個符合指定之述詞所定義的條件之元素 (如有找到)，否則為型別 <paramref name="T" /> 的預設值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，在中向後移動<xref:System.Collections.Generic.List%601>、 的最後一個元素開始和結束的第一個元素。  找到相符項目時，會停止處理。  
  
> [!IMPORTANT]
>  搜尋時包含實值類型的清單，請確定類型的預設值不符合搜尋述詞。 否則，會沒有辦法分辨預設值，指出沒有相符項目找不到和剛好有類型的預設值的清單項目。 預設值符合搜尋述詞，如果使用<xref:System.Collections.Generic.List%601.FindLastIndex%2A>方法改為。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。 範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔：書籍 (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`方法，在此範例會使用[LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。  
  
 下表說明提供給 find 方法範例。  
  
|方法|範例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|找到識別碼使用的一本書`IDToFind`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中或其中一部分中最後一次出現之以零為起始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一次出現之以為零起始的索引。</summary>
        <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>向後最後一個項目開始和結束時間的第一個項目搜尋。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。 範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔：書籍 (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`方法，在此範例會使用[LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。  
  
 下表說明提供給 find 方法範例。  
  
|方法|範例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|找到識別碼使用的一本書`IDToFind`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個項目延伸到指定之索引的項目範圍內，最後一個符合項目之以零為起始的索引。</summary>
        <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>會搜尋回溯開始`startIndex`和結束時間的第一個元素。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是從開頭的項目數<xref:System.Collections.Generic.List%601>至`startIndex`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
        <param name="count">區段中要搜尋的項目數目。</param>
        <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
        <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定之項目數目，且結束於指定之索引的項目範圍內最後一個符合項目之以零為起始的索引。</summary>
        <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>會搜尋回溯開始`startIndex`結尾`startIndex`減去`count`再加上 1，如果`count`大於 0。  
  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例示範的 find 方法<xref:System.Collections.Generic.List%601>類別。 範例<xref:System.Collections.Generic.List%601>類別包含`book`類別的物件`Book`，使用中的資料[範例 XML 檔：書籍 (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`方法，在此範例會使用[LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)來剖析的屬性值的值從 XML`book`物件。  
  
 下表說明提供給 find 方法範例。  
  
|方法|範例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|找到識別碼使用的一本書`IDToFind`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|尋找所有書籍，其`Genre`屬性是 「 電腦 」 使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|在 2001 年使用之前的發行日期的集合中找到的最後一本書`PubBefore2001`述詞委派。<br /><br /> C# 範例會使用匿名委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|尋找索引的第一個電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|尋找索引的最後一個的電腦書籍使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的第一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|尋找索引的最後一個電腦活頁簿中第二個一半的集合，使用`FindComputer`述詞委派。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。  
  
-或- 
 <paramref name="count" /> 小於 0。  
  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.Generic.List`1" /> 的有效區段。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="list.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">要在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個項目上執行的 <see cref="T:System.Action`1" /> 委派。</param>
        <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個項目上執行指定之動作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Action%601>物件執行的動作方法的委派傳遞給它。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Action%601>委派。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 修改基礎集合中的主體<xref:System.Action%601>委派不支援，而且會導致未定義的行為。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Action%601>要列印的內容委派<xref:System.Collections.Generic.List%601>物件。 在此範例中`Print`方法用來對主控台顯示清單的內容。  
  
> [!NOTE]
>  除了顯示使用內容`Print`方法中，C# 範例示範如何使用主控台顯示結果。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="action" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">集合中的項目已經過修改。</exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.List&lt;'T&gt;.Enumerator" Usage="list.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回在 <see cref="T:System.Collections.Generic.List`1" /> 中逐一查看的列舉值。</summary>
        <returns><see cref="T:System.Collections.Generic.List`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 在這個位置，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>未定義屬性。 因此，您必須呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>。  
  
 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>呼叫。 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>是未定義。 您不能再次將 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>或是<xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>就會擲回<xref:System.InvalidOperationException>。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。 若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。  
  
 這個方法是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">範圍起始處之以零為起始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。</param>
        <param name="count">範圍中的項目數。</param>
        <summary>為來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目範圍建立淺層複本。</summary>
        <returns>來源 <see cref="T:System.Collections.Generic.List`1" /> 中項目範圍的淺層複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 淺層複本的參考類型的集合或子集該集合中，只包含參考至集合的項目。 不會複製物件本身。 新的清單中的參考會指向原始的清單中的參考相同的物件。  
  
 淺層複本的實值型別的集合或子集該集合，包含集合的元素。 不過，如果集合中的項目包含其他物件的參考，不會複製這些物件。 新集合的項目中的參考會指向原始集合的項目中參考相同的物件。  
  
 相反地，項目複製集合的深層複本，並直接或間接參考的元素，所有項目。  
  
 這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.GetRange%2A>以及的其他方法<xref:System.Collections.Generic.List%601>處理範圍的類別。 在此範例中，結尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用來從清單中，開頭的索引位置 2 取得三個項目。 <xref:System.Collections.Generic.List%601.ToArray%2A>方法呼叫所產生的<xref:System.Collections.Generic.List%601>，建立三個元素的陣列。 陣列的元素會顯示。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中，第一次出現某值之以零為起始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="list.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中第一個出現之以零為起始的索引。</summary>
        <returns>整個 <paramref name="item" /> 中第一個出現 <see cref="T:System.Collections.Generic.List`1" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>向前第一個項目開始和結束時間的最後一個項目搜尋。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。 最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，則傳回-1，因為沒有在該範圍內搜尋字串的執行個體。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="list.IndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
        <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中從指定的索引開始到最後一個項目這段範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
        <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始到最後一個元素的範圍內，第一次出現 <paramref name="item" /> 的位置之以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>往前開始搜尋`index`並結束於最後一個項目。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*中的項目數目`index`結尾<xref:System.Collections.Generic.List%601>。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。 最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，則傳回-1，因為沒有在該範圍內搜尋字串的執行個體。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="list.IndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
        <param name="count">區段中要搜尋的項目數目。</param>
        <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
        <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始且包含 <paramref name="count" /> 個元素的範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引，如未找到則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>往前開始搜尋`index`結尾`index`加上`count`減 1，如果`count`大於 0。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>搜尋開始時，從清單方法多載，並尋找字串的第一個項目。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋的索引位置 3 開頭的清單，並繼續清單中，結尾，並尋找該字串的第二個項目。 最後，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋指定範圍的開頭索引位置兩者的兩個項目，則傳回-1，因為沒有在該範圍內搜尋字串的執行個體。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。  
  
-或- 
 <paramref name="count" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.Generic.List`1" /> 的有效區段。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="list.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
        <param name="item">要插入的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>將項目插入至 <see cref="T:System.Collections.Generic.List`1" /> 中指定的索引位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
 如果<xref:System.Collections.Generic.List%601.Count%2A>已等於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。  
  
 如果`index`等於<xref:System.Collections.Generic.List%601.Count%2A>，`item`新增至結尾<xref:System.Collections.Generic.List%601>。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 下列範例示範<xref:System.Collections.Generic.List%601.Insert%2A>方法，以及各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。 建立清單之後，就會加入項目。 <xref:System.Collections.Generic.List%601.Insert%2A>方法用來將項目插入清單的中間。 項目插入已重複，更新版本中移除使用<xref:System.Collections.Generic.List%601.Remove%2A>方法。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; unit" Usage="list.InsertRange (index, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">應插入新項目處的以零為起始的索引。</param>
        <param name="collection">集合，其項目應插入至 <see cref="T:System.Collections.Generic.List`1" />。 集合本身不可為 <see langword="null" />，但如果類型 <paramref name="T" /> 是參考類型，則其可以包含為 <see langword="null" /> 的項目。</param>
        <summary>將集合的項目插入位於指定索引的 <see cref="T:System.Collections.Generic.List`1" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
 如果新<xref:System.Collections.Generic.List%601.Count%2A>(目前<xref:System.Collections.Generic.List%601.Count%2A>再加上集合的大小) 將會大於<xref:System.Collections.Generic.List%601.Capacity%2A>，則容量的<xref:System.Collections.Generic.List%601>自動重新配置內部的陣列，以容納新的項目，會增加，加入新項目之前，現有的項目會複製到新陣列。  
  
 如果`index`等於<xref:System.Collections.Generic.List%601.Count%2A>，項目結尾加入<xref:System.Collections.Generic.List%601>。  
  
 集合中項目的順序會保留在<xref:System.Collections.Generic.List%601>。  
  
 這個方法是 O (*n* * *m*) 作業，其中*n*是要加入的項目數和*m*是<xref:System.Collections.Generic.List%601.Count%2A>.  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.InsertRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。 已建立的清單，並填入的數個祥和，脫離不工廠吃恐龍名稱之後<xref:System.Collections.Generic.List%601.InsertRange%2A>方法用來插入清單中，索引位置 3 開始的三個兇猛肉吃恐龍的陣列。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要取得或設定之以零為起始的項目索引。</param>
        <summary>在指定的索引位置上取得或設定項目。</summary>
        <value>在指定索引上的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
 這個屬性可以使用下列語法提供存取集合中特定元素的能力：`myCollection[index]`。  
  
 擷取這個屬性的值是 o （1） 的作業;設定屬性，也是 o （1） 作業。  
  
   
  
## Examples  
 在本節中的範例會示範<xref:System.Collections.Generic.List%601.Item%2A>屬性 （C# 中為索引子） 和各種其他的屬性和方法<xref:System.Collections.Generic.List%601>泛型類別。 清單已建立並填入使用<xref:System.Collections.Generic.List%601.Add%2A>方法中，項目會擷取並顯示使用<xref:System.Collections.Generic.List%601.Item%2A>屬性。 (如需使用的範例<xref:System.Collections.Generic.List%601.Item%2A>屬性來設定元素的值清單，請參閱<xref:System.Collections.Generic.List%601.AsReadOnly%2A>。)  
  
> [!NOTE]
>  Visual Basic、 C# 和 c + + 所有具有存取語法<xref:System.Collections.Generic.List%601.Item%2A>屬性，且不使用它的名稱。 相反地，變數包含<xref:System.Collections.Generic.List%601>用於陣列一樣。  
  
 C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.Generic.List%601.Item%2A>屬性。 Visual Basic 會將 <xref:System.Collections.Generic.List%601.Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中最後一次出現某值之以零為起始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="list.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中最後一個相符項目之以零為起始的索引。</summary>
        <returns>如果找到的話，則為整個 <see cref="T:System.Collections.Generic.List`1" /> 中最後一次出現 <paramref name="item" /> 之以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>向後最後一個項目開始和結束時間的第一個項目搜尋。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。 最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋四個項目，索引位置 4 開始，並向後擴充的範圍 （也就是說，它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回-1，因為沒有搜尋的執行個體在該範圍內的字串。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="list.LastIndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="index">向後搜尋之以零為起始的起始索引。</param>
        <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個項目開始到指定的索引這段範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
        <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個元素開始到 <paramref name="index" /> 這段範圍內，如果有找到指定的 <paramref name="item" /> 最後一次出現的位置，則為該位置以零為起始的索引，如未找到則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>會搜尋回溯開始`index`和結束時間的第一個元素。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是從開頭的項目數<xref:System.Collections.Generic.List%601>至`index`。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。 最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋四個項目，索引位置 4 開始，並向後擴充的範圍 （也就是說，它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回-1，因為沒有搜尋的執行個體在該範圍內的字串。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="list.LastIndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <param name="index">向後搜尋之以零為起始的起始索引。</param>
        <param name="count">區段中要搜尋的項目數目。</param>
        <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定個數項目且結尾位於指定索引的範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
        <returns>如果找到，則為 <see cref="T:System.Collections.Generic.List`1" /> 中包含 <paramref name="count" /> 個元素且結束於 <paramref name="index" /> 的元素範圍內，<paramref name="item" /> 的最後一個相符項目之以零為起始的索引，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>會搜尋回溯開始`index`結尾`index`減去`count`再加上 1，如果`count`大於 0。  
  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是`count`。  
  
   
  
## Examples  
 下列範例示範的所有三個多載<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。 A<xref:System.Collections.Generic.List%601>的字串會建立，並會出現兩次，在索引位置 0 和 5 的索引位置的一個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法多載搜尋結束時，從的完整清單，並尋找該字串的第二個項目。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法多載用來搜尋開頭為 3 的索引位置，讓它在清單中尋找第一個字串的清單中的開頭繼續與舊版的清單。 最後，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法多載用來搜尋一組 4 個項目，索引位置 4 開始，並向後擴充 （也就是它會搜尋在位置 4、 3、 2 和 1 的項目）; 此搜尋會傳回-1，因為沒有搜尋的執行個體在該範圍內的字串。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 超出 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍。  
  
-或- 
 <paramref name="count" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.Generic.List`1" /> 的有效區段。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="list.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要從 <see cref="T:System.Collections.Generic.List`1" /> 移除的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Collections.Generic.List`1" /> 移除特定物件之第一個符合的元素。</summary>
        <returns>如果成功移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。  如果在 <see langword="false" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果型別`T`會實作<xref:System.IEquatable%601>泛型介面，等號比較子會是<xref:System.IEquatable%601.Equals%2A>方法，該介面; 的預設相等比較子是的否則為<xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 下列範例示範<xref:System.Collections.Generic.List%601.Remove%2A>方法。 數個屬性和方法<xref:System.Collections.Generic.List%601>泛型類別用來新增、 插入及搜尋清單。 這些作業之後，此清單包含重複。 <xref:System.Collections.Generic.List%601.Remove%2A>方法用來移除重複的項目，第一個執行個體，並顯示內容。 <xref:System.Collections.Generic.List%601.Remove%2A>方法一律會移除第一個遇到的執行個體。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; int" Usage="list.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><see cref="T:System.Predicate`1" /> 委派，定義要移除項目的條件。</param>
        <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
        <returns><see cref="T:System.Collections.Generic.List`1" /> 中已移除的項目數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及符合條件的項目會自<xref:System.Collections.Generic.List%601>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.RemoveAll%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。  
  
 A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。 此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，和<xref:System.Collections.Generic.List%601.FindAll%2A>方法用來在清單中搜尋的搜尋述詞的方法。  
  
 <xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用來移除結尾"saurus"的所有項目。 從一開始，再傳遞給每個項目周遊清單`EndsWithSaurus`方法。 如果已移除的項目`EndsWithSaurus`方法會傳回`true`。  
  
> [!NOTE]
>  在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。 這些語言推斷正確的委派，從內容，並自動建立。  
  
 最後，<xref:System.Collections.Generic.List%601.Exists%2A>方法會驗證是否在清單中的沒有任何結尾為"saurus 」。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="list.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">移除項目之以零為起始的索引。</param>
        <summary>移除 <see cref="T:System.Collections.Generic.List`1" /> 中指定之索引處的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Collections.Generic.List%601.RemoveAt%2A>移除項目，在清單中其餘的項目會重新編號來取代移除的項目。 比方說，如果您移除位於索引 3 的項目時，索引 4 的項目移至 3 個位置。 此外，在清單中的項目數 (表示的<xref:System.Collections.Generic.List%601.Count%2A>屬性) 會減 1。  
  
 這個方法是 O (*n*) 運算，其中*n*是 (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)。  
  
   
  
## Examples  
 下列範例示範如何新增、 移除和插入的簡單商務物件<xref:System.Collections.Generic.List%601>。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="list.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除之項目範圍內之以零為起始的起始索引。</param>
        <param name="count">要移除的項目數目。</param>
        <summary>從 <see cref="T:System.Collections.Generic.List`1" /> 移除的項目範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 移除項目，而且遵守這些建議中的所有元素<xref:System.Collections.Generic.List%601>有降低其索引`count`。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.RemoveRange%2A>以及各種其他方法的<xref:System.Collections.Generic.List%601>處理範圍的類別。 已建立的清單，並修改之後<xref:System.Collections.Generic.List%601.RemoveRange%2A>方法用來從清單中，索引位置 2 開始移除兩個項目。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>反轉 <see cref="T:System.Collections.Generic.List`1" /> 或其中一部分中項目的順序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="list.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>反轉整個 <see cref="T:System.Collections.Generic.List`1" /> 中項目的順序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>元素的順序相反。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例將示範這兩個多載<xref:System.Collections.Generic.List%601.Reverse%2A>方法。 此範例會建立<xref:System.Collections.Generic.List%601>的字串，並將六個字串。 <xref:System.Collections.Generic.List%601.Reverse>方法多載來反轉清單中，然後<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法多載來反轉清單中，開頭為 1 的項目，包含四個元素的中間。  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; unit" Usage="list.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要反向範圍內之以零為起始的起始索引。</param>
        <param name="count">要反向範圍中的項目數。</param>
        <summary>反向指定範圍中項目的順序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>元素的順序相反。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例將示範這兩個多載<xref:System.Collections.Generic.List%601.Reverse%2A>方法。 此範例會建立<xref:System.Collections.Generic.List%601>的字串，並將六個字串。 <xref:System.Collections.Generic.List%601.Reverse>方法多載來反轉清單中，然後<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法多載來反轉清單中，開頭為 1 的項目，包含四個元素的中間。  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用指定的或預設的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作或提供的 <see cref="T:System.Comparison`1" /> 委派來比較清單元素，以排序 <see cref="T:System.Collections.Generic.List`1" /> 中的元素或元素的部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="list.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用預設的比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型別的`T`來決定清單項目的順序。 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>屬性檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，適用於內省式排序，如下所示：  
  
-   如果分割區大小是 16 個項目，它會使用插入排序演算法。  
  
-   如果資料分割數目超過 2 個記錄檔*n*，其中*n*是範圍的輸入陣列中，它會使用 Heapsort 演算法。  
  
-   否則，它會使用快速排序演算法。  
  
 此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。 相反地，穩定的排序會保留相等項目的順序。  
  
 平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。  
  
   
  
## Examples  
 下列範例將某些名稱加入`List<String>`物件，會顯示未排序的順序，清單便會呼叫<xref:System.Collections.Generic.List%601.Sort%2A>方法，然後顯示已排序的清單。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 下列程式碼示範<xref:System.Collections.Generic.List%601.Sort>和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>簡單商務物件上的方法多載。 呼叫<xref:System.Collections.Generic.List%601.Sort>方法會產生做為部分類型，使用預設比較子和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>方法藉由使用匿名方法。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載。 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。 清單是顯示、 排序，並且再次顯示。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法多載則用來搜尋不在清單中，兩個字串和<xref:System.Collections.Generic.List%601.Insert%2A>方法用來將其插入。 傳回值<xref:System.Collections.Generic.List%601.BinarySearch%2A>方法是在每個案例中，負數的因為字串不在清單中。 採取的位元補數 (~ 運算子在 C# 和 Visual c + +， `Xor` Visual Basic 中的-1) 的這個負數的數字會產生此位置是大於搜尋字串，並插入清單中的第一個元素的索引會保留排序順序。 第二個搜尋字串大於任何項目在清單中，所以位於清單結尾的插入位置。  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
        <summary>使用指定的比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>實作。  
  
 如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，適用於內省式排序，如下所示：  
  
-   如果分割區大小是 16 個項目，它會使用插入排序演算法。  
  
-   如果資料分割數目超過 2 個記錄檔*n*，其中*n*是範圍的輸入陣列中，它會使用 Heapsort 演算法。  
  
-   否則，它會使用快速排序演算法。  
  
 此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。 相反地，穩定的排序會保留相等項目的順序。  
  
 平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。  
  
 此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。 比較子的運作方式，如下所示：第一次，針對測試比較元`null`，而且為 null 參考被視為少於一個非 null。 第二，比較字串的長度，和較長的字串會被視為更高。 第三，如果長度相等，就會使用一般的字串比較。  
  
 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。 清單會顯示，使用替代的比較子，排序並且再次顯示。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載則用來搜尋不在清單中，採用替代的比較子的數個字串。 <xref:System.Collections.Generic.List%601.Insert%2A>方法用來插入字串。 這兩種方法都位於名為函式`SearchAndInsert`，以及程式碼，要採取的位元補數 (~ 運算子在 C# 和 Visual c + + 中， `Xor` -1，在 Visual Basic 中的) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>，做為索引插入新的字串。  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="list.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
        <summary>使用指定的 <see cref="T:System.Comparison`1" /> 來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`comparison`提供的項目<xref:System.Collections.Generic.List%601>seřazeny 使用委派所表示的方法。  
  
 如果`comparison`已`null`、<xref:System.ArgumentNullException>就會擲回。  
  
 這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，套用內省式排序，如下所示：  
  
-   如果分割區大小為 16 個項目，則會使用插入排序演算法  
  
-   如果資料分割數目超過 2 個記錄檔*n*，其中*n*範圍的輸入陣列中，它會使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)演算法。  
  
-   否則，它會使用快速排序演算法。  
  
 此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。 相反地，穩定的排序會保留相等項目的順序。  
  
 平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。  
  
   
  
## Examples  
 下列程式碼示範<xref:System.Collections.Generic.List%601.Sort%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>簡單商務物件上的方法多載。 呼叫<xref:System.Collections.Generic.List%601.Sort%2A>方法會產生做為部分類型，使用預設比較子和<xref:System.Collections.Generic.List%601.Sort%2A>使用匿名方法實作方法。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>方法多載。  
  
 此範例會定義名為字串的替代的比較方法`CompareDinosByLength`。 這個方法的運作方式，如下所示：第一次，針對測試比較元`null`，而且為 null 參考被視為少於一個非 null。 第二，比較字串的長度，和較長的字串會被視為更高。 第三，如果長度相等，就會使用一般的字串比較。  
  
 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有四個字串，不依特定順序。 清單也會包含空字串和 null 參考。 清單會顯示使用排序<xref:System.Comparison%601>代表的泛型委派`CompareDinosByLength`方法，並再次顯示。  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="comparison" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="comparison" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparison" /> 可能不會傳回 0。</exception>
        <altmember cref="T:System.Comparison`1" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">要排序範圍內之以零為起始的起始索引。</param>
        <param name="count">要排序的範圍長度。</param>
        <param name="comparer">比較項目時要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或 <see langword="null" /> 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
        <summary>使用指定的比較子對 <see cref="T:System.Collections.Generic.List`1" /> 中某段範圍內的項目進行排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`comparer`提供的項目<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>實作。  
  
 如果`comparer`已`null`，預設比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable%601>泛型介面，並使用該實作中，如果有的話。  否則，請<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>檢查是否輸入`T`實作<xref:System.IComparable>介面。  如果型別`T`未實作其中一個介面，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>就會擲回<xref:System.InvalidOperationException>。  
  
 這個方法會使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，套用內省式排序，如下所示：  
  
-   如果分割區大小為 16 個項目，則會使用插入排序演算法  
  
-   如果資料分割數目超過 2 個記錄檔*n*，其中*n*範圍的輸入陣列中，它會使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)演算法。  
  
-   否則，它會使用快速排序演算法。  
  
 此實作會執行不穩定的排序;也就是說，如果兩個項目相等，可能不會保留它們的順序。 相反地，穩定的排序會保留相等項目的順序。  
  
 平均而言，這個方法是 O (*n*記錄檔*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最壞的情況是 O (*n* <sup>2</sup>) 作業。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法多載。  
  
 此範例會定義名為 DinoCompare，它會實作的字串替代比較子`IComparer<string>`(`IComparer(Of String)` Visual Basic 中`IComparer<String^>`Visual c + +) 泛型介面。 比較子的運作方式，如下所示：第一次，針對測試比較元`null`，而且為 null 參考被視為少於一個非 null。 第二，比較字串的長度，和較長的字串會被視為更高。 第三，如果長度相等，就會使用一般的字串比較。  
  
 A<xref:System.Collections.Generic.List%601>的字串會建立並填入具有五個 herbivorous 恐龍和三個肉食恐龍的名稱。 每兩個群組的名稱不是任何特定的排序順序。 清單會顯示、 使用替代的比較子，來排序的草食範圍和清單會顯示一次。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus 「 搜尋範圍是從草食然後使用方法多載。 找不到字串，以及位元補數 (~ 運算子在 C# 和 Visual c + + 中，`Xor`在 Visual Basic 中的-1) 所傳回的負數的<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法做為索引插入新的字串。  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="count" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。  
  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> 為 <see langword="null" />，而且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 類型的 <see cref="T:System.IComparable" /> 介面。</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
        <value>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 唯讀的集合不允許在集合建立後增加、移除或修改項目。  
  
 是唯讀的集合是可防止修改集合的包裝函式集合因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看集合的列舉值。</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 在這個位置，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>未定義屬性。 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.Generic.IEnumerator%601.Current%2A>。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>呼叫。 <xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。 您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。 若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。  
  
 這個方法是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="arrayIndex"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
        <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  如果來源的類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型`array`，實作非泛型<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>擲回<xref:System.InvalidCastException>，而泛型實作擲回<xref:System.ArgumentException>。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小於 0。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> 是多維的。  
  
-或- 
 <paramref name="array" /> 沒有以零為起始的索引。  
  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 中的項目數大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。  
  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
        <value>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。  
  
 透過集合進行列舉在本質上並非安全執行緒程序。  在極少數的案例，其中列舉競用權限寫入，您可以鎖定整個列舉期間的集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。 同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
        <value>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。  在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回目前的執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。  
  
 透過集合進行列舉在本質上並非安全執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。 同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。 下列程式碼示範如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的屬性。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看集合的列舉值。</summary>
        <returns><see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。  在這個位置，<xref:System.Collections.IEnumerator.Current%2A>未定義屬性。 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>列舉值前進到第一個項目，再讀取的值集合的方法<xref:System.Collections.IEnumerator.Current%2A>。  
  
 <xref:System.Collections.IEnumerator.Current%2A>屬性會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>呼叫。 <xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。 若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空間中集合的預設實作未同步處理。  
  
 這個方法是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
        <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
        <returns>插入新項目的位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.Generic.List%601.Count%2A>是小於<xref:System.Collections.Generic.List%601.Capacity%2A>，這個方法是 o （1） 作業。 如果容量需要增加，以容納新的項目，這個方法會變成 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> 所屬類型無法指派給 <see cref="T:System.Collections.IList" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
        <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
        <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
        <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
        <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> 所屬類型無法指派給 <see cref="T:System.Collections.IList" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
        <param name="item">要插入 <see cref="T:System.Collections.IList" /> 的物件。</param>
        <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `index` 等於 <xref:System.Collections.IList> 中的項目數目，則會將 `item` 附加至結尾。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> 所屬類型無法指派給 <see cref="T:System.Collections.IList" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
        <value>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 具有固定大小的集合不允許在集合建立後新增或移除項目，但允許對現有項目進行修改。  
  
 具有固定大小集合是唯讀的集合只會防止新增和移除項目; 的包裝函式因此，如果變更基礎的集合，包括新增或移除項目，固定大小的集合會反映這些變更。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
        <value>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 唯讀的集合不允許在集合建立後增加、移除或修改項目。  
  
 是唯讀的集合是可防止修改集合的包裝函式集合因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要取得或設定之以零為起始的項目索引。</param>
        <summary>在指定的索引位置上取得或設定項目。</summary>
        <value>在指定索引上的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 C# 語言[這](~/docs/csharp/language-reference/keywords/this.md)關鍵字來定義索引，而不必實作<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>屬性。 Visual Basic 會將 <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。  
  
 擷取這個屬性的值是 o （1） 的作業;設定屬性，也是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
        <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，清單中值的類型。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> 所屬類型無法指派給 <see cref="T:System.Collections.IList" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="list.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Collections.Generic.List`1" /> 的項目複製到新的陣列。</summary>
        <returns>含有 <see cref="T:System.Collections.Generic.List`1" /> 的項目複本的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用複製項目的<xref:System.Array.Copy%2A?displayProperty=nameWithType>，這是 O (*n*) 作業，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.ToArray%2A>以及的其他方法<xref:System.Collections.Generic.List%601>處理範圍的類別。 在此範例中，結尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用來從清單中，開頭的索引位置 2 取得三個項目。 <xref:System.Collections.Generic.List%601.ToArray%2A>方法呼叫所產生的<xref:System.Collections.Generic.List%601>，建立三個元素的陣列。 陣列的元素會顯示。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="list.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將容量設為 <see cref="T:System.Collections.Generic.List`1" /> 中項目的實際數目，如果該數目小於臨界值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。 重新配置及複製大型的成本<xref:System.Collections.Generic.List%601>不過，可能相當大，因此<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法不執行任何動作，如果清單是在多個容量的 90%。 這可避免產生大型的重新配置成本相對較小的改善。  
  
> [!NOTE]
>  90%的目前閾值可能在未來版本中變更。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 若要重設<xref:System.Collections.Generic.List%601>設為初始狀態，呼叫<xref:System.Collections.Generic.List%601.Clear%2A>方法之前呼叫<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。 修剪空白<xref:System.Collections.Generic.List%601>設定的容量<xref:System.Collections.Generic.List%601>預設容量。  
  
 容量也可以設定使用<xref:System.Collections.Generic.List%601.Capacity%2A>屬性。  
  
   
  
## Examples  
 下列範例示範如何檢查的容量和計數<xref:System.Collections.Generic.List%601>包含簡單商務物件，以及說明如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以移除額外的容量。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 下列範例示範<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。 數個屬性和方法<xref:System.Collections.Generic.List%601>類別用來新增、 插入和移除字串的清單中的項目。 然後<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用來減少容量以符合的計數，而<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>屬性會顯示。 如果未使用的容量已低於 10%的總容量，清單會不具有已調整大小。 最後，會清除清單的內容。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="list.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><see cref="T:System.Predicate`1" /> 委派，可定義檢查項目所根據的條件。</param>
        <summary>判斷 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個項目是否符合指定之述詞所定義的條件。</summary>
        <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個項目都符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果清單中沒有項目，則傳回值為 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>會傳回方法的委派`true`物件傳遞給是否符合委派中定義的條件。  目前的項目<xref:System.Collections.Generic.List%601>個別傳遞給<xref:System.Predicate%601>委派，以及處理在委派傳回時停止`false`的任何項目。 項目會依序處理，並在單一執行緒上進行所有的呼叫。  
  
 這個方法是 O (*n*) 運算，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。  
  
   
  
## Examples  
 下列範例示範<xref:System.Collections.Generic.List%601.TrueForAll%2A>以及數個使用其他方法<xref:System.Predicate%601>泛型委派。  
  
 A<xref:System.Collections.Generic.List%601>的字串建立時，包含 8 恐龍名稱，其中 （位置 1 和 5） 的兩個結尾為"saurus 」。 此範例也會定義名為的搜尋述詞方法`EndsWithSaurus`、 可接受字串參數和傳回布林值，指出是否 「 saurus"輸入的字串結尾。  
  
 <xref:System.Collections.Generic.List%601.TrueForAll%2A>方法會周遊清單開始，再傳遞給每個項目`EndsWithSaurus`方法。 搜尋停止的時機`EndsWithSaurus`方法會傳回`false`。  
  
> [!NOTE]
>  在 C# 和 Visual Basic 中，它不需要建立`Predicate<string>`委派 (`Predicate(Of String)` Visual Basic 中) 明確。 這些語言推斷正確的委派，從內容，並自動建立。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="match" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>