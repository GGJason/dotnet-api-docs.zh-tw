<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="690ad4f093ad4aa2b1bb2a2e064be068d437aeec" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52356075" /></Metadata><TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">指定佇列中項目的類型。</typeparam>
    <summary>表示物件的先進先出 (FIFO) 集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會實作一般的佇列，以循環的陣列。 物件儲存在<xref:System.Collections.Generic.Queue%601>其中一端插入和移除其他。 佇列和堆疊時很有用的資訊; 需暫存儲存體也就是當您可能想要擷取其值之後捨棄項目。 使用<xref:System.Collections.Generic.Queue%601>如果您需要存取相同的順序，將它儲存在集合中的資訊。 使用<xref:System.Collections.Generic.Stack%601>如果您要以相反順序存取的資訊。 使用<xref:System.Collections.Concurrent.ConcurrentQueue%601>或<xref:System.Collections.Concurrent.ConcurrentStack%601>如果您需要從多個執行緒同時存取集合。  
  
 三個主要的作業可對<xref:System.Collections.Generic.Queue%601>和其項目：  
  
-   <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 將項目加入至結尾<xref:System.Collections.Generic.Queue%601>。  
  
-   <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 從開頭移除最舊的項目<xref:System.Collections.Generic.Queue%601>。  
  
-   <xref:System.Collections.Generic.Queue%601.Peek%2A> 預覽會傳回最舊的項目，是在開頭<xref:System.Collections.Generic.Queue%601>但不會移除從<xref:System.Collections.Generic.Queue%601>。  
  
 營運<xref:System.Collections.Generic.Queue%601>是的項目數<xref:System.Collections.Generic.Queue%601>可以保存。 當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。  
  
 <xref:System.Collections.Generic.Queue%601> 接受`null`參考有效的值類型，並允許重複的項目。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別。 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。 不保證任何執行個體成員是安全執行緒。  
  
A<see cref="T:System.Collections.Generic.Queue`1" />可支援多個讀取器同時，只要不修改集合。  即便如此，透過集合列舉是本質上並非安全執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。 當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。  
  
 如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。  
  
 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。  
  
 這個建構函式是 o （1） 的作業。  
  
   
  
## Examples  
 下列程式碼範例示範這個建構函式，以及數種其他方法的<xref:System.Collections.Generic.Queue%601>泛型類別。 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">集合，要將其項目複製至新的 <see cref="T:System.Collections.Generic.Queue`1" />。</param>
        <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，其包含從指定之集合複製的項目，且具有容納複製之項目數目的足夠容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。 當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。  
  
 如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。  
  
 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。  
  
 將元素複製到<xref:System.Collections.Generic.Queue%601>在相同的順序，而在讀取<xref:System.Collections.Generic.IEnumerator%601>的集合。  
  
 這個建構函式是 O (`n`) 運算，其中`n`是中的項目數`collection`。  
  
   
  
## Examples  
 下列程式碼範例示範這個建構函式，以及數種其他方法的<xref:System.Collections.Generic.Queue%601>泛型類別。 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : int -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始項目數。</param>
        <summary>為具有指定初始容量且為空的 <see cref="T:System.Collections.Generic.Queue`1" /> 類別，初始化新的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。 當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。  
  
 如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。  
  
 藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。  
  
 這個建構函式是 O (`n`) 運算，其中`n`是`capacity`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> 小於零。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從 <see cref="T:System.Collections.Generic.Queue`1" /> 移除所有物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Queue%601.Count%2A> 是設為零，並且從項目集合中的其他物件的參考也釋出。  
  
 容量會維持不變。 若要重設的容量<xref:System.Collections.Generic.Queue%601>，呼叫<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。 修剪空白<xref:System.Collections.Generic.Queue%601>設定的容量<xref:System.Collections.Generic.Queue%601>預設容量。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Clear%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="queue.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>判斷某項目是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</summary>
        <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Generic.Queue`1" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，佇列中的值型別。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Contains%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="queue.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Queue`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="arrayIndex"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
        <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Queue`1" /> 項目至現有一維 <see cref="T:System.Array" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.Queue%601>。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Queue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的項目數。</summary>
        <value><see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的項目數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 營運<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以儲存。 <xref:System.Collections.Generic.Queue%601.Count%2A> 是實際的項目數<xref:System.Collections.Generic.Queue%601>。  
  
 容量永遠是大於或等於<xref:System.Collections.Generic.Queue%601.Count%2A>。 如果<xref:System.Collections.Generic.Queue%601.Count%2A>超過容量加入元素時，會自動將舊的項目複製並加入新項目之前，重新配置內部陣列增加容量。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
   
  
## Examples  
 下列程式碼範例示範數個屬性和方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Count%2A>屬性。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; 'T" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除並傳回在 <see cref="T:System.Collections.Generic.Queue`1" /> 開頭的物件。</summary>
        <returns>從 <see cref="T:System.Collections.Generic.Queue`1" /> 的開頭移除的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法與 <xref:System.Collections.Generic.Queue%601.Peek%2A> 方法類似，但是 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Queue%601>。  
  
 如果型別`T`是參考型別`null`可以加入至<xref:System.Collections.Generic.Queue%601>做為值。  
  
 這個方法是 o （1） 作業。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="queue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的物件。 參考類型的值可以是 <see langword="null" />。</param>
        <summary>將物件加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的末端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.Generic.Queue%601.Count%2A>已等於容量的容量<xref:System.Collections.Generic.Queue%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。  
  
 如果<xref:System.Collections.Generic.Queue%601.Count%2A>小於比內部陣列的容量，這個方法是 o （1） 作業。 如果內部陣列需要重新配置以便容納新的項目，這個方法會變成 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Enqueue%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Queue&lt;'T&gt;.Enumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回在 <see cref="T:System.Collections.Generic.Queue`1" /> 中逐一查看的列舉值。</summary>
        <returns><see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Queue`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 在這個位置上，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 並未定義。 因此，在讀取 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>。 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>是未定義。 您不能再次將 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或是<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>就會擲回<xref:System.InvalidOperationException>。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。 若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。  
  
 這個方法是 o （1） 作業。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Collections.Generic.Queue%601>是可列舉的泛型類別。 `foreach`陳述式 (`For Each` Visual Basic 中`for each`c + + 中) 用來列舉佇列。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.Generic.Queue`1" /> 開頭的物件而不移除它。</summary>
        <returns>在 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法與 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 方法類似，但是 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Queue%601>。  
  
 如果型別`T`是參考型別`null`可以加入至<xref:System.Collections.Generic.Queue%601>做為值。  
  
 這個方法是 o （1） 作業。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Peek%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看集合的列舉值。</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 在這個位置上，<xref:System.Collections.Generic.IEnumerator%601.Current%2A> 並未定義。 因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。 您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。 若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。  
  
 這個方法是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="index"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
        <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  如果來源的類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型`array`，實作非泛型<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>擲回<xref:System.InvalidCastException>，而泛型實作擲回<xref:System.ArgumentException>。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> 是多維的。  
  
-或- 
 <paramref name="array" /> 沒有以零為起始的索引。  
  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 中的項目數大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。  
  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
        <value>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。  
  
 透過集合進行列舉在本質上並非安全執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 會傳回物件，該物件可用來同步處理對 <xref:System.Collections.ICollection> 的存取。 同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
        <value>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。  在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，這個屬性一律會傳回目前的執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。  
  
 透過集合進行列舉在本質上並非安全執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 會傳回物件，該物件可用來同步處理對 <xref:System.Collections.ICollection> 的存取。 同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。 下列程式碼示範如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的屬性。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As IColletion = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看集合的列舉值。</summary>
        <returns><see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 語言的陳述式 (`for each` c + + `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。 因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。  在這個位置上，<xref:System.Collections.IEnumerator.Current%2A> 並未定義。 因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。 <xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。 若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。 
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。  
  
 這個方法是 o （1） 作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Collections.Generic.Queue`1" /> 項目複製到新的陣列。</summary>
        <returns>新的陣列，包含複製自 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Queue%601>則不會修改。 新陣列中項目的順序是從開頭項目的順序相同<xref:System.Collections.Generic.Queue%601>至它的結尾。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.ToArray%2A>方法。  
  
 在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。 列舉佇列的項目，這不會變更佇列的狀態。 <xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。 <xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。  
  
 <xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。 複製的項目會顯示。  
  
 兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。 <xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。  
  
 <xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="queue.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果該數目小於目前容量的 90%，則將容量設為 <see cref="T:System.Collections.Generic.Queue`1" /> 中項目的實際數目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。 重新配置及複製大型的成本<xref:System.Collections.Generic.Queue%601>不過，可能相當大，因此<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>方法不執行任何動作，如果清單是在多個容量的 90%。 這可避免產生大型的重新配置成本相對較小的改善。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。  
  
 若要重設<xref:System.Collections.Generic.Queue%601>設為初始狀態，呼叫<xref:System.Collections.Generic.Queue%601.Clear%2A>方法之前呼叫<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>方法。 修剪空白<xref:System.Collections.Generic.Queue%601>設定的容量<xref:System.Collections.Generic.Queue%601>預設容量。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue :  -&gt; bool" Usage="queue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="queue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>