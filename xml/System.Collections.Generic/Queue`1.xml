<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4dac260efa6a1f35aebfdca5027aaf2e97b9e283" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59355055" /></Metadata><TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="49177-101">指定佇列中元素的類型。</span><span class="sxs-lookup"><span data-stu-id="49177-101">Specifies the type of elements in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="49177-102">表示物件的先進先出 (FIFO) 集合。</span><span class="sxs-lookup"><span data-stu-id="49177-102">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-103">這個類別會實作一般的佇列，以循環的陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-103">This class implements a generic queue as a circular array.</span></span> <span data-ttu-id="49177-104">物件儲存在<xref:System.Collections.Generic.Queue%601>其中一端插入和移除其他。</span><span class="sxs-lookup"><span data-stu-id="49177-104">Objects stored in a <xref:System.Collections.Generic.Queue%601> are inserted at one end and removed from the other.</span></span> <span data-ttu-id="49177-105">佇列和堆疊時很有用的資訊; 需暫存儲存體也就是當您可能想要擷取其值之後捨棄項目。</span><span class="sxs-lookup"><span data-stu-id="49177-105">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="49177-106">使用<xref:System.Collections.Generic.Queue%601>如果您需要存取相同的順序，將它儲存在集合中的資訊。</span><span class="sxs-lookup"><span data-stu-id="49177-106">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="49177-107">使用<xref:System.Collections.Generic.Stack%601>如果您要以相反順序存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="49177-107">Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order.</span></span> <span data-ttu-id="49177-108">使用<xref:System.Collections.Concurrent.ConcurrentQueue%601>或<xref:System.Collections.Concurrent.ConcurrentStack%601>如果您需要從多個執行緒同時存取集合。</span><span class="sxs-lookup"><span data-stu-id="49177-108">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="49177-109">三個主要的作業可對<xref:System.Collections.Generic.Queue%601>和其項目：</span><span class="sxs-lookup"><span data-stu-id="49177-109">Three main operations can be performed on a <xref:System.Collections.Generic.Queue%601> and its elements:</span></span>  
  
-   <xref:System.Collections.Generic.Queue%601.Enqueue%2A> <span data-ttu-id="49177-110">將項目加入至結尾<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-110">adds an element to the end of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <xref:System.Collections.Generic.Queue%601.Dequeue%2A> <span data-ttu-id="49177-111">從開頭移除最舊的項目<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-111">removes the oldest element from the start of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <xref:System.Collections.Generic.Queue%601.Peek%2A> <span data-ttu-id="49177-112">預覽會傳回最舊的項目，是在開頭<xref:System.Collections.Generic.Queue%601>但不會移除從<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-112">peek returns the oldest element that is at the start of the <xref:System.Collections.Generic.Queue%601> but does not remove it from the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-113">營運<xref:System.Collections.Generic.Queue%601>是的項目數<xref:System.Collections.Generic.Queue%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="49177-113">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="49177-114">當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-114">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="49177-115">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <xref:System.Collections.Generic.Queue%601> <span data-ttu-id="49177-116">接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="49177-116">accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-117">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="49177-117">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="49177-118">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-118">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-119">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-119">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-120"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-120">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-121"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-121">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-122"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-122">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-123">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-123">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-124">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-124">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-125"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-125">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-126"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-126">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="49177-127">公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="49177-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="49177-128">不保證任何執行個體成員是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="49177-128">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="49177-129">A<see cref="T:System.Collections.Generic.Queue`1" />可支援多個讀取器同時，只要不修改集合。</span><span class="sxs-lookup"><span data-stu-id="49177-129">A <see cref="T:System.Collections.Generic.Queue`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="49177-130">即便如此，透過集合列舉是本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="49177-131">安全執行緒的佇列，請參閱<see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />。</span><span class="sxs-lookup"><span data-stu-id="49177-131">For a thread-safe queue, see <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="49177-132">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="49177-132">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-133">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</span><span class="sxs-lookup"><span data-stu-id="49177-133">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-134">容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="49177-134">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="49177-135">當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-135">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="49177-136">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-136">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-137">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-137">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="49177-138">這個建構函式是 o （1） 的作業。</span><span class="sxs-lookup"><span data-stu-id="49177-138">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-139">下列程式碼範例示範這個建構函式，以及數種其他方法的<xref:System.Collections.Generic.Queue%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="49177-139">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="49177-140">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-140">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-141">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-141">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-142"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-142">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-143"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-143">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-144"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-144">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-145">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-145">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-146">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-146">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-147"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-147">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-148"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-148">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="49177-149">集合，要將其項目複製至新的 <see cref="T:System.Collections.Generic.Queue`1" />。</span><span class="sxs-lookup"><span data-stu-id="49177-149">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></param>
        <summary><span data-ttu-id="49177-150">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，其包含從指定之集合複製的元素，且具有容納複製之元素數目的足夠容量。</span><span class="sxs-lookup"><span data-stu-id="49177-150">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-151">容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="49177-151">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="49177-152">當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-152">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="49177-153">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-153">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-154">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-154">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="49177-155">將元素複製到<xref:System.Collections.Generic.Queue%601>在相同的順序，而在讀取<xref:System.Collections.Generic.IEnumerator%601>的集合。</span><span class="sxs-lookup"><span data-stu-id="49177-155">The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="49177-156">這個建構函式是 O (`n`) 運算，其中`n`是中的項目數`collection`。</span><span class="sxs-lookup"><span data-stu-id="49177-156">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-157">下列程式碼範例示範這個建構函式，以及數種其他方法的<xref:System.Collections.Generic.Queue%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="49177-157">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="49177-158">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-158">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-159">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-159">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-160"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-160">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-161"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-161">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-162"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-162">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-163">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-163">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-164">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-164">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-165"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-165">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-166"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-166">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> <span data-ttu-id="49177-167">是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49177-167">is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : int -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="49177-168"><see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始項目數。</span><span class="sxs-lookup"><span data-stu-id="49177-168">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="49177-169">為具有指定初始容量且為空的 <see cref="T:System.Collections.Generic.Queue`1" /> 類別，初始化新的執行個體。</span><span class="sxs-lookup"><span data-stu-id="49177-169">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-170">容量<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="49177-170">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="49177-171">當項目新增至<xref:System.Collections.Generic.Queue%601>，自動增加容量的要求以重新配置內部陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-171">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="49177-172">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-172">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-173">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-173">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="49177-174">這個建構函式是 O (`n`) 運算，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="49177-174">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> <span data-ttu-id="49177-175">小於零。</span><span class="sxs-lookup"><span data-stu-id="49177-175">is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-176">從 <see cref="T:System.Collections.Generic.Queue`1" /> 移除所有物件。</span><span class="sxs-lookup"><span data-stu-id="49177-176">Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Queue%601.Count%2A> <span data-ttu-id="49177-177">是設為零，並且從項目集合中的其他物件的參考也釋出。</span><span class="sxs-lookup"><span data-stu-id="49177-177">is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="49177-178">容量會維持不變。</span><span class="sxs-lookup"><span data-stu-id="49177-178">The capacity remains unchanged.</span></span> <span data-ttu-id="49177-179">若要重設的容量<xref:System.Collections.Generic.Queue%601>，呼叫<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-179">To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span> <span data-ttu-id="49177-180">修剪空白<xref:System.Collections.Generic.Queue%601>設定的容量<xref:System.Collections.Generic.Queue%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="49177-180">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="49177-181">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-181">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-182">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Clear%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-182">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="49177-183">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-183">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-184">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-184">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-185"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-185">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-186"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-186">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-187"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-187">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-188">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-188">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-189">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-189">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-190"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-190">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-191"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-191">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="queue.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="49177-192">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-192">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="49177-193">參考類型的值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49177-193">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="49177-194">判斷某項目是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</span><span class="sxs-lookup"><span data-stu-id="49177-194">Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="49177-195">如果在 <see cref="T:System.Collections.Generic.Queue`1" /> 中找到 <paramref name="item" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49177-195">if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-196">這個方法會判斷使用的預設相等比較子的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>針對`T`，佇列中的值型別。</span><span class="sxs-lookup"><span data-stu-id="49177-196">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the queue.</span></span>  
  
 <span data-ttu-id="49177-197">這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-197">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-198">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Contains%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-198">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="49177-199">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-199">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-200">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-200">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-201"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-201">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-202"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-202">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-203"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-203">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-204">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-204">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-205">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-205">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-206"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-206">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-207"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-207">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="49177-208">執行不區分文化特性的字串作業</span><span class="sxs-lookup"><span data-stu-id="49177-208">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="queue.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="49177-209">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Queue`1" /> 複製過來之項目的目的端。</span><span class="sxs-lookup"><span data-stu-id="49177-209">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="49177-210"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="49177-210">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="49177-211"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</span><span class="sxs-lookup"><span data-stu-id="49177-211">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="49177-212">從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Queue`1" /> 元素至現有一維 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="49177-212">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-213">將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-213">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-214">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-214">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="49177-215">是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49177-215">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> <span data-ttu-id="49177-216">小於零。</span><span class="sxs-lookup"><span data-stu-id="49177-216">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="49177-217">來源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="49177-217">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Queue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49177-218">取得 <see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="49177-218">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <value><span data-ttu-id="49177-219"><see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="49177-219">The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-220">營運<xref:System.Collections.Generic.Queue%601>是的項目數，<xref:System.Collections.Generic.Queue%601>可以儲存。</span><span class="sxs-lookup"><span data-stu-id="49177-220">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store.</span></span> <xref:System.Collections.Generic.Queue%601.Count%2A> <span data-ttu-id="49177-221">是實際的項目數<xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-221">is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-222">容量永遠是大於或等於<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-222">The capacity is always greater than or equal to <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span> <span data-ttu-id="49177-223">如果<xref:System.Collections.Generic.Queue%601.Count%2A>超過容量加入元素時，會自動將舊的項目複製並加入新項目之前，重新配置內部陣列增加容量。</span><span class="sxs-lookup"><span data-stu-id="49177-223">If <xref:System.Collections.Generic.Queue%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="49177-224">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="49177-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-225">下列程式碼範例示範數個屬性和方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Count%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="49177-225">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="49177-226">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-226">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-227">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-227">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-228"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-228">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-229"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-229">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-230"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-230">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-231">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-231">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-232">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-232">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-233"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-233">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-234"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-234">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; 'T" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-235">移除並傳回在 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-235">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="49177-236">從 <see cref="T:System.Collections.Generic.Queue`1" /> 前端移除的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-236">The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-237">這個方法與 <xref:System.Collections.Generic.Queue%601.Peek%2A> 方法類似，但是 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-237">This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-238">如果型別`T`是參考型別`null`可以加入至<xref:System.Collections.Generic.Queue%601>做為值。</span><span class="sxs-lookup"><span data-stu-id="49177-238">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="49177-239">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-239">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-240">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-240">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method.</span></span>  
  
 <span data-ttu-id="49177-241">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-241">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-242">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-242">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-243"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-243">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-244"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-244">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-245"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-245">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-246">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-247">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-247">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-248"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-248">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-249"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-249">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="49177-250"><see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-250">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="queue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="49177-251">要加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-251">The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="49177-252">參考類型的值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49177-252">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="49177-253">將物件加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的末端。</span><span class="sxs-lookup"><span data-stu-id="49177-253">Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-254">如果<xref:System.Collections.Generic.Queue%601.Count%2A>已等於容量的容量<xref:System.Collections.Generic.Queue%601>會加上自動重新配置內部的陣列，並加入新項目之前，現有的項目會複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-254">If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="49177-255">如果<xref:System.Collections.Generic.Queue%601.Count%2A>小於比內部陣列的容量，這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-255">If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="49177-256">如果內部陣列需要重新配置以便容納新的項目，這個方法會變成 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-256">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-257">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Enqueue%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-257">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method.</span></span>  
  
 <span data-ttu-id="49177-258">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-258">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-259">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-259">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-260"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-260">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-261"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-261">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-262"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-262">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-263">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-263">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-264">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-264">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-265"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-265">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-266"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-266">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Queue&lt;'T&gt;.Enumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-267">傳回在 <see cref="T:System.Collections.Generic.Queue`1" /> 中逐一查看的列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-267">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="49177-268"><see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Queue`1" />。</span><span class="sxs-lookup"><span data-stu-id="49177-268">An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-269">`foreach`陳述式的C#語言 (`for each`在C++， `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="49177-269">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="49177-270">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-270">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="49177-271">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="49177-271">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="49177-272">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="49177-272">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="49177-273">在這個位置上，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-273">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-274">因此，在讀取 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-274">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> <span data-ttu-id="49177-275">會傳回相同的物件，直到<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="49177-275">returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> <span data-ttu-id="49177-276">設定<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>下一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-276">sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="49177-277">如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-277">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="49177-278">列舉值位於此位置，後續呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-278">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="49177-279">如果上次呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-279">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-280">您不能再次將 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="49177-280">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="49177-281">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="49177-281">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="49177-282">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或是<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="49177-282">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="49177-283">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-283">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="49177-284">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="49177-284">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="49177-285">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-285">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="49177-286">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-286">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="49177-287">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-287">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-288">下列程式碼範例示範<xref:System.Collections.Generic.Queue%601>是可列舉的泛型類別。</span><span class="sxs-lookup"><span data-stu-id="49177-288">The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable.</span></span> <span data-ttu-id="49177-289">`foreach`陳述式 (`For Each`在 Visual Basic`for each`在C++) 用來列舉佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-289">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="49177-290">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-290">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-291">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-291">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-292"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-292">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-293"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-293">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-294"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-294">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-295">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-295">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-296">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-296">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-297"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-297">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-298"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-298">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-299">傳回 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件而不需移除它。</span><span class="sxs-lookup"><span data-stu-id="49177-299">Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="49177-300">在 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-300">The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-301">這個方法與 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 方法類似，但是 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="49177-301">This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="49177-302">如果型別`T`是參考型別`null`可以加入至<xref:System.Collections.Generic.Queue%601>做為值。</span><span class="sxs-lookup"><span data-stu-id="49177-302">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="49177-303">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-304">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.Peek%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="49177-305">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-305">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-306">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-306">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-307"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-307">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-308"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-308">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-309"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-309">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-310">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-311">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-311">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-312"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-312">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-313"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-313">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="49177-314"><see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-314">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-315">傳回逐一查看集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-315">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="49177-316"><see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="49177-316">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-317">`foreach`陳述式的C#語言 (`for each`在C++， `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="49177-317">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="49177-318">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-318">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="49177-319">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="49177-319">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="49177-320">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="49177-320">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="49177-321">在這個位置上，<xref:System.Collections.Generic.IEnumerator%601.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-321">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-322">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-322">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> <span data-ttu-id="49177-323">會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="49177-323">returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <xref:System.Collections.IEnumerator.MoveNext%2A> <span data-ttu-id="49177-324">設定<xref:System.Collections.Generic.IEnumerator%601.Current%2A>下一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-324">sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="49177-325">如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-325">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="49177-326">列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-326">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="49177-327">如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-327">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-328">您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="49177-328">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="49177-329">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="49177-329">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="49177-330">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="49177-330">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="49177-331">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-331">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="49177-332">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="49177-332">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="49177-333">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-333">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="49177-334">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-334">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="49177-335">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-335">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="49177-336">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。</span><span class="sxs-lookup"><span data-stu-id="49177-336">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="49177-337"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="49177-337">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="49177-338"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</span><span class="sxs-lookup"><span data-stu-id="49177-338">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="49177-339">從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="49177-339">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="49177-340">如果來源的類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型`array`，實作非泛型<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>擲回<xref:System.InvalidCastException>，而泛型實作擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="49177-340">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="49177-341">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-341">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="49177-342">是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49177-342">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="49177-343">小於零。</span><span class="sxs-lookup"><span data-stu-id="49177-343">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> <span data-ttu-id="49177-344">是多維的。</span><span class="sxs-lookup"><span data-stu-id="49177-344">is multidimensional.</span></span>  
  
<span data-ttu-id="49177-345">-或-</span><span class="sxs-lookup"><span data-stu-id="49177-345">-or-</span></span> 
 <paramref name="array" /> <span data-ttu-id="49177-346">沒有以零起始的索引。</span><span class="sxs-lookup"><span data-stu-id="49177-346">does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="49177-347">-或-</span><span class="sxs-lookup"><span data-stu-id="49177-347">-or-</span></span> 
<span data-ttu-id="49177-348">來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="49177-348">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="49177-349">-或-</span><span class="sxs-lookup"><span data-stu-id="49177-349">-or-</span></span> 
<span data-ttu-id="49177-350">來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</span><span class="sxs-lookup"><span data-stu-id="49177-350">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49177-351">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</span><span class="sxs-lookup"><span data-stu-id="49177-351">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="49177-352">如果存取權<see cref="T:System.Collections.ICollection" />是同步 （安全執行緒），否則<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49177-352">if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="49177-353">在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49177-353">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-354">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-354">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="49177-355">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-355">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="49177-356">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="49177-356">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="49177-357">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-357">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> <span data-ttu-id="49177-358">傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="49177-358">returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="49177-359">同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。</span><span class="sxs-lookup"><span data-stu-id="49177-359">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="49177-360">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="49177-360">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49177-361">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-361">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="49177-362">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="49177-362">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="49177-363">在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</span><span class="sxs-lookup"><span data-stu-id="49177-363">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-364">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-364">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="49177-365">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-365">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="49177-366">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="49177-366">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="49177-367">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-367">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> <span data-ttu-id="49177-368">傳回的物件，可用來同步存取<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="49177-368">returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="49177-369">同步處理是所有執行緒存取集合之前都鎖定這個物件時，才有效。</span><span class="sxs-lookup"><span data-stu-id="49177-369">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="49177-370">下列程式碼示範如何使用<xref:System.Collections.ICollection.SyncRoot%2A>屬性C#， C++，和 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="49177-370">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="49177-371">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="49177-371">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-372">傳回逐一查看集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-372">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="49177-373"><see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="49177-373">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-374">`foreach`陳述式的C#語言 (`for each`在C++， `For Each` Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="49177-374">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="49177-375">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="49177-375">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="49177-376">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="49177-376">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="49177-377">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="49177-377">Initially, the enumerator is positioned before the first element in the collection.</span></span> <xref:System.Collections.IEnumerator.Reset%2A> <span data-ttu-id="49177-378">也會列舉值帶回至這個位置中。</span><span class="sxs-lookup"><span data-stu-id="49177-378">also brings the enumerator back to this position.</span></span>  <span data-ttu-id="49177-379">在這個位置上，<xref:System.Collections.IEnumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-379">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-380">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-380">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <xref:System.Collections.IEnumerator.Current%2A> <span data-ttu-id="49177-381">會傳回相同的物件，直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="49177-381">returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <xref:System.Collections.IEnumerator.MoveNext%2A> <span data-ttu-id="49177-382">設定<xref:System.Collections.IEnumerator.Current%2A>下一個項目。</span><span class="sxs-lookup"><span data-stu-id="49177-382">sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="49177-383">如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-383">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="49177-384">列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="49177-384">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="49177-385">如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="49177-385">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="49177-386">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-386">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="49177-387">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="49177-387">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="49177-388">如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="49177-388">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> 
  
 <span data-ttu-id="49177-389">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="49177-389">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="49177-390">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="49177-390">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="49177-391">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-391">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="49177-392">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="49177-392">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="49177-393">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="49177-393">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-394">將 <see cref="T:System.Collections.Generic.Queue`1" /> 元素複製到新的陣列。</span><span class="sxs-lookup"><span data-stu-id="49177-394">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="49177-395">新的陣列，包含複製自 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="49177-395">A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-396"><xref:System.Collections.Generic.Queue%601>則不會修改。</span><span class="sxs-lookup"><span data-stu-id="49177-396">The <xref:System.Collections.Generic.Queue%601> is not modified.</span></span> <span data-ttu-id="49177-397">新陣列中項目的順序是從開頭項目的順序相同<xref:System.Collections.Generic.Queue%601>至它的結尾。</span><span class="sxs-lookup"><span data-stu-id="49177-397">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.</span></span>  
  
 <span data-ttu-id="49177-398">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-398">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49177-399">下列程式碼範例示範幾種方法<xref:System.Collections.Generic.Queue%601>泛型類別，包括<xref:System.Collections.Generic.Queue%601.ToArray%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-399">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="49177-400">在程式碼範例會建立字串的佇列預設容量，並使用<xref:System.Collections.Generic.Queue%601.Enqueue%2A>排入佇列五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="49177-400">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="49177-401">列舉佇列的項目，這不會變更佇列的狀態。</span><span class="sxs-lookup"><span data-stu-id="49177-401">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="49177-402"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="49177-402">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="49177-403"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法來查看佇列中下一個項目，然後<xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用來清除佇列。</span><span class="sxs-lookup"><span data-stu-id="49177-403">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="49177-404"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用來建立陣列，並將佇列項目複製到它，則陣列傳遞至<xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立佇列的複本。</span><span class="sxs-lookup"><span data-stu-id="49177-404">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="49177-405">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="49177-405">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="49177-406">兩次的佇列大小建立陣列，而<xref:System.Collections.Generic.Queue%601.CopyTo%2A>方法用來複製開始之陣列中介的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="49177-406">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="49177-407"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>建構函式會再次用來建立包含在開頭的三個 null 項目佇列的第二個複本。</span><span class="sxs-lookup"><span data-stu-id="49177-407">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="49177-408"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用來顯示"four"的字串是在佇列中的第一個複本之後<xref:System.Collections.Generic.Queue%601.Clear%2A>方法會清除複製和<xref:System.Collections.Generic.Queue%601.Count%2A>屬性會顯示佇列是空的。</span><span class="sxs-lookup"><span data-stu-id="49177-408">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="queue.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49177-409">如果該數目小於目前容量的 90%，則將容量設為 <see cref="T:System.Collections.Generic.Queue`1" /> 中元素的實際數目。</span><span class="sxs-lookup"><span data-stu-id="49177-409">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49177-410">這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。</span><span class="sxs-lookup"><span data-stu-id="49177-410">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="49177-411">重新配置及複製大型的成本<xref:System.Collections.Generic.Queue%601>不過，可能相當大，因此<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>方法不執行任何動作，如果清單是在多個容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="49177-411">The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="49177-412">這可避免產生大型的重新配置成本相對較小的改善。</span><span class="sxs-lookup"><span data-stu-id="49177-412">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="49177-413">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Generic.Queue%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="49177-413">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="49177-414">若要重設<xref:System.Collections.Generic.Queue%601>設為初始狀態，呼叫<xref:System.Collections.Generic.Queue%601.Clear%2A>方法之前呼叫<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49177-414">To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="49177-415">修剪空白<xref:System.Collections.Generic.Queue%601>設定的容量<xref:System.Collections.Generic.Queue%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="49177-415">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue :  -&gt; bool" Usage="queue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="queue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
