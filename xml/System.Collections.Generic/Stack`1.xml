<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="88530-101">指定堆疊中項目的類型。</span><span class="sxs-lookup"><span data-stu-id="88530-101">Specifies the type of elements in the stack.</span></span></typeparam>
    <summary><span data-ttu-id="88530-102">表示相同特定類型之執行個體的各種大小後進先出 (LIFO) 集合。</span><span class="sxs-lookup"><span data-stu-id="88530-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-103"><xref:System.Collections.Generic.Stack%601> 會實作為陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="88530-104">堆疊和佇列時您需要資訊; 暫存儲存體很有用也就是說，您可能想要擷取其值後捨棄項目。</span><span class="sxs-lookup"><span data-stu-id="88530-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="88530-105">使用<xref:System.Collections.Generic.Queue%601>如果您需要存取相同的順序儲存在集合中的資訊。</span><span class="sxs-lookup"><span data-stu-id="88530-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="88530-106">使用<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>如果您需要以相反順序存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="88530-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="88530-107">使用<xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType>和<xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType>類型時，您需要從多個執行緒同時存取集合。</span><span class="sxs-lookup"><span data-stu-id="88530-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="88530-108">常見用途<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>是在呼叫其他程序期間保留變數的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="88530-109">可以對三個主要作業<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>和其項目：</span><span class="sxs-lookup"><span data-stu-id="88530-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="88530-110"><xref:System.Collections.Generic.Stack%601.Push%2A> 插入的項目頂端<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="88530-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="88530-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> 從頂端移除項目<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="88530-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> 傳回的項目頂端，<xref:System.Collections.Generic.Stack%601>但不會移除從<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-113">容量<xref:System.Collections.Generic.Stack%601>是項目數目<xref:System.Collections.Generic.Stack%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="88530-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="88530-114">當項目加入至<xref:System.Collections.Generic.Stack%601>，就會自動增加容量的要求以重新配置內部的陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="88530-115">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="88530-116">如果<xref:System.Collections.Generic.Stack%601.Count%2A>小於堆疊中的容量<xref:System.Collections.Generic.Stack%601.Push%2A>是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="88530-117">如果需要以容納新項目中，增加的容量<xref:System.Collections.Generic.Stack%601.Push%2A>會變成 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="88530-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> 是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="88530-119"><xref:System.Collections.Generic.Stack%601> 接受`null`參考有效的值類型，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="88530-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-120">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="88530-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="88530-121">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-122">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-123"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-124"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-126">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-127">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-129"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="88530-130">公用靜態 (<see langword="Shared" />在 Visual Basic 中) 這種類型的成員都具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="88530-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="88530-131">不保證任何執行個體成員是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="88530-131">Any instance members are not guaranteed to be thread safe.</span></span>  
  
 <span data-ttu-id="88530-132">A<see cref="T:System.Collections.Generic.Stack`1" />可以支援多個讀取器同時，只要未修改集合。</span><span class="sxs-lookup"><span data-stu-id="88530-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="88530-133">即便如此，列舉集合在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="88530-134">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="88530-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-135">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="88530-136">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="88530-136">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-137">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</span><span class="sxs-lookup"><span data-stu-id="88530-137">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-138">容量<xref:System.Collections.Generic.Stack%601>是項目數目，<xref:System.Collections.Generic.Stack%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="88530-138">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="88530-139">當項目加入至<xref:System.Collections.Generic.Stack%601>，就會自動增加容量的要求以重新配置內部的陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-139">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="88530-140">如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-140">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-141">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-141">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="88530-142">這個建構函式是 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-142">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-143">下列程式碼範例示範這個建構函式，以及幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="88530-143">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="88530-144">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-144">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-145">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-145">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-146"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-146">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-147"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-147">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-148"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-148">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-149">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-149">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-150">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-150">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-151"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-151">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-152"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-152">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="88530-153">要複製項目的來源集合。</span><span class="sxs-lookup"><span data-stu-id="88530-153">The collection to copy elements from.</span></span></param>
        <summary><span data-ttu-id="88530-154">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，其包含從指定之集合複製的項目，且具有容納複製之項目數目的足夠容量。</span><span class="sxs-lookup"><span data-stu-id="88530-154">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-155">容量<xref:System.Collections.Generic.Stack%601>是項目數目，<xref:System.Collections.Generic.Stack%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="88530-155">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="88530-156">當項目加入至<xref:System.Collections.Generic.Stack%601>，就會自動增加容量的要求以重新配置內部的陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-156">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="88530-157">如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-157">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-158">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-158">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="88530-159">將元素複製到<xref:System.Collections.Generic.Stack%601>所讀取的順序相同<xref:System.Collections.Generic.IEnumerator%601>的集合。</span><span class="sxs-lookup"><span data-stu-id="88530-159">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="88530-160">這個建構函式為 O (`n`) 作業，其中`n`是中的項目數`collection`。</span><span class="sxs-lookup"><span data-stu-id="88530-160">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-161">下列程式碼範例示範這個建構函式，以及幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別。</span><span class="sxs-lookup"><span data-stu-id="88530-161">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="88530-162">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-162">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-163">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-163">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-164"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-164">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-165"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-165">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-166"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-166">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-167">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-167">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-168">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-168">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-169"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-169">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-170"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-170">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="88530-171"><paramref name="collection" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="88530-171"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="88530-172"><see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始項目數。</span><span class="sxs-lookup"><span data-stu-id="88530-172">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="88530-173">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，其為空白且具有指定的初始容量或預設的初始容量 (兩者中較大的那一個)。</span><span class="sxs-lookup"><span data-stu-id="88530-173">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-174">容量<xref:System.Collections.Generic.Stack%601>是項目數目，<xref:System.Collections.Generic.Stack%601>可以保存。</span><span class="sxs-lookup"><span data-stu-id="88530-174">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="88530-175">當項目加入至<xref:System.Collections.Generic.Stack%601>，就會自動增加容量的要求以重新配置內部的陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-175">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="88530-176">如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-176">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-177">藉由呼叫，您可以減少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-177">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="88530-178">這個建構函式為 O (`n`) 作業，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="88530-178">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="88530-179"><paramref name="capacity" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="88530-179"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-180">從 <see cref="T:System.Collections.Generic.Stack`1" /> 移除所有物件。</span><span class="sxs-lookup"><span data-stu-id="88530-180">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-181"><xref:System.Collections.Generic.Stack%601.Count%2A> 已設為零，並從項目集合的其他物件的參考也會釋放。</span><span class="sxs-lookup"><span data-stu-id="88530-181"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="88530-182">容量會維持不變。</span><span class="sxs-lookup"><span data-stu-id="88530-182">The capacity remains unchanged.</span></span> <span data-ttu-id="88530-183">若要重設的容量<xref:System.Collections.Generic.Stack%601>，呼叫<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-183">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="88530-184">修剪空白<xref:System.Collections.Generic.Stack%601>設定的容量<xref:System.Collections.Generic.Stack%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="88530-184">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="88530-185">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-185">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-186">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Clear%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-186">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="88530-187">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-187">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-188">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-188">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-189"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-189">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-190"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-190">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-191"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-191">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-192">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-192">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-193">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-193">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-194"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-194">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-195"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-195">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="88530-196">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-196">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="88530-197">參考類型的值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="88530-197">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="88530-198">判斷某項目是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</span><span class="sxs-lookup"><span data-stu-id="88530-198">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="88530-199">如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Generic.Stack`1" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="88530-199"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-200">這個方法會決定使用的預設相等比較子的等號比較<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>如`T`，清單中值的類型。</span><span class="sxs-lookup"><span data-stu-id="88530-200">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="88530-201">這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-201">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-202">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Contains%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-202">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="88530-203">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-203">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-204">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-204">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-205"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-205">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-206"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-206">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-207"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-207">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-208">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-208">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-209">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-209">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-210"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-210">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-211"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-211">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="88530-212">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Stack`1" /> 複製過來之項目的目的端。</span><span class="sxs-lookup"><span data-stu-id="88530-212">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="88530-213"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="88530-213">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="88530-214"><c>array</c> 中以零起始的索引，複製作業從此處開始。</span><span class="sxs-lookup"><span data-stu-id="88530-214">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="88530-215">從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Stack`1" /> 至現有一維 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="88530-215">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-216">將元素複製到後進先出 (LIFO) 順序，類似且連續的呼叫所傳回的項目順序中的陣列<xref:System.Collections.Generic.Stack%601.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-216">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="88530-217">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-217">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-218">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-218">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="88530-219">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-219">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-220">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-220">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-221"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-221">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-222"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-222">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-223"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-223">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-224">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-224">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-225">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-225">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-226"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-226">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-227"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-227">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="88530-228"><paramref name="array" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="88530-228"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="88530-229"><paramref name="arrayIndex" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="88530-229"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="88530-230">來源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="88530-230">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88530-231">取得 <see cref="T:System.Collections.Generic.Stack`1" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="88530-231">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <value><span data-ttu-id="88530-232"><see cref="T:System.Collections.Generic.Stack`1" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="88530-232">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-233">容量<xref:System.Collections.Generic.Stack%601>是項目數目，<xref:System.Collections.Generic.Stack%601>可以儲存。</span><span class="sxs-lookup"><span data-stu-id="88530-233">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="88530-234"><xref:System.Collections.Generic.Stack%601.Count%2A> 是實際的項目數目<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-234"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-235">大於或等於容量是一律<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-235">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="88530-236">如果<xref:System.Collections.Generic.Stack%601.Count%2A>超過容量加入項目時，會增加容量會自動重新內部陣列配置之前複製的舊項目並加入新項目。</span><span class="sxs-lookup"><span data-stu-id="88530-236">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="88530-237">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-237">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-238">下列程式碼範例示範數個屬性和方法<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Count%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="88530-238">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="88530-239">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-239">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-240">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-240">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-241"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-241">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-242"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-242">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-243"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-243">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-244">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-244">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-245">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-245">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-246"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-246">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-247"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-247">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-248">傳回 <see cref="T:System.Collections.Generic.Stack`1" /> 的列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-248">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="88530-249"><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Stack`1" />。</span><span class="sxs-lookup"><span data-stu-id="88530-249">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-250">`foreach` C# 語言的陳述式 (`for each` c + +`For Each`在 Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="88530-250">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="88530-251">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-251">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="88530-252">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="88530-252">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="88530-253">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="88530-253">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="88530-254">在這個位置上，<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-254">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-255">因此，在讀取 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-255">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="88530-256"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-256"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="88530-257"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-257"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="88530-258">如果<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-258">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="88530-259">列舉值位於這個位置上，後續呼叫<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-259">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="88530-260">如果最後一個呼叫<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-260">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-261">您不能再次將 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="88530-261">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="88530-262">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="88530-262">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="88530-263">如果變更集合，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下次呼叫<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="88530-263">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="88530-264">如果呼叫之間修改集合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>方法並取得的值<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>屬性，<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>傳回項目所設定，即使列舉值已經無效。</span><span class="sxs-lookup"><span data-stu-id="88530-264">If the collection is modified between calling <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="88530-265">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-265">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="88530-266">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="88530-266">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-267">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-267">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="88530-268">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-268">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="88530-269">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-269">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-270">下列程式碼範例會示範<xref:System.Collections.Generic.Stack%601>是可列舉的泛型類別。</span><span class="sxs-lookup"><span data-stu-id="88530-270">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="88530-271">`foreach`陳述式 (`For Each`在 Visual Basic 中`for each`c + + 中) 用來列舉佇列。</span><span class="sxs-lookup"><span data-stu-id="88530-271">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="88530-272">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-272">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-273">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-273">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-274"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-274">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-275"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-275">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-276"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-276">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-277">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-277">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-278">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-278">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-279"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-279">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-280"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-280">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-281">傳回 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件而不需移除它。</span><span class="sxs-lookup"><span data-stu-id="88530-281">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="88530-282">在 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-282">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-283">這個方法與 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法類似，但是 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-283">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-284">如果型別`T`是參考型別，`null`可以推入至<xref:System.Collections.Generic.Stack%601>做為預留位置，如有需要。</span><span class="sxs-lookup"><span data-stu-id="88530-284">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="88530-285">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-285">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-286">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Peek%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-286">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="88530-287">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-287">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-288">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-288">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-289"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-289">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-290"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-290">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-291"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-291">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-292">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-292">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-293">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-293">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-294"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-294">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-295"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-295">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="88530-296"><see cref="T:System.Collections.Generic.Stack`1" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="88530-296">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-297">移除並傳回在 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-297">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="88530-298">從 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端移除的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-298">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-299">這個方法與 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法類似，但是 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不會修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="88530-299">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="88530-300">如果型別`T`是參考型別，`null`可以推入至<xref:System.Collections.Generic.Stack%601>做為預留位置，如有需要。</span><span class="sxs-lookup"><span data-stu-id="88530-300">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="88530-301"><xref:System.Collections.Generic.Stack%601> 會實作為陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-301"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="88530-302">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-302">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-303">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Pop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-303">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="88530-304">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-304">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-305">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-305">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-306"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-306">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-307"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-307">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-308"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-308">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-309">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-309">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-310">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-310">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-311"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-311">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-312"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-312">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="88530-313"><see cref="T:System.Collections.Generic.Stack`1" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="88530-313">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="88530-314">要推送至 <see cref="T:System.Collections.Generic.Stack`1" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-314">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="88530-315">參考類型的值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="88530-315">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="88530-316">將物件插入 <see cref="T:System.Collections.Generic.Stack`1" /> 的頂端。</span><span class="sxs-lookup"><span data-stu-id="88530-316">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-317"><xref:System.Collections.Generic.Stack%601> 會實作為陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-317"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="88530-318">如果<xref:System.Collections.Generic.Stack%601.Count%2A>已等於容量，容量<xref:System.Collections.Generic.Stack%601>增加的自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-318">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="88530-319">如果型別`T`是參考型別，`null`可以推入至<xref:System.Collections.Generic.Stack%601>做為預留位置，如有需要。</span><span class="sxs-lookup"><span data-stu-id="88530-319">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="88530-320">它會佔據堆疊中的位置，並會被視為任何物件。</span><span class="sxs-lookup"><span data-stu-id="88530-320">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="88530-321">如果<xref:System.Collections.Generic.Stack%601.Count%2A>小於堆疊中的容量<xref:System.Collections.Generic.Stack%601.Push%2A>是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-321">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="88530-322">如果需要以容納新項目中，增加的容量<xref:System.Collections.Generic.Stack%601.Push%2A>會變成 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-322">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-323">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.Push%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-323">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="88530-324">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-324">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-325">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-325">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-326"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-326">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-327"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-327">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-328"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-328">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-329">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-329">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-330">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-330">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-331"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-331">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-332"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-332">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-333">傳回逐一查看集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-333">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="88530-334"><see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="88530-334">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-335">`foreach` C# 語言的陳述式 (`for each` c + +`For Each`在 Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="88530-335">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="88530-336">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-336">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="88530-337">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="88530-337">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="88530-338">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="88530-338">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="88530-339">在這個位置上，<xref:System.Collections.Generic.IEnumerator%601.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-339">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-340">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-340">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="88530-341"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-341"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="88530-342"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-342"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="88530-343">如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-343">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="88530-344">列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-344">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="88530-345">如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-345">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-346">您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。</span><span class="sxs-lookup"><span data-stu-id="88530-346">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="88530-347">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="88530-347">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="88530-348">如果變更集合，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="88530-348">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="88530-349">如果呼叫之間修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>方法並取得的值<xref:System.Collections.Generic.IEnumerator%601.Current%2A>屬性，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>傳回項目所設定，即使列舉值已經無效。</span><span class="sxs-lookup"><span data-stu-id="88530-349">If the collection is modified between calling <xref:System.Collections.IEnumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="88530-350">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-350">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="88530-351">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="88530-351">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-352">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-352">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="88530-353">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-353">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="88530-354">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-354">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="88530-355">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。</span><span class="sxs-lookup"><span data-stu-id="88530-355">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="88530-356"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="88530-356">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="88530-357"><c>array</c> 中以零起始的索引，複製作業從此處開始。</span><span class="sxs-lookup"><span data-stu-id="88530-357">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="88530-358">從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製至 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="88530-358">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="88530-359">如果來源類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型`array`，非泛型實作<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>擲回<xref:System.InvalidCastException>，而泛型實作擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="88530-359">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="88530-360">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-360">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="88530-361"><paramref name="array" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="88530-361"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="88530-362"><paramref name="arrayIndex" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="88530-362"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="88530-363"><paramref name="array" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="88530-363"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="88530-364">-或-</span><span class="sxs-lookup"><span data-stu-id="88530-364">-or-</span></span>  
  
 <span data-ttu-id="88530-365"><paramref name="array" /> 沒有以零起始的索引。</span><span class="sxs-lookup"><span data-stu-id="88530-365"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
 <span data-ttu-id="88530-366">-或-</span><span class="sxs-lookup"><span data-stu-id="88530-366">-or-</span></span>  
  
 <span data-ttu-id="88530-367">來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="88530-367">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="88530-368">-或-</span><span class="sxs-lookup"><span data-stu-id="88530-368">-or-</span></span>  
  
 <span data-ttu-id="88530-369">來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</span><span class="sxs-lookup"><span data-stu-id="88530-369">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88530-370">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</span><span class="sxs-lookup"><span data-stu-id="88530-370">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value>
          <span data-ttu-id="88530-371">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="88530-371"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="88530-372">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的預設實作中，這個屬性一律會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="88530-372">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-373">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-373">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="88530-374">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-374">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="88530-375">在罕見的情況下，列舉會嘗試寫入存取時，您必須鎖定在整個列舉過程的集合。</span><span class="sxs-lookup"><span data-stu-id="88530-375">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-376">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-376">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="88530-377"><xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步處理存取具備<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="88530-377"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="88530-378">同步處理的所有執行緒存取集合之前都鎖定這個物件時才有效。</span><span class="sxs-lookup"><span data-stu-id="88530-378">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="88530-379">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-379">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88530-380">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-380">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="88530-381">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="88530-381">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="88530-382">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的預設實作中，這個屬性一律會傳回目前的執行個體。</span><span class="sxs-lookup"><span data-stu-id="88530-382">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-383">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-383">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="88530-384">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-384">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="88530-385">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="88530-385">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-386">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-386">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="88530-387"><xref:System.Collections.ICollection.SyncRoot%2A> 傳回的物件，可用來同步處理存取具備<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="88530-387"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="88530-388">同步處理的所有執行緒存取集合之前都鎖定這個物件時才有效。</span><span class="sxs-lookup"><span data-stu-id="88530-388">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="88530-389">下列程式碼將示範如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的屬性。</span><span class="sxs-lookup"><span data-stu-id="88530-389">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="88530-390">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-390">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-391">傳回逐一查看集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-391">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="88530-392"><see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="88530-392">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-393">`foreach` C# 語言的陳述式 (`for each` c + +`For Each`在 Visual Basic 中) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="88530-393">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="88530-394">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="88530-394">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="88530-395">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="88530-395">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="88530-396">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="88530-396">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="88530-397"><xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="88530-397"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="88530-398">在這個位置上，<xref:System.Collections.IEnumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-398">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-399">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-399">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="88530-400"><xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-400"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="88530-401"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="88530-401"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="88530-402">如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-402">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="88530-403">列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="88530-403">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="88530-404">如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="88530-404">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="88530-405">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-405">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="88530-406">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="88530-406">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="88530-407">如果變更集合，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="88530-407">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="88530-408">如果呼叫之間修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>方法並取得的值<xref:System.Collections.IEnumerator.Current%2A>屬性，<xref:System.Collections.IEnumerator.Current%2A>傳回項目所設定，即使列舉值已經無效。</span><span class="sxs-lookup"><span data-stu-id="88530-408">If the collection is modified between calling <xref:System.Collections.IEnumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="88530-409">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="88530-409">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="88530-410">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="88530-410">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="88530-411">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-411">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="88530-412">集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>未同步處理。</span><span class="sxs-lookup"><span data-stu-id="88530-412">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="88530-413">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="88530-413">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-414">複製 <see cref="T:System.Collections.Generic.Stack`1" /> 至新陣列。</span><span class="sxs-lookup"><span data-stu-id="88530-414">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="88530-415">新陣列，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 之元素的複本。</span><span class="sxs-lookup"><span data-stu-id="88530-415">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-416">將元素複製到後進先出 (LIFO) 順序，類似且連續的呼叫所傳回的項目順序中的陣列<xref:System.Collections.Generic.Stack%601.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-416">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="88530-417">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-417">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88530-418">下列程式碼範例示範幾個方法來<xref:System.Collections.Generic.Stack%601>泛型類別，包括<xref:System.Collections.Generic.Stack%601.ToArray%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-418">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="88530-419">程式碼範例會建立字串的堆疊與預設的容量，並使用<xref:System.Collections.Generic.Stack%601.Push%2A>推送至堆疊的五個字串的方法。</span><span class="sxs-lookup"><span data-stu-id="88530-419">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="88530-420">列舉的堆疊項目，這不會變更堆疊的狀態。</span><span class="sxs-lookup"><span data-stu-id="88530-420">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="88530-421"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來快顯堆疊的第一個字串。</span><span class="sxs-lookup"><span data-stu-id="88530-421">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="88530-422"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用來在堆疊上，請參閱下一個項目，然後<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用來將其。</span><span class="sxs-lookup"><span data-stu-id="88530-422">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="88530-423"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用來建立陣列，並將堆疊項目複製到它，然後將陣列傳遞至<xref:System.Collections.Generic.Stack%601.%23ctor%2A>建構函式<xref:System.Collections.Generic.IEnumerable%601>，建立一份堆疊與項目的順序相反。</span><span class="sxs-lookup"><span data-stu-id="88530-423">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="88530-424">複製的項目會顯示。</span><span class="sxs-lookup"><span data-stu-id="88530-424">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="88530-425">兩次的堆疊大小建立陣列，而<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用來複製開始中間之陣列的陣列元素。</span><span class="sxs-lookup"><span data-stu-id="88530-425">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="88530-426"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>反轉元素順序與建立堆疊的複本一次使用建構函式; 因此，三個 null 項目結尾。</span><span class="sxs-lookup"><span data-stu-id="88530-426">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="88530-427"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用來顯示"4"的字串是在堆疊中的第一個複本之後<xref:System.Collections.Generic.Stack%601.Clear%2A>方法清除複製和<xref:System.Collections.Generic.Stack%601.Count%2A>屬性會顯示堆疊是空。</span><span class="sxs-lookup"><span data-stu-id="88530-427">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88530-428">如果該數目小於目前容量的 90%，則將容量設為 <see cref="T:System.Collections.Generic.Stack`1" /> 中項目的實際數目。</span><span class="sxs-lookup"><span data-stu-id="88530-428">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88530-429">這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。</span><span class="sxs-lookup"><span data-stu-id="88530-429">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="88530-430">重新配置及複製大型的成本<xref:System.Collections.Generic.Stack%601>相當大，但是，可能會因此<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>方法沒有作用，如果清單是在超過容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="88530-430">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="88530-431">這可避免產生大型重新配置成本相對較小的改善。</span><span class="sxs-lookup"><span data-stu-id="88530-431">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="88530-432">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="88530-432">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="88530-433">若要重設<xref:System.Collections.Generic.Stack%601>設為初始狀態，請呼叫<xref:System.Collections.Generic.Stack%601.Clear%2A>方法之前先呼叫<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="88530-433">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="88530-434">修剪空白<xref:System.Collections.Generic.Stack%601>設定的容量<xref:System.Collections.Generic.Stack%601>預設容量。</span><span class="sxs-lookup"><span data-stu-id="88530-434">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>