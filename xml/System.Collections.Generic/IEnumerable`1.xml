<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ead708986af1bfd1c09bf3cba948dafe641085" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645094" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">要列舉之物件的類型。</typeparam>
    <summary>公開支援指定類型集合上簡單反覆運算的列舉值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> 在為集合的基底介面<xref:System.Collections.Generic>命名空間，例如<xref:System.Collections.Generic.List%601>， <xref:System.Collections.Generic.Dictionary%602>，和<xref:System.Collections.Generic.Stack%601>與其他泛型集合，例如<xref:System.Collections.ObjectModel.ObservableCollection%601>和<xref:System.Collections.Concurrent.ConcurrentStack%601>。 實作的集合<xref:System.Collections.Generic.IEnumerable%601>可以使用列舉`foreach`陳述式。  
  
 這個介面的非泛型版本，請參閱<xref:System.Collections.IEnumerable?displayProperty=nameWithType>。  
  
 <xref:System.Collections.Generic.IEnumerable%601> 包含實作此介面; 時，您必須實作單一方法<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>，它會傳回<xref:System.Collections.Generic.IEnumerator%601>物件。 傳回<xref:System.Collections.Generic.IEnumerator%601>可讓您逐一查看集合的公開<xref:System.Collections.Generic.IEnumerator%601.Current%2A>屬性。  
  
   
  
## Examples  
 下列範例示範如何實作<xref:System.Collections.Generic.IEnumerable%601>介面以及如何使用這個實作來建立 LINQ 查詢。 當您實作<xref:System.Collections.Generic.IEnumerable%601>，您也必須實作<xref:System.Collections.Generic.IEnumerator%601>或僅限 C#，您可以使用[產生](~/docs/csharp/language-reference/keywords/yield.md)關鍵字。 實作<xref:System.Collections.Generic.IEnumerator%601>也需要<xref:System.IDisposable>實作，您會看到在這個範例中。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 如需其他 C# 範例示範如何實作<xref:System.Collections.Generic.IEnumerable%601>介面，請參閱[泛型範例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 這個範例會使用`yield`關鍵字，而不實作<xref:System.Collections.Generic.IEnumerator%601>。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含在同位檢查的非泛型集合。實作<see cref="T:System.Collections.Generic.IEnumerable`1" />要傳遞給預期的方法的泛型集合可讓<see cref="T:System.Collections.IEnumerable" />物件。</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看集合的列舉值。</summary>
        <returns>可用來逐一查看集合的列舉值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回<xref:System.Collections.Generic.IEnumerator%601>可讓您逐一查看集合的公開<xref:System.Collections.Generic.IEnumerator%601.Current%2A>屬性。讀取集合中的資料，但無法修改集合，您可以使用列舉值。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 在這個位置上，<xref:System.Collections.Generic.IEnumerator%601.Current%2A> 並未定義。 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>方法，以將列舉值前進到第一個項目，再讀取的值集合的<xref:System.Collections.Generic.IEnumerator%601.Current%2A>。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 會傳回相同的物件直到<xref:System.Collections.IEnumerator.MoveNext%2A>做為一次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.Generic.IEnumerator%601.Current%2A>下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是未定義。 您不能再次將 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 設定為集合的第一個項目；您必須建立新的列舉值執行個體。  

 如果變更集合，例如加入、 修改或刪除元素，列舉值的行為未定義。  
  
 列舉程式沒有集合的獨佔存取權，因此，只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除元素，列舉值無效，您可能會收到非預期的結果。 此外，列舉集合不是安全執行緒程序。 若要確保執行緒安全，您應該列舉過程中鎖定集合，或集合上實作的同步處理。  
  
 集合中的預設實作<xref:System.Collections.Generic?displayProperty=nameWithType>命名空間未同步。  
  
   
  
## Examples  
 下列範例示範如何實作<xref:System.Collections.Generic.IEnumerable%601>介面，並使用該實作建立 LINQ 查詢。 當您實作<xref:System.Collections.Generic.IEnumerable%601>，您也必須實作<xref:System.Collections.Generic.IEnumerator%601>或僅限 C#，您可以使用[產生](~/docs/csharp/language-reference/keywords/yield.md)關鍵字。 實作<xref:System.Collections.Generic.IEnumerator%601>也需要<xref:System.IDisposable>實作，您會看到在這個範例中。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 如需其他 C# 範例示範如何實作<xref:System.Collections.Generic.IEnumerable%601>介面，請參閱[泛型範例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 這個範例會使用的`yield`關鍵字，而不實作<xref:System.Collections.Generic.IEnumerator%601>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>