<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f16f70a6ecc86c79689f40eb54b9d7bd114712aa" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/15/2019" /><Meta Name="ms.locfileid" Value="57928018" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">要比較之物件的類型。</typeparam>
    <summary>提供基底類別 (Base Class) 用於 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面的實作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自這個類別提供的自訂實作<xref:System.Collections.Generic.IComparer%601>介面的集合類別搭配使用這類<xref:System.Collections.Generic.SortedList%602>和<xref:System.Collections.Generic.SortedDictionary%602>泛型類別。  
  
 衍生自之間的差異<xref:System.Collections.Generic.Comparer%601>類別，並實作<xref:System.IComparable?displayProperty=nameWithType>介面如下所示：  
  
-   若要指定如何根據預設，應該要比較兩個物件，實作<xref:System.IComparable?displayProperty=nameWithType>類別中的介面。 這可確保排序作業會使用您所提供的預設比較程式碼。  
  
-   若要定義使用而不是預設的比較子的比較子，衍生自<xref:System.Collections.Generic.Comparer%601>類別。 您接著可以使用這個比較子中需要做為參數的比較子的排序作業。  
  
 所傳回的物件<xref:System.Collections.Generic.Comparer%601.Default%2A>屬性使用<xref:System.IComparable%601?displayProperty=nameWithType>泛型介面 (`IComparable<T>`在 C# 中， `IComparable(Of T)` Visual Basic 中) 來比較兩個物件。 如果型別`T`不會實作<xref:System.IComparable%601?displayProperty=nameWithType>泛型介面，<xref:System.Collections.Generic.Comparer%601.Default%2A>屬性會傳回<xref:System.Collections.Generic.Comparer%601>使用<xref:System.IComparable?displayProperty=nameWithType>介面。  
  
   
  
## Examples  
 下列範例衍生類別中， `BoxLengthFirst`，從<xref:System.Collections.Generic.Comparer%601>類別。 這個比較子來比較兩個物件的型別`Box`。 它首先會排序它們的長度，則依高度，再依寬度。 `Box`類別會實作<xref:System.IComparable%601>介面，以控制預設的比較兩個`Box`物件。 這個預設實作會先排序的高度，則依長度，再依寬度。 此範例示範的兩個比對排序的清單之間的差異`Box`物件第一次使用`BoxLengthFirst`比較子，然後藉由使用預設比較子。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> 和<see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" />的行為可能會區分文化特性和區分大小寫。  
  
字串比較<see cref="T:System.StringComparer" />建議類別<c>比較子&lt;字串&gt;</c>。  屬性的<see cref="T:System.StringComparer" />類別傳回預先定義的執行個體執行的不同組合的區分文化特性和區分大小寫的字串比較。  區分大小寫和區分文化特性都是一致的相同成員之間<see cref="T:System.StringComparer" />執行個體。  
  
如需有關特定文化特性比較的詳細資訊，請參閱 &lt;&lt;c0&gt; <see cref="N:System.Globalization" /> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.Comparer`1" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">要比較的第一個物件。</param>
        <param name="y">要比較的第二個物件。</param>
        <summary>在衍生類別中覆寫時，比較型別相同的兩個物件並傳回值，指出一個物件是小於、等於還是大於另一個物件。</summary>
        <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 意義 
 </description></listheader><item><term> 小於零 
 </term><description><paramref name="x" /> 小於 <paramref name="y" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="x" />等於 <paramref name="y" />。  
  
 </description></item><item><term> 大於零 
 </term><description><paramref name="x" /> 大於 <paramref name="y" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作這個方法，以提供自訂排序次序比較型別`T`。  
  
   
  
## Examples  
 下列範例會定義的比較子`Box`可用來代替預設比較子的物件。 這個範例是針對提供之較大範例的一部分<xref:System.Collections.Generic.Comparer%601>類別。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">型別 <paramref name="T" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面或 <see cref="T:System.IComparable" /> 介面。</exception>
        <block subset="none" type="overrides"><para>比較<see langword="null" />具有任何參考型別允許和不會產生例外狀況。 Null 參考，會被視為小於任何不是 null 的參考。  
  
如需特定文化特性的比較資訊，請參閱 &lt;&lt;c0&gt; <see cref="N:System.Globalization" /> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">要使用的比較。</param>
        <summary>使用指定的比較建立比較子。</summary>
        <returns>新的比較子。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回泛型引數指定之型別的預設排序次序比較子 (Comparer)。</summary>
        <value>物件，繼承 <see cref="T:System.Collections.Generic.Comparer`1" />，並用做型別 <paramref name="T" /> 的排序次序比較子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Comparer%601>傳回此屬性會使用<xref:System.IComparable%601?displayProperty=nameWithType>泛型介面 (`IComparable<T>`在 C# 中， `IComparable(Of T)` Visual Basic 中) 來比較兩個物件。 如果型別`T`不會實作<xref:System.IComparable%601?displayProperty=nameWithType>泛型介面，這個屬性會傳回<xref:System.Collections.Generic.Comparer%601>使用<xref:System.IComparable?displayProperty=nameWithType>介面。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Collections.Generic.Comparer%601.Default%2A>屬性來取得執行預設的比較的物件。 這個範例是針對提供之較大範例的一部分<xref:System.Collections.Generic.Comparer%601>類別。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>字串比較<see cref="T:System.StringComparer" />建議類別<c>比較子&lt;字串&gt;</c> (<c>比較子 (Of String)</c> Visual Basic 中)。  屬性的<see cref="T:System.StringComparer" />類別傳回預先定義的執行個體執行的不同組合的區分文化特性和區分大小寫的字串比較。  區分大小寫和區分文化特性都是一致的相同成員之間<see cref="T:System.StringComparer" />執行個體。  
  
如需有關特定文化特性比較的詳細資訊，請參閱 &lt;&lt;c0&gt; <see cref="N:System.Globalization" /> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">要比較的第一個物件。</param>
        <param name="y">要比較的第二個物件。</param>
        <summary>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</summary>
        <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 意義 
 </description></listheader><item><term> 小於零 
 </term><description><paramref name="x" /> 小於 <paramref name="y" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="x" />等於 <paramref name="y" />。  
  
 </description></item><item><term> 大於零 
 </term><description><paramref name="x" /> 大於 <paramref name="y" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是包裝函式<xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29>方法，因此`obj`必須轉換成泛型引數所指定的型別`T`目前執行個體。 如果無法轉換成`T`、<xref:System.ArgumentException>就會擲回。  
  
 比較`null`具有任何參考型別允許和不會產生例外狀況。 排序時，`null`會被視為小於任何其他物件。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A>方法來比較兩個物件。 這個範例是針對提供之較大範例的一部分<xref:System.Collections.Generic.Comparer%601>類別。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> 或 <paramref name="y" /> 的型別無法轉型為型別 <paramref name="T" />。  
  
-或- 
 <paramref name="x" /> 和 <paramref name="y" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面或 <see cref="T:System.IComparable" /> 介面。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> 和<see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" />區分文化特性和區分大小寫方面有不同的行為。  
  
字串比較<see cref="T:System.StringComparer" />建議類別<c>比較子&lt;字串&gt;</c>。  屬性的<see cref="T:System.StringComparer" />類別傳回預先定義的執行個體執行的不同組合的區分文化特性和區分大小寫的字串比較。  區分大小寫和區分文化特性都是一致的相同成員之間<see cref="T:System.StringComparer" />執行個體。  
  
如需有關特定文化特性比較的詳細資訊，請參閱 &lt;&lt;c0&gt; <see cref="N:System.Globalization" /> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>