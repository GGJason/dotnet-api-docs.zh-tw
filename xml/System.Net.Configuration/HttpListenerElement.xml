<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="454ec0d74116246d40fbfd1ad50cc77b1d5dbb4a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552985" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示組態檔中的 HttpListener 項目。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會對應到\<httpListener > 項目 （網路設定） 的組態項目。 這個類別會提供以程式設計方式存取可以儲存在組態檔中的資訊。  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>屬性會指出如果<xref:System.Net.HttpListener>而不是轉換後的 URI 轉換百分比編碼的任何值，會採取其他的正規化步驟會使用原始的未逸出的 URI。  
  
 當<xref:System.Net.HttpListener>執行個體收到要求時透過`http.sys`服務，它會建立所提供的 URI 字串的執行個體`http.sys`，並公開其為<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>屬性。  
  
 `http.sys`服務會公開兩個要求 URI 字串：  
  
-   未經處理的 URI  
  
-   已轉換的 URI  
  
 未經處理的 URI 是<xref:System.Uri?displayProperty=nameWithType>提供 HTTP 要求的要求行中：  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 所提供的原始 URI`http.sys`上面所提的要求是"/ 路徑 /"。 這表示它已透過網路傳送接下來的 HTTP 動詞命令的字串。  
  
 `http.sys`服務會使用 HTTP 要求行中所提供的 URI，在要求中所提供的資訊來建立已轉換的 URI 和主機標頭，以判斷原始伺服器的要求應該會轉送到。 這是藉由比較一組已註冊的 URI 前置詞的要求中的資訊。 HTTP 伺服器 SDK 文件是指做為此轉換 URI [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)結構。  
  
 為了要比較的要求已註冊的 URI 前置詞，需要執行某些要求的正規化。 轉換 URI 上述範例應如下：  
  
 `http://www.contoso.com/path/`  
  
 `http.sys`服務結合<xref:System.Uri.Host%2A?displayProperty=nameWithType>屬性值，並要求條線建立轉換的 URI 中的字串。 此外，`http.sys`和<xref:System.Uri?displayProperty=nameWithType>類別也會執行下列動作：  
  
-   取消-逸出所有百分比編碼值。  
  
-   轉換百分比編碼為 utf-16 字元表示法的非 ASCII 字元。 請注意，utf-8 與 ANSI/DBCS 字元支援以及 Unicode 字元 （Unicode 編碼使用 %uxxxx 格式）。  
  
-   執行其他的正規化步驟，例如路徑壓縮。  
  
 要求不包含任何百分比編碼值使用的編碼方式相關資訊，因為它可能無法判斷正確的編碼方式只是藉由剖析的百分比編碼值。  
  
 因此`http.sys`提供修改程序的兩個登錄機碼：  
  
|登錄機碼|預設值|描述|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|如果是零，`http.sys`接受只有 UTF 8 編碼的 Url。<br /><br /> 如果不是零，`http.sys`也接受 ANSI 編碼或 DBCS 編碼在要求中的 Url。|  
|FavorUTF8|1|如果不是零，`http.sys`一律會嘗試解碼 URL 為 utf-8 第一次。 如果該轉換失敗，而且 EnableNonUTF8 為非零，Http.sys，然後嘗試將它解碼為 ANSI 或依 DBCS。<br /><br /> 如果是零 （和 EnableNonUTF8 為非零），`http.sys`嘗試將它解碼為 ANSI 或依 DBCS; 如果不成功，它會嘗試 utf-8 轉換。|  
  
 當<xref:System.Net.HttpListener>收到要求時，它會使用轉換的 URI 從`http.sys`來作為輸入<xref:System.Net.HttpListenerRequest.Url%2A>屬性。  
  
 沒有需要支援在 Uri 中的字元和數字以外的字元。 範例是下列的 URI 用來擷取客戶的客戶資訊數字"1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 請注意百分比編碼中的斜線的 Uri (%2f)。 必須這樣做，因為在此情況下的斜線字元表示的資料，不是路徑分隔符號。  
  
 將字串傳遞至 Uri 建構函式會導致下列 URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 分割為其區段路徑會產生下列項目：  
  
 `Customer('1`  
  
 `3812')`  
  
 這不是寄件者要求的意圖。  
  
 如果<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>屬性設定為 false，則當<xref:System.Net.HttpListener>收到要求時，它會使用原始 URI，而不是從轉換過的 URI`http.sys`來作為輸入<xref:System.Net.HttpListenerRequest.Url%2A>屬性。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Configuration.HttpListenerElement" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於 <see cref="T:System.Net.HttpListener" /> 物件的預設逾時項目。</summary>
        <value>傳回 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />。  用於 <see cref="T:System.Net.HttpListener" /> 物件的逾時項目。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值會指出 <see cref="T:System.Net.HttpListener" /> 使用原始未逸出 URI，而非轉換的 URI。</summary>
        <value>布林值，指出 <see cref="T:System.Net.HttpListener" /> 使用原始未逸出 URI，而非轉換的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>屬性會指出如果<xref:System.Net.HttpListener>而不是轉換後的 URI 轉換百分比編碼的任何值，會採取其他的正規化步驟會使用原始的未逸出的 URI。  
  
 當<xref:System.Net.HttpListener>執行個體收到要求時透過`http.sys`服務，它會建立所提供的 URI 字串的執行個體`http.sys`，並公開其為<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>屬性。  
  
 `http.sys`服務會公開兩個要求 URI 字串：  
  
-   未經處理的 URI  
  
-   已轉換的 URI  
  
 未經處理的 URI 是<xref:System.Uri?displayProperty=nameWithType>提供 HTTP 要求的要求行中：  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 所提供的原始 URI`http.sys`上面所提的要求是"/ 路徑 /"。 這表示它已透過網路傳送接下來的 HTTP 動詞命令的字串。  
  
 `http.sys`服務會使用 HTTP 要求行中所提供的 URI，在要求中所提供的資訊來建立已轉換的 URI 和主機標頭，以判斷原始伺服器的要求應該會轉送到。 這是藉由比較一組已註冊的 URI 前置詞的要求中的資訊。 HTTP 伺服器 SDK 文件是指做為此轉換 URI [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)結構。  
  
 為了要比較的要求已註冊的 URI 前置詞，需要執行某些要求的正規化。 轉換 URI 上述範例應如下：  
  
 `http://www.contoso.com/path/`  
  
 `http.sys`服務結合<xref:System.Uri.Host%2A?displayProperty=nameWithType>屬性值，並要求條線建立轉換的 URI 中的字串。 此外，`http.sys`和<xref:System.Uri?displayProperty=nameWithType>類別也會執行下列動作：  
  
-   取消-逸出所有百分比編碼值。  
  
-   轉換百分比編碼為 utf-16 字元表示法的非 ASCII 字元。 請注意，utf-8 與 ANSI/DBCS 字元支援以及 Unicode 字元 （Unicode 編碼使用 %uxxxx 格式）。  
  
-   執行其他的正規化步驟，例如路徑壓縮。  
  
 要求不包含任何百分比編碼值使用的編碼方式相關資訊，因為它可能無法判斷正確的編碼方式只是藉由剖析的百分比編碼值。  
  
 因此`http.sys`提供修改程序的兩個登錄機碼：  
  
|登錄機碼|預設值|描述|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|如果是零，`http.sys`接受只有 UTF 8 編碼的 Url。<br /><br /> 如果不是零，`http.sys`也接受 ANSI 編碼或 DBCS 編碼在要求中的 Url。|  
|FavorUTF8|1|如果不是零，`http.sys`一律會嘗試解碼 URL 為 utf-8 第一次。 如果該轉換失敗，而且 EnableNonUTF8 為非零，Http.sys，然後嘗試將它解碼為 ANSI 或依 DBCS。<br /><br /> 如果是零 （和 EnableNonUTF8 為非零），`http.sys`嘗試將它解碼為 ANSI 或依 DBCS; 如果不成功，它會嘗試 utf-8 轉換。|  
  
 當<xref:System.Net.HttpListener>收到要求時，它會使用轉換的 URI 從`http.sys`來作為輸入<xref:System.Net.HttpListenerRequest.Url%2A>屬性。  
  
 沒有需要支援在 Uri 中的字元和數字以外的字元。 範例是下列的 URI 用來擷取客戶的客戶資訊數字"1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 請注意百分比編碼中的斜線的 Uri (%2f)。 必須這樣做，因為在此情況下的斜線字元表示的資料，不是路徑分隔符號。  
  
 將字串傳遞至 Uri 建構函式會導致下列 URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 分割為其區段路徑會產生下列項目：  
  
 `Customer('1`  
  
 `3812')`  
  
 這不是寄件者要求的意圖。  
  
 如果<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>屬性設定為 false，則當<xref:System.Net.HttpListener>收到要求時，它會使用原始 URI，而不是從轉換過的 URI`http.sys`來作為輸入<xref:System.Net.HttpListenerRequest.Url%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>