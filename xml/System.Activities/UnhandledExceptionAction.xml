<Type Name="UnhandledExceptionAction" FullName="System.Activities.UnhandledExceptionAction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90beb3de2eb7f379bd39d06382a58e66536329a0" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36716519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum UnhandledExceptionAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UnhandledExceptionAction extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Activities.UnhandledExceptionAction" />
  <TypeSignature Language="VB.NET" Value="Public Enum UnhandledExceptionAction" />
  <TypeSignature Language="C++ CLI" Value="public enum class UnhandledExceptionAction" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionAction = " />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>指定在例外狀況溢出工作流程的根時出現的動作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當例外狀況逸出工作流程的根時，會叫用 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 函式。 <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> 會提供此例外狀況的存取權，以及產生例外狀況之 <xref:System.Activities.Activity> 的指標。 終止是否為預設動作，如果沒有<xref:System.Activities.WorkflowApplication.OnUnhandledException%2A>指定處理常式。  
  
   
  
## Examples  
 下列範例會叫用擲回例外狀況的工作流程。 此例外狀況未由工作流程處理，而且叫用了 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 處理常式。 系統會檢查 <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> 以提供例外狀況的相關資訊，並且終止工作流程。  
  
 [!code-csharp[CFX_WorkflowApplicationExample#6](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="Abort" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Abort = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Abort" />
      <MemberSignature Language="VB.NET" Value="Abort" />
      <MemberSignature Language="C++ CLI" Value="Abort" />
      <MemberSignature Language="F#" Value="Abort = 0" Usage="System.Activities.UnhandledExceptionAction.Abort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 應該中止工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這會導致系統在中止處理序完成時，呼叫 <xref:System.Activities.WorkflowApplication.Aborted%2A>。 使用未處理的例外狀況做為中止原因。  
  
   
  
## Examples  
 下列範例會叫用擲回例外狀況的工作流程。 此例外狀況未由工作流程處理，而且叫用了 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 處理常式。 系統會檢查 <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> 以提供例外狀況的相關資訊，並且中止工作流程。  
  
 [!code-csharp[CFX_WorkflowApplicationExample#7](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="Cancel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Cancel = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Cancel" />
      <MemberSignature Language="VB.NET" Value="Cancel" />
      <MemberSignature Language="C++ CLI" Value="Cancel" />
      <MemberSignature Language="F#" Value="Cancel = 1" Usage="System.Activities.UnhandledExceptionAction.Cancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 應該排程根活動的取消和繼續執行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這會導致系統在取消處理序完成時，呼叫 <xref:System.Activities.WorkflowApplication.Completed%2A>。  
  
   
  
## Examples  
 下列範例會叫用擲回例外狀況的工作流程。 此例外狀況未由工作流程處理，而且叫用了 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 處理常式。 系統會檢查 <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> 以提供例外狀況的相關資訊，並且取消工作流程。  
  
 [!code-csharp[CFX_WorkflowApplicationExample#8](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="Terminate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Terminate = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Terminate" />
      <MemberSignature Language="VB.NET" Value="Terminate" />
      <MemberSignature Language="C++ CLI" Value="Terminate" />
      <MemberSignature Language="F#" Value="Terminate = 2" Usage="System.Activities.UnhandledExceptionAction.Terminate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 應該排程根活動的終止和繼續執行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當終止處理序完成時，呼叫 <xref:System.Activities.WorkflowApplication.Completed%2A> 中的此結果。 使用未處理的例外狀況做為終止原因。 終止是否為預設動作，如果沒有<xref:System.Activities.WorkflowApplication.OnUnhandledException%2A>指定處理常式。  
  
   
  
## Examples  
 下列範例會叫用擲回例外狀況的工作流程。 此例外狀況未由工作流程處理，而且叫用了 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 處理常式。 系統會檢查 <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> 以提供例外狀況的相關資訊，並且終止工作流程。  
  
 [!code-csharp[CFX_WorkflowApplicationExample#6](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>