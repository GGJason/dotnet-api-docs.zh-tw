<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1d6a938287920a69315e465828e1e66bb9224e5" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51895685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>如同方法叫用般，提供叫用工作流程的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> 同時包含以同步方式叫用工作流程的執行個體和靜態方法，以及以非同步方式叫用工作流程的執行個體方法。  
  
 <xref:System.Activities.WorkflowInvoker> 不允許如保存、卸載或繼續書籤等執行個體控制項。 如果需要執行個體控制項，請改用 <xref:System.Activities.WorkflowApplication>。  
  
 若要在沒有執行個體控制項的狀況下同步執行工作流程，請呼叫 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 方法。 若要在沒有執行個體控制項的狀況下非同步執行工作流程，請使用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 和 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法配對，或 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 方法。  
  
   
  
## Examples  
 下列範例會使用 <xref:System.Activities.Statements.WriteLine>，以同步方式叫用由單一 <xref:System.Activities.WorkflowInvoker> 活動組成的工作流程。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">要由這個 <see cref="T:System.Activities.WorkflowInvoker" /> 類別執行個體叫用之工作流程的工作流程定義。</param>
        <summary>初始化 <see cref="T:System.Activities.WorkflowInvoker" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> 同時包含以同步方式叫用工作流程的執行個體和靜態方法，以及以非同步方式叫用工作流程的執行個體方法。  
  
   
  
## Examples  
 下列範例會叫用由單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用 <see cref="T:System.IAsyncResult" /> 非同步設計模式，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">在工作流程完成時所要呼叫的方法。</param>
        <param name="state">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</param>
        <summary>使用指定的 <see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</summary>
        <returns>非同步叫用作業的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。 如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。 當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="callback">在工作流程完成時所要呼叫的方法。</param>
        <param name="state">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</param>
        <summary>使用輸入參數指定的 <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</summary>
        <returns>非同步叫用作業的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。 如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。  若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。 當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <param name="callback">在工作流程完成時所要呼叫的方法。</param>
        <param name="state">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</param>
        <summary>使用指定的逾時間隔、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</summary>
        <returns>非同步叫用作業的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。 如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並在呼叫 <xref:System.TimeoutException> 方法時擲回 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。 當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <param name="callback">在工作流程完成時所要呼叫的方法。</param>
        <param name="state">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</param>
        <summary>使用輸入參數指定的 <see cref="T:System.Collections.Generic.IDictionary`2" />、逾時間隔、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</summary>
        <returns>非同步叫用作業的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。 如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並在呼叫 <xref:System.TimeoutException> 時擲回 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。 當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">要取消之工作流程的權杖。</param>
        <summary>嘗試取消使用指定之 <paramref name="userState" /> 所叫用的工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只能取消其中一個接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數的 `userState` 多載所叫用之工作流程。  
  
 如果取消成功，<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>屬性<xref:System.Activities.InvokeCompletedEventArgs>傳遞至<xref:System.Activities.WorkflowInvoker.InvokeCompleted>處理常式設定為`true`; 否則它會設定為`false`。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 一旦叫用此工作流程，主機就會嘗試取消工作流程。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <see cref="T:System.IAsyncResult" />，參考開始工作流程的 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 作業。</param>
        <summary>傳回使用其中一個 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 多載所叫用之工作流程的結果。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 指定的 `callback` 方法呼叫<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>。 如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。  
  
 這個方法會傳回使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用之工作流程的結果。 如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。 當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得延伸的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，可用於由 <see cref="T:System.Activities.WorkflowInvoker" /> 執行個體叫用的工作流程。</summary>
        <value>延伸的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，可用於由 <see cref="T:System.Activities.WorkflowInvoker" /> 執行個體叫用的工作流程。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流程主機作者會使用這個屬性，將延伸加入至 <xref:System.Activities.WorkflowInvoker> 執行個體，以便將它們提供給該執行個體所叫用的工作流程使用。  
  
   
  
## Examples  
 下列範例會使用 <xref:System.Activities.Tracking.TrackingParticipant> 執行個體的 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 集合來登錄自訂 <xref:System.Activities.WorkflowInvoker>。 此程式碼範例是一部分[自訂追蹤](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)範例。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以同步方式叫用工作流程並傳回根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用傳遞給 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 建構函式的工作流程定義，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
   
  
## Examples  
 下列範例會叫用由單一 `DiceRoll` 活動組成的工作流程。 `DiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 當 `Invoke` 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。 工作流程會叫用兩次，使用傳遞至工作流程定義`WorkflowInvoker`建構函式。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 如果此工作流程的根活動沒有任何輸出引數，或者主機不需要這些引數，它們可能會被忽略。 下列範例會叫用由沒有任何輸出引數之單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <summary>使用指定的工作流程定義，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
   
  
## Examples  
 下列範例會叫用由單一 `DiceRoll` 活動組成的工作流程。 `DiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 當 `Invoke` 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 如果此工作流程的根活動沒有任何輸出引數，或者主機不需要這些引數，它們可能會被忽略。 下列範例會叫用由沒有任何輸出引數之單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <summary>使用指定的輸入參數 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />，以同步方式叫用傳遞至 <see cref="T:System.Collections.Generic.IDictionary`2" /> 建構函式的活動。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
   
  
## Examples  
 下列範例會叫用由具有兩個輸入引數和兩個輸出引數之單一 `Divide` 活動組成的工作流程。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當傳回 `Invoke` 的呼叫時，每個輸出引數都會傳入 `outputs` 字典 (也以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 如果工作流程衍生自<xref:System.Activities.ActivityWithResult>，這類`CodeActivity<TResult>`或是`Activity<TResult>`，而且除了定義完善的輸出引數<xref:System.Activities.Activity%601.Result%2A>輸出引數的非泛型多載`Invoke`，此類，必須使用若要擷取的其他引數的順序。 若要這樣做，工作流程定義傳遞給`WorkflowInvoker`建構函式必須是型別<xref:System.Activities.Activity>。 在此範例中`Divide`活動衍生自`CodeActivity<int>`，但宣告為<xref:System.Activities.Activity>使這個多載`Invoke`，它會傳回而不是單一的傳回值的引數的字典會使用。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的逾時間隔，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。 系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。 第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException> 並顯示下列訊息。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 如需使用的範例`Invoke`輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <summary>使用指定的工作流程定義和輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
   
  
## Examples  
 下列範例會叫用由具有兩個輸入引數和兩個輸出引數之單一 `Divide` 活動組成的工作流程。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當傳回 `Invoke` 的呼叫時，每個輸出引數都會傳入 `outputs` 字典 (也以引數名稱做為索引鍵)。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 如果工作流程衍生自<xref:System.Activities.ActivityWithResult>，這類`CodeActivity<TResult>`或是`Activity<TResult>`，而且除了定義完善的輸出引數<xref:System.Activities.Activity%601.Result%2A>輸出引數的非泛型多載`Invoke`，此類，必須使用若要擷取的其他引數的順序。 若要這樣做，傳遞給 `Invoke` 的工作流程定義必須屬於 <xref:System.Activities.Activity> 型別。 在此範例中`Divide`活動衍生自`CodeActivity<int>`，但宣告為<xref:System.Activities.Activity>使這個多載`Invoke`，它會傳回而不是單一的傳回值的引數的字典會使用。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的工作流程定義和逾時間隔，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。 系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。 第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException>。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 如需使用的範例`Invoke`輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的輸入參數 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 和指定的逾時間隔，以同步方式叫用傳遞至 <see cref="T:System.Collections.Generic.IDictionary`2" /> 建構函式的活動。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。 系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。 第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException> 並顯示下列訊息。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 如需使用的範例`Invoke`輸入和輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</summary>
        <returns>根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。 系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。 第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException>。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 如需使用的範例`Invoke`輸入和輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流程的型別。</typeparam>
        <param name="workflow">要叫用之工作流程的工作流程定義。 需要從 <see cref="T:System.Activities.ActivityWithResult" /> 衍生的工作流程定義。</param>
        <summary>使用傳遞給 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 建構函式的工作流程定義，以同步方式叫用工作流程。</summary>
        <returns>包含活動執行結果之型別 TResult 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
   
  
## Examples  
 下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。 此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流程的型別。</typeparam>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <summary>使用指定的工作流程定義和輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />，以同步方式叫用工作流程。</summary>
        <returns>包含活動執行結果之型別 TResult 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。 此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流程的型別。</typeparam>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</summary>
        <returns>包含活動執行結果之型別 TResult 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。 此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流程的型別。</typeparam>
        <param name="workflow">要叫用之工作流程的工作流程定義。</param>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="additionalOutputs">工作流程的其他輸出參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />、其他輸出參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</summary>
        <returns>包含活動執行結果之型別 TResult 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖至工作流程完成為止，包括閒置時間。 所有工作流程執行都一定會在叫用執行緒上執行。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
   
  
## Examples  
 下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。 叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。 當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。 此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用事件架構非同步設計模式，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <summary>使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 來非同步叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</param>
        <summary>使用指定的唯一識別碼，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。 如果 `userState` 參數不是唯一，則會擲回 <xref:System.ArgumentException>。 `userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。  
  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的逾時間隔，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="userState">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</param>
        <summary>使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和唯一識別碼，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。 如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。 `userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。  
  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <summary>使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的逾時間隔，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <param name="userState">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</param>
        <summary>使用指定的逾時間隔和唯一識別碼，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。 如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。 `userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。  
  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">工作流程的輸入參數字典，以引數名稱做為索引鍵。</param>
        <param name="timeout">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</param>
        <param name="userState">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</param>
        <summary>使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" />、指定的逾時間隔和唯一識別碼，以非同步方式叫用工作流程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。 如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。 `userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。  
  
 若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。 需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。  
  
 這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。 如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在已完成或已取消其中一個 <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 多載所叫用的工作流程時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以處理這個事件，以便判斷使用其中一個 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 多載所叫用的工作流程是否已順利完成，並且擷取已完成工作流程的輸出引數。  
  
   
  
## Examples  
 下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。 `LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。 工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>