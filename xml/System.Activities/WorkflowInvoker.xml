<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1d6a938287920a69315e465828e1e66bb9224e5" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51895685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e13fd-101">如同方法叫用般，提供叫用工作流程的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e13fd-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-102"><xref:System.Activities.WorkflowInvoker> 同時包含以同步方式叫用工作流程的執行個體和靜態方法，以及以非同步方式叫用工作流程的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e13fd-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="e13fd-103"><xref:System.Activities.WorkflowInvoker> 不允許如保存、卸載或繼續書籤等執行個體控制項。</span><span class="sxs-lookup"><span data-stu-id="e13fd-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="e13fd-104">如果需要執行個體控制項，請改用 <xref:System.Activities.WorkflowApplication>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="e13fd-105">若要在沒有執行個體控制項的狀況下同步執行工作流程，請呼叫 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e13fd-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="e13fd-106">若要在沒有執行個體控制項的狀況下非同步執行工作流程，請使用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 和 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法配對，或 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e13fd-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-107">下列範例會使用 <xref:System.Activities.Statements.WriteLine>，以同步方式叫用由單一 <xref:System.Activities.WorkflowInvoker> 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="e13fd-108">要由這個 <see cref="T:System.Activities.WorkflowInvoker" /> 類別執行個體叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-109">初始化 <see cref="T:System.Activities.WorkflowInvoker" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-110"><xref:System.Activities.WorkflowInvoker> 同時包含以同步方式叫用工作流程的執行個體和靜態方法，以及以非同步方式叫用工作流程的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e13fd-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-111">下列範例會叫用由單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-112">使用 <see cref="T:System.IAsyncResult" /> 非同步設計模式，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-113">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="e13fd-114">在工作流程完成時所要呼叫的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="e13fd-115">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-116">使用指定的 <see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-117">非同步叫用作業的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-118">若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。</span><span class="sxs-lookup"><span data-stu-id="e13fd-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="e13fd-119">如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。</span><span class="sxs-lookup"><span data-stu-id="e13fd-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="e13fd-120">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-121">這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-122">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-123">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-124">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-125">您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="e13fd-126">當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-127">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="e13fd-128">在工作流程完成時所要呼叫的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="e13fd-129">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-130">使用輸入參數指定的 <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-131">非同步叫用作業的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-132">若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。</span><span class="sxs-lookup"><span data-stu-id="e13fd-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="e13fd-133">如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。</span><span class="sxs-lookup"><span data-stu-id="e13fd-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="e13fd-134">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-135">這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-136">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-137">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-138">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-139">您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="e13fd-140">當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="e13fd-141">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="e13fd-142">在工作流程完成時所要呼叫的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="e13fd-143">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-144">使用指定的逾時間隔、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-145">非同步叫用作業的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-146">若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。</span><span class="sxs-lookup"><span data-stu-id="e13fd-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="e13fd-147">如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。</span><span class="sxs-lookup"><span data-stu-id="e13fd-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="e13fd-148">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並在呼叫 <xref:System.TimeoutException> 方法時擲回 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-149">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-150">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-151">這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-152">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-153">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-154">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-155">您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="e13fd-156">當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-157">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-158">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="e13fd-159">在工作流程完成時所要呼叫的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="e13fd-160">選擇性的應用程式特定物件，含有非同步作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-161">使用輸入參數指定的 <see cref="T:System.Collections.Generic.IDictionary`2" />、逾時間隔、<see cref="T:System.AsyncCallback" /> 和使用者提供的狀態，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-162">非同步叫用作業的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-163">若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法呼叫 `callback`。</span><span class="sxs-lookup"><span data-stu-id="e13fd-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="e13fd-164">如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。</span><span class="sxs-lookup"><span data-stu-id="e13fd-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="e13fd-165">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並在呼叫 <xref:System.TimeoutException> 時擲回 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-166">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-167">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-168">這個方法會使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-169">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-170">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-171">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-172">您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="e13fd-173">當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="e13fd-174">要取消之工作流程的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-175">嘗試取消使用指定之 <paramref name="userState" /> 所叫用的工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-176">只能取消其中一個接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數的 `userState` 多載所叫用之工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="e13fd-177">如果取消成功，<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>屬性<xref:System.Activities.InvokeCompletedEventArgs>傳遞至<xref:System.Activities.WorkflowInvoker.InvokeCompleted>處理常式設定為`true`; 否則它會設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="e13fd-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-178">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-179">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-180">一旦叫用此工作流程，主機就會嘗試取消工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="e13fd-181">
            <see cref="T:System.IAsyncResult" />，參考開始工作流程的 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-182">傳回使用其中一個 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 多載所叫用之工作流程的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-183">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-184">若要在工作流程完成並擷取工作流程的輸出參數時收到通知，請從 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 指定的 `callback` 方法呼叫<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="e13fd-185">如果在工作流程完成前呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，它會封鎖直到工作流程完成為止。</span><span class="sxs-lookup"><span data-stu-id="e13fd-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="e13fd-186">這個方法會傳回使用 <xref:System.IAsyncResult> 非同步設計模式，以非同步方式叫用之工作流程的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-187">如需詳細資訊，請參閱 <<c0> [ 非同步程式設計的概觀](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-188">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-189">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-190">您可以透過呼叫 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="e13fd-191">當 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-192">取得延伸的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，可用於由 <see cref="T:System.Activities.WorkflowInvoker" /> 執行個體叫用的工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e13fd-193">延伸的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，可用於由 <see cref="T:System.Activities.WorkflowInvoker" /> 執行個體叫用的工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-194">工作流程主機作者會使用這個屬性，將延伸加入至 <xref:System.Activities.WorkflowInvoker> 執行個體，以便將它們提供給該執行個體所叫用的工作流程使用。</span><span class="sxs-lookup"><span data-stu-id="e13fd-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-195">下列範例會使用 <xref:System.Activities.Tracking.TrackingParticipant> 執行個體的 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 集合來登錄自訂 <xref:System.Activities.WorkflowInvoker>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="e13fd-196">此程式碼範例是一部分[自訂追蹤](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)範例。</span><span class="sxs-lookup"><span data-stu-id="e13fd-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-197">以同步方式叫用工作流程並傳回根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-198">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-199">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-200">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-201">使用傳遞給 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 建構函式的工作流程定義，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-202">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-203">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-204">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-205">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-206">下列範例會叫用由單一 `DiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="e13fd-207">`DiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-208">當 `Invoke` 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="e13fd-209">工作流程會叫用兩次，使用傳遞至工作流程定義`WorkflowInvoker`建構函式。</span><span class="sxs-lookup"><span data-stu-id="e13fd-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="e13fd-210">如果此工作流程的根活動沒有任何輸出引數，或者主機不需要這些引數，它們可能會被忽略。</span><span class="sxs-lookup"><span data-stu-id="e13fd-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="e13fd-211">下列範例會叫用由沒有任何輸出引數之單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="e13fd-212">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-213">使用指定的工作流程定義，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-214">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-215">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-216">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-217">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-218">下列範例會叫用由單一 `DiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="e13fd-219">`DiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-220">當 `Invoke` 的呼叫傳回時，每個輸出引數都會傳入 outputs 字典 (以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="e13fd-221">如果此工作流程的根活動沒有任何輸出引數，或者主機不需要這些引數，它們可能會被忽略。</span><span class="sxs-lookup"><span data-stu-id="e13fd-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="e13fd-222">下列範例會叫用由沒有任何輸出引數之單一 <xref:System.Activities.Statements.WriteLine> 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-223">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-224">使用指定的輸入參數 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />，以同步方式叫用傳遞至 <see cref="T:System.Collections.Generic.IDictionary`2" /> 建構函式的活動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-225">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-226">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-227">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-228">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-229">下列範例會叫用由具有兩個輸入引數和兩個輸出引數之單一 `Divide` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="e13fd-230">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-231">當傳回 `Invoke` 的呼叫時，每個輸出引數都會傳入 `outputs` 字典 (也以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="e13fd-232">如果工作流程衍生自<xref:System.Activities.ActivityWithResult>，這類`CodeActivity<TResult>`或是`Activity<TResult>`，而且除了定義完善的輸出引數<xref:System.Activities.Activity%601.Result%2A>輸出引數的非泛型多載`Invoke`，此類，必須使用若要擷取的其他引數的順序。</span><span class="sxs-lookup"><span data-stu-id="e13fd-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="e13fd-233">若要這樣做，工作流程定義傳遞給`WorkflowInvoker`建構函式必須是型別<xref:System.Activities.Activity>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="e13fd-234">在此範例中`Divide`活動衍生自`CodeActivity<int>`，但宣告為<xref:System.Activities.Activity>使這個多載`Invoke`，它會傳回而不是單一的傳回值的引數的字典會使用。</span><span class="sxs-lookup"><span data-stu-id="e13fd-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="e13fd-235">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-236">使用指定的逾時間隔，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-237">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-238">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-239">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-240">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-241">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-242">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-243">下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="e13fd-244">系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="e13fd-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="e13fd-245">第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException> 並顯示下列訊息。</span><span class="sxs-lookup"><span data-stu-id="e13fd-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="e13fd-246">如需使用的範例`Invoke`輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="e13fd-247">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="e13fd-248">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-249">使用指定的工作流程定義和輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-250">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-251">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-252">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-253">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-254">下列範例會叫用由具有兩個輸入引數和兩個輸出引數之單一 `Divide` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="e13fd-255">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-256">當傳回 `Invoke` 的呼叫時，每個輸出引數都會傳入 `outputs` 字典 (也以引數名稱做為索引鍵)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="e13fd-257">如果工作流程衍生自<xref:System.Activities.ActivityWithResult>，這類`CodeActivity<TResult>`或是`Activity<TResult>`，而且除了定義完善的輸出引數<xref:System.Activities.Activity%601.Result%2A>輸出引數的非泛型多載`Invoke`，此類，必須使用若要擷取的其他引數的順序。</span><span class="sxs-lookup"><span data-stu-id="e13fd-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="e13fd-258">若要這樣做，傳遞給 `Invoke` 的工作流程定義必須屬於 <xref:System.Activities.Activity> 型別。</span><span class="sxs-lookup"><span data-stu-id="e13fd-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="e13fd-259">在此範例中`Divide`活動衍生自`CodeActivity<int>`，但宣告為<xref:System.Activities.Activity>使這個多載`Invoke`，它會傳回而不是單一的傳回值的引數的字典會使用。</span><span class="sxs-lookup"><span data-stu-id="e13fd-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="e13fd-260">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-261">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-262">使用指定的工作流程定義和逾時間隔，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-263">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-264">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-265">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-266">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-267">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-268">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-269">下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="e13fd-270">系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="e13fd-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="e13fd-271">第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="e13fd-272">如需使用的範例`Invoke`輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-273">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-274">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-275">使用指定的輸入參數 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 和指定的逾時間隔，以同步方式叫用傳遞至 <see cref="T:System.Collections.Generic.IDictionary`2" /> 建構函式的活動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-276">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-277">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-278">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-279">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-280">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-281">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-282">下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="e13fd-283">系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="e13fd-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="e13fd-284">第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException> 並顯示下列訊息。</span><span class="sxs-lookup"><span data-stu-id="e13fd-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="e13fd-285">如需使用的範例`Invoke`輸入和輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="e13fd-286">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="e13fd-287">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-288">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-289">使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-290">根活動之 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值 (以引數名稱做為索引鍵) 的字典，這些值代表工作流程的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-291">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-292">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-293">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-294">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-295">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-296">下列範例會叫用包含兩個 <xref:System.Activities.Statements.WriteLine> 活動以及一個使用 <xref:System.Activities.Statements.Delay> 為一分鐘所設定之 <xref:System.Activities.Statements.Delay.Duration%2A> 活動的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="e13fd-297">系統會叫用此工作流程兩次：第一次使用兩分鐘的逾時間隔，而第二次使用 30 秒的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="e13fd-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="e13fd-298">第一個工作流程會順利完成，但是第二個卻不會，因而擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="e13fd-299">如需使用的範例`Invoke`輸入和輸出引數時，請參閱的多載<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用這個多載，而不需要的逾時間隔為相同的參數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e13fd-300">工作流程的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="e13fd-301">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="e13fd-302">需要從 <see cref="T:System.Activities.ActivityWithResult" /> 衍生的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-303">使用傳遞給 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 建構函式的工作流程定義，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-304">包含活動執行結果之型別 TResult 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-305">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-306">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-307">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-308">下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="e13fd-309">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-310">當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。</span><span class="sxs-lookup"><span data-stu-id="e13fd-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="e13fd-311">此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。</span><span class="sxs-lookup"><span data-stu-id="e13fd-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e13fd-312">工作流程的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="e13fd-313">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="e13fd-314">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-315">使用指定的工作流程定義和輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-316">包含活動執行結果之型別 TResult 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-317">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-318">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-319">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-320">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-321">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-322">下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="e13fd-323">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-324">當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。</span><span class="sxs-lookup"><span data-stu-id="e13fd-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="e13fd-325">此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。</span><span class="sxs-lookup"><span data-stu-id="e13fd-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e13fd-326">工作流程的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="e13fd-327">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="e13fd-328">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-329">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-330">使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-331">包含活動執行結果之型別 TResult 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-332">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-333">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-334">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-335">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-336">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-337">下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="e13fd-338">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-339">當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。</span><span class="sxs-lookup"><span data-stu-id="e13fd-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="e13fd-340">此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。</span><span class="sxs-lookup"><span data-stu-id="e13fd-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e13fd-341">工作流程的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="e13fd-342">要叫用之工作流程的工作流程定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="e13fd-343">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="e13fd-344">工作流程的其他輸出參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-345">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-346">使用指定的工作流程定義、輸入參數的 <see cref="T:System.Collections.Generic.IDictionary`2" />、其他輸出參數的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和逾時間隔，以同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e13fd-347">包含活動執行結果之型別 TResult 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-348">這個方法會封鎖至工作流程完成為止，包括閒置時間。</span><span class="sxs-lookup"><span data-stu-id="e13fd-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="e13fd-349">所有工作流程執行都一定會在叫用執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="e13fd-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="e13fd-350">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-351">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-352">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-353">下列範例會叫用組成的單一工作流程`Add`有兩個輸入引數的活動，因為它衍生自`CodeActivity<int>`它具有一個定義完善<xref:System.Activities.Activity%601.Result%2A>輸出引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="e13fd-354">叫用此工作流程時，系統會傳遞包含每個輸入引數之值 (以引數名稱做為索引鍵) 的 `arguments` 字典。</span><span class="sxs-lookup"><span data-stu-id="e13fd-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="e13fd-355">當呼叫`Invoke`傳回的值<xref:System.Activities.Activity%601.Result%2A>輸出引數會傳回。</span><span class="sxs-lookup"><span data-stu-id="e13fd-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="e13fd-356">此程式碼範例根據關閉最[使用 WorkflowInvoker 類別](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)範例。</span><span class="sxs-lookup"><span data-stu-id="e13fd-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-357">使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-358">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-359">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-360">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-361">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-362">以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-363">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-364">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-365">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-366">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-367">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-368">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-369">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-370">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-371">使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 來非同步叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-372">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-373">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-374">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-375">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-376">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-377">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-378">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="e13fd-379">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-380">使用指定的唯一識別碼，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-381">在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="e13fd-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="e13fd-382">如果 `userState` 參數不是唯一，則會擲回 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="e13fd-383">`userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="e13fd-384">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-385">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-386">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-387">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-388">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-389">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-390">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="e13fd-391">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-392">使用指定的逾時間隔，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-393">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-394">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-395">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-396">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-397">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-398">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-399">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-400">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-401">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-402">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="e13fd-403">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-404">使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和唯一識別碼，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-405">在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="e13fd-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="e13fd-406">如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="e13fd-407">`userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="e13fd-408">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-409">若要設定工作流程必須完成的逾時間隔，請使用接受 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的其中一個 <xref:System.TimeSpan> 多載。</span><span class="sxs-lookup"><span data-stu-id="e13fd-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="e13fd-410">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-411">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-412">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-413">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-414">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-415">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-416">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-417">使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的逾時間隔，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-418">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-419">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-420">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-421">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-422">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-423">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-424">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-425">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-426">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="e13fd-427">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="e13fd-428">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-429">使用指定的逾時間隔和唯一識別碼，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-430">在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="e13fd-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="e13fd-431">如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="e13fd-432">`userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="e13fd-433">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-434">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-435">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-436">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-437">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-438">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-439">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-440">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-441">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="e13fd-442">工作流程的輸入參數字典，以引數名稱做為索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e13fd-443">工作流程必須在其中止並擲回 <see cref="T:System.TimeoutException" /> 前完成的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="e13fd-444">使用者提供的物件，可用來區別這個特定非同步叫用作業以及目前其他的非同步叫用作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e13fd-445">使用指定的輸入參數 <see cref="T:System.Collections.Generic.IDictionary`2" />、指定的逾時間隔和唯一識別碼，以非同步方式叫用工作流程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-446">在目前活動的所有執行中`userState` 作業裡，<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 參數必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="e13fd-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="e13fd-447">如果 `userState` 不是唯一，則會擲回 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="e13fd-448">`userState` 會用來識別 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 中的工作流程，並使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消此工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="e13fd-449">若要在工作流程完成時收到通知，請處理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="e13fd-450">如果工作流程沒有在指定的逾時間隔內完成，則工作流程會中止並擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13fd-451">只有在超過逾時間隔及工作流程在執行期間變成閒置狀態時，才會擲回 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="e13fd-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="e13fd-452">需要比指定的逾時間隔還長的時間才能完成的工作流程，會在工作流程沒有變成閒置狀態時成功完成。</span><span class="sxs-lookup"><span data-stu-id="e13fd-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="e13fd-453">這個方法會使用事件架構非同步設計模式，以非同步方式叫用工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="e13fd-454">如需詳細資訊，請參閱[事件架構非同步模式概觀](https://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="e13fd-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-455">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-456">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-457">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e13fd-458">在已完成或已取消其中一個 <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 多載所叫用的工作流程時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e13fd-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13fd-459">您可以處理這個事件，以便判斷使用其中一個 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 多載所叫用的工作流程是否已順利完成，並且擷取已完成工作流程的輸出引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13fd-460">下列範例會叫用由 `LongRunningDiceRoll` 活動組成的工作流程。</span><span class="sxs-lookup"><span data-stu-id="e13fd-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="e13fd-461">`LongRunningDiceRoll` 活動具有兩個輸出引數，這些引數代表擲骰作業的結果。</span><span class="sxs-lookup"><span data-stu-id="e13fd-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="e13fd-462">工作流程完成時，<xref:System.Activities.WorkflowInvoker.InvokeCompleted> 處理常式就會擷取這些引數。</span><span class="sxs-lookup"><span data-stu-id="e13fd-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>