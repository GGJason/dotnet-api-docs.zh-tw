<Namespace Name="System.Xml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb44bea98303863eeefc84ff749891c38fa614cf" /><Meta Name="ms.sourcegitcommit" Value="112ca25eddde8ac8b788d67c406b7745ba914261" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/15/2019" /><Meta Name="ms.locfileid" Value="54313490" /></Metadata><Docs>
    <summary><see cref="N:System.Xml" /> 命名空間提供處理 XML 的標準架構支援。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>支援的標準  
 <xref:System.Xml>命名空間支援這些標準：  
  
- [XML 1.0 版，包括 DTD 支援](https://www.w3.org/TR/2006/REC-xml-20060816/)  
  
- [XML 命名空間](https://www.w3.org/TR/REC-xml-names/)，這兩個資料流層級和 DOM  
  
- [XML 結構描述](https://www.w3.org/2001/XMLSchema)  
  
- [XPath 運算式](https://www.w3.org/TR/xpath)  
  
- [XSLT 轉換](https://www.w3.org/TR/xslt)  
  
- [DOM 層級 1 核心](https://www.w3.org/TR/REC-DOM-Level-1/)  
  
- [DOM 層級 2 核心](https://www.w3.org/TR/DOM-Level-2/)  
  
 請參閱章節[與 W3C 規格之間的差異](#diff)所在的 XML 類別與不同的 W3C 建議的兩個案例。  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>相關的命名空間  
 .NET Framework 也提供其他命名空間與 XML 相關的作業。 如需清單、 描述和連結，請參閱[System.Xml 命名空間](https://msdn.microsoft.com/library/gg145036.aspx)網頁。  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>以非同步方式處理 XML  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType>和<xref:System.Xml.XmlWriter?displayProperty=nameWithType>類別包括數目為基礎的非同步方法。 這些方法可以識別由字串"Async"結尾的名稱。 使用這些方法，您可以撰寫非同步程式碼類似於同步的程式碼，而且您可以輕鬆地將您現有的同步程式碼移轉至非同步程式碼。  
  
-   在 應用程式中使用非同步方法沒有明顯的網路資料流的延遲。 避免使用的記憶體資料流或本機檔案資料流讀取/寫入作業的非同步 Api。 輸入資料流中， <xref:System.Xml.XmlTextReader>，和<xref:System.Xml.XmlTextWriter>應支援非同步的作業。 否則，執行緒仍然會被 I/O 作業所封鎖。  
  
-   我們不建議混合同步和非同步函式呼叫，因為您可能忘了使用`await`關鍵字或使用其中一個非同步是必要的同步 API。  
  
-   未設定<xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType>或是<xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType>旗標設為`true`如果您不想要使用非同步方法。  
  
-   如果您忘記指定`await`關鍵字呼叫非同步方法時，結果會不具決定性：您可能會收到您所預期的結果或例外狀況。  
  
-   當<xref:System.Xml.XmlReader>物件讀取大型文字節點，它可能會快取只有部分的文字值，並傳回文字節點，因此擷取<xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType>屬性可能會封鎖 I/O 作業。 使用 <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType>方法來取得文字值，在非同步模式中，或使用<xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType>區塊 （chunk） 中的方法，以讀取大型文字區塊。  
  
-   當您使用<xref:System.Xml.XmlWriter>物件，請呼叫<xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType>方法之前呼叫<xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType>以避免封鎖 I/O 作業。  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>與 W3C 規格之間的差異  
 在兩種情況會牽涉到模型群組結構描述元件條件約束<xref:System.Xml>命名空間與 W3C 建議事項。  
  
 **項目宣告中的一致性：**  
  
 在某些情況下，當使用替代群組時，<xref:System.Xml>實作不符合 「 結構描述元件條件約束：元素宣告一致 」、 「 中所述[模型群組結構描述元件條件約束](https://go.microsoft.com/fwlink/?LinkId=137029)在 W3C 規格的章節。  
  
 例如，下列結構描述包含具有相同名稱的項目，但會使用相同的內容模型和替代群組中的不同類型。 這應該會造成錯誤，但是 <xref:System.Xml> 會編譯和驗證該結構描述，而不會有錯誤。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 在此結構描述中，型別 `t3` 包含項目順序。 因為替代之故，對序列中 `e1` 項目的參考可能會產生 `e1` 型別的 `t1` 項目或是 `e2` 型別的 `t2` 項目。 後者的情況下可能會導致兩個序列`e2`項目，其中有一個是類型`t2`，另一個是型別的`xs:int`。  
  
 **唯一物件屬性：**  
  
 在下列情況中，<xref:System.Xml>實作不符合 「 結構描述元件條件約束：唯一物件屬性，」 中所述[模型群組結構描述元件條件約束](https://go.microsoft.com/fwlink/?LinkId=137029)在 W3C 規格的章節。  
  
-   群組中的其中一個項目參考其他項目。  
  
-   參考的項目是替代群組的標頭項目。  
  
-   替代群組會包含具有相同名稱做為其中一個項目群組中的項目。  
  
-   參考替代群組標頭項目和具有相同名稱的項目，因為不固定的替代群組項目之項目的基數 (minOccurs < maxOccurs)。  
  
-   參考替代群組的項目定義在之前替代群組項目同名的項目的定義。  
  
 例如，在內容模型下方的結構描述是模稜兩可的，而且應該會造成編譯錯誤，但是 <xref:System.Xml> 會編譯該結構描述，而不會有錯誤。  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 如果您嘗試驗證下列 XML 程式碼針對上述的結構描述，驗證將會失敗並出現下列訊息：「 項目 'e3' 有無效的子項目 'e2' 」。 和<xref:System.Xml.Schema.XmlSchemaValidationException>會擲回例外狀況。  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 若要解決此問題，您可以交換 XSD 文件中的項目宣告。 例如：  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 變成：  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 以下是問題的另一個範例相同:  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 如果您嘗試驗證下列 XML 程式碼針對上述的結構描述，驗證將會失敗，發生下列例外狀況：「 未處理例外狀況：System.Xml.Schema.XmlSchemaValidationException:'E2' el 項目無效-根據其資料類型的值 'abc' 無效 'http://www.w3.org/2001/XMLSchema:int'-字串 'abc' 不是有效的 Int32 值。 」
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>安全性考量  
 型別和成員<xref:System.Xml>命名空間依賴[.NET 安全性系統](~/docs/standard/security/index.md)。 下列各節討論專屬於 XML 技術的安全性問題。
  
 也請注意，當您使用<xref:System.Xml>類型和成員，如果 XML 包含有潛在的隱私權影響的資料，您需要以尊重使用者隱私權的方式實作您的應用程式。
  
 **外部存取**  
  
 有幾個 XML 技術能夠在處理期間擷取其他文件。 例如，文件類型定義 (DTD) 可位於要剖析的文件中。 DTD 還可以存在於要剖析之文件所參考的外部文件中。 XML 結構描述定義語言 (XSD) 及 XSLT 技術還能夠包含其他檔案的資訊。 這些外部資源會帶來一些安全性考量。 比方說，您會想要確保只從受信任的網站，您的應用程式會擷取的檔案，並將它擷取檔案不包含惡意資料。  
  
 <xref:System.Xml.XmlUrlResolver>類別用來載入 XML 文件以及解析外部資源，例如實體、 Dtd 或結構描述，以及匯入或 include 指示詞。  
  
 您可以覆寫這個類別，並指定<xref:System.Xml.XmlResolver>若要使用的物件。 如果您需要開啟不是由您控制或不受信任的資源，請使用 <xref:System.Xml.XmlSecureResolver> 類別。 <xref:System.Xml.XmlSecureResolver> 可包裝 <xref:System.Xml.XmlResolver>，並可讓您限制基礎 <xref:System.Xml.XmlResolver> 可存取的資源。  
  
 **阻斷服務**  
  
 下列案例較不易受阻斷服務的攻擊，因為 <xref:System.Xml> 類別會提供保護免受此類攻擊的方法。  
  
-   剖析文字 XML 資料。  
  
-   如果 Microsoft SQL Server 所產生的二進位的 XML 資料，請剖析二進位 XML 資料。  
  
-   將 XML 文件及片段從資料來源寫入檔案系統、資料流、<xref:System.IO.TextWriter> 或 <xref:System.Text.StringBuilder>。  
  
-   如果您正使用 <xref:System.Xml.XmlReader> 物件，請將文件載入文件物件模型 (DOM) 物件，並將 <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> 設為 <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>。  
  
-   巡覽 DOM 物件。  
  
 如果您擔心遭受阻斷服務攻擊，或正在不受信任的環境下工作，不建議您使用下列案例。  
  
-   DTD 處理。  
  
-   結構描述處理。 這包括將不受信任的結構描述加入至結構描述集合、編譯不受信任的結構描述，以及使用不受信任的結構描述進行驗證。  
  
-   XSLT 處理。  
  
-   剖析使用者提供之二進位 XML 資料的任意資料流。  
  
-   DOM 作業，如查詢、編輯、在文件之間移動子樹狀目錄，以及儲存 DOM 物件。  
  
 如果您顧慮阻絕服務問題，或您正在處理不受信任的來源，請勿啟用 DTD 處理。 這預設會停用上<xref:System.Xml.XmlReader>物件的<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法會建立。  
  
> [!NOTE]
>  根據預設，<xref:System.Xml.XmlTextReader> 允許 DTD 處理。 請使用 <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> 屬性停用此功能。  
  
 如果您已啟用 DTD 處理，您可以使用<xref:System.Xml.XmlSecureResolver>類別，以限制的資源，<xref:System.Xml.XmlReader>可以存取。 您也可以設計您的應用程式，讓 XML 處理具有記憶體和時間限制。 比方說，您可以設定逾時限制在您的 ASP.NET 應用程式。  
  
 **處理考量**  
  
 因為 XML 文件可以包含其他檔案的參考，所以很難判定需要多大的處理能力來剖析 XML 文件。 例如，XML 文件可以包含 DTD。 如果 DTD 包含巢狀實體或複雜的內容模型，則剖析文件會花費大量的時間。  
  
 當使用 <xref:System.Xml.XmlReader> 時，您可以限制文件的大小，該文件可藉由設定 <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType> 屬性來加以剖析。 您可以藉由設定 <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType> 屬性來限制從擴充實體所產生的字元數目。 如需設定這些屬性的範例，請參閱適當的參考主題。  
  
 XSD 及 XSLT 技術具有可影響處理效能的其他功能。 例如，評估很小的文件時，可能會建構需要大量時間進行處理的 XML 結構描述。 還可能將指令碼區塊嵌入 XSLT 樣式表中。 這兩種情況會造成潛在的安全性威脅，您的應用程式。  
  
 當建立應用程式使用<xref:System.Xml.Xsl.XslCompiledTransform>類別，您應該留意下列項目及其含意：  
  
-   依預設會停用 XSLT 指令碼。 僅當需要指令碼支援且在完全受信任的環境中運作時，才應啟用 XSLT 指令碼。  
  
-   依預設會停用 XSLT `document()` 函式。 如果您啟用 `document()` 函式，則藉由傳遞 <xref:System.Xml.XmlSecureResolver> 物件至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法，限制可存取的資源。  
  
-   依預設會啟用擴充物件。 如果將包含擴充物件的 <xref:System.Xml.Xsl.XsltArgumentList> 物件傳遞給 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法，則會使用這些擴充物件。  
  
-   XSLT 樣式表可以包含其他檔案及內嵌指令碼區塊的參考。 居心不良的使用者會利用這一點，藉由提供您資料或樣式表，使您因執行他們而導致系統持續處理，直到電腦資源不足，來進行攻擊。  
  
-   在混合的信任環境中執行的 XSLT 應用程式可能會導致詐騙的樣式表。 例如，居心不良的使用者可載入含有害樣式表的物件，然後將其傳遞給另一使用者，該使用者隨後會呼叫 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法並執行轉換。  
  
 不啟用指令碼或 `document()` 函式 (除非樣式表來自信任的來源)，不接受來自不受信任來源的 <xref:System.Xml.Xsl.XslCompiledTransform> 物件、XSLT 樣式表或 XML 來源資料，可減輕這些安全性問題。  
  
 **例外狀況處理**  
  
 較低的層級元件所擲回例外狀況可能會洩露路徑資訊，您不想公開給應用程式。 您的應用程式必須攔截例外狀況，並適當地處理它們。  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 文件和資料</related>
  </Docs>
</Namespace>