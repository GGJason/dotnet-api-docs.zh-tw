<Type Name="ServiceDomain" FullName="System.EnterpriseServices.ServiceDomain">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a5b9fb677db63a2b92f36b41c91ebb70cd4c0c3f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ServiceDomain" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceDomain extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServiceDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceDomain" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceDomain sealed" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>可以讓 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 和 <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> 所識別的程式碼區段在其本身的內容中執行，而且行為表現得就像是在內容中所建立之物件上呼叫的方法。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和<xref:System.EnterpriseServices.ServiceDomain.Leave%2A>方法會用於成對圍繞接著可以使用 COM + 服務的程式碼。 程式碼之間呼叫括住<xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和<xref:System.EnterpriseServices.ServiceDomain.Leave%2A>會在它自己的內容中執行，而且行為表現就好像在內容中建立的物件呼叫的方法。 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和<xref:System.EnterpriseServices.ServiceDomain.Leave%2A>配對可以巢狀。 會決定使用者必須確認呼叫配對的平衡，讓每次呼叫<xref:System.EnterpriseServices.ServiceDomain.Leave%2A>符合先前呼叫<xref:System.EnterpriseServices.ServiceDomain.Enter%2A>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (System.EnterpriseServices.ServiceConfig cfg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(class System.EnterpriseServices.ServiceConfig cfg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (cfg As ServiceConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::EnterpriseServices::ServiceConfig ^ cfg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cfg" Type="System.EnterpriseServices.ServiceConfig" />
      </Parameters>
      <Docs>
        <param name="cfg">
          <see cref="T:System.EnterpriseServices.ServiceConfig" />，包含要在被封入程式碼內使用的服務組態資訊。</param>
        <summary>建立 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 物件所指定的內容，並將之推送至內容堆疊以成為目前內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> 第一次建立設定為所指定的內容<xref:System.EnterpriseServices.ServiceConfig>物件傳遞為`cfg`參數。 如同方法呼叫已經發生，則會觸發用戶端和伺服器端的原則。 新的內容再推入至內容堆疊，並成為目前的內容。 由於其有效率的設計，而且因為沒有執行緒封送處理與此有關，使用<xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和<xref:System.EnterpriseServices.ServiceDomain.Leave%2A>牽涉到大幅減少額外負荷相較於對等的方法呼叫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          目前的平台上不支援 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static System.EnterpriseServices.TransactionStatus Leave ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.EnterpriseServices.TransactionStatus Leave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Leave () As TransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::EnterpriseServices::TransactionStatus Leave();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.TransactionStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>觸發伺服器，並接著觸發用戶端原則，就好像方法呼叫正在返回。 然後再從內容堆疊中取出目前內容，而呼叫 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 當時所正在執行的內容即會成為目前內容。</summary>
        <returns>其中一個 <see cref="T:System.EnterpriseServices.TransactionStatus" /> 值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          目前的平台上不支援 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>