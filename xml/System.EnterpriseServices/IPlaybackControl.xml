<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6815ba4b5f1a28e19f3e20cacd2ad88dd4f8118f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48600213" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>異常處理之佇列元件中的函式 (這個異常處理用於佇列傳遞機制中的伺服器端播放錯誤及用戶端失敗)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對 COM + 目錄中的元件會實作所定義的例外狀況類別<xref:System.EnterpriseServices.IPlaybackControl>和原始類別的介面。 原始的類別介面的方法實作用來執行失敗的方法在類別本身中處理的例外狀況。 將會呼叫後<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>或<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>處理例外狀況的原始呼叫的方法。  
  
 已排入佇列元件播放程式呼叫的方法<xref:System.EnterpriseServices.IPlaybackControl>通知即將要放在最後的上來或寄不出信件佇列訊息的例外狀況處理常式物件。 已排入佇列元件播放程式然後會呼叫原始方法呼叫中失敗的例外狀況處理常式物件中的相同的方法。 例外狀況處理常式物件可以實作替代方式，例如收集問題的診斷資訊，或產生的物件或訊息，告知用戶端的問題。 如果應用程式不會實作<xref:System.EnterpriseServices.IPlaybackControl>，有害訊息置於最終上來或寄不出信件佇列時排入佇列元件播放程式耗盡所有重試。  
  
 有害訊息是不能因為發生問題的伺服器或佇列的系統因為某種原因，可能是處理的訊息。 交易已回復，與有害訊息會進入佇列頂端。 訊息已從佇列清除一次，就會發生相同的條件。 此訊息可以繼續迴圈項目為了修正此問題之前，無限期。 已排入佇列元件服務會使用一系列的重試次數，以處理有害訊息。 後幾個失敗的重試，訊息會移至最終的休止佇列。 有害訊息會保留在之前使用已排入佇列的元件訊息 Mover 工具手動移動的休止佇列。  
  
 有害訊息的情況下可以也會解析以程式設計的方式，使用<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>; 方法來通知伺服器端元件作者所播放的延遲啟動過程的所有嘗試都失敗。  
  
 如果您發現有害訊息時，您可以快速解決問題的根本原因。 例如，如果伺服器已離線的因為某些原因，您可以將伺服器恢復連線。 如果您不能快速解決問題，您可以自動產生的通知要求者的交易不會發生另一個交易。 要求者接著可以反轉已經認可交易的補償交易。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知用戶端例外狀況處理元件，嘗試傳遞訊息至伺服器的所有訊息佇列都遭到拒絕，以及訊息已在用戶端 Xact Dead Letter 佇列上結束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當訊息送達 Xact Dead Letter 佇列，COM + 嘗試叫用相關的伺服器類別，來傳遞這項通知的用戶端例外狀況處理常式。 其作法是先呼叫<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>，然後呼叫該例外狀況處理版本之失敗的方法中的例外狀況處理常式物件。 這個例外狀況的方法可以做出一些例外狀況回應，例如記錄失敗、 傳送的電子郵件訊息給系統管理員，或採取用戶端 （反轉先前交易的效果） 的補償動作。 如果例外狀況的方法不成功，訊息就會留在 Xact Dead Letter 佇列上。  
  
 在 Microsoft Message Queue (MSMQ) 總管 中，您可以檢視 Xact Dead Letter 佇列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知伺服器端例外狀況類別實作，所有嘗試播放對伺服器的延遲啟動過程都已經失敗，而訊息將會搬移至其最終的休止佇列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當訊息送達 Xact Dead Letter 佇列上時，COM + 嘗試叫用伺服器類別，來傳遞這項通知的相關伺服器端例外狀況處理常式。 其作法是先呼叫<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>，則呼叫例外狀況處理的例外狀況處理常式物件中失敗的方法版本。 這個例外狀況的方法可以做出一些例外狀況回應，例如記錄失敗、 傳送的電子郵件訊息給系統管理員，或採取用戶端 （反轉先前交易的效果） 的補償動作。 伺服器物件應該盡所有努力順利完成此交易。 否則，請手動介入的情況下，才能重新處理訊息。 如果例外狀況方法失敗，訊息會移至最終的休止佇列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>