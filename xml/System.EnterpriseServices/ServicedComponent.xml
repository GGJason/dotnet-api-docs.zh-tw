<Type Name="ServicedComponent" FullName="System.EnterpriseServices.ServicedComponent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="008c7c0f9f5e73b275f37be16132968bab775a11" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51887092" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ServicedComponent : ContextBoundObject, IDisposable, System.EnterpriseServices.IRemoteDispatch, System.EnterpriseServices.IServicedComponentInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable ServicedComponent extends System.ContextBoundObject implements class System.EnterpriseServices.IRemoteDispatch, class System.EnterpriseServices.IServicedComponentInfo, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServicedComponent&#xA;Inherits ContextBoundObject&#xA;Implements IDisposable, IRemoteDispatch, IServicedComponentInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServicedComponent abstract : ContextBoundObject, IDisposable, System::EnterpriseServices::IRemoteDispatch, System::EnterpriseServices::IServicedComponentInfo" />
  <TypeSignature Language="F#" Value="type ServicedComponent = class&#xA;    inherit ContextBoundObject&#xA;    interface IRemoteDispatch&#xA;    interface IDisposable&#xA;    interface IServicedComponentInfo" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ContextBoundObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IRemoteDispatch</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IServicedComponentInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示所有使用 COM+ 服務之類別的基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些狀況下，衍生自類別<xref:System.EnterpriseServices.ServicedComponent>執行 COM + 應用程式中的可能會停止回應。 這個問題被因活動死結。 活動可以在多執行緒應用程式上發生死結，因為元件參考非同步清除作業。 若要解決此問題，請呼叫<xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>方法，當您完成使用物件衍生自<xref:System.EnterpriseServices.ServicedComponent>。 如需詳細資訊，請參閱 < [ http://support.microsoft.com/default.aspx?scid=kb; en-us-我們; 327443](https://support.microsoft.com/default.aspx?scid=kb;en-us;327443)。  
  
> [!NOTE]
>  用戶端程式碼必須呼叫`Dispose`上 serviced 元件，以確保正常運作。  
  
   
  
## Examples  
 下列程式碼範例示範如何將類別視為已設定的 COM 元件公開 （expose）。  
  
 [!code-cpp[EnterpriseServices_Basic#1](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Basic/CPP/calculator.cpp#1)]
 [!code-csharp[EnterpriseServices_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Basic/CS/calculator.cs#1)]  
  
 若要部署這個類別做為設定的 COM 元件，您必須產生強式金鑰、 將類別編譯為程式庫，並註冊程式庫。 這三個步驟是由下列三個命令來完成。  
  
```  
sn -k Calculator.snk  
csc /t:library Calculator.cs  
regsvcs Calculator.dll  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicedComponent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServicedComponent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始化狀態，在這種類型的衍生的類別建構函式會呼叫這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="protected internal virtual void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Activate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Activate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Activate();" />
      <MemberSignature Language="F#" Value="abstract member Activate : unit -&gt; unit&#xA;override this.Activate : unit -&gt; unit" Usage="servicedComponent.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從集區建立或配置物件時由基礎結構所呼叫。 覆寫這個方法來加入自訂初始化程式碼至物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個方法。  
  
 [!code-cpp[EnterpriseServices_Pooling#3](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#3)]
 [!code-csharp[EnterpriseServices_Pooling#3](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#3)]
 [!code-vb[EnterpriseServices_Pooling#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBePooled">
      <MemberSignature Language="C#" Value="protected internal virtual bool CanBePooled ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool CanBePooled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.CanBePooled" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CanBePooled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool CanBePooled();" />
      <MemberSignature Language="F#" Value="abstract member CanBePooled : unit -&gt; bool&#xA;override this.CanBePooled : unit -&gt; bool" Usage="servicedComponent.CanBePooled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>這個方法在物件放回集區內之前為基礎結構所呼叫。 覆寫這個方法來表決物件是否要放回到集區內。</summary>
        <returns>如果 Serviced 元件可以共用，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個方法。  
  
 [!code-cpp[EnterpriseServices_Pooling#5](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#5)]
 [!code-csharp[EnterpriseServices_Pooling#5](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#5)]
 [!code-vb[EnterpriseServices_Pooling#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="protected internal virtual void Construct (string s);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Construct(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Construct (s As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Construct(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member Construct : string -&gt; unit&#xA;override this.Construct : string -&gt; unit" Usage="servicedComponent.Construct s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">建構字串。</param>
        <summary>剛好在傳入建構函式字串並呼叫建構函式之後由基礎結構所呼叫。 覆寫這個方法來利用建構字串值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="protected internal virtual void Deactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Deactivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Deactivate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Deactivate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Deactivate();" />
      <MemberSignature Language="F#" Value="abstract member Deactivate : unit -&gt; unit&#xA;override this.Deactivate : unit -&gt; unit" Usage="servicedComponent.Deactivate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>物件即將停用時由基礎結構所呼叫。 在使用 Just-In-Time (JIT) 編譯的程式碼或物件共用時，可覆寫這個方法來加入自訂最終處理程式碼至物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個方法。  
  
 [!code-cpp[EnterpriseServices_Pooling#4](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#4)]
 [!code-csharp[EnterpriseServices_Pooling#4](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#4)]
 [!code-vb[EnterpriseServices_Pooling#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 使用的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="servicedComponent.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結束物件，並移除相關聯的 COM + 內容。  
  
 建議您在記憶體回收行程釋放物件之前，明確釋放 COM + 物件和外部的資源。 如果外部的資源很少或成本，更好的效能可藉由在不再需要時，明確釋放 COM + 資源。 明確的控制項由提供<xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>方法。  
  
 呼叫<xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>可讓所使用的資源<xref:System.EnterpriseServices.ServicedComponent>重新配置用於其他用途。 如需詳細資訊<xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>，請參閱 <<c2> [ 清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>覆寫<see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" />方法，以自訂這個類別的處置邏輯。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="servicedComponent.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要釋放 Managed 和 Unmanaged 兩種資源，則為 <see langword="true" />；只釋放 Unmanaged 資源，則為 <see langword="false" />。</param>
        <summary>釋放 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會呼叫公用`Dispose`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設為`true`。 <xref:System.Object.Finalize%2A> 叫用`Dispose`具有`disposing`設定為`false`。  
  
 `disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.EnterpriseServices.ServicedComponent> 參考的任何 Managed 物件所掌握的資源。 這個方法會叫用每個參考物件的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以被其他物件呼叫多次。 覆寫 <see langword="Dispose(Boolean)" /> 時，請小心不要參考到先前已在對 <see langword="Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。 如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱 &lt;&lt;c2&gt; [ 實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
如需詳細資訊<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱[清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)並[覆寫 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DisposeObject">
      <MemberSignature Language="C#" Value="public static void DisposeObject (System.EnterpriseServices.ServicedComponent sc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisposeObject(class System.EnterpriseServices.ServicedComponent sc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisposeObject (sc As ServicedComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisposeObject(System::EnterpriseServices::ServicedComponent ^ sc);" />
      <MemberSignature Language="F#" Value="static member DisposeObject : System.EnterpriseServices.ServicedComponent -&gt; unit" Usage="System.EnterpriseServices.ServicedComponent.DisposeObject sc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sc" Type="System.EnterpriseServices.ServicedComponent" />
      </Parameters>
      <Docs>
        <param name="sc">要處置的物件。</param>
        <summary>結束物件並移除相關 COM+ 參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建議您最好使用`Dispose`設計模式，而非<xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchAutoDone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.EnterpriseServices.AutoComplete(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>確保在 COM+ 內容中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 類別物件的 <see langword="done" /> 位元會在 Remote Method Invocation 之後設為 <see langword="true" />。</summary>
        <returns>從實作 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 介面之回應物件轉換而來的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>方法並不屬於已發行的介面的<xref:System.EnterpriseServices.ServicedComponent>類別，並不需要在其他地方實作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchNotAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchNotAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchNotAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchNotAutoDone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.EnterpriseServices.AutoComplete(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要轉換成實作 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 介面之要求物件的字串。</param>
        <summary>不能確保在 COM+ 內容中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 類別物件的 <see langword="done" /> 位元會在 Remote Method Invocation 之後設為 <see langword="true" />。</summary>
        <returns>從實作 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 介面之回應物件轉換而來的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>方法並不屬於已發行的介面的<xref:System.EnterpriseServices.ServicedComponent>類別，並不需要在其他地方實作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo">
      <MemberSignature Language="C#" Value="void IServicedComponentInfo.GetComponentInfo (ref int infoMask, out string[] infoArray);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int32&amp; infoMask, [out] string[]&amp; infoArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetComponentInfo (ByRef infoMask As Integer, ByRef infoArray As String()) Implements IServicedComponentInfo.GetComponentInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int % infoMask, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % infoArray) = System::EnterpriseServices::IServicedComponentInfo::GetComponentInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="infoMask" Type="System.Int32" RefType="ref" />
        <Parameter Name="infoArray" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="infoMask">位元遮罩，其中 0x00000001 為 Serviced 元件處理序 ID 的索引鍵，0x00000002 為應用程式定義域 ID 的索引鍵，而 0x00000004 為 Serviced 元件遠端 URI 的索引鍵。</param>
        <param name="infoArray">字串陣列，可能包含下列任一項或所有項目，依次為：Serviced 元件處理序 ID、應用程式定義域 ID 和 Serviced 元件遠端 URI。</param>
        <summary>取得 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 類別執行個體的某些資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A>方法並不屬於已發行的介面的<xref:System.EnterpriseServices.ServicedComponent>類別，並不需要在其他地方實作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>