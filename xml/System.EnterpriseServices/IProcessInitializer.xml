<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b546154b2741a73df0a438f3a4f3e34d79275333" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39972971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a5479-101">支援可在 COM 元件啟動或關閉時呼叫的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a5479-101">Supports methods that can be called when a COM component starts up or shuts down.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5479-102">實作<xref:System.EnterpriseServices.IProcessInitializer>介面方法上的 serviced 元件如果您想要執行初始化或關機的程式碼時的伺服器處理序 (Dllhost.exe) 啟動或關閉，分別。</span><span class="sxs-lookup"><span data-stu-id="a5479-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="a5479-103">COM + 提供`Startup`和`Shutdown`Dllhost.exe 開始和結束時的事件。</span><span class="sxs-lookup"><span data-stu-id="a5479-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="a5479-104">這項功能可讓任何 COM + 元件安裝在 COM + 伺服器應用程式 （稱為伺服器元件以下） 來執行自訂的初始化和清除程式碼中。</span><span class="sxs-lookup"><span data-stu-id="a5479-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="a5479-105">實作每個元件的執行個體<xref:System.EnterpriseServices.IProcessInitializer>介面會建立和儲存的持續期間的處理序，並在啟動和關機期間呼叫介面方法上。</span><span class="sxs-lookup"><span data-stu-id="a5479-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</span></span> <span data-ttu-id="a5479-106">在實作時<xref:System.EnterpriseServices.ServicedComponent>，元件的註冊期間`InitializesServerApplication`中的參數`COMAdminCatalogObject`內的元件集合設為`true`。</span><span class="sxs-lookup"><span data-stu-id="a5479-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.</span></span>  
  
 <span data-ttu-id="a5479-107">使用`Startup`和`Shutdown`事件，您可以初始化資源、 建立連接，初始化共用的資料，並執行清除程式碼。</span><span class="sxs-lookup"><span data-stu-id="a5479-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="a5479-108">不過，您必須存取特有的 COM + 因為伺服器元件的執行個體尚未建立的狀態。</span><span class="sxs-lookup"><span data-stu-id="a5479-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="a5479-109">此外中的程式碼`Startup`和`Shutdown`事件應儘速傳回，因為系統在等候 90 秒只接受啟用在系統啟動處理程序之後準備的 Dllhost.exe。</span><span class="sxs-lookup"><span data-stu-id="a5479-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="a5479-110">如果 Dllhost.exe 不表示它可立即在 90 秒內，系統即會結束處理序;因此，所有初始設定處理需求，在此時間範圍內完成。</span><span class="sxs-lookup"><span data-stu-id="a5479-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="a5479-111">參與初始化每一個伺服器元件都必須支援<xref:System.EnterpriseServices.IProcessInitializer>介面。</span><span class="sxs-lookup"><span data-stu-id="a5479-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="a5479-112">在啟動 DllHost.exe 時，COM + 建立要求這項服務呼叫的所有伺服器元件`QueryInterface`for<xref:System.EnterpriseServices.IProcessInitializer>介面，並呼叫<xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>函式。</span><span class="sxs-lookup"><span data-stu-id="a5479-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="a5479-113">同樣地，當 DllHost.exe 處理序關閉時，它會呼叫<xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>那些函式先前儲存的介面指標。</span><span class="sxs-lookup"><span data-stu-id="a5479-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a5479-114">執行關閉動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-114">Performs shutdown actions.</span>
          </span>
          <span data-ttu-id="a5479-115">在關閉 Dllhost.exe 時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-115">Called when Dllhost.exe is shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5479-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> 不會在 failfast 或其他重大關機事件期間呼叫。</span><span class="sxs-lookup"><span data-stu-id="a5479-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">
          <span data-ttu-id="a5479-117">在 Microsoft Windows XP 中，是啟動之 COM 元件的 <see langword="IUnknown" /> 介面指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span>
          </span>
          <span data-ttu-id="a5479-118">在 Microsoft Windows 2000 中，這個引數一定是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a5479-119">在啟動時執行初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-119">Performs initialization at startup.</span>
          </span>
          <span data-ttu-id="a5479-120">在啟動 Dllhost.exe 時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a5479-120">Called when Dllhost.exe is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5479-121">所參考的物件`punkProcessControl`實作<xref:System.EnterpriseServices.IProcessInitControl>介面。</span><span class="sxs-lookup"><span data-stu-id="a5479-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="a5479-122"><xref:System.EnterpriseServices.IProcessInitControl> 支援的單一方法<xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>。</span><span class="sxs-lookup"><span data-stu-id="a5479-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="a5479-123">中的初始化程式碼<xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>可以呼叫<xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>，並將設定為等於在啟動的元件逾時前的剩餘秒數的逾時。</span><span class="sxs-lookup"><span data-stu-id="a5479-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>