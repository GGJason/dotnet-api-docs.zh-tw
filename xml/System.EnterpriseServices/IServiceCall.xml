<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79c7206457f6f0c8c1c036c096a61a708f1d799b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37760305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <TypeSignature Language="F#" Value="type IServiceCall = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>實作經由 <see cref="T:System.EnterpriseServices.Activity" /> 建立的活動所送出的批次工作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.EnterpriseServices.IServiceCall>執行批次工作可使用 COM + 服務，而不需要建立專門為了使用這些服務的元件。 指令碼環境，例如 Internet Information Services (IIS) 和 ASP.NET 可以使用此介面，來利用 COM + 服務，而不需要建立 COM + 元件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberSignature Language="F#" Value="abstract member OnCall : unit -&gt; unit" Usage="iServiceCall.OnCall " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>啟動執行這個方法中所實作的批次工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在這個方法中執行的批次工作執行的呼叫所建立的活動內容和執行緒的 apartment 中<xref:System.EnterpriseServices.Activity>。 在此方法中的批次工作執行呼叫<xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType>或<xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>。  
  
> [!CAUTION]
>  您必須確定這個方法是在活動物件會由的情況下安全執行緒<xref:System.EnterpriseServices.Activity>不會建立與同步處理的內容，因為在此情況下許多呼叫<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>可以同時執行。  
  
 若要達到最佳效能，從系統，活動的內容組態建立方法<xref:System.EnterpriseServices.Activity>應符合所執行的批次工作<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法。 例如，如果在批次工作<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法會使用可共用的物件，所建立的活動<xref:System.EnterpriseServices.Activity>應該設定為使用多執行緒的 apartment (MTA)。  
  
 如需可共用物件的資訊，請參閱 「 需求的可共用物件 」 在 MSDN 平台 SDK 中的主題。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>