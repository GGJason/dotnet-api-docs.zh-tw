<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c200a67bc75e1bfe3c6bbe71ec68fec34b1455fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531442" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表 Unicode 字元的 UTF-8 編碼方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 編碼是將一組 Unicode 字元轉換成位元組序列的處理程序。 解碼則是將編碼的位元組序列轉換成一組 Unicode 字元的程序。  
  
 Utf-8 是 Unicode 編碼，以一到四個位元組的序列表示每個字碼指標。 不同於 utf-16 和 utf-32 編碼方式 utf-8 編碼不需要"endianness 」 的電腦;編碼配置是不論處理器是位元組由大到小或由小到大相同。 <xref:System.Text.UTF8Encoding> 對應至 Windows 字碼頁 65001。 如需有關 UTFs 和其他支援的編碼<xref:System.Text>，請參閱[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)。  
  
 您可以具現化<xref:System.Text.UTF8Encoding>數種方式，根據是否要它提供位元組順序標示 (BOM)，以及是否要啟用錯誤偵測的物件。 下表列出建構函式和<xref:System.Text.Encoding>屬性會傳回<xref:System.Text.UTF8Encoding>物件。  
  
|成員|BOM|錯誤偵測|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|[是]|無 （取代後援）|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|否|無 （取代後援）|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|可設定|無 （取代後援）|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|可設定|可設定|  
  
 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.UTF8Encoding.GetBytes%2A>方法會執行實際的編碼方式。  
  
 同樣地，<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.UTF8Encoding.GetChars%2A>和<xref:System.Text.UTF8Encoding.GetString%2A>方法會執行實際的解碼。  
  
 針對編碼器或解碼器能夠儲存狀態資訊編碼或解碼跨越多個區塊 （例如 1 百萬個字元的編碼段 100,000 個字元的字串） 的資料時，請使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>和<xref:System.Text.UTF8Encoding.GetDecoder%2A>屬性，分別。  
  
 （選擇性）<xref:System.Text.UTF8Encoding>物件所提供的位元組順序標記 (BOM)，也就是可以加在編碼程序產生的位元組資料流開頭的位元組陣列。 如果 utf-8 編碼的位元組資料流開頭處的位元組順序標示 (BOM)，將有助於判斷位元組順序的轉換格式或 UTF-8 解碼器。 不過請注意，Unicode 標準都不需要也不建議將 bom 傳 utf-8 編碼資料流。 如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode 標準[Unicode 首頁](http://go.microsoft.com/fwlink/?LinkId=37123)。  
  
 如果編碼器設定為提供 BOM，可以擷取由呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法; 否則方法會傳回空陣列。 請注意，即使<xref:System.Text.UTF8Encoding>BOM 支援的設定物件，您必須包含適當; 編碼的位元組資料流的開頭 BOM 編碼方式的<xref:System.Text.UTF8Encoding>類別不這麼做會自動。  
  
> [!NOTE]
>  若要啟用錯誤偵測，並讓類別執行個體更安全，您應該呼叫<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>建構函式和集合`throwOnInvalidBytes`參數`true`。 已啟用錯誤偵測，偵測到無效的字元或位元組序列的方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，擲回任何例外狀況，而不正確的順序通常會遭到忽略。  
  
> [!NOTE]
>  如果物件序列化和還原序列化使用不同的.NET Framework 版本，不會保留 utf-8 編碼物件的狀態。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding>編碼的 Unicode 字元字串，並將它們儲存在位元組陣列中的物件。 Unicode 字串包含兩個字元，Pi (U + 03A0) 和標準差 (U + 03A3)，ASCII 字元範圍以外。 編碼的位元組陣列解碼回字串，Pi 和標準差字元時仍會出現。  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 下列範例會使用相同的字串與前一個範例中，不同之處在於它將編碼的位元組寫入檔案，並做為前置詞位元組資料流的位元組順序標示 (BOM)。 然後在兩個不同的方式讀取檔案： 為文字檔，使用<xref:System.IO.StreamReader>物件; 而二進位檔案。 如您所預期，兩種情況下 BOM 隨附於讀取新的字串。  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立執行個體，不會提供 Unicode 位元組順序標記，而且不會擲回例外狀況時偵測到無效的編碼方式。  
  
> [!NOTE]
>  基於安全性理由，建議您啟用錯誤偵測，藉由呼叫的建構函式`throwOnInvalidBytes`參數，並將其值設定為`true`。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體，並顯示其名稱。  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <see langword="true" /> 指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法會傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。 參數會指定是否提供 Unicode 位元組順序標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立執行個體偵測到無效的編碼方式時，不會擲回例外狀況。  
  
> [!NOTE]
>  基於安全性理由，您應該藉由呼叫的建構函式，其中包含啟用錯誤偵測`throwOnInvalidBytes`參數，並將其值設定為`true`。  
  
 `encoderShouldEmitUTF8Identifier`參數控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。 如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 以 utf-8 格式。  如果`false`，它會傳回零長度的位元組陣列。 不過，設定`encoderShouldEmitUTF8Identifier`至`true`不會造成<xref:System.Text.UTF8Encoding.GetBytes%2A>BOM 的位元組陣列開頭的前置詞的方法也不會引起<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以包含 BOM 的位元組計數中的位元組數目。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體和指定的 Unicode 位元組順序標記前置詞應該發出<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。 <xref:System.Text.UTF8Encoding.GetPreamble%2A>方法接著會傳回 Unicode 位元組順序標記前置詞。  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <see langword="true" /> 指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法應傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</param>
        <param name="throwOnInvalidBytes">
          <see langword="true" /> 表示在偵測到無效的編碼方式時擲回例外狀況；否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。 參數會指定是否提供 Unicode 位元組順序標記，以及是否在偵測到無效的編碼方式時擲回例外狀況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderShouldEmitUTF8Identifier`參數控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。 如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 以 utf-8 格式。  如果`false`，它會傳回零長度的位元組陣列。 不過，設定`encoderShouldEmitUTF8Identifier`至`true`不會造成<xref:System.Text.UTF8Encoding.GetBytes%2A>BOM 的位元組陣列開頭的前置詞的方法也不會引起<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以包含 BOM 的位元組計數中的位元組數目。  
  
 如果`throwOnInvalidBytes`是`true`，偵測到無效的位元組順序的方法會擲回<xref:System.ArgumentException?displayProperty=nameWithType>例外狀況。 否則，此方法不會擲回例外狀況，並忽略無效的序列。  
  
> [!NOTE]
>  基於安全性理由，您應該藉由呼叫的建構函式，其中包含啟用錯誤偵測`throwOnInvalidBytes`參數，並將該參數設定為`true`。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體，指定<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法應該不會發出的 Unicode 位元組順序標記前置詞，並偵測到無效的編碼方式時，應該擲回例外狀況。 這個建構函式的行為會與預設<xref:System.Text.UTF8Encoding.%23ctor>建構函式，不會擲回例外狀況時偵測到無效的編碼方式。 這兩個<xref:System.Text.UTF8Encoding>執行個體中的資料列，這是無效的字元序列編碼的字元陣列，其中包含兩個高 surrogate （U + D801 和 U + D802），則為高 surrogate 應該後面一律必須接著為低 surrogate。  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要與目前執行個體比較的物件。</param>
        <summary>判斷指定的物件是否等於目前的 <see cref="T:System.Text.UTF8Encoding" /> 物件。</summary>
        <returns>
          如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的執行個體，並且等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個<xref:System.Text.UTF8Encoding>物件是否視為相等，如果所有下列條件成立：  
  
-   這兩個物件提供位元組順序標記，或兩者不相符。  
  
-   這兩個物件都使用相同的編碼器後援。  
  
-   這兩個物件都使用相同的解碼器後援。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.Equals%2A>方法來測試是否目前<xref:System.Text.UTF8Encoding>物件是否等於不同<xref:System.Text.UTF8Encoding>物件。 四個<xref:System.Text.UTF8Encoding>和建立和比較物件比較的結果會顯示。  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算將一組字元編碼所產生的位元組數目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">
          <see cref="T:System.String" />，包含要編碼的一組字元。</param>
        <summary>計算將指定 <see cref="T:System.String" /> 中的字元編碼所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任和中前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>和<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>方法來計算最大值和實際的字串編碼所需的位元組數目。 它也會顯示實際儲存的位元組順序標記的位元組資料流所需的位元組數目。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>計算將起始於指定字元指標的一組字元編碼所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>方法來儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任和中前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="index">要編碼的第一個字元索引。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>計算將指定字元陣列中的一組字元編碼所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您會呼叫使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任和中前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。  
  
   
  
## Examples  
 下列範例會填入大寫英文的陣列和小寫字元與呼叫<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以判斷拉丁小寫字元編碼所需的位元組數目。 然後，它會顯示這項資訊，以及如果位元組順序標記就會加入所需的位元組總數。 它會比較所傳回的值與這個數字<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法，表示英文小寫字元編碼所需的位元組數目上限。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 屬性設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將一組字元編碼成位元組序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
        <param name="byteCount">寫入的最大位元組數。</param>
        <summary>將起始於指定字元指標的一組字元編碼成位元組序列；儲存該位元組序列時，係以指定的位元組指標為起始點。</summary>
        <returns>在 <paramref name="bytes" /> 所表示的位置上寫入的實際位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>傳回<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。  
  
 -或-  
  
 <paramref name="byteCount" /> 小於結果位元組數。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>將指定字元陣列中的一組字元編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法，將編碼的字元從字串和儲存區中的位元組陣列的項目範圍中編碼的位元組範圍。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。  
  
 -或-  
  
 從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />，包含要編碼的一組字元。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>將指定 <see cref="T:System.String" /> 中的一組字元編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
 若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetBytes%2A>編碼的 Unicode 字元陣列中的項目範圍，並將編碼的位元組儲存在位元組陣列中的項目範圍的方法。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。  
  
 -或-  
  
 從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算將位元組序列解碼所產生的字元數。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>計算將起始於指定位元組指標的位元組序列解碼所產生的字元數。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>計算將指定位元組陣列中的位元組序列解碼所產生的字元數。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>解碼之位元組陣列中的項目範圍所產生的方法來傳回的字元數。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將位元組序列解碼成一組字元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">開始寫入產生的一組字元之位置指標。</param>
        <param name="charCount">要寫入的最大字元數。</param>
        <summary>將起始於指定位元組指標的位元組序列解碼成一組字元；儲存該組字元時，係以指定的字元指標為起始點。</summary>
        <returns>在 <paramref name="chars" /> 所表示的位置上寫入的實際字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標示 (BOM)，而且非 BOM 感知型別之方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含字元 U + FFFE。 您可以移除它，藉由呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供物件<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。  
  
 -或-  
  
 <paramref name="charCount" /> 小於結果字元數。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="byteIndex">要解碼的第一個位元組索引。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">包含產生的一組字元之字元陣列。</param>
        <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
        <summary>將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
        <returns>寫入 <paramref name="chars" /> 的實際字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標示 (BOM)，而且非 BOM 感知型別之方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含字元 U + FFFE。 您可以移除它，藉由呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetChars%2A>方法來解碼的位元組陣列中的項目範圍，並將結果儲存在字元陣列。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。  
  
 -或-  
  
 從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</summary>
        <returns>可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法將序列的位元組區塊轉換成循序區塊中的字元，其方式類似<xref:System.Text.UTF8Encoding.GetChars%2A>這個類別的方法。 不過，<xref:System.Text.Decoder>維護呼叫，因此它可以正確解碼位元組序列跨越區塊之間的狀態資訊。 <xref:System.Text.Decoder>也會保留資料區塊的結尾的後隨位元組，並在下一步解碼作業中使用尾端位元組。 因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>進行網路傳輸，而檔案作業很實用是因為這些作業經常要處理而不是完整的資料流的資料區塊。  
  
 如果已啟用錯誤偵測，也就是`throwOnInvalidCharacters`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Decoder>這個方法所傳回。 如果已啟用錯誤偵測，遇到無效的序列的解碼器狀態是未定義，且必須停止處理。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法，以取得 utf-8 解碼器。 解碼器會將位元組序列轉換成字元序列。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列的編碼器。</summary>
        <returns>
          <see cref="T:System.Text.Encoder" />，可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法會將字元的循序區塊轉換成位元組，以類似方式循序區塊<xref:System.Text.UTF8Encoding.GetBytes%2A>方法。 不過，<xref:System.Text.Encoder>維護呼叫，讓它正確可以編碼跨越區塊的字元序列之間的狀態資訊。 <xref:System.Text.Encoder>也保留尾端字元的資料區塊的結尾，並在下一步的編碼作業中使用尾端字元。 例如，資料區塊可能會不相符的高 surrogate，以結束，而且比對的低 surrogate 可能在下一個資料區塊中。 因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>進行網路傳輸，而檔案作業很實用是因為這些作業經常要處理而不是完整的資料流的資料區塊。  
  
 如果已啟用錯誤偵測，也就是`throwOnInvalidCharacters`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Encoder>這個方法所傳回。 如果已啟用錯誤偵測，而且遇到無效的序列，編碼器狀態是未定義，且必須停止處理。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，以取得編碼器將字元序列轉換成以 utf-8 編碼的位元組序列。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前執行個體的雜湊碼。</summary>
        <returns>目前執行個體的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetHashCode%2A>方法傳回的雜湊碼<xref:System.Text.UTF8Encoding>執行個體。 請注意，這個方法所傳回的雜湊程式碼是否取決於用來建立的建構函式<xref:System.Text.UTF8Encoding>物件。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">要編碼的字元數。</param>
        <summary>計算將指定數目的字元編碼所產生的最大位元組數目。</summary>
        <returns>編碼指定字元數所產生的最大位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 最差狀況的字，包括最壞的情況下，針對目前所選<xref:System.Text.EncoderFallback>。 如果是可能的大型字串、 選擇後援<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>可以傳回較大的值。  
  
 在大部分情況下，這個方法會傳回對小型字串合理的數字。 大型字串，您可能選擇使用極大的緩衝區，在極少數的案例更合理地緩衝區超出攔截錯誤。 您也可以考慮不同的方法，使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。 例如，英文和許多其他語言中的文字通常必須只有一個 utf-8 位元組來表示字元，但所傳回的數目<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>已允許，要轉換的字串將會完全字元組成，每個的可能性需要四個位元組。  
  
 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 有沒有關係<xref:System.Text.UTF8Encoding.GetChars%2A>。 如果您的應用程式需要類似的函數，以搭配<xref:System.Text.UTF8Encoding.GetChars%2A>，應該使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法傳回的編碼指定的字元數所需的位元組數目上限。  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 小於零。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">要解碼的位元組數。</param>
        <summary>計算將指定數目的位元組解碼所產生的最大字元數。</summary>
        <returns>解碼指定位元組數所產生的最大字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，您呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。 若要計算的最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 最差狀況的字，包括最壞的情況下，針對目前所選<xref:System.Text.DecoderFallback>。 如果是可能的大型字串、 選擇後援<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>可以傳回較大的值。  
  
 在大部分情況下，這個方法會傳回對小型字串合理的數字。 大型字串，您可能選擇使用極大的緩衝區，在極少數的案例更合理地緩衝區超出攔截錯誤。  您也可以考慮不同的方法，使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 有沒有關係<xref:System.Text.UTF8Encoding.GetBytes%2A>。 如果您的應用程式需要類似的函數，以搭配<xref:System.Text.UTF8Encoding.GetBytes%2A>，應該使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>解碼指定的位元組數所產生的方法來傳回最大字元數。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小於零。  
  
 -或-  
  
 所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果設定 <see cref="T:System.Text.UTF8Encoding" /> 編碼物件提供編碼方式，則會傳回以 UTF-8 格式編碼的 Unicode 位元組順序標記。</summary>
        <returns>如果設定 <see cref="T:System.Text.UTF8Encoding" /> 編碼物件提供編碼方式，則為包含 Unicode 位元組順序標記的位元組陣列。 否則，這個方法會傳回長度為零的位元組陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UTF8Encoding>物件可以提供前序編碼，也就是可以前置位元組編碼程序會產生一連串的位元組陣列。 引用編碼的位元組序列的位元組順序標示 （字碼指標 U + FEFF） 有助於判斷位元組順序的轉換格式或 UTF-8 解碼器。 Unicode 位元組順序標記 (BOM) 會序列化為 0xEF 0xBB 0xBF。 請注意 Unicode 標準都不需要也不建議使用 BOM utf-8 編碼資料流。  
  
 您可以具現化<xref:System.Text.UTF8Encoding>物件，其<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法會傳回有效的 BOM 以下列方式：  
  
-   藉由擷取<xref:System.Text.UTF8Encoding>所傳回物件<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>屬性。  
  
-   藉由呼叫<xref:System.Text.UTF8Encoding>具有建構函式`encoderShouldEmitUTF8Identifier`參數並將設定其值設為`true`。  
  
 所有其他<xref:System.Text.UTF8Encoding>物件設定為傳回空陣列，而不是有效的 BOM。  
  
 BOM 提供幾乎否則失去其編碼方式的參考檔案的編碼方式的特定識別，例如未標記或標記不當 web 資料或儲存時商務的隨機文字檔案沒有國際考量。 如果資料一致的方式，以及已正確加上標記，就能避免通常使用者的問題。  
  
 提供編碼類型的標準，BOM 是多餘的。 不過，它可以用來幫助伺服器傳送正確的編碼方式標頭。 或者，它可用來當做後援以防編碼遺失時。  
  
 有一些缺點，以包含 BOM。 例如，了解如何限制使用 BOM 的資料庫欄位很難。 串連的檔案可以也會是問題，比方說，例如合併檔案時不必要的字元可能會結束中間資料的方式。 儘管有一些缺點，不過，BOM 使用建議。  
  
 如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode 標準[Unicode 首頁](http://go.microsoft.com/fwlink/?LinkId=37123)。  
  
> [!CAUTION]
>  若要確保儲存為檔案或資料流時編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流的開頭。 請注意，<xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上 BOM 編碼的位元組序列; 開發人員必須負責提供適當的位元組資料流的開頭 BOM。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法以傳回 Unicode 位元組順序標記以 utf-8 格式編碼。 請注意的預設建構函式<xref:System.Text.UTF8Encoding>不會提供前序編碼。  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 下列範例會呈現兩個<xref:System.Text.UTF8Encoding>物件、 呼叫無參數的第一個<xref:System.Text.UTF8Encoding.%23ctor>建構函式，不會提供 BOM，且第二個呼叫<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>建構函式與它`encoderShouldEmitUTF8Identifier`引數設定為`true`. 然後它會呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法，將 BOM 寫入之前 UF8 編碼的字串寫入檔案。 如主控台輸出範例所示，從第二個編碼器會將位元組儲存的檔案有三個的多個位元組，比第一個。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 您也可以藉由比較檔案`fc`命令主控台視窗中，或者您可以檢查包含十六進位檢視模式的文字編輯器中的檔案。 請注意，當支援 utf-8 的編輯器中開啟檔案時，BOM 會不會顯示。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>將位元組陣列中的某一段位元組範圍解碼成字串。</summary>
        <returns>
          <see cref="T:System.String" />，包含將指定之位元組序列解碼的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 錯誤偵測無效的序列造成此方法會擲回<xref:System.ArgumentException>例外狀況。 錯誤偵測，會忽略無效的序列，而不擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標示 (BOM)，而且非 BOM 感知型別之方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含字元 U + FFFE。 您可以移除它，藉由呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能只適用於連續區塊。 在這種情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。  
  
   
  
## Examples  
 下列範例會藉由呼叫初始化陣列<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以判斷完全多少個位元組所需編碼的字串，然後再將位元組順序標示 (BOM) 的大小。 此範例會接著呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法，可儲存到陣列之前先呼叫 BOM<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存編碼的位元組陣列的方法。 此範例會接著呼叫<xref:System.Text.UTF8Encoding.GetString%2A>方法來解碼的字串。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 請注意，在此情況下已解碼的字串不同於原始的字串，因為它的開頭 U + FFFD 的 16 位元的位元組順序標記。 這表示兩個字串將會比較結果不相等，而且，如果字串為輸出，BOM 會顯示為 「 取代字元"？"。 若要移除的字串開頭 BOM，您可以呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 和 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>