<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43d9b9f106d73cfb09db1473ac704034fdcd752e" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58456713" /></Metadata><TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF8Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="59fc7-101">代表 Unicode 字元的 UTF-8 編碼方式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-101">Represents a UTF-8 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-102">編碼是將一組 Unicode 字元轉換成位元組序列的處理程序。</span><span class="sxs-lookup"><span data-stu-id="59fc7-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="59fc7-103">解碼則是將編碼的位元組序列轉換成一組 Unicode 字元的程序。</span><span class="sxs-lookup"><span data-stu-id="59fc7-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="59fc7-104">Utf-8 是 Unicode 編碼，以一到四個位元組的序列表示每個字碼指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="59fc7-105">不同於 utf-16 和 UTF-32 編碼的 utf-8 編碼方式不需要"位元組序";編碼配置是不論處理器是位元組由大到小或由小到大相同。</span><span class="sxs-lookup"><span data-stu-id="59fc7-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="59fc7-106"><xref:System.Text.UTF8Encoding> 對應至 Windows 字碼頁 65001。</span><span class="sxs-lookup"><span data-stu-id="59fc7-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="59fc7-107">如需有關 UTFs 和所支援其他編碼<xref:System.Text>，請參閱 < [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="59fc7-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="59fc7-108">您可以具現化<xref:System.Text.UTF8Encoding>數種方式，根據是否要給它以提供位元組順序標記 (BOM) 以及是否要啟用錯誤偵測的物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="59fc7-109">下表列出建構函式和<xref:System.Text.Encoding>傳回的屬性<xref:System.Text.UTF8Encoding>物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="59fc7-110">成員</span><span class="sxs-lookup"><span data-stu-id="59fc7-110">Member</span></span>|<span data-ttu-id="59fc7-111">BOM</span><span class="sxs-lookup"><span data-stu-id="59fc7-111">BOM</span></span>|<span data-ttu-id="59fc7-112">錯誤偵測</span><span class="sxs-lookup"><span data-stu-id="59fc7-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="59fc7-113">是</span><span class="sxs-lookup"><span data-stu-id="59fc7-113">Yes</span></span>|<span data-ttu-id="59fc7-114">無 （取代後援）</span><span class="sxs-lookup"><span data-stu-id="59fc7-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="59fc7-115">否</span><span class="sxs-lookup"><span data-stu-id="59fc7-115">No</span></span>|<span data-ttu-id="59fc7-116">無 （取代後援）</span><span class="sxs-lookup"><span data-stu-id="59fc7-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="59fc7-117">可設定</span><span class="sxs-lookup"><span data-stu-id="59fc7-117">Configurable</span></span>|<span data-ttu-id="59fc7-118">無 （取代後援）</span><span class="sxs-lookup"><span data-stu-id="59fc7-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="59fc7-119">可設定</span><span class="sxs-lookup"><span data-stu-id="59fc7-119">Configurable</span></span>|<span data-ttu-id="59fc7-120">可設定</span><span class="sxs-lookup"><span data-stu-id="59fc7-120">Configurable</span></span>|  
  
 <span data-ttu-id="59fc7-121"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元的編碼方式和<xref:System.Text.UTF8Encoding.GetBytes%2A>方法會執行實際的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="59fc7-122">同樣地，<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法會判斷字元數會導致解碼的位元組序列，而<xref:System.Text.UTF8Encoding.GetChars%2A>和<xref:System.Text.UTF8Encoding.GetString%2A>方法會執行實際的解碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="59fc7-123">針對編碼器或解碼器能夠儲存狀態資訊編碼或解碼資料跨越多個區塊 （例如 1 百萬個字元的編碼中段 100,000 個字元的字串） 時，請使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>和<xref:System.Text.UTF8Encoding.GetDecoder%2A>屬性，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="59fc7-124">（選擇性）<xref:System.Text.UTF8Encoding>物件所提供的位元組順序標記 (BOM)，也就是可以加在編碼程序產生的位元組資料流開頭的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="59fc7-125">如果以 utf-8 編碼的位元組資料流加位元組順序標記 (BOM)，它可協助判斷位元組順序的轉換格式或 UTF 解碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="59fc7-126">不過請注意，Unicode 標準都不需要也不建議 BOM 的 utf-8 編碼資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="59fc7-127">如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode Standard > [Unicode 首頁](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="59fc7-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="59fc7-128">如果編碼器設定為提供 BOM，可擷取呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法; 否則方法會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="59fc7-129">請注意，即使<xref:System.Text.UTF8Encoding>BOM 支援使用者設定物件，您必須將編碼的位元組資料流，視需要; 開頭 BOM 編碼方式的<xref:System.Text.UTF8Encoding>類別沒有這麼做會自動。</span><span class="sxs-lookup"><span data-stu-id="59fc7-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="59fc7-130">若要啟用錯誤偵測，並讓更安全的類別執行個體，您應該呼叫<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>建構函式和 set`throwOnInvalidBytes`參數來`true`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="59fc7-131">啟用錯誤偵測，偵測到無效的字元或位元組序列的方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-132">錯誤偵測，會擲回任何例外狀況，而不正確的順序通常會遭到忽略。</span><span class="sxs-lookup"><span data-stu-id="59fc7-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59fc7-133">Utf-8 編碼物件的狀態時，不會保留該物件會序列化並使用不同的.NET Framework 版本。</span><span class="sxs-lookup"><span data-stu-id="59fc7-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-134">下列範例會使用<xref:System.Text.UTF8Encoding>編碼的 Unicode 字元字串，並將它們儲存在位元組陣列中的物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="59fc7-135">Unicode 字串包含兩個字元，Pi (U + 03A0) 和標準差 (U + 03A3)，ASCII 字元範圍以外。</span><span class="sxs-lookup"><span data-stu-id="59fc7-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="59fc7-136">編碼的位元組陣列解碼回字串，Pi 和標準差的字元時仍會出現。</span><span class="sxs-lookup"><span data-stu-id="59fc7-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="59fc7-137">下列範例會使用相同的字串與上述範例中，不同之處在於它將編碼的位元組寫入檔案，並使用位元組順序標記 (BOM) 的位元組資料流的前置詞。</span><span class="sxs-lookup"><span data-stu-id="59fc7-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="59fc7-138">它接著會讀取檔案兩個不同的方式： 為文字檔，使用<xref:System.IO.StreamReader>物件，並當作二進位檔案。</span><span class="sxs-lookup"><span data-stu-id="59fc7-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="59fc7-139">如您所預期，沒有新讀取字串包含 BOM。</span><span class="sxs-lookup"><span data-stu-id="59fc7-139">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="59fc7-140">了解編碼</span><span class="sxs-lookup"><span data-stu-id="59fc7-140">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59fc7-141">初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59fc7-142">初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-142">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-143">這個建構函式會建立執行個體，不提供 Unicode 位元組順序標記，並不會擲回例外狀況時偵測到無效的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-143">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="59fc7-144">基於安全性理由，建議您啟用錯誤偵測，藉由呼叫的建構函式`throwOnInvalidBytes`參數，並將其值設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-144">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-145">下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體，並顯示其名稱。</span><span class="sxs-lookup"><span data-stu-id="59fc7-145">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding encoderShouldEmitUTF8Identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="59fc7-146"><see langword="true" /> 指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法會傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-146"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="59fc7-147">初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-147">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="59fc7-148">參數會指定是否提供 Unicode 位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="59fc7-148">A parameter specifies whether to provide a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-149">這個建構函式建立時偵測到無效的編碼方式時，不會擲回例外狀況的執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-149">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="59fc7-150">基於安全性理由，您應該藉由呼叫建構函式，其中包含啟用錯誤偵測`throwOnInvalidBytes`參數，並將其值設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-150">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="59fc7-151">`encoderShouldEmitUTF8Identifier`參數可控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-151">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="59fc7-152">如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 以 utf-8 格式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-152">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="59fc7-153">如果`false`，它會傳回長度為零的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-153">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="59fc7-154">不過，設定`encoderShouldEmitUTF8Identifier`要`true`不會造成<xref:System.Text.UTF8Encoding.GetBytes%2A>為位元組陣列的開頭 BOM 的前置詞的方法也不會引起<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以納入中的位元組計數 BOM 的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-154">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-155">下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體，並指定不應由發出的 Unicode 位元組順序標記前置詞<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-155">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="59fc7-156"><xref:System.Text.UTF8Encoding.GetPreamble%2A>方法接著會傳回 Unicode 位元組順序標記前置詞。</span><span class="sxs-lookup"><span data-stu-id="59fc7-156">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool * bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="59fc7-157"><see langword="true" /> 指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法應傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-157"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="59fc7-158"><see langword="true" /> 表示在偵測到無效的編碼方式時擲回例外狀況；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-158"><see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="59fc7-159">初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-159">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="59fc7-160">參數會指定是否提供 Unicode 位元組順序標記，以及是否在偵測到無效的編碼方式時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-160">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-161">`encoderShouldEmitUTF8Identifier`參數可控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-161">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="59fc7-162">如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 以 utf-8 格式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-162">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="59fc7-163">如果`false`，它會傳回長度為零的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-163">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="59fc7-164">不過，設定`encoderShouldEmitUTF8Identifier`要`true`不會造成<xref:System.Text.UTF8Encoding.GetBytes%2A>為位元組陣列的開頭 BOM 的前置詞的方法也不會引起<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以納入中的位元組計數 BOM 的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-164">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="59fc7-165">如果`throwOnInvalidBytes`已`true`，偵測到無效的位元組序列的方法會擲回<xref:System.ArgumentException?displayProperty=nameWithType>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-165">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="59fc7-166">否則，方法不會擲回例外狀況，並忽略無效的序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-166">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="59fc7-167">基於安全性理由，您應該藉由呼叫建構函式，其中包含啟用錯誤偵測`throwOnInvalidBytes`參數並將該參數設定`true`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-167">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-168">下列範例會建立新<xref:System.Text.UTF8Encoding>執行個體，指定<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法應該不會發出 Unicode 位元組順序標記前置詞和偵測到無效的編碼方式時，應該擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-168">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="59fc7-169">這個建構函式的行為會與預設值進行比較<xref:System.Text.UTF8Encoding.%23ctor>建構函式，不會擲回例外狀況時偵測到無效的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="59fc7-169">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="59fc7-170">這兩個<xref:System.Text.UTF8Encoding>執行個體中的資料列，也就是無效的字元序列編碼包含 （U + D801 和 U + D802） 的兩個高 surrogate 的字元陣列; 為高 surrogate 一律必須接著為低 surrogate。</span><span class="sxs-lookup"><span data-stu-id="59fc7-170">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF8Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59fc7-171">要與目前執行個體比較的物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-171">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="59fc7-172">判斷指定的物件是否等於目前的 <see cref="T:System.Text.UTF8Encoding" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-172">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="59fc7-173">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的執行個體，並且等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-173"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-174">兩個<xref:System.Text.UTF8Encoding>物件是否視為相等，如果所有下列條件成立：</span><span class="sxs-lookup"><span data-stu-id="59fc7-174">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="59fc7-175">這兩個物件提供位元組順序標記，或兩者都不這麼做。</span><span class="sxs-lookup"><span data-stu-id="59fc7-175">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="59fc7-176">這兩個物件都使用相同的編碼器後援。</span><span class="sxs-lookup"><span data-stu-id="59fc7-176">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="59fc7-177">這兩個物件都使用相同的解碼器後援。</span><span class="sxs-lookup"><span data-stu-id="59fc7-177">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-178">下列範例會使用<xref:System.Text.UTF8Encoding.Equals%2A>方法來測試是否目前<xref:System.Text.UTF8Encoding>物件是否等於其他<xref:System.Text.UTF8Encoding>物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-178">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="59fc7-179">四個<xref:System.Text.UTF8Encoding>和建立和比較物件比較的結果會顯示。</span><span class="sxs-lookup"><span data-stu-id="59fc7-179">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59fc7-180">計算將一組字元編碼所產生的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-180">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="59fc7-181"><see cref="T:System.String" />，包含要編碼的一組字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-181">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="59fc7-182">計算將指定 <see cref="T:System.String" /> 中的字元編碼所產生的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-182">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="59fc7-183">編碼指定字元所產生的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-183">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-184">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-184">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-185">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-185">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-186"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-186">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-187">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-187">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-188">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-188">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-189">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-189">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-190">位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-190">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-191">下列範例會呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>和<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>方法來計算最大值與實際所需格式的字串編碼的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-191">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="59fc7-192">它也會顯示實際儲存位元組順序標記的位元組資料流所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-192">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-193"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-193"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-194">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-194">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-195">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-195">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-196">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-196">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-197">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-197">-and-</span></span> 
 <span data-ttu-id="59fc7-198"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-198"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="59fc7-199">要編碼的第一個字元指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-199">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="59fc7-200">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-200">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="59fc7-201">計算將起始於指定字元指標的一組字元編碼所產生的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-201">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="59fc7-202">編碼指定字元所產生的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-202">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-203">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>方法來儲存產生的位元組，您呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-203">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-204">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-204">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-205"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-205">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-206">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-206">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-207">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-208">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-209">位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-210"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-210"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-211"><paramref name="count" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-211"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-212">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-212">-or-</span></span> 
<span data-ttu-id="59fc7-213">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-214">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-214">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-215">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span> 
<span data-ttu-id="59fc7-216">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-216">-and-</span></span> 
 <span data-ttu-id="59fc7-217"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-217"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="59fc7-218">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="59fc7-218">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="59fc7-219">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-219">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="59fc7-220">包含要解碼之一組字元的字元陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-220">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="59fc7-221">要編碼的第一個字元索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-221">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="59fc7-222">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-222">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="59fc7-223">計算將指定字元陣列中的一組字元編碼所產生的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-223">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="59fc7-224">編碼指定字元所產生的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-224">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-225">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>來儲存產生的位元組，您可以呼叫使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-225">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-226">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-226">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-227"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-227">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-228">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-228">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-229">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-229">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-230">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-230">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-231">位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-231">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-232">下列範例會填入陣列拉丁大寫字母和小寫字元和呼叫<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以判斷拉丁文小寫的字元編碼所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-232">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="59fc7-233">然後，它會顯示這項資訊，以及加入位元組順序標記時所需的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-233">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="59fc7-234">它會使用所傳回的值比較此數字<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法，即表示拉丁文小寫的字元編碼所需的位元組數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-234">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-235"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-235"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-236"><paramref name="index" /> 或 <paramref name="count" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-236"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-237">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-237">-or-</span></span> 
 <span data-ttu-id="59fc7-238"><paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-238"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="59fc7-239">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-239">-or-</span></span> 
<span data-ttu-id="59fc7-240">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-240">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-241">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-241">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-242">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-242">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-243">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-243">-and-</span></span> 
<span data-ttu-id="59fc7-244"><see cref="P:System.Text.Encoding.EncoderFallback" /> 屬性設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-244">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59fc7-245">將一組字元編碼成位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-245">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="uTF8Encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="59fc7-246">要編碼的字元字串。</span><span class="sxs-lookup"><span data-stu-id="59fc7-246">The character string to encode.</span></span></param>
        <summary><span data-ttu-id="59fc7-247">將指定 <see cref="T:System.String" /> 物件中的字元編碼成位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-247">Encodes the characters in a specified <see cref="T:System.String" /> object into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="59fc7-248">位元組陣列，包含 s 參數所指定之字串中已編碼的字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-248">A byte array that contains the encoded characters in the string specified by the s parameter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="59fc7-249">要編碼的第一個字元指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-249">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="59fc7-250">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-250">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="59fc7-251">開始寫入結果位元組序列的位置指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-251">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="59fc7-252">寫入的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-252">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="59fc7-253">將起始於指定字元指標的一組字元編碼成位元組序列；儲存該位元組序列時，係以指定的位元組指標為起始點。</span><span class="sxs-lookup"><span data-stu-id="59fc7-253">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="59fc7-254">在 <paramref name="bytes" /> 所表示的位置上寫入的實際位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-254">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-255">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-255">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-256">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-256">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-257"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-257">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-258">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-258">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-259">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-259">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-260">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-260">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-261">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-261">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="59fc7-262">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-262">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-263">位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。</span><span class="sxs-lookup"><span data-stu-id="59fc7-263">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="59fc7-264"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。</span><span class="sxs-lookup"><span data-stu-id="59fc7-264">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-265"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-265"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="59fc7-266">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-266">-or-</span></span> 
 <span data-ttu-id="59fc7-267"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-267"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-268"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-268"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-269">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-269">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="59fc7-270">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-270">-or-</span></span> 
 <span data-ttu-id="59fc7-271"><paramref name="byteCount" /> 小於結果位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-271"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-272">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-272">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-273">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-273">-and-</span></span> 
 <span data-ttu-id="59fc7-274"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-274"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="59fc7-275">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="59fc7-275">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="59fc7-276">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-276">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="59fc7-277">包含要解碼之一組字元的字元陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-277">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="59fc7-278">要編碼的第一個字元索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-278">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="59fc7-279">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-279">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="59fc7-280">要包含結果位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-280">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="59fc7-281">要開始寫入結果位元組序列的索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-281">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="59fc7-282">將指定字元陣列中的一組字元編碼成指定的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-282">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="59fc7-283">寫入 <paramref name="bytes" /> 的實際位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-283">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-284">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-284">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-285">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-285">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-286"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-286">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-287">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-287">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-288">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-288">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-289">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-289">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-290">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-290">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="59fc7-291">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-291">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-292">位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。</span><span class="sxs-lookup"><span data-stu-id="59fc7-292">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="59fc7-293"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。</span><span class="sxs-lookup"><span data-stu-id="59fc7-293">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-294">下列範例會使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法來編碼的字串，並將編碼的位元組在位元組陣列中的項目範圍中的字元範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-294">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-295"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-295"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="59fc7-296">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-296">-or-</span></span> 
 <span data-ttu-id="59fc7-297"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-297"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-298"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-298"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-299">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-299">-or-</span></span> 
 <span data-ttu-id="59fc7-300"><paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-300"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="59fc7-301">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-301">-or-</span></span> 
 <span data-ttu-id="59fc7-302"><paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-302"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-303">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-303">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="59fc7-304">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-304">-or-</span></span> 
 <span data-ttu-id="59fc7-305">從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</span><span class="sxs-lookup"><span data-stu-id="59fc7-305"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-306">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-306">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-307">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-307">-and-</span></span> 
 <span data-ttu-id="59fc7-308"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-308"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="59fc7-309"><see cref="T:System.String" />，包含要編碼的一組字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-309">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="59fc7-310">要編碼的第一個字元索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-310">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="59fc7-311">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-311">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="59fc7-312">要包含結果位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-312">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="59fc7-313">要開始寫入結果位元組序列的索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-313">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="59fc7-314">將指定 <see cref="T:System.String" /> 中的一組字元編碼成指定的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-314">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="59fc7-315">寫入 <paramref name="bytes" /> 的實際位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-315">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-316">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-316">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-317">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-317">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-318"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-318">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-319">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-319">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-320">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-320">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-321">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-321">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-322">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-322">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="59fc7-323">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-323">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-324">位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。</span><span class="sxs-lookup"><span data-stu-id="59fc7-324">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="59fc7-325"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。</span><span class="sxs-lookup"><span data-stu-id="59fc7-325">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-326">下列範例會使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法來編碼 Unicode 字元陣列中的項目範圍，並將編碼的位元組儲存在位元組陣列中的項目範圍中。</span><span class="sxs-lookup"><span data-stu-id="59fc7-326">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-327"><paramref name="s" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-327"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="59fc7-328">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-328">-or-</span></span> 
 <span data-ttu-id="59fc7-329"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-329"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-330"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-330"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-331">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-331">-or-</span></span> 
 <span data-ttu-id="59fc7-332"><paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-332"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="59fc7-333">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-333">-or-</span></span> 
 <span data-ttu-id="59fc7-334"><paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-334"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-335">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-335">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="59fc7-336">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-336">-or-</span></span> 
 <span data-ttu-id="59fc7-337">從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</span><span class="sxs-lookup"><span data-stu-id="59fc7-337"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-338">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-338">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-339">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-339">-and-</span></span> 
 <span data-ttu-id="59fc7-340"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-340"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59fc7-341">計算將位元組序列解碼所產生的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-341">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="59fc7-342">要解碼的第一個位元組指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-342">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="59fc7-343">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-343">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="59fc7-344">計算將起始於指定位元組指標的位元組序列解碼所產生的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-344">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="59fc7-345">解碼指定位元組序列所產生的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-345">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-346">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-346">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-347">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-347">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-348"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-348">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-349">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-349">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-350">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-350">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-351"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-351"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-352"><paramref name="count" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-352"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-353">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-353">-or-</span></span> 
<span data-ttu-id="59fc7-354">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-354">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-355">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-355">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-356">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-356">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-357">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-357">-and-</span></span> 
 <span data-ttu-id="59fc7-358"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-358"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="59fc7-359">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="59fc7-359">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="59fc7-360">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-360">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="59fc7-361">包含要解碼之位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-361">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="59fc7-362">要解碼的第一個位元組索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-362">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="59fc7-363">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-363">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="59fc7-364">計算將指定位元組陣列中的位元組序列解碼所產生的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-364">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="59fc7-365">解碼指定位元組序列所產生的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-365">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-366">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-366">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-367">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-367">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-368"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-368">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-369">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-369">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-370">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-370">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-371">下列範例會使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>解碼位元組陣列中的項目範圍所產生的方法，以傳回的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-371">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-372"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-372"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-373"><paramref name="index" /> 或 <paramref name="count" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-373"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-374">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-374">-or-</span></span> 
 <span data-ttu-id="59fc7-375"><paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-375"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="59fc7-376">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-376">-or-</span></span> 
<span data-ttu-id="59fc7-377">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-377">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-378">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-378">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-379">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-379">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-380">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-380">-and-</span></span> 
 <span data-ttu-id="59fc7-381"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-381"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59fc7-382">將位元組序列解碼成一組字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-382">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="59fc7-383">要解碼的第一個位元組指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-383">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="59fc7-384">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-384">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="59fc7-385">開始寫入產生的一組字元之位置指標。</span><span class="sxs-lookup"><span data-stu-id="59fc7-385">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="59fc7-386">要寫入的最大字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-386">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="59fc7-387">將起始於指定位元組指標的位元組序列解碼成一組字元；儲存該組字元時，係以指定的字元指標為起始點。</span><span class="sxs-lookup"><span data-stu-id="59fc7-387">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="59fc7-388">在 <paramref name="chars" /> 所表示的位置上寫入的實際字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-388">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-389">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-389">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-390">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-390">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-391"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-391">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-392">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-392">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-393">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-393">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-394">如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="59fc7-394">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="59fc7-395">您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-395">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="59fc7-396">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-396">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-397">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供的物件<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-397">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-398"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-398"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="59fc7-399">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-399">-or-</span></span> 
 <span data-ttu-id="59fc7-400"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-400"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-401"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-401"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-402">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-402">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="59fc7-403">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-403">-or-</span></span> 
 <span data-ttu-id="59fc7-404"><paramref name="charCount" /> 小於結果字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-404"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-405">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-405">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-406">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-406">-and-</span></span> 
 <span data-ttu-id="59fc7-407"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-407"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="59fc7-408">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="59fc7-408">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="59fc7-409">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-409">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="59fc7-410">包含要解碼之位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-410">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="59fc7-411">要解碼的第一個位元組索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-411">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="59fc7-412">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-412">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="59fc7-413">包含產生的一組字元之字元陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-413">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="59fc7-414">要開始寫入產生的一組字元之索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-414">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="59fc7-415">將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-415">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="59fc7-416">寫入 <paramref name="chars" /> 的實際字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-416">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-417">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>來儲存產生的字元，呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-417">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-418">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-418">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-419"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-419">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-420">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-420">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-421">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-421">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-422">如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="59fc7-422">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="59fc7-423">您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-423">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="59fc7-424">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-424">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-425">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-425">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-426">下列範例會使用<xref:System.Text.UTF8Encoding.GetChars%2A>方法來解碼位元組陣列中的項目範圍，並將結果儲存在字元陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-426">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-427"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-427"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="59fc7-428">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-428">-or-</span></span> 
 <span data-ttu-id="59fc7-429"><paramref name="chars" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-429"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-430"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-430"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-431">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-431">-or-</span></span> 
 <span data-ttu-id="59fc7-432"><paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-432"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="59fc7-433">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-433">-or-</span></span> 
 <span data-ttu-id="59fc7-434"><paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-434"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-435">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-435">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="59fc7-436">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-436">-or-</span></span> 
 <span data-ttu-id="59fc7-437">從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-437"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-438">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-438">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-439">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-439">-and-</span></span> 
 <span data-ttu-id="59fc7-440"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-440"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF8Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59fc7-441">取得可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-441">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="59fc7-442">可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-442">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-443"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法會將序列的位元組的區塊轉換成循序區塊中的字元，以類似的方式<xref:System.Text.UTF8Encoding.GetChars%2A>這個類別的方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-443">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="59fc7-444">不過，<xref:System.Text.Decoder>維護呼叫，因此它可以正確解碼位元組序列跨越區塊之間的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-444">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="59fc7-445"><xref:System.Text.Decoder>也會保留尾端位元組的資料區塊的結尾，並在下一步 的解碼作業中使用尾端位元組。</span><span class="sxs-lookup"><span data-stu-id="59fc7-445">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="59fc7-446">因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>適合用於網路傳輸和檔案作業，因為這些作業經常要處理的資料，而不是完整的資料流區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-446">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="59fc7-447">如果已啟用錯誤偵測，亦即`throwOnInvalidCharacters`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Decoder>這個方法所傳回。</span><span class="sxs-lookup"><span data-stu-id="59fc7-447">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="59fc7-448">如果已啟用錯誤偵測且遇到無效的序列，解碼器的狀態會是未定義，且必須停止處理。</span><span class="sxs-lookup"><span data-stu-id="59fc7-448">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-449">下列範例會使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法，以取得 utf-8 解碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-449">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="59fc7-450">解碼器會將位元組序列轉換成字元序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-450">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="59fc7-451">了解編碼</span><span class="sxs-lookup"><span data-stu-id="59fc7-451">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF8Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59fc7-452">取得可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列的編碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-452">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="59fc7-453"><see cref="T:System.Text.Encoder" />，可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-453">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-454"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法會將字元的循序區塊轉換成循序區塊中的位元組，以類似的方式<xref:System.Text.UTF8Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-454">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="59fc7-455">不過，<xref:System.Text.Encoder>維護呼叫，因此它可以正確編碼跨越區塊的字元序列之間的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-455">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="59fc7-456"><xref:System.Text.Encoder>也保留尾端字元的資料區塊的結尾，並在下一步 的編碼作業中使用尾端的字元。</span><span class="sxs-lookup"><span data-stu-id="59fc7-456">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="59fc7-457">比方說，資料區塊可能會以無對應的高 surrogate，結尾，而且下一個資料區塊可能會比對的低 surrogate。</span><span class="sxs-lookup"><span data-stu-id="59fc7-457">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="59fc7-458">因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>適合用於網路傳輸和檔案作業，因為這些作業經常要處理的資料，而不是完整的資料流區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-458">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="59fc7-459">如果已啟用錯誤偵測，亦即`throwOnInvalidCharacters`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Encoder>這個方法所傳回。</span><span class="sxs-lookup"><span data-stu-id="59fc7-459">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="59fc7-460">如果已啟用錯誤偵測且遇到無效的序列，編碼器的狀態會是未定義，且必須停止處理。</span><span class="sxs-lookup"><span data-stu-id="59fc7-460">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-461">下列範例會使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，以取得將字元序列轉換成 utf-8 編碼器編碼的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-461">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="59fc7-462">了解編碼</span><span class="sxs-lookup"><span data-stu-id="59fc7-462">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF8Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59fc7-463">傳回目前執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-463">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="59fc7-464">目前執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-464">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="59fc7-465">下列範例會使用<xref:System.Text.UTF8Encoding.GetHashCode%2A>方法傳回的雜湊碼<xref:System.Text.UTF8Encoding>執行個體。</span><span class="sxs-lookup"><span data-stu-id="59fc7-465">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="59fc7-466">請注意，這個方法所傳回的雜湊程式碼就會取決於用來建立建構函式<xref:System.Text.UTF8Encoding>物件。</span><span class="sxs-lookup"><span data-stu-id="59fc7-466">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF8Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="59fc7-467">要編碼的字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-467">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="59fc7-468">計算將指定數目的字元編碼所產生的最大位元組數目。</span><span class="sxs-lookup"><span data-stu-id="59fc7-468">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="59fc7-469">編碼指定字元數所產生的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-469">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-470">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-470">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-471">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-471">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="59fc7-472"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-472">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 是最壞情況的數字，包括目前所選最壞的情況<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="59fc7-474">如果後援會選擇使用可能很大的字串、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>可以傳回較大的值。</span><span class="sxs-lookup"><span data-stu-id="59fc7-474">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="59fc7-475">在大部分情況下，這個方法會傳回對小型字串合理的數字。</span><span class="sxs-lookup"><span data-stu-id="59fc7-475">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="59fc7-476">針對大型的字串，您可能選擇使用極大的緩衝區，少數的情況下，更合理的緩衝區已超出攔截錯誤。</span><span class="sxs-lookup"><span data-stu-id="59fc7-476">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="59fc7-477">您也可以在不同的方法使用，請考慮<xref:System.Text.UTF8Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-477">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="59fc7-478">比方說，通常需要英文和許多其他語言的文字只有一個的 utf-8 位元組來表示字元，但所傳回的數目<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>就必須允許，要轉換的字串會完全字元組成，每個可能的原因需要四個位元組。</span><span class="sxs-lookup"><span data-stu-id="59fc7-478">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="59fc7-479"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 沒有任何關聯<xref:System.Text.UTF8Encoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-479"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="59fc7-480">如果您的應用程式需要類似的函式，以搭配<xref:System.Text.UTF8Encoding.GetChars%2A>，它應該使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-480">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59fc7-481">`GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-481">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-482">下列範例會使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法傳回的編碼指定的字元數所需的位元組數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-482">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-483"><paramref name="charCount" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-483"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-484">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-484">-or-</span></span> 
<span data-ttu-id="59fc7-485">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-485">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="59fc7-486">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-486">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-487">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-487">-and-</span></span> 
 <span data-ttu-id="59fc7-488"><see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-488"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF8Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="59fc7-489">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-489">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="59fc7-490">計算將指定數目的位元組解碼所產生的最大字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-490">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="59fc7-491">解碼指定位元組數所產生的最大字元數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-491">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-492">若要計算所需的確切的陣列大小<xref:System.Text.UTF8Encoding.GetChars%2A>若要儲存產生的字元，請呼叫<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-492">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-493">若要計算最大陣列大小，請呼叫<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-493">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="59fc7-494"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常執行速度更快。</span><span class="sxs-lookup"><span data-stu-id="59fc7-494">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="59fc7-495"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 是最壞情況的數字，包括目前所選最壞的情況<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-495"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="59fc7-496">如果後援會選擇使用可能很大的字串、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>可以傳回較大的值。</span><span class="sxs-lookup"><span data-stu-id="59fc7-496">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="59fc7-497">在大部分情況下，這個方法會傳回對小型字串合理的數字。</span><span class="sxs-lookup"><span data-stu-id="59fc7-497">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="59fc7-498">針對大型的字串，您可能選擇使用極大的緩衝區，少數的情況下，更合理的緩衝區已超出攔截錯誤。</span><span class="sxs-lookup"><span data-stu-id="59fc7-498">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="59fc7-499">您也可以在不同的方法使用，請考慮<xref:System.Text.UTF8Encoding.GetCharCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-499">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="59fc7-500"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 沒有任何關聯<xref:System.Text.UTF8Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-500"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="59fc7-501">如果您的應用程式需要類似的函式，以搭配<xref:System.Text.UTF8Encoding.GetBytes%2A>，它應該使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="59fc7-501">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59fc7-502">`GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-502">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-503">下列範例會使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>解碼指定的位元組數所產生的方法，以傳回的字元數上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-503">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-504"><paramref name="byteCount" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-504"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-505">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-505">-or-</span></span> 
<span data-ttu-id="59fc7-506">所產生的位元組數目大於可用整數傳回的數目上限。</span><span class="sxs-lookup"><span data-stu-id="59fc7-506">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-507">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-507">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-508">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-508">-and-</span></span> 
 <span data-ttu-id="59fc7-509"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-509"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF8Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59fc7-510">如果設定 <see cref="T:System.Text.UTF8Encoding" /> 編碼物件提供編碼方式，則會傳回以 UTF-8 格式編碼的 Unicode 位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="59fc7-510">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="59fc7-511">如果設定 <see cref="T:System.Text.UTF8Encoding" /> 編碼物件提供編碼方式，則為包含 Unicode 位元組順序標記的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-511">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span> <span data-ttu-id="59fc7-512">否則，這個方法會傳回長度為零的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-512">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-513"><xref:System.Text.UTF8Encoding>物件可以提供前序編碼，也就是可以加在編碼程序產生的位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-513">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="59fc7-514">引用編碼的位元組序列的位元組順序標記 （字碼元素 U + FEFF） 有助於判斷位元組順序的轉換格式或 UTF 解碼器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-514">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="59fc7-515">Unicode 位元組順序標記 (BOM) 序列化為 0xEF 0xBB 0xBF。</span><span class="sxs-lookup"><span data-stu-id="59fc7-515">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="59fc7-516">請注意 Unicode 標準都不需要也不建議使用 BOM 的 utf-8 編碼資料流。</span><span class="sxs-lookup"><span data-stu-id="59fc7-516">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="59fc7-517">您可以具現化<xref:System.Text.UTF8Encoding>物件，其<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法會傳回有效的 BOM 如下：</span><span class="sxs-lookup"><span data-stu-id="59fc7-517">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="59fc7-518">藉由擷取<xref:System.Text.UTF8Encoding>所傳回的物件<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="59fc7-518">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="59fc7-519">藉由呼叫<xref:System.Text.UTF8Encoding>建構函式`encoderShouldEmitUTF8Identifier`參數並將設定其值設為`true`。</span><span class="sxs-lookup"><span data-stu-id="59fc7-519">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="59fc7-520">所有其他<xref:System.Text.UTF8Encoding>物件設定為傳回空陣列，而不是有效的 BOM。</span><span class="sxs-lookup"><span data-stu-id="59fc7-520">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="59fc7-521">BOM 提供幾乎已遺失的參考，其編碼的檔案編碼方式的特定識別，例如未標記或標記不當 web 資料或儲存時企業的隨機文字檔案沒有國際考量。</span><span class="sxs-lookup"><span data-stu-id="59fc7-521">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="59fc7-522">如果資料一致的方式適當地標記，就能避免通常使用者的問題。</span><span class="sxs-lookup"><span data-stu-id="59fc7-522">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="59fc7-523">提供編碼類型的標準，BOM 是多餘的。</span><span class="sxs-lookup"><span data-stu-id="59fc7-523">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="59fc7-524">不過，它可以用來傳送正確的編碼方式標頭的伺服器。</span><span class="sxs-lookup"><span data-stu-id="59fc7-524">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="59fc7-525">或者，它可用來當做後援萬一編碼遺失時。</span><span class="sxs-lookup"><span data-stu-id="59fc7-525">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="59fc7-526">有一些缺點，若要使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="59fc7-526">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="59fc7-527">比方說，了解如何限制使用 BOM 的資料庫欄位可以是很困難。</span><span class="sxs-lookup"><span data-stu-id="59fc7-527">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="59fc7-528">串連的檔案可以也會是問題，比方說，當檔案會合併，例如某種程度的不必要的字元可以得到中間的資料。</span><span class="sxs-lookup"><span data-stu-id="59fc7-528">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="59fc7-529">儘管幾個缺點，不過，BOM 是強烈建議使用。</span><span class="sxs-lookup"><span data-stu-id="59fc7-529">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="59fc7-530">如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode Standard > [Unicode 首頁](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="59fc7-530">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="59fc7-531">若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流的開頭。</span><span class="sxs-lookup"><span data-stu-id="59fc7-531">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="59fc7-532">請注意，<xref:System.Text.UTF8Encoding.GetBytes%2A>方法不會不在前面加上 BOM 編碼的位元組序列; 開發人員的責任提供適當的位元組資料流的開頭 BOM。</span><span class="sxs-lookup"><span data-stu-id="59fc7-532">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>
  
## Examples  
 <span data-ttu-id="59fc7-533">下列範例會使用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法來傳回 Unicode 位元組順序以 utf-8 格式編碼的標記。</span><span class="sxs-lookup"><span data-stu-id="59fc7-533">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="59fc7-534">請注意，預設建構函式<xref:System.Text.UTF8Encoding>不會提供前序編碼。</span><span class="sxs-lookup"><span data-stu-id="59fc7-534">Notice that the default constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="59fc7-535">下列範例將兩個會具現化<xref:System.Text.UTF8Encoding>物件，藉由呼叫無參數的第一個<xref:System.Text.UTF8Encoding.%23ctor>建構函式，不會提供 BOM，且第二個呼叫<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>建構函式及其`encoderShouldEmitUTF8Identifier`引數設定為`true`.</span><span class="sxs-lookup"><span data-stu-id="59fc7-535">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="59fc7-536">然後它會呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>UF8 編碼的字串寫入之前，請先將 BOM 寫入至檔案的方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-536">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="59fc7-537">如主控台輸出範例所示，從第二個編碼器會將位元組儲存的檔案會有三個的多個位元組，比第一個。</span><span class="sxs-lookup"><span data-stu-id="59fc7-537">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="59fc7-538">您也可以藉由比較檔案`fc`命令主控台視窗中，或者您可以檢查包含十六進位檢視模式的文字編輯器中的檔案。</span><span class="sxs-lookup"><span data-stu-id="59fc7-538">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="59fc7-539">請注意，當支援 utf-8 的編輯器中開啟檔案，BOM 會不會顯示。</span><span class="sxs-lookup"><span data-stu-id="59fc7-539">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF8Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="59fc7-540">包含要解碼之位元組序列的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-540">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="59fc7-541">要解碼的第一個位元組索引。</span><span class="sxs-lookup"><span data-stu-id="59fc7-541">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="59fc7-542">要解碼的位元組數。</span><span class="sxs-lookup"><span data-stu-id="59fc7-542">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="59fc7-543">將位元組陣列中的某一段位元組範圍解碼成字串。</span><span class="sxs-lookup"><span data-stu-id="59fc7-543">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="59fc7-544"><see cref="T:System.String" />，包含將指定之位元組序列解碼的結果。</span><span class="sxs-lookup"><span data-stu-id="59fc7-544">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59fc7-545">使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-545">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="59fc7-546">錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="59fc7-546">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="59fc7-547">如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="59fc7-547">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="59fc7-548">您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-548">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="59fc7-549">要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。</span><span class="sxs-lookup"><span data-stu-id="59fc7-549">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="59fc7-550">在此情況下，或如果資料量很大，它必須分割成較小的區塊，請使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="59fc7-550">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59fc7-551">下列範例會藉由呼叫初始化陣列<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法，以判斷完全多少個位元組所需編碼的字串，然後再將位元組順序標記 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="59fc7-551">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="59fc7-552">此範例接著會呼叫<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法，可儲存至的陣列，然後再呼叫 BOM<xref:System.Text.UTF8Encoding.GetBytes%2A>儲存編碼的位元組陣列的方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-552">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="59fc7-553">此範例接著會呼叫<xref:System.Text.UTF8Encoding.GetString%2A>方法來解碼的字串。</span><span class="sxs-lookup"><span data-stu-id="59fc7-553">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="59fc7-554">請注意，在此情況下已解碼的字串不同於原始的字串，因為其開頭為 U + FFFD 的 16 位元的位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="59fc7-554">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="59fc7-555">這表示兩個字串將會比較結果不相等，而且，如果字串為輸出，BOM 會顯示為取代字元"？"。</span><span class="sxs-lookup"><span data-stu-id="59fc7-555">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="59fc7-556">若要移除的字串開頭 BOM，您可以呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="59fc7-556">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59fc7-557"><paramref name="bytes" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-557"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59fc7-558"><paramref name="index" /> 或 <paramref name="count" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="59fc7-558"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="59fc7-559">-或-</span><span class="sxs-lookup"><span data-stu-id="59fc7-559">-or-</span></span> 
 <span data-ttu-id="59fc7-560"><paramref name="index" /> 和 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</span><span class="sxs-lookup"><span data-stu-id="59fc7-560"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59fc7-561">已啟用錯誤偵測，而且 <paramref name="bytes" /> 包含無效的位元組序列。</span><span class="sxs-lookup"><span data-stu-id="59fc7-561">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="59fc7-562">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))</span><span class="sxs-lookup"><span data-stu-id="59fc7-562">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="59fc7-563">-和-</span><span class="sxs-lookup"><span data-stu-id="59fc7-563">-and-</span></span> 
 <span data-ttu-id="59fc7-564"><see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="59fc7-564"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>