<Type Name="Encoding" FullName="System.Text.Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="adda8f83141f6520fcaefa264a4ae9446935542e" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683688" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Encoding : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Encoding extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encoding" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Encoding&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Encoding abstract : ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示字元編碼方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 編碼是將一組 Unicode 字元轉換成位元組序列的處理程序。 相反地，解碼則是將編碼的位元組序列轉換成一組 Unicode 字元的程序。 如需 Unicode 轉換格式 (UTFs) 和其他支援的編碼資訊<xref:System.Text.Encoding>，請參閱[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)。  
  
 請注意，<xref:System.Text.Encoding>旨在對 Unicode 字元，而不是任意的二進位資料，例如位元組陣列。 如果必須任意的二進位資料編碼為文字，您應該使用的通訊協定，例如這類實作的方法進行 uuencode 編碼<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。  
  
 .NET Framework 提供的下列實作<xref:System.Text.Encoding>類別，以支援目前的 Unicode 編碼方式和其他的編碼：  
  
-   <xref:System.Text.ASCIIEncoding> 將 Unicode 字元編碼成單一的 7 位元 ASCII 字元。 這個編碼僅支援字元介於 U + 0000 與 U + 007F。 字碼頁 20127。 也可透過<xref:System.Text.Encoding.ASCII%2A>屬性。  
  
-   <xref:System.Text.UTF7Encoding> 使用 utf-7 編碼的 Unicode 字元編碼。 這種編碼方式支援所有的 Unicode 字元值。 字碼頁 65000。 也可透過<xref:System.Text.Encoding.UTF7%2A>屬性。  
  
-   <xref:System.Text.UTF8Encoding> 使用 utf-8 編碼的 Unicode 字元編碼。 這種編碼方式支援所有的 Unicode 字元值。 字碼頁 65001。 也可透過<xref:System.Text.Encoding.UTF8%2A>屬性。  
  
-   <xref:System.Text.UnicodeEncoding> 將使用 utf-16 編碼的 Unicode 字元編碼。 支援兩個小的位元組由小到大和 big 位元組由小到大位元組順序。 也可透過<xref:System.Text.Encoding.Unicode%2A>屬性和<xref:System.Text.Encoding.BigEndianUnicode%2A>屬性。  
  
-   <xref:System.Text.UTF32Encoding> 將使用 utf-32 編碼的 Unicode 字元編碼。 同時位元組由小到大 （字碼頁 12000） 和 big endian （字碼頁 12001） 位元組支援順序。 也可透過<xref:System.Text.Encoding.UTF32%2A>屬性。  
  
 <xref:System.Text.Encoding>類別主要是為不同的編碼方式和 Unicode 間轉換。 通常衍生 Unicode 類別的其中一個是正確的選擇，您的應用程式。  
  
 使用<xref:System.Text.Encoding.GetEncoding%2A>方法，以取得其他編碼，並呼叫<xref:System.Text.Encoding.GetEncodings%2A>方法來取得一份所有編碼方式。  
  
 下表列出.NET Framework 所支援的編碼。 它會列出每個編碼的字碼頁編號和值編碼的<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>和<xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType>屬性。 星號的最後一欄會指出.NET Framework 中，不論基礎平台原生支援的字碼頁。 請注意，字碼頁的<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>屬性會對應至國際標準不一定符合以完整模式和標準。  
  
|字碼頁|名稱|顯示名稱|.NET framework 支援|  
|---------------|----------|------------------|----------------------------|  
|37|IBM037|IBM EBCDIC （美國和加拿大）||  
|437|IBM437|OEM 美國||  
|500|IBM500|IBM EBCDIC （國際）||  
|708|ASMO-708|阿拉伯文 (ASMO 708)||  
|720|DOS-720|阿拉伯文 (DOS)||  
|737|ibm737|希臘文 (DOS)||  
|775|ibm775|波羅的海文 (DOS)||  
|850|ibm850|西歐語系 (DOS)||  
|852|ibm852|中歐語系 (DOS)||  
|855|IBM855|OEM 文 （斯拉夫)||  
|857|ibm857|土耳其文 (DOS)||  
|858|IBM00858|OEM 多語系拉丁文 I||  
|860|IBM860|葡萄牙文 (DOS)||  
|861|ibm861|冰島文 (DOS)||  
|862|DOS-862|希伯來文 (DOS)||  
|863|IBM863|加拿大法文 (DOS)||  
|864|IBM864|阿拉伯文 (864)||  
|865|IBM865|北歐 (DOS)||  
|866|cp866|斯拉夫文 (DOS)||  
|869|ibm869|希臘文、 現代化 (DOS)||  
|870|IBM870|IBM EBCDIC (多語系拉丁文 2)||  
|874|windows-874|泰文 (Windows)||  
|875|cp875|IBM EBCDIC （現代希臘文）||  
|932|shift_jis|日文 (SHIFT-JIS)||  
|936|gb2312|簡體中文 (GB2312)|✓|  
|949|ks_c_5601-1987|韓文||  
|950|big5|繁體中文 (Big5)||  
|1026|IBM1026|IBM EBCDIC (土耳其文拉丁文 5)||  
|1047|IBM01047|IBM 拉丁文 1||  
|1140|IBM01140|IBM EBCDIC （美國-加拿大-歐洲）||  
|1141|IBM01141|IBM EBCDIC （德國歐洲）||  
|1142|IBM01142|IBM EBCDIC （丹麥-挪威-歐洲）||  
|1143|IBM01143|IBM EBCDIC （歐洲-芬蘭-瑞典）||  
|1144|IBM01144|IBM EBCDIC （義大利歐洲）||  
|1145|IBM01145|IBM EBCDIC （西班牙歐洲）||  
|1146|IBM01146|IBM EBCDIC （英式歐洲）||  
|1147|IBM01147|IBM EBCDIC （法國歐洲）||  
|1148|IBM01148|IBM EBCDIC （國際歐洲）||  
|1149|IBM01149|IBM EBCDIC （冰島文-歐洲）||  
|1200|utf-16|Unicode|✓|  
|1201|unicodeFFFE|Unicode (Big endian)|✓|  
|1250|windows-1250|中歐語系 (Windows)||  
|1251|windows-1251|斯拉夫文 (Windows)||  
|1252|Windows-1252|西歐語系 (Windows)|✓|  
|1253|windows-1253|希臘文 (Windows)||  
|1254|windows-1254|土耳其文 (Windows)||  
|1255|windows-1255|希伯來文 (Windows)||  
|1256|windows-1256|阿拉伯文 (Windows)||  
|1257|windows-1257|波羅的海文 (Windows)||  
|1258|windows-1258|越南文 (Windows)||  
|1361|裘哈|韓文 （裘哈）||  
|10000|macintosh|西歐語系 (Mac)||  
|10001|x-mac-日文|日文 (Mac)||  
|10002|x-mac-chinesetrad|繁體中文 (Mac)||  
|10003|x-mac-韓文|韓文 (Mac)|✓|  
|10004|x-mac-阿拉伯文|阿拉伯文 (Mac)||  
|10005|x-mac-希伯來文|希伯來文 (Mac)||  
|10006|x mac-希臘文|希臘文 (Mac)||  
|10007|x-mac-斯拉夫文|斯拉夫文 (Mac)||  
|10008|x-mac-chinesesimp|簡體中文 (Mac)|✓|  
|10010|羅馬尼亞文 mac 月 x 日|羅馬尼亞文 (Mac)||  
|10017|烏克蘭文-x-mac|烏克蘭文 (Mac)||  
|10021|x-mac-泰文|泰文 (Mac)||  
|10029|x-mac-ce|中歐語系 (Mac)||  
|10079|x mac-冰島文|冰島文 (Mac)||  
|10081|x mac-土耳其文|土耳其文 (Mac)||  
|10082|克羅埃西亞文 mac 月 x 日|克羅埃西亞文 (Mac)||  
|12000|utf-32|Unicode (utf-32)|✓|  
|12001|utf-32BE|Unicode (utf-32 Big endian)|✓|  
|20000|x-中文-CN|繁體中文 (CN)||  
|20001|x-cp20001|TCA 台灣||  
|20002|x-中文-倚天|繁體中文 （倚天）||  
|20003|x-cp20003|IBM5550 台灣||  
|20004|x-cp20004|TeleText 台灣||  
|20005|x-cp20005|Wang 台灣||  
|20105|x-IA5|西歐語系 (IA5)||  
|20106|x IA5 德文|德文 (IA5)||  
|20107|x IA5-瑞典文|瑞典文 (IA5)||  
|20108|x-IA5-Norwegian|挪威文 (IA5)||  
|20127|我們 ascii|US-ASCII|✓|  
|20261|x-cp20261|T.61||  
|20269|x-cp20269|ISO-6937||  
|20273|IBM273|IBM EBCDIC （德國）||  
|20277|IBM277|IBM EBCDIC （丹麥挪威）||  
|20278|IBM278|IBM EBCDIC （芬蘭瑞典）||  
|20280|IBM280|IBM EBCDIC （義大利）||  
|20284|IBM284|IBM EBCDIC （西班牙）||  
|20285|IBM285|IBM EBCDIC （英國）||  
|20290|IBM290|IBM EBCDIC （日文片假名）||  
|20297|IBM297|IBM EBCDIC （法國）||  
|20420|IBM420|IBM EBCDIC （阿拉伯文）||  
|20423|IBM423|IBM EBCDIC （希臘文）||  
|20424|IBM424|IBM EBCDIC （希伯來文）||  
|20833|x-EBCDIC-KoreanExtended|IBM EBCDIC （韓文擴充）||  
|20838|IBM-泰文|IBM EBCDIC （泰文）||  
|20866|koi8 r|斯拉夫文 (KOI8-R)||  
|20871|IBM871|IBM EBCDIC （冰島文）||  
|20880|IBM880|IBM EBCDIC （斯拉夫文俄文）||  
|20905|IBM905|IBM EBCDIC （土耳其文）||  
|20924|IBM00924|IBM 拉丁文 1||  
|20932|EUC-JP|日文 (JIS 0208-1990年和 0212年-1990年)||  
|20936|x-cp20936|簡體中文 (GB2312-80)|✓|  
|20949|x-cp20949|韓文 Wansung|✓|  
|21025|cp1025|IBM EBCDIC （斯拉夫文塞爾維亞文保加利亞文）||  
|21866|koi8 u|斯拉夫文 (KOI8-U)||  
|28591|iso-8859-1|西歐語系 (ISO)|✓|  
|28592|iso-8859-2|中歐語系 (ISO)||  
|28593|iso-8859-3|拉丁文 3 (ISO)||  
|28594|iso-8859-4|波羅的海文 (ISO)||  
|28595|iso-8859-5|斯拉夫文 (ISO)||  
|28596|iso-8859-6|阿拉伯文 (ISO)||  
|28597|iso-8859-7|希臘文 (ISO)||  
|28598|iso-8859-8|希伯來文 (So-visual)|✓|  
|28599|iso-8859-9|土耳其文 (ISO)||  
|28603|iso-8859-13|愛沙尼亞文 (ISO)||  
|28605|iso-8859-15|拉丁文 9 (ISO)||  
|29001|x-Europa|木衛二||  
|38598|iso-8859-8-i|希伯來文 （ISO-邏輯）|✓|  
|50220|iso 2022 de-ch|日文 (JIS)|✓|  
|50221|csISO2022JP|日文 (Jis-allow 1 byte Kana)|✓|  
|50222|iso 2022 de-ch|日文 (Jis-allow 1 byte Kana-因此 / SI)|✓|  
|50225|iso-2022年-韓國|韓文 (ISO)|✓|  
|50227|x-cp50227|簡體中文 (iso-2022)|✓|  
|51932|euc 日本|日文 (EUC)|✓|  
|51936|EUC CN|簡體中文 (EUC)|✓|  
|51949|euc kr|韓文 (EUC)|✓|  
|52936|hz-gb-2312|簡體中文 (HZ)|✓|  
|54936|GB18030|簡體中文 (GB18030)|✓|  
|57002|x-iscii-de|ISCII 梵文字母|✓|  
|57003|x iscii 是|ISCII 孟加拉文|✓|  
|57004|x-iscii-t|ISCII 坦米爾文|✓|  
|57005|x-iscii-te|ISCII 特拉古文|✓|  
|57006|x iscii 身分|ISCII 阿薩姆文|✓|  
|57007|或 x iscii|ISCII 歐利亞文|✓|  
|57008|巴 iscii x 卡|ISCII 坎那達文|✓|  
|57009|x-iscii-ma|ISCII 馬來亞拉姆文|✓|  
|57010|x-iscii-gu|ISCII 古吉拉特文|✓|  
|57011|x-iscii-pa|ISCII 旁遮普文|✓|  
|65000|utf-7|Unicode (utf-7)|✓|  
|65001|utf-8|Unicode (UTF-8)|✓|  
  
 下列範例會呼叫<xref:System.Text.Encoding.GetEncoding%28System.Int32%29>和<xref:System.Text.Encoding.GetEncoding%28System.String%29>方法，以取得希臘文 (Windows) 程式碼頁編碼。 它會比較<xref:System.Text.Encoding>，告訴您相等，然後對應顯示 Unicode 字碼指標，而每個字元的對應字碼頁值希臘字母方法呼叫所傳回的物件。  
  
 [!code-csharp[System.Text.Encoding#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding/cs/getencoding1.cs#1)]
 [!code-vb[System.Text.Encoding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding/vb/getencoding1.vb#1)]  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 Utf-16 和 utf-32 編碼器可以使用大到小的位元組順序 (最大顯著性位元組第一個) 或很少位元組由小到大位元組順序 (最小顯著性位元組第一個)。 例如，英文大寫字母 (U + 0041) 序列化如下 （以十六進位方式）：  
  
-   Utf-16 big 位元組由小到大位元組順序： 00 41  
  
-   Utf-16 很少位元組由小到大位元組順序： 41 00  
  
-   Utf-32 big 位元組由小到大位元組順序： 00 00 00 41  
  
-   Utf-32 少位元組由小到大位元組順序： 41 00 00 00  
  
 它會儲存使用原生的位元組順序的 Unicode 字元通常更有效率。 例如，最好使用位元組由小到大位元組順序少位元組由小到大的平台，例如 Intel 電腦上。  
  
 <xref:System.Text.Encoding.GetPreamble%2A>方法會擷取位元組陣列，其中包含位元組順序標示 (BOM)。 如果這個位元組陣列編碼的資料流做為前置詞，將有助於識別使用的編碼格式的解碼器。  
  
 如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode 標準[Unicode 首頁](http://go.microsoft.com/fwlink/?LinkId=37123)。  
  
 請注意，編碼類別可讓錯誤：  
  
-   以無訊息模式變更為"？"字元。  
  
-   使用"best fit"字元。  
  
-   藉由使用應用程式特定的行為變更<xref:System.Text.EncoderFallback>和<xref:System.Text.DecoderFallback>具有 U + FFFD Unicode 取代字元類別。  
  
 您應該在發生任何資料流的錯誤擲回例外狀況。 應用程式會使用"throwonerror 」 旗標時適用或使用<xref:System.Text.EncoderExceptionFallback>和<xref:System.Text.DecoderExceptionFallback>類別。 通常不建議自動調整的後援，因為它可能會造成資料遺失或混淆，而且比簡單的字元取代慢。 ANSI 編碼，自動調整的行為是預設值。  
  
   
  
## Examples  
 下列範例會將字串轉換到另一種編碼。  
  
> [!NOTE]
>  位元組 [] 陣列是在此範例中包含的編碼的資料的唯一類型。 .NET Char 和字串型別是 Unicode，因此<xref:System.Text.Encoding.GetChars%2A>呼叫解碼回 Unicode 資料。  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生的類別覆寫這個建構函式。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (codePage As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePage">慣用編碼方式的字碼頁識別項。  
  
 -或-  
  
 0，表示使用預設的編碼方式。</param>
        <summary>初始化對應到指定字碼頁之 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生的類別覆寫這個建構函式。  
  
 從衍生類別呼叫這個建構函式建立<xref:System.Text.Encoding>編碼和解碼作業中使用自動調整的後援物件。 同時<xref:System.Text.Encoding.DecoderFallback%2A>和<xref:System.Text.Encoding.EncoderFallback%2A>屬性是唯讀而且無法修改。 若要控制後援策略的類別衍生自<xref:System.Text.Encoding>，呼叫<xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="codePage" /> 小於零。</exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codePage">編碼方式字碼頁識別項。</param>
        <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
        <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
        <summary>使用指定的編碼器和解碼器後援策略，初始化對應到指定字碼頁之 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式是`protected`; 在衍生類別覆寫它。  
  
 您可以呼叫這個建構函式從衍生類別來控制後援編碼和解碼策略。 <xref:System.Text.Encoding>類別建構函式建立唯讀編碼器或解碼器後援物件建立之後，才能設定不允許的編碼物件。  
  
 如果有任一個`encoderFallback`或`decoderFallback`為 null，對應的後援策略時，會自動調整的後援。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="codePage" /> 小於零。</exception>
      </Docs>
    </Member>
    <Member MemberName="ASCII">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding ASCII { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding ASCII" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.ASCII" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ASCII As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ ASCII { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 ASCII (7 位元) 字元集 (Character Set) 的編碼方式。</summary>
        <value>ASCII (7 位元) 字元集的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASCII 字元都是從 U + 0000 到 U + 007F 限制為最低的 128 個 Unicode 字元。  
  
 選取您的應用程式的 ASCII 編碼方式，請考慮下列各項：  
  
-   ASCII 編碼方式適合通常需要 ASCII 的通訊協定。  
  
-   如果您需要 8 位元編碼 （這有時會誤稱為"ASCII"），utf-8 編碼建議透過 ASCII 編碼方式。 字元 0-7F，結果都一樣，但使用的 utf-8 藉由使用可顯示的所有 Unicode 字元表示法可避免資料遺失。 請注意，ASCII 編碼方式已 8 位元，可以讓惡意使用，模稜兩可的 utf-8 編碼方式會移除相關的 8 位元的模稜兩可。  
  
-   在.NET Framework 2.0 版之前的.NET Framework 會允許詐騙略過的 8 位元。 從.NET Framework 2.0 開始，非 ASCII 字碼指標回復期間解碼。  
  
 <xref:System.Text.ASCIIEncoding>這個屬性所傳回的物件可能沒有適當的行為，您的應用程式。 它會使用取代後援，來取代無法編碼的每個字串和無法解碼的每個位元組以問號 ("？") 字元。 相反地，您可以呼叫<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>方法來具現化<xref:System.Text.ASCIIEncoding>物件可能是其後援<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下列範例所示。  
  
 [!code-csharp[System.Text.Encoding.ASCII#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.ascii/cs/encoding.ascii2.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.ascii/vb/encoding.ascii2.vb#1)]  
  
   
  
## Examples  
 下列範例會示範 ASCII 編碼字元的 ASCII 範圍之外的效果。  
  
 [!code-cpp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CPP/ascii.cpp#1)]
 [!code-csharp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CS/ascii.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/VB/ascii.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.ASCIIEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BigEndianUnicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding BigEndianUnicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding BigEndianUnicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BigEndianUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BigEndianUnicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ BigEndianUnicode { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 UTF-16 格式的編碼方式，其使用由大到小的位元組順序。</summary>
        <value>UTF-16 格式的編碼物件，這個格式使用位元組由大到小的位元組順序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UnicodeEncoding>這個屬性所傳回的物件可能沒有適當的行為，您的應用程式。 它會使用取代後援，來取代無法編碼的每個字串和無法解碼的每個位元組以問號 ("？") 字元。 相反地，您可以呼叫<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式來具現化 big endian<xref:System.Text.UnicodeEncoding>物件可能是其後援<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下列範例所示。  
  
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode1.cs#2)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode1.vb#2)]  
  
 傳回<xref:System.Text.UnicodeEncoding>物件具有<xref:System.Text.Encoding.BodyName%2A>， <xref:System.Text.Encoding.HeaderName%2A>，和<xref:System.Text.Encoding.WebName%2A>產生名稱 」 unicodeFFFE"的屬性。 雖然 utf-16 big endian 的位元組順序標記是十六進位 FEFF，已選擇名稱 」 unicodeFFFE"，因為位元組順序標記會顯示為十六進位 FFFE 少位元組由小到大的 Windows 電腦上。  
  
   
  
## Examples  
 下列範例會使用 utf-16 編碼使用大到小的位元組順序讀取文字檔案。  
  
 [!code-cpp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CPP/bigendianunicode.cpp#1)]
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode.cs#1)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode.vb#1)]  
  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BodyName">
      <MemberSignature Language="C#" Value="public virtual string BodyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BodyName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BodyName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BodyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BodyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得可以與郵件代理程式主體標籤一起使用的目前編碼方式名稱。</summary>
        <value>可以與郵件代理程式主體標籤一起使用的目前 <see cref="T:System.Text.Encoding" /> 名稱。  
  
 -或-  
  
 如果無法使用目前的 <see cref="T:System.Text.Encoding" />，則為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您需要的主體名稱的編碼方式，您應該呼叫<xref:System.Text.Encoding.GetEncoding%2A>與<xref:System.Text.Encoding.BodyName%2A>屬性。 通常方法會擷取不同的編碼方式與呼叫中提供的測試編碼。 通常需要擷取此類編碼; 僅電子郵件應用程式大部分需要描述的編碼方式的其他應用程式應該使用其<xref:System.Text.Encoding.WebName%2A>。  
  
 在某些情況下，值<xref:System.Text.Encoding.BodyName%2A>屬性會對應到定義該編碼的國際標準。 這並不表示實作符合以完整模式和標準。  
  
   
  
## Examples  
 下列範例擷取每個編碼不同的名稱，並顯示與一個或多個名稱不同於編碼<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。 它會顯示<xref:System.Text.Encoding.EncodingName%2A>但不會針對它比較。  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，會建立目前 <see cref="T:System.Text.Encoding" /> 物件的淺層複本。</summary>
        <returns>目前 <see cref="T:System.Text.Encoding" /> 的複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製為可寫入即使原始<xref:System.Text.Encoding>物件是唯讀的。 因此，您可修改複製品的屬性。  
  
 物件的淺層複本是只是物件的副本。 如果物件包含其他物件的參考，則淺層複製不會建立參考物件的複本。 它改為參考原始物件。 相較之下，物件的複本，以及該物件直接或間接參考的所有項目會建立物件的深層複本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public virtual int CodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CodePage { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得目前 <see cref="T:System.Text.Encoding" /> 的字碼頁識別項。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 的字碼頁識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例擷取每個編碼不同的名稱，並顯示與一個或多個名稱不同於編碼<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。 它會顯示<xref:System.Text.Encoding.EncodingName%2A>但不會針對它比較。  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
        <altmember cref="P:System.Text.Encoding.WindowsCodePage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將位元組陣列由一種編碼方式轉換成另一種編碼方式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="srcEncoding">
          <c>bytes</c> 的編碼格式。</param>
        <param name="dstEncoding">目標編碼格式。</param>
        <param name="bytes">要轉換的位元組。</param>
        <summary>將整個位元組陣列從一種編碼方式轉換成另一種編碼方式。</summary>
        <returns>
          <see cref="T:System.Byte" /> 類型的陣列，包含將 <paramref name="bytes" /> 從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會將 Unicode 編碼字串轉換成 ASCII 編碼字串。 因為 ASCII 編碼物件傳回的<xref:System.Text.Encoding.ASCII%2A>屬性會使用取代後援，Pi 字元不是 ASCII 字元集的一部分，Pi 字元就會以問號取代範例所示的輸出。  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srcEncoding" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="dstEncoding" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 **srcEncoding。** <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 **dstEncoding。** <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcEncoding">來源陣列 <c>bytes</c> 的編碼。</param>
        <param name="dstEncoding">輸出陣列的編碼方式。</param>
        <param name="bytes">要進行轉換的位元組陣列。</param>
        <param name="index">
          <c>bytes</c> 中要轉換的第一個項目索引。</param>
        <param name="count">要轉換的位元組數。</param>
        <summary>將位元組陣列中的某一位元組範圍由一種編碼方式轉換成另一種編碼方式。</summary>
        <returns>
          <see cref="T:System.Byte" /> 類型的陣列，包含將 <paramref name="bytes" /> 中的某個位元組範圍從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srcEncoding" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="dstEncoding" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 和 <paramref name="count" /> 不會指定位元組陣列中的有效範圍。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 **srcEncoding。** <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 **dstEncoding。** <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DecoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback DecoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback DecoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.DecoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property DecoderFallback As DecoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallback ^ DecoderFallback { System::Text::DecoderFallback ^ get(); void set(System::Text::DecoderFallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前 <see cref="T:System.Text.DecoderFallback" /> 物件的 <see cref="T:System.Text.Encoding" /> 物件。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 物件的解碼器後援物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.DecoderFallback>物件都代表無法編碼的位元組序列解碼成字元時叫用錯誤處理常式。 支援下列處理常式類型的任何一個：  
  
-   自動調整後援處理常式，以某些合適的替代字元，取代無法解碼的位元組。  
  
-   取代後援處理常式，其中某些任意的取代字元，取代無法解碼的位元組。 .NET Framework 包含一個取代後援處理常式， <xref:System.Text.DecoderFallback>，其預設值以問號取代無法解碼的位元組 ("？") 字元。  
  
-   例外狀況後援處理常式，其無法解碼位元組時，會擲回例外狀況。 .NET Framework 包含一個例外狀況後援處理常式， <xref:System.Text.DecoderExceptionFallback>，哪些則會擲回<xref:System.Text.DecoderFallbackException>時無法解碼的位元組。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定作業中的值是 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">無法在設定作業中指派值，因為目前的 <see cref="T:System.Text.Encoding" /> 物件是唯讀的。</exception>
        <altmember cref="T:System.Text.DecoderFallback" />
        <altmember cref="T:System.Text.DecoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Default" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Default { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得此 .NET 實作的預設編碼。</summary>
        <value>預設值，這個.NET 實作的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  不同的電腦可以使用不同的編碼預設值，並在單一電腦上的預設編碼方式可以變更。 如果您使用<xref:System.Text.Encoding.Default%2A>編碼方式來編碼和解碼資料流處理的電腦之間或在不同的時間，在相同電腦上擷取的資料，它可能會轉譯該資料不正確。 此外，編碼傳回<xref:System.Text.Encoding.Default%2A>屬性可用於自動調整的後援對應至字碼頁所支援的字元不支援的字元。 基於這些理由，不建議使用預設編碼方式。 為確保正確解碼編碼的位元組，您應該使用 Unicode 編碼方式，例如<xref:System.Text.UTF8Encoding>或<xref:System.Text.UnicodeEncoding>。 您也可以使用較高層級的通訊協定來確保相同的格式用於編碼和解碼。  

### <a name="the-default-property-in-the-net-framework"></a>.NET Framework 中的預設屬性

在.NET Framework 在 Windows 桌面上，<xref:System.Text.Encoding.Default%2A>屬性一律會取得系統的使用中的字碼頁，並建立<xref:System.Text.Encoding>對應至它的物件。 作用中的字碼頁可能包含依字碼頁設定以及不同的其他字元的 ASCII 字元的 ANSI 字碼頁。 因為所有<xref:System.Text.Encoding.Default%2A>根據 ANSI 字碼頁編碼方式會遺失資料，請考慮使用<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>改為編碼。 Utf-8 通常在 U + 00 到 U + 7F 範圍相同，但可以編碼字元，而不會遺失 ASCII 範圍之外。

## <a name="the-default-property-on-net-core"></a>.NET Core 上的預設屬性

在.NET Core<xref:System.Text.Encoding.Default%2A>屬性一律會傳回<xref:System.Text.UTF8Encoding>。 Utf-8 支援的所有作業系統 （Windows、 Linux 及 Max OS X） 上執行的.NET Core 應用程式。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallback EncoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallback EncoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EncoderFallback As EncoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallback ^ EncoderFallback { System::Text::EncoderFallback ^ get(); void set(System::Text::EncoderFallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前 <see cref="T:System.Text.EncoderFallback" /> 物件的 <see cref="T:System.Text.Encoding" /> 物件。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 物件的解碼器後援物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.EncoderFallback>物件都代表一個字元無法轉換成編碼的位元組序列時所叫用錯誤處理常式。 支援下列處理常式類型的任何一個：  
  
-   自動調整後援處理常式，以某些合適的替代字元，取代無法編碼的字元。  
  
-   取代後援處理常式，其中某些任意的取代字元，取代無法編碼的字元。 .NET Framework 包含一個取代後援處理常式， <xref:System.Text.EncoderFallback>，其預設值以問號取代無法編碼的字元 ("？") 字元。  
  
-   例外狀況後援處理常式，其無法編碼字元時，會擲回例外狀況。 .NET Framework 包含一個例外狀況後援處理常式， <xref:System.Text.EncoderExceptionFallback>，哪些則會擲回<xref:System.Text.EncoderFallbackException>無法解碼字元時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定作業中的值是 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">無法在設定作業中指派值，因為目前的 <see cref="T:System.Text.Encoding" /> 物件是唯讀的。</exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="EncodingName">
      <MemberSignature Language="C#" Value="public virtual string EncodingName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodingName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncodingName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EncodingName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EncodingName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得目前編碼方式的人們可讀取 (Human-Readable) 的描述。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 的人們可讀取的描述。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.EncodingName%2A>屬性僅供顯示。 若要尋找的名稱，可以傳遞至<xref:System.Text.Encoding.GetEncoding%2A>方法，請使用<xref:System.Text.Encoding.WebName%2A>屬性。  
  
   
  
## Examples  
 下列範例擷取每個編碼不同的名稱，並顯示與一個或多個名稱不同於編碼<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。 它會顯示<xref:System.Text.Encoding.EncodingName%2A>但不會針對它比較。  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.DisplayName" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要與目前執行個體比較的 <see cref="T:System.Object" />。</param>
        <summary>判斷指定的 <see cref="T:System.Object" /> 和目前的執行個體是否相等。</summary>
        <returns>
          如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的執行個體，並且等於目前的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個執行個體<xref:System.Text.Encoding>會被視為相等，如果它們對應到相同的字碼頁以及其`EncoderFallback`和`DecoderFallback`物件是否相等。 特別是，所有的衍生的字碼頁有字碼頁為 0 而且其後援通常`null`(`Nothing`在 Visual Basic.NET)。 因此，全部都視為等於另一個。 結果，代表當<xref:System.Text.Encoding.Equals%2A>用來填入雜湊表，所有衍生編碼比較相等，並分為相同的雜湊資料表位置。  
  
   
  
## Examples  
 下列範例會取得兩個執行個體相同的編碼 （字碼頁的一個），另一個名稱，並檢查它們相等。  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Text.Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，計算編碼一組字元所產生的位元組數目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(cli::array &lt;char&gt; ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars">字元陣列，包含要編碼的字元。</param>
        <summary>在衍生類別中覆寫時，計算編碼指定字元陣列中所有字元所產生的位元組數目。</summary>
        <returns>編碼指定字元陣列中所有字元所產生的位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>方法。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，您應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要編碼的一組字元。</param>
        <summary>在衍生類別中覆寫時，計算編碼指定的字串字元所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。  
  
-   如果您的應用程式處理字串輸入的字串版本<xref:System.Text.Encoding.GetBytes%2A>建議。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會決定編碼的字串中的範圍所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>在衍生類別中覆寫時，計算從指定的字元指標開始，編碼一組字元所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小的<xref:System.Text.Encoding.GetBytes%2A>需要儲存產生的位元組，您應該呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 以下是使用這些方法的一些考量：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>方法。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%2A>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="index">要編碼的第一個字元索引。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>在衍生類別中覆寫時，計算從指定的字元陣列編碼一組字元所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。  
  
-   如果您的應用程式處理字串輸入的字串版本<xref:System.Text.Encoding.GetBytes%2A>建議。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會判斷字元陣列中的三種字元編碼所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (s As String, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetByteCount(System::String ^ s, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，將一組字元編碼成位元組序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars">字元陣列，包含要編碼的字元。</param>
        <summary>在衍生類別中覆寫時，將指定字元陣列中的所有字元編碼成位元組序列。</summary>
        <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該呼叫的字串版本<xref:System.Text.Encoding.GetBytes%2A>方法。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要編碼的字元。</param>
        <summary>在衍生類別中覆寫時，將指定字串中的所有字元編碼成位元組序列。</summary>
        <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會決定編碼的字串中的範圍所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="index">要編碼的第一個字元索引。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成位元組序列。</summary>
        <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會判斷字元陣列中的三種字元編碼所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes (s As String, index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
        <param name="byteCount">寫入的最大位元組數。</param>
        <summary>在衍生類別中覆寫時，從指定字元指標開始將一組字元編碼成位元組序列 (會從指定的位元組指標開始存放這些位元組)。</summary>
        <returns>
          <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小的<xref:System.Text.Encoding.GetBytes%2A>需要儲存產生的位元組，呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 如果要轉換的數據僅在順序塊中可用（例如從流中讀取的數據），或者如果數據量太大以至於需要將其分成較小的塊，則應使用提供的<xref:System.Text.Decoder>或<xref:System.Text.Encoder>對象 分別由<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>種方法派生的類。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="byteCount" /> 小於結果位元組數。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，您應該呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會判斷字元陣列中的三種字元編碼所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">
          從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要編碼的一組字元。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>在衍生類別中覆寫時，將指定字串中的一組字元編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，您應該呼叫<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 <xref:System.Text.Encoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元編碼和<xref:System.Text.Encoding.GetBytes%2A>方法會執行實際的編碼方式。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，用來處理單一輸入資料流上的多個轉換。  
  
 數個版本的<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要許多輸入的字元，為字碼頁編碼，並處理使用多個呼叫的字元。 在此情況下，您可能需要呼叫，為永續性的狀態列入考量之間維持狀態<xref:System.Text.Encoder>物件正在使用。 （例如的字元順序，包括 surrogate 字組可能的結尾為高 surrogate。 <xref:System.Text.Encoder>會記住該高 surrogate，使它可以結合下列呼叫的開頭為低 surrogate。 <xref:System.Text.Encoding> 無法將送往的字元會維護狀態， <xref:System.Text.EncoderFallback>。)  
  
-   如果您的應用程式會處理字串輸入，您應該使用的字串版本<xref:System.Text.Encoding.GetBytes%2A>。  
  
-   Unicode 字元緩衝區版本的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用多個呼叫使用<xref:System.Text.Encoder>物件或插入到現有的緩衝區。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，<xref:System.Text.Encoding.GetBytes%2A>支援位元組陣列的版本是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetByteCount%2A>。 轉換方法將盡可能最多資料，並輸出緩衝區太小而如果未擲回例外狀況。 如果是連續的資料流的編碼，這個方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會決定編碼的字串中的範圍所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">
          從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，計算解碼位元組序列所產生的字元數目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <summary>在衍生類別中覆寫時，計算解碼指定位元組陣列中所有位元組所產生的字元數目。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法。 若要計算的最大陣列大小，您應該使用<xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29>方法。 <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要呼叫之間維持狀態。  
  
-   如果您的應用程式會處理字串輸出，您應該使用<xref:System.Text.Encoding.GetString%2A>方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會將字串編碼成位元組陣列，然後再將位元組解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，計算從指定的位元組指標開始，解碼位元組序列所產生的字元數目。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小的<xref:System.Text.Encoding.GetChars%2A>需要來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.Encoding.GetCharCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要呼叫之間維持狀態。  
  
-   如果您的應用程式會處理字串輸出，則建議使用<xref:System.Text.Encoding.GetString%2A>方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetChars%2A>來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.Encoding.GetCharCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要呼叫之間維持狀態。  
  
-   如果您的應用程式會處理字串輸出，則建議使用<xref:System.Text.Encoding.GetString%2A>方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會將字串轉換到另一種編碼。  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 下列範例會將字串編碼成位元組陣列，並再將位元組範圍解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，將位元組序列解碼成一組字元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte()) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <summary>在衍生類別中覆寫時，將指定位元組陣列中的所有位元組解碼成一組字元。</summary>
        <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 取得字元的輸入的位元組序列。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因為<xref:System.Text.Encoding>需要離散的轉換，而<xref:System.Text.Decoder>可供多個行程上的單一輸入資料流。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 **請注意**這個方法是對 Unicode 字元，不是在任意的二進位資料，例如位元組陣列。 如果您需要將任意的二進位資料編碼成文字，您應該使用的通訊協定，例如這類實作的方法進行 uuencode 編碼<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要維護狀態之間的呼叫，因為批次中處理時，才能中斷位元組序列。 (例如 iso-2022 shift 順序的一部分可能結束一個<xref:System.Text.Encoding.GetChars%2A>呼叫，並繼續到下一行的開頭<xref:System.Text.Encoding.GetChars%2A>呼叫。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 會呼叫此後援的那些不完整的順序，但<xref:System.Text.Decoder>會記住這些時序的下一個呼叫。)  
  
-   如果您的應用程式會處理字串輸出，則建議使用<xref:System.Text.Encoding.GetString%2A>方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會將字串編碼成位元組陣列，然後再將位元組解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte(), index As Integer, count As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成一組字元。</summary>
        <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 取得字元的輸入的位元組序列。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因為<xref:System.Text.Encoding>需要離散的轉換，而<xref:System.Text.Decoder>可供多個行程上的單一輸入資料流。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 **請注意**這個方法是對 Unicode 字元，不是在任意的二進位資料，例如位元組陣列。 如果您需要將任意的二進位資料編碼成文字，您應該使用的通訊協定，例如這類實作的方法進行 uuencode 編碼<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要維護狀態之間的呼叫，因為批次中處理時，才能中斷位元組序列。 (例如 iso-2022 shift 順序的一部分可能結束一個<xref:System.Text.Encoding.GetChars%2A>呼叫，並繼續到下一行的開頭<xref:System.Text.Encoding.GetChars%2A>呼叫。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 會呼叫此後援的那些不完整的順序，但<xref:System.Text.Decoder>會記住這些時序的下一個呼叫。)  
  
-   如果您的應用程式會處理字串輸出，則建議使用<xref:System.Text.Encoding.GetString%2A>方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會將字串編碼成位元組陣列，並再將位元組範圍解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">開始寫入產生的一組字元之位置指標。</param>
        <param name="charCount">要寫入的最大字元數。</param>
        <summary>在衍生類別中覆寫時，從指定位元組指標開始將位元組序列解碼成一組字元 (會從指定的字元指標開始存放這些字元)。</summary>
        <returns>
          <paramref name="chars" /> 參數所指示位置上寫入的實際字元數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小的<xref:System.Text.Encoding.GetChars%2A>需要來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.Encoding.GetCharCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 取得字元的輸入的位元組序列。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因為<xref:System.Text.Encoding>需要離散的轉換，而<xref:System.Text.Decoder>可供多個行程上的單一輸入資料流。  
  
 如果要轉換的數據僅在順序塊中可用（例如從流中讀取的數據），或者如果數據量太大以至於需要將其分成較小的塊，則應使用提供的<xref:System.Text.Decoder>或<xref:System.Text.Encoder>對象 分別由<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>種方法派生的類。  
  
 **請注意**這個方法是對 Unicode 字元，不是在任意的二進位資料，例如位元組陣列。 如果您需要將任意的二進位資料編碼成文字，您應該使用的通訊協定，例如這類實作的方法進行 uuencode 編碼<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要維護狀態之間的呼叫，因為批次中處理時，才能中斷位元組序列。 (例如 iso-2022 shift 順序的一部分可能結束一個<xref:System.Text.Encoding.GetChars%2A>呼叫，並繼續到下一行的開頭<xref:System.Text.Encoding.GetChars%2A>呼叫。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 會呼叫此後援的那些不完整的順序，但<xref:System.Text.Decoder>會記住這些時序的下一個呼叫。)  
  
-   如果您的應用程式處理字串輸出<xref:System.Text.Encoding.GetString%2A>建議方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="charCount" /> 小於結果字元數。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="byteIndex">要解碼的第一個位元組索引。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">包含產生的一組字元之字元陣列。</param>
        <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
        <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
        <returns>寫入 <paramref name="chars" /> 的實際字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetChars%2A>來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.Encoding.GetCharCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 [\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 取得字元的輸入的位元組序列。 [\]，Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 不同<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因為<xref:System.Text.Encoding>需要離散的轉換，而<xref:System.Text.Decoder>適合在單一輸入資料流上的多個行程。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 **請注意**這個方法是對 Unicode 字元，不是在任意的二進位資料，例如位元組陣列。 如果您需要將任意的二進位資料編碼成文字，您應該使用的通訊協定，例如這類實作的方法進行 uuencode 編碼<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.Encoding.GetCharCount%2A>方法會判斷多少個字元產生的位元組序列解碼和<xref:System.Text.Encoding.GetChars%2A>方法會執行實際的解碼。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法預期離散的轉換，相對於<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用來處理多個行程上的單一輸入資料流。  
  
 數個版本的<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支援。 使用這些方法的一些程式設計考量如下：  
  
-   您的應用程式可能需要解碼字碼頁從多個輸入的位元組與處理使用多個呼叫的位元組。 在此情況下，您可能需要維護狀態之間的呼叫，因為批次中處理時，才能中斷位元組序列。 (例如 iso-2022 shift 順序的一部分可能結束其中一個 [\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%2A > 呼叫，並繼續到下一行的開頭 [\]，Int32、 Int32、 Char\<xref: System.Text.Encoding.GetChars%2A > 呼叫。 [\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 會針對這些未完成的順序呼叫後援但<xref:System.Text.Decoder>會記住這些時序的下一個呼叫。)  
  
-   如果您的應用程式處理字串輸出<xref:System.Text.Encoding.GetString%2A>建議方法。 由於這個方法必須檢查字串長度，而且配置緩衝區，會稍微慢一點，但產生<xref:System.String>型別是會優先。  
  
-   位元組版本<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允許一些快速的技術，特別是使用大型緩衝區多次呼叫。 請記住，不過，這個版本的方法是有時候不安全，因為指標是必要。  
  
-   如果您的應用程式必須轉換大量資料，它應該重複使用的輸出緩衝區。 在此情況下，[\]、 Int32、 Int32、 Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支援輸出字元的版本緩衝區是最佳選擇。  
  
-   請考慮使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法，而非<xref:System.Text.Encoding.GetCharCount%2A>。 轉換方法會將盡可能最多資料，並擲回例外狀況，如果輸出緩衝區太小。 連續解碼資料流，此方法通常是最佳選擇。  
  
   
  
## Examples  
 下列範例會將字串轉換到另一種編碼。  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 下列範例會將字串編碼成位元組陣列，並再將位元組範圍解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
  
 -或-  
  
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
  
 -或-  
  
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">
          從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，取得會將編碼的位元組序列轉換成字元序列的解碼器。</summary>
        <returns>
          <see cref="T:System.Text.Decoder" />，會將編碼的位元組序列轉換成字元序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法將序列的位元組區塊轉換成循序區塊中的字元，其方式類似<xref:System.Text.Encoding.GetChars%2A>這個類別的方法。 不過，<xref:System.Text.Decoder>維護呼叫，因此它會正確解碼位元組序列跨越區塊之間的狀態資訊。 <xref:System.Text.Decoder>也會保留資料區塊的結尾的後隨位元組，並在下一步解碼作業中使用尾端位元組。 因此，<xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>進行網路傳輸，而檔案作業很實用是因為這些作業經常要處理而不是完整的資料流的資料區塊。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>預設實作會傳回<see cref="T:System.Text.Decoder" />呼叫<see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />和<see cref="M:System.Text.Encoding.GetChars(System.Byte[])" />方法目前<see cref="T:System.Text.Encoding" />。 您必須覆寫此方法以傳回<see cref="T:System.Text.Decoder" />，會維護其呼叫之間的狀態。</para>
        </block>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，取得會將 Unicode 字元序列轉換成編碼的位元組序列的編碼器。</summary>
        <returns>
          <see cref="T:System.Text.Encoder" />，會將 Unicode 字元序列轉換成編碼的位元組序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法會將字元的循序區塊轉換成位元組，以類似方式循序區塊<xref:System.Text.Encoding.GetBytes%2A>這個類別的方法。 不過，<xref:System.Text.Encoder>維護呼叫，讓它正確編碼的字元序列跨越區塊之間的狀態資訊。 <xref:System.Text.Encoder>也保留尾端字元的資料區塊的結尾，並在下一步的編碼作業中使用尾端字元。 例如，資料區塊可能會不相符的高 surrogate，以結束，而且比對的低 surrogate 可能在下一個資料區塊中。 因此，<xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>進行網路傳輸，而檔案作業很實用是因為這些作業經常要處理而不是完整的資料流的資料區塊。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>預設實作會傳回<see cref="T:System.Text.Encoder" />呼叫<see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />和<see cref="M:System.Text.Encoding.GetBytes(System.Char[])" />方法目前<see cref="T:System.Text.Encoding" />。 您必須覆寫此方法以傳回<see cref="T:System.Text.Encoder" />，會維護其呼叫之間的狀態。</para>
        </block>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回指定字碼頁的編碼方式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">慣用編碼方式的字碼頁識別項。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「字碼頁」欄會列出可能值。  
  
 -或-  
  
 0 (零)，表示使用預設的編碼方式。</param>
        <summary>傳回與指定字碼頁識別項相關聯的編碼方式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後援處理常式的編碼方式類型取決於`codepage`。 如果`codepage`程式碼頁面或雙位元組字元集 (DBCS) 編碼方式，使用自動調整後援處理常式。 否則，會使用取代後援處理常式。 這些後援處理常式可能不適合您的應用程式。 若要指定所指定的編碼方式使用後援處理常式`codepage`，您可以呼叫<xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>多載。  
  
 <xref:System.Text.Encoding.GetEncoding%2A>方法依賴基礎的平台，以支援大部分的字碼頁。 不過，.NET Framework 原本就支援某些編碼方式。 如需字碼頁的清單，請參閱<xref:System.Text.Encoding>類別主題。 或者，您可以呼叫<xref:System.Text.Encoding.GetEncodings%2A>方法來取得陣列的<xref:System.Text.EncodingInfo>包含所有編碼方式的相關資訊的物件。  
  
 除了可在特定平台版本的.NET Framework 中，在本質上支援的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法會傳回可供註冊的任何其他編碼<xref:System.Text.EncodingProvider>物件。 如果由多個已註冊的相同編碼<xref:System.Text.EncodingProvider>物件，這個方法會傳回已註冊的最後一個。  

您也可以提供的值為 0`codepage`引數。 精確的行為取決於是否任何編碼已經提供註冊<xref:System.Text.EncodingProvider>物件：

- 如果已註冊一個或多個編碼提供者，它就會傳回已選擇要傳回的編碼方式時的最後一個登錄提供者的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法傳遞`codepage`引數為 0。     

- 在.NET Framework 中，如果沒有編碼提供者已註冊之後，如果<xref:System.Text.CodePagesEncodingProvider>是已註冊編碼提供者，或如果沒有任何已註冊編碼提供者處理`codepage`值為 0 時，它會傳回作業系統的作用中的字碼頁。 若要判斷在 Windows 系統上的作用中的字碼頁，呼叫 Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)函式會從.NET Framework 在 Windows 桌面上。

- 在.NET Core，如果沒有已經註冊編碼提供者，或如果沒有任何已註冊編碼提供者會處理`codepage`值為 0 時，它會傳回<xref:System.Text.UTF8Encoding>。
  
> [!NOTE]
>  某些不支援的字碼頁原因<xref:System.ArgumentException>狀況，而其他人會導致<xref:System.NotSupportedException>。 因此，您的程式碼必須攔截所有例外狀況的例外狀況 > 一節所示。  
  
> [!NOTE]
>  ANSI 字碼頁不同的電腦上可能有不同，而且可以變更導致資料損毀的單一電腦上。 基於這個理由，如果作用中的字碼頁為 ANSI 字碼頁編碼和解碼資料使用的預設字碼頁所傳回`Encoding.GetEncoding(0)`不建議使用。 為了最一致的結果，您應該使用 Unicode 編碼方式，例如 （字碼頁 65001） utf-8 或 utf-16，而不特定字碼頁。  
  
 <xref:System.Text.Encoding.GetEncoding%2A> 傳回具有預設設定的快取執行個體。 您應該使用衍生類別的建構函式來取得執行個體使用不同的設定。 例如，<xref:System.Text.UTF32Encoding>類別會提供可讓您啟用錯誤偵測的建構函式。  

   
  
## Examples  
 下列範例會取得兩個執行個體相同的編碼 （字碼頁一個），另一個名稱，並檢查它們相等。  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="codepage" /> 小於零或大於 65535。</exception>
        <exception cref="T:System.ArgumentException">
          基礎的平台並不支援 <paramref name="codepage" />。</exception>
        <exception cref="T:System.NotSupportedException">
          基礎的平台並不支援 <paramref name="codepage" />。</exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">慣用編碼方式的字碼頁名稱。 <see cref="P:System.Text.Encoding.WebName" /> 屬性傳回的任何值都是有效值。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「名稱」欄會列出可能值。</param>
        <summary>傳回與指定字碼頁名稱相關聯的編碼方式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後援處理常式的編碼方式類型取決於`name`。 如果`name`程式碼頁面或雙位元組字元集 (DBCS) 編碼方式，使用自動調整後援處理常式。 否則，會使用取代後援處理常式。 這些後援處理常式可能不適合您的應用程式。 若要指定所指定的編碼方式使用後援處理常式`name`，您可以呼叫<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>多載。  
  
 <xref:System.Text.Encoding.GetEncoding%2A>方法依賴基礎的平台，以支援大部分的字碼頁。 不過，.NET Framework 原本就支援某些編碼方式。 如需字碼頁的清單，請參閱<xref:System.Text.Encoding>類別主題。 或者，您可以呼叫<xref:System.Text.Encoding.GetEncodings%2A>方法來取得陣列的<xref:System.Text.EncodingInfo>包含所有編碼方式的相關資訊的物件。 
  
 除了可在特定平台版本的.NET Framework 中，在本質上支援的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法會傳回可供註冊的任何其他編碼<xref:System.Text.EncodingProvider>物件。 如果由多個已註冊的相同編碼<xref:System.Text.EncodingProvider>物件，這個方法會傳回已註冊的最後一個。  
   
> [!NOTE]
>  ANSI 字碼頁不同的電腦上可能有不同，也可以變更為單一電腦，導致資料損毀。 為了最一致的結果，您應該使用 Unicode，例如 （字碼頁 65001） utf-8 或 utf-16，而不是特定字碼頁。  
 
  
 <xref:System.Text.Encoding.GetEncoding%2A> 傳回具有預設設定的快取執行個體。 您應該使用衍生類別的建構函式來取得執行個體使用不同的設定。 例如，<xref:System.Text.UTF32Encoding>類別會提供可讓您啟用錯誤偵測的建構函式。  
  
## Examples  
 下列範例會取得兩個執行個體相同的編碼 （字碼頁一個），另一個名稱，並檢查它們相等。  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 不是有效的字碼頁名稱。  
  
 -或-  
  
 主要平台尚不支援以 <paramref name="name" /> 所指示的字碼頁。</exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">慣用編碼方式的字碼頁識別項。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「字碼頁」欄會列出可能值。  
  
 -或-  
  
 0 (零)，表示使用預設的編碼方式。</param>
        <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
        <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
        <summary>傳回與指定字碼頁識別項相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  某些不支援的字碼頁會導致例外狀況<xref:System.ArgumentException>狀況，而其他人會導致<xref:System.NotSupportedException>。 因此，您的程式碼必須攔截所有例外狀況的例外狀況 > 一節所示。  
  
 <xref:System.Text.Encoding.GetEncoding%2A>方法依賴基礎的平台，以支援大部分的字碼頁。 不過，.NET Framework 原本就支援某些編碼方式。 如需字碼頁的清單，請參閱<xref:System.Text.Encoding>類別主題。 您可以呼叫<xref:System.Text.Encoding.GetEncodings%2A>取得一份所有編碼方式在 Windows 桌面上完整.NET Framework 中的方法。   
  
 除了可在特定平台版本的.NET Framework 中，在本質上支援的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法會傳回可供註冊的任何其他編碼<xref:System.Text.EncodingProvider>物件。  如果由多個已註冊的相同編碼<xref:System.Text.EncodingProvider>物件，這個方法會傳回已註冊的最後一個。  

您也可以提供的值為 0`codepage`引數。 精確的行為取決於是否任何編碼已經提供註冊<xref:System.Text.EncodingProvider>物件：

- 如果已註冊一個或多個編碼提供者，它就會傳回已選擇要傳回的編碼方式時的最後一個登錄提供者的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法傳遞`codepage`引數為 0。     

- 在.NET Framework 中，如果沒有編碼提供者已註冊之後，如果<xref:System.Text.CodePagesEncodingProvider>是已註冊編碼提供者，或如果沒有任何已註冊編碼提供者處理`codepage`值為 0 時，它會傳回使用中的字碼頁。

- 在.NET Core，如果沒有已經註冊編碼提供者，或如果沒有任何已註冊編碼提供者會處理`codepage`值為 0 時，它會傳回<xref:System.Text.UTF8Encoding>編碼方式。

> [!NOTE]
>  ANSI 字碼頁不同的電腦上可能有不同，而且可以變更導致資料損毀的單一電腦上。 基於這個理由，如果作用中的字碼頁為 ANSI 字碼頁編碼和解碼資料使用的預設字碼頁所傳回`Encoding.GetEncoding(0)`不建議使用。 為了最一致的結果，您應該使用 Unicode，例如 （字碼頁 65001） utf-8 或 utf-16，而不是特定字碼頁。 
  
 若要取得的作用中的字碼頁相關聯的編碼方式，您可以提供的值為 0`codepage`引數或，如果您的程式碼執行完整的.NET Framework 在 Windows 桌面上，擷取的值<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>屬性。 若要判斷目前作用中的字碼頁，呼叫 Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)函式會從.NET Framework 在 Windows 桌面上。  
  
 <xref:System.Text.Encoding.GetEncoding%2A> 傳回具有預設設定的快取執行個體。 您應該使用衍生類別的建構函式來取得執行個體使用不同的設定。 例如，<xref:System.Text.UTF32Encoding>類別會提供可讓您啟用錯誤偵測的建構函式。  
  
   
  
## Examples  
 下列範例會示範<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="codepage" /> 小於零或大於 65535。</exception>
        <exception cref="T:System.ArgumentException">
          基礎的平台並不支援 <paramref name="codepage" />。</exception>
        <exception cref="T:System.NotSupportedException">
          基礎的平台並不支援 <paramref name="codepage" />。</exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">慣用編碼方式的字碼頁名稱。 <see cref="P:System.Text.Encoding.WebName" /> 屬性傳回的任何值都是有效值。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「名稱」欄會列出可能值。</param>
        <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
        <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
        <summary>傳回與指定字碼頁名稱相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetEncoding%2A>方法依賴基礎的平台，以支援大部分的字碼頁。 不過，.NET Framework 原本就支援某些編碼方式。  
  
 除了可在特定平台版本的.NET Framework 中，在本質上支援的編碼方式<xref:System.Text.Encoding.GetEncoding%2A>方法會傳回可供註冊的任何其他編碼<xref:System.Text.EncodingProvider>物件。 如果由多個已註冊的相同編碼<xref:System.Text.EncodingProvider>物件，這個方法會傳回已註冊的最後一個。 
  
> [!NOTE]
>  ANSI 字碼頁不同的電腦上可能有不同，而且可以變更導致資料損毀的單一電腦上。 為了最一致的結果，您應該使用 Unicode 編碼方式，例如 （字碼頁 65001） utf-8 或 utf-16，而不特定字碼頁。  
  
 如需字碼頁的清單，請參閱<xref:System.Text.Encoding>類別主題。 您可以呼叫<xref:System.Text.Encoding.GetEncodings%2A>上取得一份所有編碼方式在 Windows 桌面上完整.NET Framework 方法。  
  
 <xref:System.Text.Encoding.GetEncoding%2A> 傳回具有預設設定的快取執行個體。 您應該使用衍生類別的建構函式來取得執行個體使用不同的設定。 例如，<xref:System.Text.UTF32Encoding>類別會提供可讓您啟用錯誤偵測的建構函式。  
  
   
  
## Examples  
 下列範例會示範<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 不是有效的字碼頁名稱。  
  
 -或-  
  
 主要平台尚不支援以 <paramref name="name" /> 所指示的字碼頁。</exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingInfo[] GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.EncodingInfo[] GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodings () As EncodingInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回包含所有編碼方式的陣列。</summary>
        <returns>包含所有編碼方式的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回一份支援的編碼方式，唯一區別在於字碼頁。 列出支援的編碼方式的資料表，請參閱<xref:System.Text.Encoding>類別主題。  
  
> [!NOTE]
>  所傳回支援的編碼方式的清單<xref:System.Text.Encoding.GetEncodings%2A>方法不包含任何額外的編碼方式，可由任何<xref:System.Text.EncodingProvider>呼叫所註冊的實作<xref:System.Text.Encoding.RegisterProvider%2A>方法。  
  
 編碼 50220 和 50222 為兩者具有名稱"iso-2022年-jp"相關聯，但並不相同。 編碼 50220 將半形片假名字元轉換為全形片假名字元，而編碼 50222 使用 shift 鍵輸入/shift out 順序來編碼半形片假名字元。 編碼 50222 的顯示名稱是 「 日文 (Jis-allow 1 byte Kana-因此 / SI) 」 以便區別編碼 50220，具有顯示名稱 「 日文 (JIS) 」。  
  
 如果您要求會編碼名稱"iso-2022年-jp".NET Framework 傳回 50220 的編碼方式。 不過，適用於您的應用程式的編碼方式而定的半形片假名字元慣用的處理方式。  
  
 若要取得特定的編碼方式，您應該使用<xref:System.Text.Encoding.GetEncoding%2A>方法。  
  
 <xref:System.Text.Encoding.GetEncodings%2A> 有時候用來對使用者顯示一份檔案中的編碼**存** 對話方塊。 不過，許多非 Unicode 編碼都是不完整，而且轉譯至許多字元"？"，或不同平台上有稍微不同的行為。 請考慮使用 utf-8 或 utf-16 作為預設值。  
  
   
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前執行個體的雜湊碼。</summary>
        <returns>目前執行個體的雜湊碼。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">要編碼的字元數。</param>
        <summary>在衍生類別中覆寫時，計算編碼指定的字元數所產生的最大位元組數目。</summary>
        <returns>編碼指定字元數所產生的最大位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `charCount`參數會指定實際數目<xref:System.Char>代表 Unicode 字元進行編碼，因為.NET Framework 內部使用 utf-16 代表 Unicode 字元的物件。 因此，大部分的 Unicode 字元可以表示一個<xref:System.Char>物件，但由 surrogate 字組，例如，將 Unicode 字元需要兩個<xref:System.Char>物件。  
  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetBytes%2A>儲存產生的位元組，您應該使用<xref:System.Text.Encoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。 <xref:System.Text.Encoding.GetByteCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetMaxByteCount%2A> 擷取最壞情況的數目，包括最壞的情況下，針對目前所選<xref:System.Text.EncoderFallback>。 如果是可能的大型字串、 選擇後援<xref:System.Text.Encoding.GetMaxByteCount%2A>擷取大數值，特別是在最壞的情況下的編碼方式涉及切換每個字元的模式的情況下。 比方說，這種情形的 ISO 2022 DE-CH。 如需詳細資訊，請參閱部落格文章:"[Encoding.GetMaxByteCount() 與 Encoding.GetMaxCharCount() 是什麼？](http://go.microsoft.com/fwlink/?LinkId=153702)" (http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).  
  
 在大部分情況下，這個方法會擷取針對小型字串合理的值。 您必須選擇使用極大的緩衝區，攔截錯誤的少數情況下，當更合理的緩衝區太小而很大的字串。 您也可以考慮不同的方法，使用<xref:System.Text.Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。  
  
 當使用<xref:System.Text.Encoding.GetMaxByteCount%2A>，您應配置輸入緩衝區的大小上限為基礎的輸出緩衝區。 如果輸出緩衝區的大小限制，您可能會使用<xref:System.Text.Encoding.Convert%2A>方法。  
  
 請注意，<xref:System.Text.Encoding.GetMaxByteCount%2A>會考量先前的解碼器作業潛在剩餘的 surrogate。 解碼器，因為傳遞的值為 1 到方法會擷取到單一位元組編碼方式，例如 ASCII 2。 您應該使用<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>如果這項資訊是必要的屬性。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 小於零。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <block subset="none" type="overrides">
          <para>所有<see cref="T:System.Text.Encoding" />實作必須保證如果緩衝區會根據這個方法的計算結果的大小，會發生任何緩衝區溢位例外狀況。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，計算解碼指定的位元組數目所產生的最大字元數目。</summary>
        <returns>解碼指定位元組數所產生的最大字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的精確陣列大小<xref:System.Text.Encoding.GetChars%2A>來儲存產生的字元，您應該使用<xref:System.Text.Encoding.GetCharCount%2A>方法。 若要計算最大陣列大小，請使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。 <xref:System.Text.Encoding.GetCharCount%2A>方法通常可讓較少的記憶體配置而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.Encoding.GetMaxCharCount%2A> 擷取最壞情況的數目，包括最壞的情況下，針對目前所選<xref:System.Text.DecoderFallback>。 如果是可能的大型字串、 選擇後援<xref:System.Text.Encoding.GetMaxCharCount%2A>擷取較大的值。  
  
 在大部分情況下，這個方法會擷取針對小型字串合理的數字。 大型字串，您可能選擇使用極大的緩衝區，在極少數的情況下更合理的緩衝區太小而攔截錯誤。 您也可以考慮不同的方法，使用<xref:System.Text.Encoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.Encoding.GetMaxCharCount%2A> 有沒有關係<xref:System.Text.Encoding.GetBytes%2A>。 如果您需要使用類似的職務<xref:System.Text.Encoding.GetBytes%2A>，您應該使用<xref:System.Text.Encoding.GetMaxByteCount%2A>。  
  
 當使用<xref:System.Text.Encoding.GetMaxCharCount%2A>，您應配置輸入緩衝區的大小上限為基礎的輸出緩衝區。 如果輸出緩衝區的大小限制，您可能會使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法。  
  
 請注意，<xref:System.Text.Encoding.GetMaxCharCount%2A>視為最壞的情況下，從先前的編碼器作業剩餘的位元組。 對於大部分的字碼頁，0 值傳遞至這個方法會擷取值大於或等於 1。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。  
  
   
  
## Examples  
 下列範例會將字串編碼成位元組陣列，然後再將位元組解碼成字元陣列。  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小於零。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <block subset="none" type="overrides">
          <para>所有<see cref="T:System.Text.Encoding" />實作必須保證如果緩衝區會根據這個方法的計算結果的大小，會發生任何緩衝區溢位例外狀況。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public virtual byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，傳回可指定所用編碼方式的位元組序列。</summary>
        <returns>位元組陣列，包含可指定所用編碼方式的位元組序列。  
  
 -或-  
  
 如果不需要前序編碼，則位元組陣列的長度為零。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 （選擇性）<xref:System.Text.Encoding>物件所提供的是可以加在編碼程序所產生的位元組序列的位元組陣列前序編碼。 如果前序編碼包含位元組順序標記 （在 Unicode 字碼指標 U + FEFF)，將有助於判斷位元組順序的轉換格式或 UTF-8 解碼器。  
  
 Unicode 位元組順序標記 (BOM) （以十六進位方式） 的序列化，如下所示：  
  
-   UTF-8: EF BB BF  
  
-   Utf-16 big 位元組由小到大位元組順序： FE FF  
  
-   Utf-16 很少位元組由小到大位元組順序： FF FE  
  
-   Utf-32 big 位元組由小到大位元組順序： 00 00 FE FF  
  
-   Utf-32 少位元組由小到大位元組順序： FF FE 00 00  
  
 您應該使用 BOM，因為它會提供幾乎特定的編碼的檔案已遺失的參考識別<xref:System.Text.Encoding>物件，例如，未標記，或不當標記 web 資料或儲存時商務的隨機文字檔案不提供支援具有國際考量或其他資料。 如果資料一致的方式和適當地標記，最好是 utf-8 或 utf-16，就能避免通常使用者的問題。  
  
 提供編碼類型的標準，BOM 是多餘的。 不過，它可以用來幫助伺服器傳送正確的編碼方式標頭。 或者，它可用來當做後援以防編碼遺失時。  
  
 有一些缺點，以包含 BOM。 例如，了解如何限制使用 BOM 的資料庫欄位很難。 串連的檔案可以也會是問題，比方說，例如合併檔案時不必要的字元可能會結束中間資料的方式。 儘管有一些缺點，不過，BOM 使用建議。  
  
 如需有關位元組順序和位元組順序標記的詳細資訊，請參閱 Unicode 標準[Unicode 首頁](http://go.microsoft.com/fwlink/?LinkId=37123)。  
  
> [!CAUTION]
>  若要確保正確解碼的編碼的位元組，您應該作為前置詞與前序編碼的位元組。 不過，大部分的編碼方式不會提供前序編碼。 為確保正確解碼的編碼的位元組，您應該使用 Unicode 編碼方式，也就是<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>，與前序編碼。  
  
   
  
## Examples  
 下列範例會判斷前序編碼為基礎的編碼方式的位元組順序。  
  
 [!code-cpp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CPP/preamble.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CS/preamble.cs#1)]
 [!code-vb[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/VB/preamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，將位元組序列解碼成字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <summary>在衍生類別中覆寫時，將指定位元組陣列中的所有位元組解碼成字串。</summary>
        <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>所傳回物件<xref:System.Text.Encoding.GetDecoder%2A>deri 方法攝影類別。  
  
 請參閱 < 備註 > 一節的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>討論解碼技術和考量的參考主題。  
  
 請注意，確切的行為<xref:System.Text.Encoding.GetString%2A>方法特定<xref:System.Text.Encoding>實作取決於該定義的後援策略<xref:System.Text.Encoding>物件。 如需詳細資訊，請參閱 「 選擇後援策略 」 一節[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)主題。  
  
   
  
## Examples  
 下列範例會讀取的 utf-8 編碼的字串表示的二進位檔案從<xref:System.IO.FileStream>物件。 對於小於 2048 個位元組的檔案，它會讀取整個檔案的內容至位元組陣列，然後呼叫<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29>方法進行解碼。 對於較大的檔案，它 2048 個位元組一次讀取的位元組陣列，呼叫<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法來判斷多少字元包含在陣列中，然後呼叫<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>方法進行解碼。  
  
 [!code-csharp[System.Text.Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring1.cs#2)]
 [!code-vb[System.Text.Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring1.vb#2)]  
  
 此範例會使用下列文字，應該儲存至名為 Utf8Example.txt 的 utf-8 編碼檔。  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位元組陣列包含無效的 Unicode 字碼指標。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString (bytes As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">位元組陣列的指標。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，將指定位址開頭之指定數目的位元組解碼為字串。</summary>
        <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetString%2A>方法設計用來最佳化效能，當您有原生指標的位元組陣列。 而不是建立受管理的位元組陣列，然後再將它解碼，您可以改為呼叫這個方法而不需要建立任何中繼物件。  
  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>所傳回物件<xref:System.Text.Encoding.GetDecoder%2A>deri 方法攝影類別。  
  
 請參閱 < 備註 > 一節的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>討論解碼技術和考量的參考主題。  
  
 請注意，確切的行為<xref:System.Text.Encoding.GetString%2A>方法特定<xref:System.Text.Encoding>實作取決於該定義的後援策略<xref:System.Text.Encoding>物件。 如需詳細資訊，請參閱 「 選擇後援策略 」 一節[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 null 指標。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小於零。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成字串。</summary>
        <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要轉換的資料僅適用於循序區塊 （例如從資料流讀取的資料），或如果資料量太大，它必須分割成較小的區塊，您應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分別，是在衍生類別。  
  
 請參閱 < 備註 > 一節的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>討論解碼技術和考量的參考主題。  
  
   
  
## Examples  
 下列範例所表示之二進位檔案讀取的 utf-8 編碼字串<xref:System.IO.FileStream>物件。 對於小於 2048 個位元組的檔案，它會讀取整個檔案的內容至位元組陣列，然後呼叫<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法進行解碼。 對於較大的檔案，它 2048 個位元組一次讀取的位元組陣列，呼叫<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法來判斷多少字元包含在陣列中，然後呼叫<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>方法進行解碼。  
  
 [!code-csharp[System.Text.Encoding.GetString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring2.cs#3)]
 [!code-vb[System.Text.Encoding.GetString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring2.vb#3)]  
  
 此範例會使用下列文字，應該儲存至名為 Utf8Example.txt 的 utf-8 編碼檔。  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位元組陣列包含無效的 Unicode 字碼指標。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md))  
  
 -和-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HeaderName">
      <MemberSignature Language="C#" Value="public virtual string HeaderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.HeaderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得可以與郵件代理程式標頭標籤一起使用的目前編碼方式名稱。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 的名稱，與郵件代理程式標頭標記一起使用。  
  
 -或-  
  
 如果無法使用目前的 <see cref="T:System.Text.Encoding" />，則為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您需要的標頭名稱的編碼方式，您應該呼叫<xref:System.Text.Encoding.GetEncoding%2A>方法<xref:System.Text.Encoding.HeaderName%2A>屬性。 通常方法會擷取不同的編碼方式與呼叫中提供的測試編碼。 通常只有電子郵件應用程式必須擷取這類的編碼方式。  
  
 在某些情況下，值<xref:System.Text.Encoding.BodyName%2A>屬性會對應到定義該編碼的國際標準。 這並不表示實作符合以完整模式和標準。  
  
 請注意，<xref:System.Text.Encoding.WebName%2A>傳回要用來描述的編碼方式名稱。 <xref:System.Text.Encoding.HeaderName%2A>屬性可定義不同的編碼方式，可能會產生更好的電子郵件應用程式，例如。 不過，不建議使用這個屬性來定義的編碼方式。  
  
   
  
## Examples  
 下列範例擷取每個編碼不同的名稱，並顯示與一個或多個名稱不同於編碼<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。 它會顯示<xref:System.Text.Encoding.EncodingName%2A>但不會針對它比較。  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAlwaysNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得值，指出目前的編碼方式是否永遠都是正規化。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public bool IsAlwaysNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAlwaysNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAlwaysNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAlwaysNormalized();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得值，指出目前的編碼方式是否永遠都是使用預設的正規化表單進行正規化。</summary>
        <returns>
          如果目前的 <see cref="T:System.Text.Encoding" /> 永遠都是正規化，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的正規化表單是<xref:System.Text.NormalizationForm.FormC>，而這個資料庫使用完整的標準分解，盡可能後面具有其主要的複合型序列取代。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAlwaysNormalized(valuetype System.Text.NormalizationForm form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAlwaysNormalized (form As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAlwaysNormalized(System::Text::NormalizationForm form);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="form">其中一個 <see cref="T:System.Text.NormalizationForm" /> 值。</param>
        <summary>在衍生類別中覆寫時取得值，指出目前的編碼方式是否永遠都是使用指定的正規化表單進行正規化。</summary>
        <returns>
          如果目前的 <see langword="true" /> 物件一律使用指定的 <see cref="T:System.Text.Encoding" /> 值進行正規化，則為 <see cref="T:System.Text.NormalizationForm" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的正規化表單是<xref:System.Text.NormalizationForm.FormC>，而這個資料庫使用完整的標準分解，盡可能後面具有其主要的複合型序列取代。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserDisplay { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出瀏覽器用戶端是否可以使用目前的編碼方式來顯示內容。</summary>
        <value>
          如果瀏覽器用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來顯示內容，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserSave" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserSave">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserSave { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出瀏覽器用戶端是否可以使用目前的編碼方式來儲存內容。</summary>
        <value>
          如果瀏覽器用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來儲存內容，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsDisplay { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出郵件和新聞用戶端是否可以使用目前的編碼方式來顯示內容。</summary>
        <value>
          如果郵件和新聞用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來顯示內容，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsSave">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsSave { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出郵件和新聞用戶端是否可以使用目前的編碼方式來儲存內容。</summary>
        <value>
          如果郵件和新聞用戶端可以使用目前的 <see langword="true" /> 來儲存內容，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsSave" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出目前的編碼方式是否為唯讀。</summary>
        <value>
          如果目前 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public virtual bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsSingleByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSingleByte As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSingleByte { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得值，指出目前的編碼方式是否使用單一位元組字碼指標。</summary>
        <value>
          如果目前的 <see langword="true" /> 使用單一位元組字碼指標，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 單一位元組編碼方式，例如<xref:System.Text.ASCIIEncoding>，此屬性會擷取`true`。  
  
> [!CAUTION]
>  您應該要特別小心，在您的應用程式並使用值為<xref:System.Text.Encoding.IsSingleByte%2A>。 編碼方式將會繼續假設仍會出錯。 比方說，windows-1252 具有值為`true`的<xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>，但是 Encoding.GetMaxByteCount(1) 傳回 2。 這是因為此方法會考慮前一個解碼器作業潛在剩餘的 surrogate。  
  
   
  
## Examples  
 下列範例會檢查每個編碼的布林屬性值。  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public virtual ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterProvider">
      <MemberSignature Language="C#" Value="public static void RegisterProvider (System.Text.EncodingProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterProvider(class System.Text.EncodingProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterProvider (provider As EncodingProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterProvider(System::Text::EncodingProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Text.EncodingProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:System.Text.EncodingProvider" /> 的子類別，提供其他字元編碼方式的存取權。</param>
        <summary>註冊編碼提供者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.RegisterProvider%2A>方法可讓您註冊類別，衍生自<xref:System.Text.EncodingProvider>讓字元可用在不會為不支援它們的平台上編碼。 編碼提供者註冊後，可以藉由呼叫任何擷取它所支援的編碼方式<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>多載。 如果有多個編碼提供者，<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法嘗試擷取指定的編碼方式從 開始使用最新註冊的每個提供者。

使用註冊其編碼提供者<xref:System.Text.Encoding.RegisterProvider%2A>方法也會修改的行為[Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)和[EncodingProvider.GetEncoding (Int32、 EncoderFallback，DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))方法傳遞的引數時`0`:

- 如果已註冊的提供者<xref:System.Text.CodePagesEncodingProvider>，方法會傳回 Windows 作業系統上執行時，符合系統使用中的字碼頁的編碼方式。

- 自訂編碼提供者可以選擇哪一種編碼時傳回的其中一個<xref:System.Text.Encoding.GetEncoding%2A>方法多載會傳遞的引數`0`。 提供者也可以選擇不會傳回所需的編碼方式<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>方法傳回`null`。 
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 包含一個編碼提供者， <xref:System.Text.CodePagesEncodingProvider>，這會使可用編碼會在完整的.NET Framework，但不適用於[!INCLUDE[net_v46](~/includes/net-v46-md.md)]。 根據預設，[!INCLUDE[net_v46](~/includes/net-v46-md.md)]僅支援 Unicode 編碼方式、 ASCII 和字碼頁 28591。  
  
 如果相同的編碼提供者會使用多個呼叫<xref:System.Text.Encoding.RegisterProvider%2A>方法，在第一個方法呼叫註冊提供者。 後續呼叫都會被忽略。  
  
 如果<xref:System.Text.Encoding.RegisterProvider%2A>方法呼叫註冊多個提供者可處理相同的編碼方式，最後一個已註冊的提供者是用於所有的編碼和解碼作業。 任何先前已註冊的提供者會被忽略。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Text.CodePagesEncodingProvider" />
        <altmember cref="T:System.Text.EncodingProvider" />
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Unicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Unicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Unicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Unicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Unicode { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以位元組由小到大位元組順序取得 UTF-16 格式的編碼方式。</summary>
        <value>UTF-16 格式的編碼方式，使用位元組由小到大的位元組順序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 支援的.NET Framework，並討論使用編碼的 Unicode 編碼的相關資訊，請參閱[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)。  
  
 <xref:System.Text.UnicodeEncoding>這個屬性所傳回的物件可能沒有適當的行為，您的應用程式。 它會使用取代後援，來取代無法編碼的每個字串和無法解碼的每個位元組以問號 ("？") 字元。 相反地，您可以呼叫<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式來具現化極小的位元組由小到大<xref:System.Text.UnicodeEncoding>物件可能是其後援<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下列範例所示。  
  
 [!code-csharp[System.Text.Encoding.Unicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.unicode/cs/unicode1.cs#2)]
 [!code-vb[System.Text.Encoding.Unicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.unicode/vb/unicode1.vb#2)]  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF32">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF32 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF32" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF32" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF32 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF32 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以位元組由小到大位元組順序取得 UTF-32 格式的編碼方式。</summary>
        <value>UTF-32 格式的編碼物件，使用位元組由小到大的位元組順序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UTF32Encoding>這個屬性所傳回的物件可能沒有適當的行為，您的應用程式。 它會使用取代後援，來取代 Unicode REPLACEMENT CHARACTER (U + FFFE) 中的每個無法編碼的字串和無法解碼的每個位元組。 相反地，您可以呼叫<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式來具現化<xref:System.Text.UTF32Encoding>物件可能是其後援<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下列範例所示。  
  
 [!code-csharp[System.Text.Encoding.UTF32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf32/cs/encoding.utf32.1.cs#1)]
 [!code-vb[System.Text.Encoding.UTF32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf32/vb/encoding.utf32.1.vb#1)]  
  
 如需少位元組由小到大位元組順序的討論，請參閱<xref:System.Text.Encoding>類別主題。  
  
 支援的.NET Framework，並討論使用編碼的 Unicode 編碼的相關資訊，請參閱[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)。  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF32Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF7">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF7" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF7 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF7 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 UTF-7 格式的編碼方式。</summary>
        <value>UTF-7 格式的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在過去有受到限制，7 個位元，例如 NNTP 和某些電子郵件應用程式的環境中，主要會使用 utf-7 編碼。 強固性和安全性問題，因為您不應該使用 8 位元環境中編碼 UTF7 其中 utf-8 編碼方式可以改用。  
  
   
  
## Examples  
 下列範例會決定編碼的字元陣列所需的位元組數目、 編碼字元，並顯示產生的位元組數。  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF7Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
      </Docs>
    </Member>
    <Member MemberName="UTF8">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF8" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF8 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF8 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 UTF-8 格式的編碼方式。</summary>
        <value>UTF-8 格式的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回<xref:System.Text.UTF8Encoding>可將 Unicode （UTF 16 編碼） 的字元編碼成位元組序列的一到四個，每個字元，並可將解碼 UTF 8 編碼的位元組陣列為 Unicode （UTF 16 編碼） 個字元的物件。 支援的.NET Framework，並討論使用編碼的 Unicode 字元編碼的相關資訊，請參閱[字元編碼方式在.NET Framework](~/docs/standard/base-types/character-encoding.md)。  
  
 <xref:System.Text.UTF8Encoding>這個屬性所傳回的物件可能沒有適當的行為，您的應用程式。  
  
-   它會傳回<xref:System.Text.UTF8Encoding>提供 Unicode 位元組順序標記 (BOM) 的物件。 若要具現化不會提供 BOM UTF8 編碼方式，呼叫的任何多載<xref:System.Text.UTF8Encoding.%23ctor%2A>建構函式。  
  
-   它會傳回<xref:System.Text.UTF8Encoding>物件使用取代後援，來以問號取代每一個無法編碼的字串和無法解碼的每個位元組 ("？") 字元。 相反地，您可以呼叫<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式來具現化<xref:System.Text.UTF8Encoding>物件可能是其後援<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下列範例所示。  
  
     [!code-csharp[System.Text.Encoding.UTF8#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/encoding.utf8.1.cs#1)]
     [!code-vb[System.Text.Encoding.UTF8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/encoding.utf8.1.vb#1)]  
  
   
  
## Examples  
 下列範例會定義陣列，其中包含下列字元：  
  
-   拉丁文小寫字母 Z (U + 007A)  
  
-   字母的拉丁小型 (U + 0061)  
  
-   結合音符 (U + 0306)  
  
-   銳角 (U + 01FD) 使用的拉丁小寫字母 AE  
  
-   希臘文的小寫字母 BETA (U + 03B2)  
  
-   Surrogate 字組 (U + D800 U + DD54) 形成希臘 ACROPHONIC ATTIC 一個千位 STATERS (U + 10154)。  
  
 它會顯示每個字元的 utf-16 字碼單位，並決定 utf-8 編碼器編碼的字元陣列所需的位元組數目。 然後將字元編碼，並顯示結果的 UTF 8 編碼位元組。  
  
 [!code-csharp[System.Text.Encoding.UTF8#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/example1.cs#2)]
 [!code-vb[System.Text.Encoding.UTF8#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF8Encoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WebName">
      <MemberSignature Language="C#" Value="public virtual string WebName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WebName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WebName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WebName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WebName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，若要取得目前的編碼方式，請取得向 Internet Assigned Numbers Authority (IANA) 註冊的名稱。</summary>
        <value>目前 <see cref="T:System.Text.Encoding" /> 的 IANA 名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.WebName%2A>屬性等同於<xref:System.Text.EncodingInfo.Name%2A>屬性。  
  
 請注意，<xref:System.Text.Encoding.WebName%2A>傳回 IANA 已註冊的編碼方式名稱。 標準的名稱及其值時，編碼方式的實作可能會不符合該標準的完整。 <xref:System.Text.Encoding.HeaderName%2A>屬性可定義不同的編碼方式，可能會更好的電子郵件標頭。 不過，大部分的應用程式應該使用<xref:System.Text.Encoding.WebName%2A>改為。  
  
 如需有關 IANA 的詳細資訊，請移至[www.iana.org](https://www.iana.org/)。  
  
 <xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType>相同<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>傳回<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>。 Web 名稱有些重複項目。請參閱備註<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>如需詳細資訊。  
  
   
  
## Examples  
 下列範例包含<xref:System.Text.Encoding.WebName%2A>HTML 標頭中。  
  
 [!code-cpp[System.Text.Encoding.WebName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CPP/webname.cpp#1)]
 [!code-csharp[System.Text.Encoding.WebName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CS/webname.cs#1)]
 [!code-vb[System.Text.Encoding.WebName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.WebName/VB/webname.vb#1)]  
  
 下列範例擷取每個編碼不同的名稱，並顯示與一個或多個名稱不同於編碼<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。 它會顯示<xref:System.Text.Encoding.EncodingName%2A>但不會針對它比較。  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
      </Docs>
    </Member>
    <Member MemberName="WindowsCodePage">
      <MemberSignature Language="C#" Value="public virtual int WindowsCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowsCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WindowsCodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WindowsCodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WindowsCodePage { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，請取得最能符合目前編碼方式的 Windows 作業系統字碼頁。</summary>
        <value>最能符合目前 <see cref="T:System.Text.Encoding" /> 的 Windows 作業系統字碼頁。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性被提供與 Windows 多語系 (MLang) Api 的相容性，例如判斷字型家族。 全球化，使用 Unicode 編碼方式的其中一個建議您改為。 也建議使用<xref:System.Text.Encoding.WebName%2A>而不是<xref:System.Text.Encoding.WindowsCodePage%2A>來識別的字碼頁。  
  
   
  
## Examples  
 下列範例會決定最能符合每個編碼的 Windows 字碼頁。  
  
 [!code-cpp[System.Text.Encoding.CodePage#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CPP/codepage.cpp#1)]
 [!code-csharp[System.Text.Encoding.CodePage#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CS/codepage.cs#1)]
 [!code-vb[System.Text.Encoding.CodePage#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/VB/codepage.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
      </Docs>
    </Member>
  </Members>
</Type>