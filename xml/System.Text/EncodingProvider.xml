<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3dd8164857fc0ee882ea5619b0174b55570de658" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407720" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供編碼提供者的基底類別，這個提供者提供特定平台無法使用的編碼方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其編碼提供者提供就無法在特定目標平台上使用的編碼方式。  
  
 在 Windows 桌面上的.NET Framework 支援大量的字元編碼方式和字碼頁。 您可以在 Windows 桌面上取得.NET Framework 中可用的編碼方式的完整清單，藉由呼叫<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>方法。 .NET core 相反地，根據預設支援下列編碼方式：  
  
-   ASCII （字碼頁為 20127），由<xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>屬性。  
  
-   ISO 8859-1 （字碼頁 28591）。  
  
-   Utf-7 （字碼頁為 65000），傳回<xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>屬性。  
  
-   Utf-8 （字碼頁 65001），傳回<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>屬性。  
  
-   Utf-16 和 UTF-16LE （字碼頁為 1200年），傳回<xref:System.Text.Encoding.Unicode%2A>屬性。  
  
-   UTF-16BE （字碼頁為 1201年），這藉由呼叫具現化<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>具有建構函式`bigEndian`值`true`。  
  
-   Utf-32 和 UTF-32LE （字碼頁為 12000），傳回<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>屬性。  
  
-   UTF-32BE （字碼頁 12001），這藉由呼叫具現化<xref:System.Text.UTF32Encoding>建構函式`bigEndian`參數，並提供值`true`方法呼叫中。  
  
 從.NET Framework 4.6 開始<xref:System.Text.EncodingProvider>讓無法使用的基底類別的.NET framework 可用編碼。 這包含下列步驟：  
  
1.  定義的子類別<xref:System.Text.EncodingProvider>會覆寫兩個抽象<xref:System.Text.EncodingProvider.GetEncoding%2A>多載，<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29>和<xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>。 這些多載會傳回在其他不支援的編碼方式字碼頁識別項和名稱。 請注意，您也可以選擇傳回編碼預設<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29>方法呼叫的引數為 0。  
  
2.  （選擇性） 您可以覆寫虛擬<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>和<xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>方法。 在大部分情況下，這並非必要，因為基底類別提供的預設實作。  
  
3.  傳遞<xref:System.Text.EncodingProvider>執行個體<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>方法所提供的編碼方式<xref:System.Text.EncodingProvider>common language runtime 提供的物件。  
  
4.  呼叫<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>多載來擷取的編碼方式。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法會呼叫對應<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>來判斷是否可以提供要求之編碼方式。  
  
 .NET Framework 類別庫會提供一個靜態屬性， <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>，傳回<xref:System.Text.EncodingProvider>物件可產生一組完整的編碼方式在桌面的.NET Framework 類別庫可[!INCLUDE[net_core](~/includes/net-core-md.md)]應用程式。 此外，您可以從衍生<xref:System.Text.EncodingProvider>類別，以提供您自己的編碼方式。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回編碼方式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">要求之編碼方式的字碼頁識別項。</param>
        <summary>傳回與指定字碼頁識別項相關聯的編碼方式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式，或者，如果 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="codepage" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>繼承者注意事項

您覆寫[GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法傳回的編碼方式或所支援的編碼程式<xref:System.Text.EncodingProvider>子類別。 當使用者程式碼嘗試擷取的編碼方式，藉由呼叫[GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法，此方法會傳遞`codepage`識別碼給每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式。 如果沒有傳回有效的編碼， [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法嘗試擷取快取的編碼方式，其字碼頁識別項是`codepage`。 因為這個緣故，如果`codepage`不是字碼頁識別項的編碼方式的支援，這個方法應傳回`null`; 它應該絕不會擲回例外狀況。
        
請注意，您也可以選擇傳回預設字碼頁，如果值`codepage`引數為 0。

## <a name="notes-to-callers"></a>呼叫者注意事項
        
這個方法會呼叫[Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)方法。 您不應該呼叫它，直接從使用者程式碼。

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您覆寫<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />方法傳回的編碼方式或所支援的編碼程式<see cref="T:System.Text.EncodingProvider" />子類別。當使用者程式碼嘗試擷取的編碼方式，藉由呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法，此方法會傳遞<paramref name="codepage" />識別碼給每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式。如果沒有傳回有效的編碼，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法嘗試擷取快取的編碼方式，其字碼頁識別項是<paramref name="codepage" />。因為這個緣故，如果<paramref name="codepage" />不是字碼頁識別項的編碼方式的支援，這個方法應傳回<see langword="null" />; 它應該絕不會擲回例外狀況。</para>
        </block>
        <block subset="none" type="usage">
          <para>這個方法會呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法。您不應該呼叫它，直接從使用者程式碼。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要求之編碼方式的名稱。</param>
        <summary>傳回具有指定名稱的編碼方式。</summary>
        <returns>與指定名稱相關聯的編碼方式，或者，如果 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="name" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>繼承者注意事項 
                  
您覆寫[GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法傳回的編碼方式或所支援的編碼程式<xref:System.Text.EncodingProvider>子類別。 當使用者程式碼嘗試擷取的編碼方式，藉由呼叫[GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法，此方法會傳遞`name`每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式的引數。 如果沒有傳回有效的編碼， [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法嘗試擷取快取的編碼方式，其名稱是`name`。 因為這個緣故，如果`name`不支援，這個方法應傳回的編碼名稱`null`。 中的方法應該擲回例外狀況的唯一情況是如果`name`是`null`。

## <a name="notes-to-callers"></a>呼叫者注意事項

這個方法會呼叫[Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>)方法。 您不應該呼叫它，直接從使用者程式碼。
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您覆寫<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />方法傳回的編碼方式或所支援的編碼程式<see cref="T:System.Text.EncodingProvider" />子類別。當使用者程式碼嘗試擷取的編碼方式，藉由呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法，此方法會傳遞<paramref name="name" />每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式的引數。如果沒有傳回有效的編碼，<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法嘗試擷取快取的編碼方式，其名稱是<paramref name="name" />。因為這個緣故，如果<paramref name="name" />不支援，這個方法應傳回的編碼名稱<see langword="null" />。中的方法應該擲回例外狀況的唯一情況是如果<paramref name="name" />是<see langword="null" />。</para>
        </block>
        <block subset="none" type="usage">
          <para>這個方法會呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法。您不應該呼叫它，直接從使用者程式碼。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">要求之編碼方式的字碼頁識別項。</param>
        <param name="encoderFallback">物件，在無法以這個編碼方式將字元編碼時提供錯誤處理程序。</param>
        <param name="decoderFallback">物件，在無法以這個編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
        <summary>傳回與指定字碼頁識別項相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
        <returns>與指定字碼頁相關聯的編碼方式，或者，如果 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="codepage" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和`decoderFallback`參數是物件，定義所使用的編碼器無法將字元轉換成位元組序列，或解碼器無法將位元組序列轉換為字元的後援策略。 .NET Framework 提供下列後援機制：  
  
-   例外狀況後援。 如果`encoderFallback`引數是的執行個體<xref:System.Text.EncoderExceptionFallback>，或`decoderExceptionFallback`引數是的執行個體<xref:System.Text.DecoderExceptionFallback>，如果無法編碼的字元，而且如果位元組解碼方法擲回例外狀況的編碼方法擲回例外狀況無法解碼順序。  
  
-   取代後援。 如果`encoderFallback`引數是的執行個體<xref:System.Text.EncoderReplacementFallback>，或`decoderExceptionFallback`引數是的執行個體<xref:System.Text.DecoderReplacementFallback>、 編碼和解碼方法取代無法編碼的字元取代字串和位元組序列不可為解碼。 如果您透過具現化取代後援物件呼叫預設建構函式，取代字元是"？"。 如果您呼叫<xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>或<xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>建構函式，您可以指定取代字串。  
  
-   自動調整的後援。 您可以從衍生<xref:System.Text.EncoderFallback>或<xref:System.Text.DecoderFallback>類別來實作自動調整的取代機制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>因為呼叫此方法會使用您實作<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />方法，您不必覆寫它。當使用者程式碼嘗試擷取的編碼方式，藉由呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，此方法會傳遞<paramref name="codepage" />識別碼給每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式。如果沒有傳回有效的編碼，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法嘗試擷取快取的編碼方式，其字碼頁識別項是<paramref name="codepage" />。因為這個緣故，如果您選擇要覆寫<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，您的覆寫應傳回<see langword="null" />如果<paramref name="codepage" />的編碼方式的字碼頁識別項不是，您的支援，它應該絕不會擲回例外狀況。</para>
        </block>
        <block subset="none" type="usage">
          <para>這個方法會呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法。您不應該呼叫它，直接從使用者程式碼。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">慣用的編碼方式名稱。</param>
        <param name="encoderFallback">物件，在無法以這個編碼方式將字元編碼時提供錯誤處理程序。</param>
        <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
        <summary>傳回與指定名稱關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
        <returns>與指定名稱相關聯的編碼方式，或者，如果 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="name" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和`decoderFallback`參數是物件，定義所使用的編碼器無法將字元轉換成位元組序列，或解碼器無法將位元組序列轉換為字元的後援策略。 .NET Framework 提供下列後援機制：  
  
-   例外狀況後援。 如果`encoderFallback`引數是的執行個體<xref:System.Text.EncoderExceptionFallback>，或`decoderExceptionFallback`引數是的執行個體<xref:System.Text.DecoderExceptionFallback>，如果無法編碼的字元，而且如果位元組解碼方法擲回例外狀況的編碼方法擲回例外狀況無法解碼順序。  
  
-   取代後援。 如果`encoderFallback`引數是的執行個體<xref:System.Text.EncoderReplacementFallback>，或`decoderExceptionFallback`引數是的執行個體<xref:System.Text.DecoderReplacementFallback>、 編碼和解碼方法取代無法編碼的字元取代字串和位元組序列不可為解碼。 如果您透過具現化取代後援物件呼叫預設建構函式，取代字元是"？"。 如果您呼叫<xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>或<xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>建構函式，您可以指定取代字串。  
  
-   自動調整的後援。 您可以從衍生<xref:System.Text.EncoderFallback>或<xref:System.Text.DecoderFallback>類別來實作自動調整的取代機制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>因為呼叫此方法會使用您實作<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />方法，您不必覆寫它。當使用者程式碼嘗試擷取的編碼方式，藉由呼叫<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，此方法會傳遞<paramref name="codepage" />識別碼給每個已註冊編碼的提供者直到其中一個傳回的有效編碼方式。如果沒有傳回有效的編碼，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法嘗試擷取快取的編碼方式，其字碼頁識別項是<paramref name="codepage" />。因為這個緣故，如果您選擇要覆寫<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，您的覆寫應傳回<see langword="null" />如果<paramref name="codepage" />的編碼方式的字碼頁識別項不是，您的支援，它應該絕不會擲回例外狀況。</para>
        </block>
        <block subset="none" type="usage">
          <para>這個方法會呼叫<see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法。您不應該呼叫它，直接從使用者程式碼。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>