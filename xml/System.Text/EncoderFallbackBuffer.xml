<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6da17ba94b085f8076678dc84ce0c5a10ed6e6cf" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46692189" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供緩衝區，允許後援處理常式在無法編碼輸入字元時，將替代字串傳回至編碼器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 編碼方式定義的 Unicode 字元與編碼的位元組序列之間的對應。 如果未定義對應的特定字元，編碼作業，它會將輸入的字元轉換成輸出位元組序列，將會失敗。  
  
 .NET Framework 會提供失敗處理機制，稱為後援，如果無法執行轉換。 所有的編碼器後援處理常式必須實作下列各項：  
  
-   編碼器後援，表示由類別衍生自<xref:System.Text.EncoderFallback>類別。  
  
-   編碼器後援緩衝區，衍生的類型由<xref:System.Text.EncoderFallbackBuffer>可以傳回字串，轉換作業的類別。  
  
 後援可以使用三種策略來處理轉換失敗：  
  
-   自動調整的對應。 編碼器後援緩衝區可以傳回字串，表示輸入的字元最接近的近似值。 .NET Framework 不會提供自動調整的公用<xref:System.Text.EncoderFallbackBuffer>實作。  
  
-   取代。 編碼器後援緩衝區可以傳回的字串，例如問號 ("？")，指出無法編碼的字元。 在.NET Framework 中，<xref:System.Text.EncoderReplacementFallback>和<xref:System.Text.EncoderReplacementFallbackBuffer>類別提供公用取代後援緩衝區實作。 建構函式<xref:System.Text.EncoderReplacementFallback>類別可讓您定義取代字串。  
  
-   例外狀況。 <xref:System.Text.EncoderFallbackBuffer>實作會擲回的例外狀況，指出無法編碼字元，並終止編碼作業。 在此情況下，後援處理常式必須提供<xref:System.Text.EncoderFallbackBuffer>實作中，雖然它不會傳回字串給編碼器。 在.NET Framework 中，<xref:System.Text.EncoderExceptionFallback>並<xref:System.Text.EncoderExceptionFallbackBuffer>類別會提供一個公用例外狀況後援實作，會擲回<xref:System.Text.EncoderFallbackException>無法編碼字元時。  
  
 在緩衝區<xref:System.Text.EncoderFallbackBuffer>實作代表要傳回至編碼器的回應中的編碼器後援的整個字串。 一般而言，實作也會包含狀態資訊，例如若要返回編碼器和剩餘的字元數，傳回的下一個字元的索引。 因為<xref:System.Text.EncoderFallbackBuffer>是抽象類別，它需要衍生的類別實作最少的下列成員：  
  
-   多載<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>方法，編碼器在無法編碼字元時呼叫。 編碼器會將兩項資訊傳遞至後援緩衝區實作： 字元或無法編碼的 surrogate 字組和索引中輸入的字元。 編碼器後援例外狀況處理常式，在這個方法是擲回例外狀況。 否則，方法會傳回`true`提供後援或`false`則。  
  
-   <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法，如果會重複呼叫編碼器<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>方法會傳回`true`。 在後續呼叫中，處理常式應該會傳回在其緩衝區中的每個字元。 當它已傳回的所有字元時，它應傳回 u+0000。 例外狀況處理常式一律會傳回 u+0000。  
  
-   <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A>方法，它會嘗試將指標移至緩衝區中的前一個位置，並指出移動是否成功。 例外狀況處理常式一律會傳回`false`。  
  
-   <xref:System.Text.EncoderFallbackBuffer.Remaining%2A>屬性，指出要傳回至編碼器的剩餘字元數。 例外狀況後援處理常式一律會傳回零。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">.NET Framework 中的字元編碼方式</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Cyrillic-to-Roman-f7e88b29">羅馬字母轉換公用程式的範例： 斯拉夫文</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指示在無法為原始輸入編碼時，是否可以使用替代字串，或者是否應該忽略原始輸入。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">輸入字元。</param>
        <param name="index">輸入緩衝區中字元的索引位置。</param>
        <summary>在衍生類別中覆寫時，預備後援緩衝區來處理指定的輸入字元。</summary>
        <returns>如果後援緩衝區可以處理 <paramref name="charUnknown" />，則為 <see langword="true" />；如果後援緩衝區會忽略 <paramref name="charUnknown" />，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>並<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法呼叫<xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29>如果遇到未知的輸入的字元無法編碼。 傳回值`true`指出後援緩衝區可以處理輸入的字元，這會導致呼叫的方法來呼叫<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法，以取得每個後援緩衝區的字元。 因為它不會處理個別字元，<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>例外狀況後援處理常式中的方法會擲回的例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">輸入字組的高 Surrogate。</param>
        <param name="charUnknownLow">輸入字組的低 Surrogate。</param>
        <param name="index">輸入緩衝區中 Surrogate 字組的索引位置。</param>
        <summary>在衍生類別中覆寫時，預備後援緩衝區來處理指定的 Surrogate 字組。</summary>
        <returns>如果後援緩衝區可以處理 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" /> 則為 <see langword="true" />，如果後援緩衝區會忽略 Surrogate 字組則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>並<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法呼叫<xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29>如果遇到其輸入中的 surrogate 字組。 傳回值`true`指出後援緩衝區可以處理 surrogate 字組，這會導致呼叫的方法來呼叫<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法，以取得每個後援緩衝區的字元。  因為它不會處理個別字元，<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>例外狀況後援處理常式中的方法會擲回的例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，擷取後援緩衝區中的下一個字元。</summary>
        <returns>後援緩衝區中的下一個字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 編碼作業會呼叫<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>如果作業遇到未知的字元或 surrogate 字組，在輸入中的方法。 例如，如果是取代後援，如果<xref:System.Text.EncoderFallbackBuffer.Fallback%2A>方法會傳回`true`，替代字串是否存在，可以編碼而不是未知的輸入。 編碼作業呼叫<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法重複一次取得某一字元的替代字串。 當後援緩衝區中的所有字元都已都傳回給編碼器，<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法應傳回 u+0000。  
  
 例外狀況後援處理常式，<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A>方法應傳回 u+0000。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，會使 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 方法的下一個呼叫存取在目前字元位置之前的資料緩衝區字元位置。</summary>
        <returns>如果 <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例外狀況後援處理常式應該傳回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，於目前的 <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件中取得仍要處理的字元數。</summary>
        <value>目前的後援緩衝區中尚未處理的字元數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A>方法會傳回`true`如果<xref:System.Text.EncoderFallbackBuffer.Remaining%2A>是非零值。  
  
 例外狀況後援處理常式，<xref:System.Text.DecoderFallbackBuffer.Remaining%2A>方法應會傳回零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化與後援緩衝區有關的所有資料和狀態資訊。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>之後呼叫<see cref="M:System.Text.EncoderFallbackBuffer.Reset" />方法中，<see cref="P:System.Text.EncoderFallbackBuffer.Remaining" />屬性應該會傳回 0，<see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" />方法應傳回 u+0000，而<see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" />方法應傳回<see langword="false" />。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>