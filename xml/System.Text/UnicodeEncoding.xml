<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2145c323696cc5e4623a464b2e1fe9542a0c6c4" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51888158" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表 Unicode 字元的 UTF-16 編碼方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 編碼是將一組 Unicode 字元轉換成位元組序列的處理程序。 解碼則是將編碼的位元組序列轉換成一組 Unicode 字元的程序。  
  
 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)給每個支援的指令碼中的每個字元的字碼指標 （數字）。 Unicode 轉換格式 (UTF) 是要編碼字碼指標的方法。 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)會使用下列 UTFs:  
  
-   Utf-8，用來將每個字碼指標表示成一連串的一到四個位元組。  
  
-   Utf-16，用來將每個字碼指標表示成一連串的一到兩個 16 位元整數。  
  
-   UTF-32，用來將每個字碼指標表示成 32 位元整數。  
  
 如需有關 UTFs 和所支援其他編碼<xref:System.Text>，請參閱 < [.NET Framework 中的字元編碼](~/docs/standard/base-types/character-encoding.md)。  
  
 <xref:System.Text.UnicodeEncoding>類別代表以 utf-16 編碼方式。 編碼器可以使用任何位元組由大到小位元組順序 (最大顯著性位元組第一次) 或小小的位元組由小到大位元組順序 (最小顯著性位元組第一次)。 例如，（字碼指標 u+0041） 序列化為 Latin Capital Letter 如下 （以十六進位方式）：  
  
-   由大到小的位元組順序： 00 00 00 41  
  
-   一些位元組由小到大位元組順序： 41 00 00 00  
  
 它會儲存 Unicode 字元，使用特定的平台的原生的位元順序通常更有效率。 比方說，最好使用位元組由小到大的位元組順序少位元組由小到大的平台，例如 Intel 的電腦上。 <xref:System.Text.UnicodeEncoding>類別會對應到 Windows 字碼頁 1200 （少位元組由小到大位元組順序） 和 1201 （位元組由大到小位元組順序）。 您可以藉由呼叫來判斷 「 位元組序 」 的特定架構<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法。  
  
 （選擇性）<xref:System.Text.UnicodeEncoding>物件所提供的位元組順序標記 (BOM)，也就是可以加在編碼程序所產生的位元組序列的位元組陣列。 如果前序編碼包含位元組順序標記 (BOM)，它可以協助判斷位元組順序的轉換格式或 UTF 解碼器。  
  
 如果<xref:System.Text.UnicodeEncoding>執行個體已設定為提供 BOM，您可以呼叫來擷取<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法; 否則方法會傳回空陣列。 請注意，即使<xref:System.Text.UnicodeEncoding>BOM 支援使用者設定物件，您必須將編碼的位元組資料流，視需要; 開頭 BOM 編碼方式的<xref:System.Text.UnicodeEncoding>類別沒有這麼做會自動。  
  
 若要啟用錯誤偵測，並讓更安全的類別執行個體，您應該執行個體化<xref:System.Text.UnicodeEncoding>藉由呼叫物件<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>建構函式，並設定其`throwOnInvalidBytes`引數`true`。 使用錯誤偵測會偵測到無效的字元或位元組序列的方法會擲回<xref:System.ArgumentException>。 錯誤偵測，會擲回任何例外狀況，而不正確的順序通常會遭到忽略。  
  
 您可以具現化<xref:System.Text.UnicodeEncoding>數種方式，根據是否要給它提供位元組順序標記 (BOM)，是否要位元組由大到小或由小到大的編碼方式，以及是否要啟用錯誤偵測的物件。 下表列出<xref:System.Text.UnicodeEncoding>建構函式與<xref:System.Text.Encoding>屬性會傳回<xref:System.Text.UnicodeEncoding>物件。  
  
|成員|位元組序|BOM|錯誤偵測|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|Big endian|是|無 （取代後援）|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|位元組由小到大|是|無 （取代後援）|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|位元組由小到大|是|無 （取代後援）|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|可設定|可設定|無 （取代後援）|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|可設定|可設定|可設定|  
  
 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法會判斷多少個位元組會導致一組 Unicode 字元的編碼方式和<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法會執行實際的編碼方式。  
  
 同樣地，<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法會判斷字元數會導致解碼的位元組序列，而<xref:System.Text.UnicodeEncoding.GetChars%2A>和<xref:System.Text.UnicodeEncoding.GetString%2A>方法會執行實際的解碼。  
  
 針對編碼器或解碼器能夠儲存狀態資訊編碼或解碼資料跨越多個區塊 （例如 1 百萬個字元的編碼中段 100,000 個字元的字串） 時，請使用<xref:System.Text.UnicodeEncoding.GetEncoder%2A>和<xref:System.Text.UnicodeEncoding.GetDecoder%2A>屬性，分別。  
  
   
  
## Examples  
 下列範例示範如何使用 Unicode 字元的字串編碼成位元組陣列<xref:System.Text.UnicodeEncoding>物件。 位元組陣列解碼為字串，以示範不遺失資料。  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 下列範例會使用相同的字串與上一個，不同之處在於它將編碼的位元組寫入檔案，並使用位元組順序標記 (BOM) 的位元組資料流的前置詞。 它接著會讀取檔案兩個不同的方式： 為文字檔，使用<xref:System.IO.StreamReader>物件，並當作二進位檔案。 如您所預期，沒有新讀取字串包含 BOM。  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解編碼</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立使用小的位元組由小到大位元組順序，提供 Unicode 位元組順序標記，而當偵測到無效的編碼方式時，不會擲回例外狀況的執行個體。  
  
> [!NOTE]
>  基於安全性理由，您應該啟用錯誤偵測，藉由呼叫<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>建構函式，並設定其`throwOnInvalidBytes`引數`true`。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.Text.UnicodeEncoding>執行個體，並顯示名稱的編碼方式。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <see langword="true" /> 表示使用由大到小的位元組順序 (最大顯著性位元組 (Most Significant Byte) 在前)，<see langword="false" /> 表示使用由小到大的位元組順序 (最小顯著性位元組 (Least Significant Byte) 在前)。</param>
        <param name="byteOrderMark">
          <see langword="true" /> 指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法會傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。 參數會指定是否使用位元組由大到小的位元組順序，以及 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法是否傳回 Unicode 位元組順序標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式建立時偵測到無效的編碼方式時，不會擲回例外狀況的執行個體。  
  
> [!NOTE]
>  基於安全性理由，您應該啟用錯誤偵測，藉由呼叫<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>建構函式，並設定其`throwOnInvalidBytes`引數`true`。  
  
 `byteOrderMark`參數可控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。 如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 格式為 utf-16。  如果`false`，它會傳回長度為零的位元組陣列。 不過，設定`byteOrderMark`要`true`不會造成<xref:System.Text.UnicodeEncoding.GetBytes%2A>為位元組陣列的開頭 BOM 的前置詞的方法也不會引起<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法，以納入中的位元組計數 BOM 的位元組數目。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.Text.UnicodeEncoding>指定是否支援小到小或大到小的位元組順序的執行個體和 Unicode 位元組順序標記。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <see langword="true" /> 表示使用位元組由大到小位元組順序 (最大顯著性位元組在前)，<see langword="false" /> 表示使用位元組由小到大位元組順序 (最小顯著性位元組在前)。</param>
        <param name="byteOrderMark">
          <see langword="true" /> 指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法會傳回 Unicode 位元組順序標記；否則為 <see langword="false" />。</param>
        <param name="throwOnInvalidBytes">
          <see langword="true" />，可指定在偵測到無效的編碼方式時應擲回一個例外狀況，否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。 參數會指定是否使用位元組由大到小位元組順序、是否提供 Unicode 位元組順序標記，以及在偵測到無效編碼方式時，是否擲回例外狀況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `byteOrderMark`參數可控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。 如果`true`，方法會傳回位元組陣列，包含 Unicode 位元組順序標記 (BOM) 格式為 utf-16。  如果`false`，它會傳回長度為零的位元組陣列。 不過，設定`byteOrderMark`要`true`不會造成<xref:System.Text.UnicodeEncoding.GetBytes%2A>為位元組陣列的開頭 BOM 的前置詞的方法也不會引起<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法，以納入中的位元組計數 BOM 的位元組數目。  
  
 如果`throwOnInvalidBytes`參數是`true`，偵測到無效的位元組序列的方法會擲回<xref:System.ArgumentException?displayProperty=nameWithType>。 否則，方法不會擲回例外狀況，並忽略無效的序列。  
  
> [!NOTE]
>  基於安全性理由，建議您的應用程式使用這個建構函式建立的執行個體<xref:System.Text.UnicodeEncoding>類別，並藉由設定開啟錯誤偵測`throwOnInvalidBytes`至`true`。  
  
   
  
## Examples  
 下列範例示範的行為<xref:System.Text.UnicodeEncoding>，啟用錯誤偵測，而不需要。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>代表 Unicode 字元大小 (以位元組為單位)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個欄位的值是 32 位元帶正負號的常數，值為 2。  
  
   
  
## Examples  
 下列範例示範如何傳回的值<xref:System.Text.UnicodeEncoding.CharSize>並加以顯示。  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要與目前物件比較的物件。</param>
        <summary>判斷指定的 <see cref="T:System.Object" /> 物件是否等於目前的 <see cref="T:System.Text.UnicodeEncoding" /> 物件。</summary>
        <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的執行個體，並且等於目前的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個<xref:System.Text.UnicodeEncoding>物件是否視為相等，如果所有下列條件成立：  
  
-   這兩個物件都使用相同的位元組順序 （由小到大或 big endian）。  
  
-   這兩個物件提供位元組順序標記，或兩者都不這麼做。  
  
-   這兩個物件都使用相同的編碼器後援。  
  
-   這兩個物件都使用相同的解碼器後援。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.Equals%2A>方法來測試是否目前<xref:System.Text.UnicodeEncoding>物件是否等於其他<xref:System.Text.UnicodeEncoding>物件。 五個<xref:System.Text.UnicodeEncoding>物件會建立相較之下，及比較的結果會顯示。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算將一組字元編碼會產生多少位元組。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要編碼的一組字元。</param>
        <summary>計算將指定字串中的字元編碼所產生的位元組數目。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
> [!NOTE]
>  若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法來計算最大值與實際所需格式的字串編碼的位元組數目。 它也會顯示實際儲存位元組順序標記的位元組資料流所需的位元組數目。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的位元組數目大於可做為整數傳回的最大值。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>計算將起始於指定的字元指標之一組字元編碼會產生多少位元組。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要在您呼叫儲存產生的位元組，<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
> [!NOTE]
>  若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。  
  
-或- 
產生的位元組數目大於可做為整數傳回的最大值。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="index">要編碼的第一個字元索引。</param>
        <param name="count">要編碼的字元數。</param>
        <summary>計算將指定的字元陣列中的一組字元編碼會產生多少位元組。</summary>
        <returns>編碼指定字元所產生的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>來儲存產生的位元組，應用程式會使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 啟用錯誤偵測，無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如在一連串的位元組寫入檔案的開頭) 是開發人員的責任，並在前序編碼的位元組數目不會反映在所傳回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法。  
  
   
  
## Examples  
 下列範例會填入陣列拉丁大寫字母和小寫字元和呼叫<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以判斷拉丁文小寫的字元編碼所需的位元組數目。 然後，它會顯示這項資訊，以及加入位元組順序標記時所需的位元組總數。 它會使用所傳回的值比較此數字<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，即表示拉丁文小寫的字元編碼所需的位元組數目上限。 下列範例會填入希臘文和斯拉夫字元和呼叫所組成的陣列<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以判斷斯拉夫字元編碼所需的位元組數目。 然後，它會顯示這項資訊，以及加入位元組順序標記時所需的位元組總數。 它會使用所傳回的值比較此數字<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，即表示斯拉夫字元編碼所需的位元組數目上限。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
-或- 
所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將一組字元編碼成位元組序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="unicodeEncoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">要編碼的第一個字元指標。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
        <param name="byteCount">寫入的最大位元組數。</param>
        <summary>將起始於指定字元指標的字元編碼成位元組序列；儲存該位元組序列時，係以指定的位元組指標為起始點。</summary>
        <returns>
          <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要在您呼叫儲存產生的位元組，<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或應用程式的資料量很大，它必須分割成較小的區塊時，應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供的物件<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
> [!NOTE]
>  若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
  
-或- 
 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。  
  
-或- 
 <paramref name="byteCount" /> 小於結果位元組數。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要解碼之一組字元的字元陣列。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>將一組字元從指定的字元陣列編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或如果資料量太大，它必須分割成較小的區塊，應該使用應用程式<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
> [!NOTE]
>  若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法來編碼的字元範圍<xref:System.String>並將編碼的位元組儲存在位元組陣列中的項目範圍。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
  
-或- 
 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
-或- 
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
-或- 
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。  
  
-或- 
 從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要編碼的一組字元。</param>
        <param name="charIndex">要編碼的第一個字元索引。</param>
        <param name="charCount">要編碼的字元數。</param>
        <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
        <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
        <summary>將指定 <see cref="T:System.String" /> 中的一組字元編碼成指定的位元組陣列。</summary>
        <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要儲存產生的位元組，請呼叫<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要計算最大陣列大小，請呼叫<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或如果資料量太大，它必須分割成較小的區塊，應該使用應用程式<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
> [!NOTE]
>  若要確保儲存為檔案或資料流時將編碼的位元組會正確解碼，您可以前置詞與前序編碼的位元組資料流。 位元組資料流的開頭插入前序編碼 (例如一系列的位元組寫入檔案的開頭) 是開發人員的責任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不會不在前面加上前序編碼的位元組序列的開頭。  
  
   
  
## Examples  
 下列範例示範如何編碼的 Unicode 字元陣列中的項目範圍，並將編碼的位元組儲存在位元組陣列中的項目範圍。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
  
-或- 
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
  
-或- 
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。  
  
-或- 
 從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算將位元組序列解碼會產生多少字元數。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>計算將起始於指定位元組指標的位元組序列解碼會產生多少字元數。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小<xref:System.Text.UnicodeEncoding.GetChars%2A>來儲存產生的字元，而應用程式會使用需要<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小於零。  
  
-或- 
所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>計算解碼指定位元組陣列中的位元組序列會產生多少字元數。</summary>
        <returns>解碼指定位元組序列所產生的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetChars%2A>來儲存產生的字元，應用程式會使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>解碼位元組陣列，使用的項目範圍所產生的方法，以傳回的字元數<xref:System.Text.UnicodeEncoding>。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
  
-或- 
所產生的位元組數目大於可用整數傳回的數目上限。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將位元組序列解碼成一組字元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要解碼的第一個位元組指標。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">開始寫入產生的一組字元之位置指標。</param>
        <param name="charCount">要寫入的最大字元數。</param>
        <summary>將起始於指定位元組指標的位元組序列解碼成一組字元；儲存該組字元時，係以指定的字元指標為起始點。</summary>
        <returns>
          <paramref name="chars" /> 參數所指示位置上寫入的實際字元數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算確切的陣列大小<xref:System.Text.UnicodeEncoding.GetChars%2A>來儲存產生的字元，而應用程式會使用需要<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。 您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或應用程式的資料量很大，它必須分割成較小的區塊時，應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供的物件<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
  
-或- 
 <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。  
  
-或- 
 <paramref name="charCount" /> 小於結果字元數。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="byteIndex">要解碼的第一個位元組索引。</param>
        <param name="byteCount">要解碼的位元組數。</param>
        <param name="chars">包含產生的一組字元之字元陣列。</param>
        <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
        <summary>將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
        <returns>實際寫入 <paramref name="chars" /> 的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetChars%2A>來儲存產生的字元，應用程式會使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。 您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或如果資料量太大，它必須分割成較小的區塊，應該使用應用程式<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetChars%2A>方法來解碼位元組陣列中的項目範圍，並將結果儲存在字元陣列。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
  
-或- 
 <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
  
-或- 
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
  
-或- 
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。  
  
-或- 
 從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得可以將以 UTF-16 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</summary>
        <returns>
          <see cref="T:System.Text.Decoder" />，可以將以 UTF-16 編碼的位元組序列轉換成 Unicode 字元序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法會將序列的位元組的區塊轉換成循序區塊中的字元，以類似的方式<xref:System.Text.UnicodeEncoding.GetChars%2A>。 不過，<xref:System.Text.Decoder>維護呼叫，因此它可以正確解碼位元組序列跨越區塊之間的狀態資訊。 <xref:System.Text.Decoder>也會保留尾端位元組的資料區塊的結尾，並在下一步 的解碼作業中使用尾端位元組。 因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>適合用於網路傳輸和檔案作業，因為這些作業經常要處理的資料，而不是完整的資料流區塊。  
  
 如果已啟用錯誤偵測，亦即`throwOnInvalidBytes`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Decoder>這個方法所傳回。 如果已啟用錯誤偵測且遇到無效的序列，解碼器的狀態會是未定義，且必須停止處理。  
  
   
  
## Examples  
 下列範例會使用編碼器和解碼器將字串編碼成位元組陣列，並再將位元組解碼為字元陣列。  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解編碼</related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得可以將 Unicode 字元序列轉換成以 UTF-16 編碼的位元組序列的編碼器。</summary>
        <returns>
          <see cref="T:System.Text.Encoder" /> 物件，可以將 Unicode 字元序列轉換成以 UTF-16 編碼的位元組序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法會將字元的循序區塊轉換成以類似的方式中的位元組序列的區塊<xref:System.Text.UnicodeEncoding.GetBytes%2A>這個類別的方法。 不過，<xref:System.Text.Encoder>物件會維護呼叫之間的狀態資訊，以便它可以正確編碼跨越區塊的字元序列。 <xref:System.Text.Encoder>物件也會保留在資料區塊結尾的後置字元，並在下一步 的編碼作業中使用尾端的字元。 比方說，資料區塊可能會以無對應的高 surrogate，結尾，而且下一個資料區塊可能會比對的低 surrogate。 因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>適合用於網路傳輸和檔案作業，因為這些作業經常要處理的資料，而不是完整的資料流區塊。  
  
 如果已啟用錯誤偵測，亦即`throwOnInvalidBytes`建構函式的參數設定為`true`中, 也已啟用錯誤偵測<xref:System.Text.Encoder>這個方法所傳回的物件。 如果已啟用錯誤偵測且遇到無效的序列，編碼器的狀態會是未定義，且必須停止處理。  
  
   
  
## Examples  
 下列範例會使用編碼器和解碼器將字串編碼成位元組陣列，並再將位元組解碼為字元陣列。  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解編碼</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前執行個體的雜湊碼。</summary>
        <returns>目前 <see cref="T:System.Text.UnicodeEncoding" /> 物件的雜湊碼。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">要編碼的字元數。</param>
        <summary>計算編碼指定的字元數會產生的最大位元組數。</summary>
        <returns>編碼指定字元數所產生的最大位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>來儲存產生的位元組，應用程式會使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 擷取最壞情況的數目，包括目前所選最壞的情況<xref:System.Text.EncoderFallback>。 如果後援會選擇使用可能很大的字串、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>可以傳回較大的值。  
  
 在大部分情況下，這個方法會擷取對小型字串合理的數字。 針對大型的字串，您可能選擇使用極大的緩衝區，少數的情況下，更合理的緩衝區已超出攔截錯誤。 您也可以在不同的方法使用，請考慮<xref:System.Text.UnicodeEncoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 沒有任何關聯<xref:System.Text.UnicodeEncoding.GetChars%2A>。 如果您的應用程式需要類似的函式，以搭配<xref:System.Text.UnicodeEncoding.GetChars%2A>，它應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法傳回的編碼指定的字元數所需的位元組數目上限。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 小於零。  
  
-或- 
產生的位元組數目大於可做為整數傳回的最大值。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">要解碼的位元組數。</param>
        <summary>計算解碼指定的位元組數會產生的最大字元數。</summary>
        <returns>解碼指定位元組數所產生的最大字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要計算所需的確切的陣列大小<xref:System.Text.UnicodeEncoding.GetChars%2A>來儲存產生的字元，應用程式會使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要計算最大陣列大小，應用程式應該使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常會配置較少的記憶體，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常執行速度更快。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 擷取最壞情況的數目，包括目前所選最壞的情況<xref:System.Text.DecoderFallback>。 如果後援會選擇使用可能很大的字串、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>擷取較大的值。  
  
 在大部分情況下，這個方法會擷取對小型字串合理的數字。 針對大型的字串，您可能選擇使用極大的緩衝區，少數的情況下，更合理的緩衝區已超出攔截錯誤。 您也可以在不同的方法使用，請考慮<xref:System.Text.UnicodeEncoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 沒有任何關聯<xref:System.Text.UnicodeEncoding.GetBytes%2A>。 如果您的應用程式需要類似的函式，以搭配<xref:System.Text.UnicodeEncoding.GetBytes%2A>，它應該使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>解碼指定的位元組數所產生的方法，以傳回的字元數上限。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小於零。  
  
-或- 
產生的位元組數目大於可做為整數傳回的最大值。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當這個執行個體的建構函式要求位元組順序標記時，傳回以 UTF-16 格式編碼的 Unicode 位元組順序標記。</summary>
        <returns>如果設定 <see cref="T:System.Text.UnicodeEncoding" /> 物件提供編碼方式，則為包含 Unicode 位元組順序標記的位元組陣列。 否則，這個方法會傳回長度為零的位元組陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UnicodeEncoding>物件可以提供前序編碼，也就是可以加在編碼程序所產生的位元組序列的位元組陣列。 引用編碼的位元組序列的位元組順序標記 （字碼元素 U + FEFF） 有助於判斷位元組順序的轉換格式或 UTF 解碼器。 Unicode 位元組順序標記 (BOM) （以十六進位方式） 的序列化，如下所示：  
  
-   由大到小的位元組順序： FE FF  
  
-   一些位元組由小到大位元組順序： FF FE  
  
 您可以具現化<xref:System.Text.UnicodeEncoding>物件，其<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法會傳回有效的 BOM 如下：  
  
-   藉由擷取<xref:System.Text.UnicodeEncoding>所傳回的物件<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>或<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType>屬性。  
  
-   藉由呼叫無參數<xref:System.Text.UnicodeEncoding.%23ctor>建構函式來具現化<xref:System.Text.UnicodeEncoding>物件。  
  
-   藉由提供`true`的值`byteOrderMark`引數<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>建構函式。  
  
 我們建議使用 BOM，因為它提供幾乎已遺失參照為其編碼，例如未標記或標記不當的檔案編碼方式的特定識別 web 資料或儲存時企業的隨機文字檔案沒有國際考量。 如果資料一致的方式適當地標記，就能避免通常使用者的問題。  
  
 提供編碼類型的標準，BOM 是多餘的。 不過，它可以用來傳送正確的編碼方式標頭的伺服器。 或者，它可用來當做後援萬一編碼遺失時。  
  
 有一些缺點，若要使用 BOM。 比方說，了解如何限制使用 BOM 的資料庫欄位可以是很困難。 串連的檔案可以也會是問題，比方說，當檔案會合併，例如某種程度的不必要的字元可以得到中間的資料。 儘管幾個缺點，不過，BOM 是強烈建議使用。  
  
> [!CAUTION]
>  若要確保正確解碼的編碼的位元組，您應該前置詞與前序編碼的位元組資料流的開頭。 請注意，<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不會不在前面加上 BOM 編碼的位元組序列; 開發人員的責任提供適當的位元組資料流的開頭 BOM。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法來擷取 big endian 或小小的位元組由小到大位元組順序的執行個體中的 Unicode 位元組順序標示<xref:System.Text.UnicodeEncoding>。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 下列範例具現化兩個<xref:System.Text.UnicodeEncoding>BOM，且第二個，而其執行的第一個不提供的物件。 然後它會呼叫<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法來寫入檔案中的 BOM 之前撰寫的 Unicode 編碼的字串。 如主控台輸出範例所示，從第二個編碼器會將位元組儲存的檔案會有三個的多個位元組，比第一個。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 您也可以藉由比較檔案`fc`命令主控台視窗中，或者您可以檢查包含十六進位檢視模式的文字編輯器中的檔案。 請注意，當支援 utf-16 編碼的編輯器中開啟檔案，BOM 會不會顯示。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
        <param name="index">要解碼的第一個位元組索引。</param>
        <param name="count">要解碼的位元組數。</param>
        <summary>將位元組陣列中的某一段位元組範圍解碼成字串。</summary>
        <returns>
          <see cref="T:System.String" /> 物件，包含解碼指定位元組序列的結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用錯誤偵測的無效的序列會造成此方法會擲回<xref:System.ArgumentException>。 錯誤偵測無效的序列會被忽略，而不會擲回任何例外狀況。  
  
 如果要解碼的位元組範圍包含位元組順序標記 (BOM)，而非 BOM 感知型別的方法所傳回的位元組陣列，這個方法所傳回的字元陣列中包含的字元 U + FFFE。 您可以呼叫來移除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 要轉換，例如，從資料流讀取資料的資料可能僅適用於循序區塊。 在此情況下，或應用程式的資料量很大，它必須分割成較小的區塊時，應該使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>所提供的物件<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分別。  
  
   
  
## Examples  
 下列範例會藉由呼叫初始化陣列<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法，以判斷完全多少個位元組所需編碼的字串，然後再將位元組順序標記 (BOM) 的大小。 此範例接著會呼叫<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法，可儲存至的陣列，然後再呼叫 BOM<xref:System.Text.Encoding.GetBytes%2A>儲存編碼的位元組陣列的方法。 此範例接著會呼叫<xref:System.Text.UnicodeEncoding.GetString%2A>方法來解碼的字串。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 請注意，在此情況下已解碼的字串不同於原始的字串，因為其開頭為 U + FFFD 的 16 位元的位元組順序標記。 這表示兩個字串將會比較結果不相等，而且，如果字串為輸出，BOM 會顯示為取代字元"？"。 若要移除的字串開頭 BOM，您可以呼叫<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="index" /> 和 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
        <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 [.NET Framework 中的字元編碼方式](~/docs/standard/base-types/character-encoding.md)) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>