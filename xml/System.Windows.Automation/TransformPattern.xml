<Type Name="TransformPattern" FullName="System.Windows.Automation.TransformPattern">
  <Metadata><Meta Name="ms.openlocfilehash" Value="78e7a32ea6e6ea04fcc810acc6dfa3eebdc5aebd" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46657321" /></Metadata><TypeSignature Language="C#" Value="public class TransformPattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TransformPattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.TransformPattern" />
  <TypeSignature Language="VB.NET" Value="Public Class TransformPattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class TransformPattern : System::Windows::Automation::BasePattern" />
  <TypeSignature Language="F#" Value="type TransformPattern = class&#xA;    inherit BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>代表可在二維空間內移動、調整大小或旋轉的控制項。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此控制項模式的支援不限於桌面上的物件。 也必須將此控制項模式支援容器物件的子系，只要子系可以移動、 調整大小或旋轉自由地在容器的界限內。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITransformProvider" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md">UI 自動化控制項模式概觀</related>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md">用戶端的 UI 自動化控制項模式</related>
  </Docs>
  <Members>
    <Member MemberName="Cached">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TransformPattern.TransformPatternInformation Cached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TransformPattern/TransformPatternInformation Cached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.TransformPattern.Cached" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cached As TransformPattern.TransformPatternInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TransformPattern::TransformPatternInformation Cached { System::Windows::Automation::TransformPattern::TransformPatternInformation get(); };" />
      <MemberSignature Language="F#" Value="member this.Cached : System.Windows.Automation.TransformPattern.TransformPatternInformation" Usage="System.Windows.Automation.TransformPattern.Cached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TransformPattern+TransformPatternInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Automation.TransformPattern" /> 的快取 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 屬性值。</summary>
        <value>結構，包含控制項模式的快取 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 屬性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取的屬性值必須已先前曾要求使用<xref:System.Windows.Automation.CacheRequest>。 使用<xref:System.Windows.Automation.TransformPattern.Current%2A>取得屬性的目前值。  
  
 如需可用屬性和其用法，請參閱<xref:System.Windows.Automation.TransformPattern.TransformPatternInformation>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求的屬性不在快取中。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanMoveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanMoveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanMoveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanMoveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanMoveProperty As AutomationProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationProperty ^ CanMoveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CanMoveProperty : System.Windows.Automation.AutomationProperty" Usage="System.Windows.Automation.TransformPattern.CanMoveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> 屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.TransformPatternIdentifiers>。  
  
   
  
## Examples  
 在下列範例中，根項目傳遞至函式傳回的集合[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]子系的根，並滿足一組屬性條件的項目。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanResizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanResizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanResizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanResizeProperty As AutomationProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationProperty ^ CanResizeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CanResizeProperty : System.Windows.Automation.AutomationProperty" Usage="System.Windows.Automation.TransformPattern.CanResizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> 屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.TransformPatternIdentifiers>。  
  
   
  
## Examples  
 在下列範例中，根項目傳遞至函式傳回的集合[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]子系的根，並滿足一組屬性條件的項目。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRotateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanRotateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanRotateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanRotateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanRotateProperty As AutomationProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationProperty ^ CanRotateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CanRotateProperty : System.Windows.Automation.AutomationProperty" Usage="System.Windows.Automation.TransformPattern.CanRotateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> 屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.TransformPatternIdentifiers>。  
  
   
  
## Examples  
 在下列範例中，根項目傳遞至函式傳回的集合[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]子系的根，並滿足一組屬性條件的項目。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TransformPattern.TransformPatternInformation Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TransformPattern/TransformPatternInformation Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.TransformPattern.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As TransformPattern.TransformPatternInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TransformPattern::TransformPatternInformation Current { System::Windows::Automation::TransformPattern::TransformPatternInformation get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Automation.TransformPattern.TransformPatternInformation" Usage="System.Windows.Automation.TransformPattern.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TransformPattern+TransformPatternInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Automation.TransformPattern" /> 的目前 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 屬性值。</summary>
        <value>結構，包含控制項模式的目前 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 屬性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模式必須介於<xref:System.Windows.Automation.AutomationElement>與<xref:System.Windows.Automation.AutomationElementMode.Full>參考，以取得目前的值。 如果<xref:System.Windows.Automation.AutomationElement>已取得使用<xref:System.Windows.Automation.AutomationElementMode.None>、 它只快取的資料，包含並嘗試取得任何屬性的目前值引發例外狀況。 使用<xref:System.Windows.Automation.TransformPattern.Cached%2A>來取得快取先前使用指定的屬性值<xref:System.Windows.Automation.CacheRequest>。  
  
 如需可用屬性和其用法，請參閱<xref:System.Windows.Automation.TransformPattern.TransformPatternInformation>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Move(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Move (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Move(double x, double y);" />
      <MemberSignature Language="F#" Value="member this.Move : double * double -&gt; unit" Usage="transformPattern.Move (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">控制項左側的絕對螢幕座標。</param>
        <param name="y">控制項上方的絕對螢幕座標。</param>
        <summary>移動控制項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 物件無法移動、 調整大小或旋轉，使其產生的畫面位置會完全超出座標，其容器，而無法存取以鍵盤或滑鼠。 比方說，當最上層的視窗完全出螢幕外移，或子物件是容器的檢視區界限之外移動。 在這些情況下，物件會放置在接近所要求的螢幕座標被覆寫成容器範圍內的上方或左方座標。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.TransformPattern>控制項模式取自<xref:System.Windows.Automation.AutomationElement>後續會用來移動和<xref:System.Windows.Automation.AutomationElement>。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#103)]
[!code-vb[UIATransformPattern_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> 屬性為 false。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pattern : System.Windows.Automation.AutomationPattern" Usage="System.Windows.Automation.TransformPattern.Pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="T:System.Windows.Automation.TransformPattern" /> 控制項模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.TransformPatternIdentifiers>。  
  
 這類模式識別項傳遞給方法<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>來擷取從指定的控制項模式感興趣的<xref:System.Windows.Automation.AutomationElement>。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.TransformPattern>控制項模式取自<xref:System.Windows.Automation.AutomationElement>。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public void Resize (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Resize(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resize (width As Double, height As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resize(double width, double height);" />
      <MemberSignature Language="F#" Value="member this.Resize : double * double -&gt; unit" Usage="transformPattern.Resize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width">視窗的新寬度 (以像素為單位)。</param>
        <param name="height">視窗的新高度 (以像素為單位)。</param>
        <summary>重新調整控制項大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當控制項上呼叫支援分割窗格時，這個方法可以有副作用的調整大小的其他連續的窗格。  
  
 物件無法移動、 調整大小或旋轉，使其產生的畫面位置會完全超出座標，其容器，而無法存取以鍵盤或滑鼠。 比方說，當最上層的視窗完全出螢幕外移，或子物件是容器的檢視區界限之外移動。 在這些情況下，物件會放置在接近所要求的螢幕座標被覆寫成容器範圍內的上方或左方座標。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.TransformPattern>控制項模式取自<xref:System.Windows.Automation.AutomationElement>後續會用來調整大小和<xref:System.Windows.Automation.AutomationElement>。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#104)]
[!code-vb[UIATransformPattern_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> 屬性為 false。</exception>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (double degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float64 degrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Rotate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rotate (degrees As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rotate(double degrees);" />
      <MemberSignature Language="F#" Value="member this.Rotate : double -&gt; unit" Usage="transformPattern.Rotate degrees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="degrees">項目的旋轉度數。 正數會順時針旋轉，負數會逆時針旋轉。</param>
        <summary>旋轉控制項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 物件無法移動、 調整大小或旋轉，使其產生的畫面位置會完全超出座標，其容器，而無法存取以鍵盤或滑鼠。 比方說，當最上層的視窗完全出螢幕外移，或子物件是容器的檢視區界限之外移動。 在這些情況下，物件會放置在接近所要求的螢幕座標被覆寫成容器範圍內的上方或左方座標。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.TransformPattern>控制項模式取自<xref:System.Windows.Automation.AutomationElement>和後續會用來旋轉<xref:System.Windows.Automation.AutomationElement>。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#102](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#102)]
[!code-vb[UIATransformPattern_snip#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> 屬性為 false。</exception>
      </Docs>
    </Member>
  </Members>
</Type>