<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba79b367856f83c772f8c7971dde04e0ee956e6d" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909942" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在取得 <see cref="T:System.Windows.Automation.AutomationElement" /> 時由使用者介面自動化架構快取的屬性和模式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擷取屬性和模式透過[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]需要慢效能的跨處理序呼叫。 您可以透過快取屬性和模式，在批次作業中的值，來增強應用程式的效能。  
  
 藉由呼叫類別建構函式，建立新的快取要求。 填入要求的方式是重複呼叫<xref:System.Windows.Automation.CacheRequest.Add%2A>方法。  
  
 只有一個<xref:System.Windows.Automation.CacheRequest>作用中。 有兩種方式可以啟動要求：  
  
-   呼叫<xref:System.Windows.Automation.CacheRequest.Activate%2A>在要求上。 這將推送到堆疊，要求和彈出要求，當物件已處置。 若要確保處置，即使例外狀況，使用 從傳回的值<xref:System.Windows.Automation.CacheRequest.Activate%2A>內`using`區塊 (`Using`在 Visual Basic 中)。  
  
-   要求放入內部堆疊，藉由呼叫<xref:System.Windows.Automation.CacheRequest.Push%2A>。 只有在堆疊上最上層的要求為作用中，而且它必須是從堆疊移除的下一個<xref:System.Windows.Automation.CacheRequest.Pop%2A>。 取出要求會停用它。  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 取得當要求為作用中的項目將已快取屬性和指定的模式值。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>快取模式和屬性。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 下列範例示範如何使用<xref:System.Windows.Automation.CacheRequest.Push%2A>和<xref:System.Windows.Automation.CacheRequest.Pop%2A>快取模式和屬性。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Automation.CacheRequest" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Automation.CacheRequest>建立時，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>識別項作為預設屬性加入至快取。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>對於在相同執行緒上要求 <see cref="T:System.Windows.Automation.CacheRequest" /> 時所傳回的項目，將此 <see cref="T:System.Windows.Automation.AutomationElement" /> 設定為項目的現用規格。</summary>
        <returns>可用來處置 <see cref="T:System.Windows.Automation.CacheRequest" /> 的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法通常最好使用是<xref:System.Windows.Automation.CacheRequest.Push%2A>和<xref:System.Windows.Automation.CacheRequest.Pop%2A>做為啟動<xref:System.Windows.Automation.CacheRequest>。 物件會推送到堆疊時<xref:System.Windows.Automation.CacheRequest.Activate%2A>呼叫，並接著推出時加以處置。 若要確保處置，加上傳回的值內`using`區塊 (`Using`在 Visual Basic 中)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>快取模式和屬性。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將屬性或模式識別項加入至 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Automation.CacheRequest>建立物件後，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>識別項作為預設屬性加入至快取。  
  
 將物件與已經在快取要求中沒有任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">指定要快取之模式的識別項。</param>
        <summary>將指定的 <see cref="T:System.Windows.Automation.AutomationPattern" /> 識別項加入至這個 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增快取要求中已存在的模式，沒有任何作用。  
  
   
  
## Examples  
 下列範例示範如何建構<xref:System.Windows.Automation.CacheRequest>並加入快取模式。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> 為使用中。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">指定要快取之屬性值的識別項。</param>
        <summary>將指定的 <see cref="T:System.Windows.Automation.AutomationProperty" /> 識別項加入至這個 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Automation.CacheRequest>建立時，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>識別項作為預設屬性加入至快取。  
  
 加入屬性與已經在快取要求中沒有任何作用。  
  
   
  
## Examples  
 下列範例示範如何建構<xref:System.Windows.Automation.CacheRequest>並新增至快取的內容。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> 為使用中。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定一個值，以指定傳回的項目是否應該包含對基礎[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 的完整參考，或只需要包含快取的資訊。</summary>
        <value>
          如果傳回的項目包含對基礎[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 的完整參考，則為 <see cref="F:System.Windows.Automation.AutomationElementMode.Full" />，否則為 <see cref="F:System.Windows.Automation.AutomationElementMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> 是預設值，並指定傳回項目包含基礎的完整參考[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。 <xref:System.Windows.Automation.AutomationElementMode.None> 指定傳回項目沒有參考至基礎[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]，而且包含僅快取的資訊。  
  
 項目，包括上的特定作業<xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>， <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>，和<xref:System.Windows.Automation.AutomationElement.SetFocus%2A>，需要完整的參考; 嘗試對這些項目，並沒有任何會導致<xref:System.InvalidOperationException>。  
  
 使用<xref:System.Windows.Automation.AutomationElementMode.None>會比較有效率時需要只有屬性，因為它可避免額外負荷涉及設定完整的參考。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A>設<xref:System.Windows.Automation.AutomationElementMode.None>、 與結果，僅快取屬性和模式可供擷取的物件。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立這個 <see cref="T:System.Windows.Automation.CacheRequest" /> 的複本。</summary>
        <returns>目前物件的可修改複本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行緒的使用中 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <value>使用中 <see cref="T:System.Windows.Automation.CacheRequest" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從目前執行緒的內部堆疊中移除使用中 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用 移除目前作用中的要求<xref:System.Windows.Automation.CacheRequest.Pop%2A>方法。 嘗試移除是不目前一個導致例外狀況的要求。  
  
 除非您巢狀結構快取要求，會偏好使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>放置在堆疊上的要求。 原因是，您可以使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>內`using`區塊 (`Using`在 Visual Basic 中)，確保即使發生例外狀況，從堆疊取出要求。  
  
   
  
## Examples  
 下列範例示範如何停用<xref:System.Windows.Automation.CacheRequest>使用<xref:System.Windows.Automation.CacheRequest.Pop%2A>。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試移除並非最後一個推入堆疊的快取要求。</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Windows.Automation.CacheRequest" /> 放入內部狀態堆疊，成為目前執行緒的使用中要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多個<xref:System.Windows.Automation.CacheRequest>物件可以放到狀態堆疊。 必須從發送; 的順序中的堆疊中移除快取要求否則，<xref:System.InvalidOperationException>引發例外狀況。  
  
 除非您巢狀結構快取要求，會偏好使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>放置在堆疊上的要求。 原因是，您可以使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>內`using`區塊 (`Using`在 Visual Basic 中)，確保即使發生例外狀況，從堆疊取出要求。  
  
   
  
## Examples  
 下列範例示範如何啟動<xref:System.Windows.Automation.CacheRequest>使用<xref:System.Windows.Automation.CacheRequest.Push%2A>。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定一個值，以指定在快取時使用的 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]項目樹狀目錄的檢視。</summary>
        <value>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]項目樹狀目錄的檢視。 預設檢視為 <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關檢視[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]項目樹狀目錄中，請參閱[UI 自動化樹狀目錄概觀](~/docs/framework/ui-automation/ui-automation-tree-overview.md)。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Automation.CacheRequest.TreeFilter%2A>設<xref:System.Windows.Automation.Automation.RawViewCondition>使快取是為所有的項目，不論是內容的檢視或控制項檢視的一部分。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定一個值，以指定是否只快取樹狀子目錄的根項目，或也要快取子系或子代。</summary>
        <value>
          <see cref="F:System.Windows.Automation.TreeScope.Element" />、<see cref="F:System.Windows.Automation.TreeScope.Children" />、<see cref="F:System.Windows.Automation.TreeScope.Descendants" /> 或 <see cref="F:System.Windows.Automation.TreeScope.Subtree" /> 其中一個或多個。 預設值是 <see cref="F:System.Windows.Automation.TreeScope.Element" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取的範圍相對於或多個物件正在擷取，不是依據其上的物件<xref:System.Windows.Automation.AutomationElement.FindFirst%2A>或<xref:System.Windows.Automation.AutomationElement.FindAll%2A>呼叫。 請參閱範例。  
  
   
  
## Examples  
 在下列範例中，清單方塊項目取自父視窗項目時<xref:System.Windows.Automation.CacheRequest>為作用中和<xref:System.Windows.Automation.CacheRequest.TreeScope%2A>是<xref:System.Windows.Automation.TreeScope.Children>。 指定之屬性的子項目 （也就是清單項目） 會儲存在快取，而且可以從擷取<xref:System.Windows.Automation.AutomationElement.CachedChildren%2A>清單方塊。  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">嘗試將屬性設定為 <see cref="F:System.Windows.Automation.TreeScope.Parent" /> 或 <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>