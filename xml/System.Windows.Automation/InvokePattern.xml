<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6159d647660e3bb63f3227880e80fcd4efcfbc8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="52eb5-101">表示啟動時並不會維護狀態，而是會啟始或執行明確之單一動作的控制項。</span>
      <span class="sxs-lookup">
        <span data-stu-id="52eb5-101">Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52eb5-102">控制項支援<xref:System.Windows.Automation.InvokePattern>如果未透過其他控制項模式公開相同的行為。</span><span class="sxs-lookup"><span data-stu-id="52eb5-102">Controls support <xref:System.Windows.Automation.InvokePattern> if the same behavior is not exposed through another control pattern.</span></span> <span data-ttu-id="52eb5-103">例如，如果<xref:System.Windows.Automation.InvokePattern.Invoke%2A>在控制項上的方法會執行相同的動作<xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>或<xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>方法中，控制項將不會支援<xref:System.Windows.Automation.InvokePattern>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-103">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control will not support <xref:System.Windows.Automation.InvokePattern>.</span></span>  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]<span data-ttu-id="52eb5-104"> 項目，代表控制項，例如核取方塊和選項按鈕，維護狀態，而是支援<xref:System.Windows.Automation.TogglePattern>或<xref:System.Windows.Automation.SelectionItemPattern>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-104"> elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <xref:System.Windows.Automation.TogglePattern> or <xref:System.Windows.Automation.SelectionItemPattern>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="52eb5-105">傳送要求以啟動控制項，並啟始其單一明確的動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-105">Sends a request to activate a control and initiate its single, unambiguous action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52eb5-106">呼叫<xref:System.Windows.Automation.InvokePattern.Invoke%2A>應該立即傳回而不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="52eb5-106">Calls to <xref:System.Windows.Automation.InvokePattern.Invoke%2A> should return immediately without blocking.</span></span> <span data-ttu-id="52eb5-107">不過，這種行為完全是依據[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]提供者實作。</span><span class="sxs-lookup"><span data-stu-id="52eb5-107">However, this behavior is entirely dependent on the [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] provider implementation.</span></span> <span data-ttu-id="52eb5-108">在案例中的呼叫<xref:System.Windows.Automation.InvokePattern.Invoke%2A>造成封鎖的問題 （例如強制回應對話方塊） 不同的協助程式執行緒可能需要呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="52eb5-108">In scenarios where calling <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52eb5-109">在下列範例中<xref:System.Windows.Automation.InvokePattern>控制項模式取自控制項和<xref:System.Windows.Automation.InvokePattern.Invoke%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="52eb5-109">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="52eb5-110">此項目不支援 <see cref="T:System.Windows.Automation.InvokePattern" /> 控制項模式，或是處於隱藏或封鎖狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-110">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="52eb5-111">項目未啟用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-111">The element is not enabled.</span>
          </span>
          <span data-ttu-id="52eb5-112">當使用者介面自動化提供者對 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> 屬性已實作自己的處理方式時會引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-112">Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="52eb5-113">識別叫用或啟動控制項時引發的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-113">Identifies the event raised when a control is invoked or activated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52eb5-114">使用者介面自動化用戶端應用程式會使用這個識別項。</span><span class="sxs-lookup"><span data-stu-id="52eb5-114">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="52eb5-115">UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.InvokePatternIdentifiers>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-115">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="52eb5-116"><xref:System.Windows.Automation.InvokePattern.InvokedEvent>識別碼會當做參數傳遞<xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-116">The <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier is passed as a parameter to <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52eb5-117">在下列範例中，事件處理常式識別為叫用事件的事件藉由比較<xref:System.Windows.Automation.AutomationEventArgs.EventId%2A>事件引數的<xref:System.Windows.Automation.InvokePattern.InvokedEvent>識別碼欄位。</span><span class="sxs-lookup"><span data-stu-id="52eb5-117">In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier field.</span></span>  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="52eb5-118">識別 <see cref="T:System.Windows.Automation.InvokePattern" /> 控制項模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52eb5-118">Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52eb5-119">使用者介面自動化用戶端應用程式會使用這個識別項。</span><span class="sxs-lookup"><span data-stu-id="52eb5-119">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="52eb5-120">UI 自動化提供者應該使用中的對等欄位<xref:System.Windows.Automation.InvokePatternIdentifiers>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-120">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="52eb5-121">例如，傳遞給方法的模式識別項<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>擷取感興趣之控制項模式，從指定<xref:System.Windows.Automation.AutomationElement>。</span><span class="sxs-lookup"><span data-stu-id="52eb5-121">The pattern identifier is passed to methods such as <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> to retrieve the control pattern of interest from the specified <xref:System.Windows.Automation.AutomationElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52eb5-122">在下列範例中<xref:System.Windows.Automation.InvokePattern>控制項模式取自控制項和<xref:System.Windows.Automation.InvokePattern.Invoke%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="52eb5-122">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>