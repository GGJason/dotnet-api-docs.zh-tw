<Type Name="EncryptedPackageEnvelope" FullName="System.IO.Packaging.EncryptedPackageEnvelope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d13de0354f15e43fe6e836cca6df2e57f369e866" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30419212" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EncryptedPackageEnvelope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EncryptedPackageEnvelope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.EncryptedPackageEnvelope" />
  <TypeSignature Language="VB.NET" Value="Public Class EncryptedPackageEnvelope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncryptedPackageEnvelope : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="2a4ae-101">代表包含加密封裝的 OLE 複合檔案 (Compound File)。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2a4ae-101">Represents an OLE compound file that contains an encrypted package.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-102"><xref:System.IO.Packaging.EncryptedPackageEnvelope> 有沒有公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-102"><xref:System.IO.Packaging.EncryptedPackageEnvelope> has no public constructors.</span></span>  <span data-ttu-id="2a4ae-103"><xref:System.IO.Packaging.EncryptedPackageEnvelope>由使用靜態<xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>， <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>，或<xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-103">An <xref:System.IO.Packaging.EncryptedPackageEnvelope> is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-104">關閉加密封裝及保存該封裝的 OLE 複合檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-104">Closes the encrypted package and the OLE compound file that holds it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a4ae-105">下列範例示範如何使用這個方法來關閉<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-105">The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Open" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-106">建立及傳回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-106">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Create(class System.IO.Stream envelopeStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Create(System::IO::Stream ^ envelopeStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="2a4ae-107">要建立檔案的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-107">The stream on which to create the file.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="2a4ae-108">嵌入在複合檔案中的發行授權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-108">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="2a4ae-109">物件，其決定目前使用者可以對加密內容執行的作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-109">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-110">在指定的資料流上建立及傳回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-110">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> on the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-111">新建立的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-111">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-112">目前使用者具有讀取/寫入存取新的檔案。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-112">The current user has read/write access to the new file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-113">
            <paramref name="envelopeStream" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-113">
              <paramref name="envelopeStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2a4ae-114">
            <paramref name="envelopeStream" /> 未提供讀取/寫入權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-114">
              <paramref name="envelopeStream" /> does not provide read/write access.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Create(string envelopeFileName, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Create(System::String ^ envelopeFileName, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="2a4ae-115">OLE 複合檔案的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-115">The name of the OLE compound file.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="2a4ae-116">嵌入在複合檔案中的發行授權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-116">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="2a4ae-117">物件，其決定目前使用者可以對加密內容執行的作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-117">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-118">建立及傳回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，並為其提供指定的檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-118">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and gives it the specified file name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-119">新建立的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-119">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-120">如果有指定名稱的檔案已經存在，則會覆寫。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-120">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 <span data-ttu-id="2a4ae-121">目前使用者具有讀取/寫入存取檔案。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-121">The current user has read/write access to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-122">
            <paramref name="envelopeFileName" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-122">
              <paramref name="envelopeFileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateFromPackage">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-123">建立及傳回使用現有未加密封裝做為其內容來源的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-123">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses an existing unencrypted package as the source of its content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a4ae-124">下列範例示範如何使用<xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>方法來具現化<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-124">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage(class System.IO.Stream envelopeStream, class System.IO.Stream packageStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ CreateFromPackage(System::IO::Stream ^ envelopeStream, System::IO::Stream ^ packageStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
        <Parameter Name="packageStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="2a4ae-125">要建立檔案的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-125">The stream on which to create the file.</span>
          </span>
        </param>
        <param name="packageStream">
          <span data-ttu-id="2a4ae-126">代表現有未加密封裝的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-126">The stream representing the existing unencrypted package.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="2a4ae-127">嵌入在複合檔案中的發行授權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-127">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="2a4ae-128">物件，其決定目前使用者可以對加密內容執行的作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-128">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-129">建立及傳回使用指定之未加密封裝做為其內容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (在指定的資料流上)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-129">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (on the specified stream) that uses the specified unencrypted package as its content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-130">新建立的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-130">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-131">目前使用者具有讀取/寫入存取新的檔案。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-131">The current user has read/write access to the new file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a4ae-132">下列範例示範如何使用<xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>方法來具現化<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-132">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-133">
            <paramref name="envelopeStream" /> 或 <paramref name="packageStream" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-133">
              <paramref name="envelopeStream" /> or <paramref name="packageStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2a4ae-134">
            <paramref name="envelopeStream" /> 未提供讀取/寫入權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-134">
              <paramref name="envelopeStream" /> does not provide read/write access.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage(string envelopeFileName, class System.IO.Stream packageStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ CreateFromPackage(System::String ^ envelopeFileName, System::IO::Stream ^ packageStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="packageStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="2a4ae-135">OLE 複合檔案的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-135">The name of the OLE compound file.</span>
          </span>
        </param>
        <param name="packageStream">
          <span data-ttu-id="2a4ae-136">代表現有未加密封裝的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-136">The stream representing the existing unencrypted package.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="2a4ae-137">嵌入在複合檔案中的發行授權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-137">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="2a4ae-138">物件，其決定目前使用者可以對加密內容執行的作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-138">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-139">建立及傳回使用指定之未加密封裝做為其內容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，並為其提供指定的檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-139">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses the specified unencrypted package as its content, and gives it the specified file name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-140">新建立的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-140">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-141">如果有指定名稱的檔案已經存在，則會覆寫。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-141">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 <span data-ttu-id="2a4ae-142">目前使用者具有讀取/寫入存取檔案。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-142">The current user has read/write access to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a4ae-143">下列範例示範如何使用<xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>方法來具現化<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-143">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-144">
            <paramref name="envelopeFileName" /> 或 <paramref name="packageStream" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-144">
              <paramref name="envelopeFileName" /> or <paramref name="packageStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-145">釋放 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-145">Releases the resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-146">釋放 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 所使用的所有資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-146">Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-147">呼叫<xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>完成<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-147">Call <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> when finished with a <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span> <span data-ttu-id="2a4ae-148"><xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> 方法會將 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 保留在無法使用的狀態。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-148">The <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> method leaves the <xref:System.IO.Packaging.EncryptedPackageEnvelope> in an unusable state.</span></span> <span data-ttu-id="2a4ae-149">在呼叫<xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>，您必須釋放所有參考<xref:System.IO.Packaging.EncryptedPackageEnvelope>讓記憶體回收行程可以回收記憶體的<xref:System.IO.Packaging.EncryptedPackageEnvelope>所佔用。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-149">After calling <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>, you must release all references to the <xref:System.IO.Packaging.EncryptedPackageEnvelope> so the garbage collector can reclaim the memory that the <xref:System.IO.Packaging.EncryptedPackageEnvelope> was occupying.</span></span> <span data-ttu-id="2a4ae-150">如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-150">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a4ae-151">在您釋放最後一個 <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> 參考之前，請務必呼叫 <xref:System.IO.Packaging.EncryptedPackageEnvelope>。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-151">Always call <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> before you release your last reference to the <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span> <span data-ttu-id="2a4ae-152">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 物件的 <xref:System.Object.Finalize%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-152">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Packaging.EncryptedPackageEnvelope> object's <xref:System.Object.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="2a4ae-153">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-153">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-154">釋放 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-154">Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-155">這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-155">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="2a4ae-156">`Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-156">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="2a4ae-157"><xref:System.Object.Finalize%2A> 叫用`Dispose`與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-157"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="2a4ae-158">當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.IO.Packaging.EncryptedPackageEnvelope>參考。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-158">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.Packaging.EncryptedPackageEnvelope> references.</span></span> <span data-ttu-id="2a4ae-159">這個方法會叫用每個參考物件的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-159">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2a4ae-160">
              <see langword="Dispose" /> 可以被其他物件呼叫多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2a4ae-160">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="2a4ae-161">在覆寫<see langword="Dispose(Boolean)" />小心不要參考物件已處置過的早期呼叫中<see langword="Dispose" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2a4ae-161">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="2a4ae-162">如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2a4ae-162">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="2a4ae-163">如需有關<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2a4ae-163">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-164">取得值，指出開啟檔案時使用的是讀取權限、寫入權限或兩者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-164">Gets a value that specifies whether the file was opened with access to read, write, or both.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2a4ae-165">用於開啟檔案的 <see cref="T:System.IO.FileAccess" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-165">The <see cref="T:System.IO.FileAccess" /> value that was used to open the file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-166">清除 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 及其封裝內容的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-166">Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and its package content.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package GetPackage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.Package GetPackage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPackage () As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::Package ^ GetPackage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-167">取得 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 內的加密封裝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-167">Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-168">封套中的 <see cref="T:System.IO.Packaging.Package" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-168">The <see cref="T:System.IO.Packaging.Package" /> in the envelope.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsEncryptedPackageEnvelope">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-169">取得值，指定檔案是否為具有加密封裝資料流的 OLE 複合檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-169">Gets a value specifying whether the file is an OLE compound file with an encrypted package stream</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsEncryptedPackageEnvelope">
      <MemberSignature Language="C#" Value="public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEncryptedPackageEnvelope(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEncryptedPackageEnvelope(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="2a4ae-170">要測試的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-170">The stream that is tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-171">取得值，指出指定的資料流是否為具有加密封裝資料流的 OLE 複合檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-171">Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-172">如果指定的資料流是具有加密封裝資料流的 OLE 複合檔案，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-172">
              <see langword="true" /> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-173">
            <paramref name="stream" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-173">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEncryptedPackageEnvelope">
      <MemberSignature Language="C#" Value="public static bool IsEncryptedPackageEnvelope (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEncryptedPackageEnvelope(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEncryptedPackageEnvelope (fileName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEncryptedPackageEnvelope(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="2a4ae-174">要測試的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-174">The file that is tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-175">取得值，指出指定的檔案是否為具有加密封裝資料流的 OLE 複合檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-175">Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-176">如果指定的檔案是具有加密封裝資料流的 OLE 複合檔案，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-176">
              <see langword="true" /> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a4ae-177">下列範例會示範如何使用這個方法以測試加密。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-177">The following example shows how to use this method to test for encryption.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a4ae-178">
            <paramref name="fileName" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-178">
              <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-179">開啟 OLE 複合檔案中的加密封裝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-179">Opens the encrypted package in an OLE compound file.</span>
          </span>
        </summary>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(class System.IO.Stream envelopeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeStream As Stream) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::IO::Stream ^ envelopeStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="2a4ae-180">包含加密封裝的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-180">The stream containing the encrypted package.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-181">開啟指定之資料流中的加密封裝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-181">Open the encrypted package in the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-182">要開啟的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-182">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-183">資料流必須加密的封裝。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-183">The stream must have an encrypted package.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="2a4ae-184">檔案內含加密的套件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-184">The file containing the encrypted package.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-185">以唯讀及非共用模式開啟指定之檔案中的加密封裝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-185">Open the encrypted package in the specified file as read only and unshared.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-186">要開啟的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-186">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-187">檔案必須有加密的封裝。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-187">The file must have an encrypted package.</span></span>  
  
 <span data-ttu-id="2a4ae-188">開啟的檔案是唯讀及取消共用。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-188">The opened file is read only and unshared.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String, access As FileAccess) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName, System::IO::FileAccess access);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="2a4ae-189">檔案內含加密的套件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-189">The file containing the encrypted package.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2a4ae-190">存取權的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-190">The type of access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-191">以非共用模式和指定的存取權，開啟指定之檔案中的加密封裝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-191">Open the encrypted package in the specified file as unshared and with the specified access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-192">要開啟的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-192">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-193">檔案必須有加密的封裝。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-193">The file must have an encrypted package.</span></span>  
  
 <span data-ttu-id="2a4ae-194">開啟的檔案會取消。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-194">The opened file is unshared.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare sharing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String, access As FileAccess, sharing As FileShare) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName, System::IO::FileAccess access, System::IO::FileShare sharing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="sharing" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="2a4ae-195">檔案內含加密的套件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-195">The file containing the encrypted package.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2a4ae-196">存取權的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-196">The type of access.</span>
          </span>
        </param>
        <param name="sharing">
          <span data-ttu-id="2a4ae-197">共用的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-197">The type of sharing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a4ae-198">開啟指定之檔案中的加密封裝，並為其提供指定的存取權和共用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-198">Open the encrypted package in the specified file and gives it the specified access and sharing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a4ae-199">要開啟的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-199">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-200">檔案必須有加密的封裝。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-200">The file must have an encrypted package.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-201">取得權限 Managed 文件的核心封裝屬性 (例如 Title 和 Subject)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-201">Gets the core package properties (such as Title and Subject) of the rights managed document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2a4ae-202">封裝的 <see cref="T:System.IO.Packaging.PackageProperties" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-202">The <see cref="T:System.IO.Packaging.PackageProperties" /> for the package.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a4ae-203">這些核心屬性會儲存在標準 OLE 屬性資料流 （\005SummaryInformation 和 \005DocumentSummaryInformation）。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-203">These core properties are stored in the standard OLE property streams (\005SummaryInformation and \005DocumentSummaryInformation).</span></span> <span data-ttu-id="2a4ae-204">核心屬性也會儲存在封裝本身。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-204">The core properties are also stored in the package itself.</span></span> <span data-ttu-id="2a4ae-205">負責應用程式保持這兩組同步處理的屬性。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-205">It is the responsibility of the application to keep the two sets of properties synchronized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightsManagementInformation">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.RightsManagementInformation RightsManagementInformation" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightsManagementInformation As RightsManagementInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::RightsManagementInformation ^ RightsManagementInformation { System::IO::Packaging::RightsManagementInformation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.RightsManagementInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-206">取得儲存在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的版權管理資訊；具體來說就是儲存在包含版權管理保護封裝之 OLE 複合檔案中的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 和 <see cref="T:System.Security.RightsManagement.UseLicense" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-206">Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" /> and the <see cref="T:System.Security.RightsManagement.UseLicense" />s stored in the OLE compound file that embodies the rights-management protected package</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2a4ae-207">封裝的 <see cref="T:System.IO.Packaging.RightsManagementInformation" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-207">The <see cref="T:System.IO.Packaging.RightsManagementInformation" /> for the package.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a4ae-208">下列範例示範如何取得<xref:System.IO.Packaging.RightsManagementInformation>加密封裝所使用的<xref:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="2a4ae-208">The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation%2A> property.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageInfo">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.StorageInfo StorageInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.StorageInfo StorageInfo" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StorageInfo As StorageInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::StorageInfo ^ StorageInfo { System::IO::Packaging::StorageInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.StorageInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a4ae-209">取得可用來存取加密封裝外部之複合檔案資料流的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-209">Gets an object that provides access to the compound file streams outside the encrypted package.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2a4ae-210">
            <see cref="T:System.IO.Packaging.StorageInfo" />，代表加密封裝外部之 OLE 複合檔案中的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a4ae-210">A <see cref="T:System.IO.Packaging.StorageInfo" /> representing streams in the OLE compound file that are outside the encrypted package.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>