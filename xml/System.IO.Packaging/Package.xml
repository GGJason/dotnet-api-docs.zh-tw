<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26e89d81152bf959a5f5d5e7816e69f656353584" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683142" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示可以儲存多個資料物件的容器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> 是抽象類別，可用來將物件組織在單一實體的定義的實體格式，可攜性和能夠有效率地存取。  
  
 ZIP 檔案是主要實體格式<xref:System.IO.Packaging.Package>。  其他<xref:System.IO.Packaging.Package>實作可能會使用其他實體的格式，例如 XML 文件時，如果是資料庫，或 Web 服務。  
  
 項目包含在檔案系統中，例如<xref:System.IO.Packaging.Package>資料夾和檔案的階層式組織中的參考。  
  
 雖然<xref:System.IO.Packaging.Package>本身是抽象類別，<xref:System.IO.Packaging.ZipPackage>依預設會使用衍生的類別<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 A <xref:System.IO.Packaging.PackagePart> （「 部分 」） 是抽象類別，表示儲存在物件<xref:System.IO.Packaging.Package>。  
  
 A <xref:System.IO.Packaging.PackageRelationship> （「 關係 」） 之間定義關聯的來源<xref:System.IO.Packaging.Package>或<xref:System.IO.Packaging.PackagePart>和目標物件。  A<xref:System.IO.Packaging.PackageRelationship>可以是下列其中一種，其中每一個都可以有兩種形式：  
  
-   封裝層級關聯性 (由<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType>方法) 與相關<xref:System.IO.Packaging.Package>為：  
  
    -   封裝中的目標組件。  
  
    -   外部封裝的目標資源。  
  
-   組件層級關聯性 (由<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType>方法) 與來源<xref:System.IO.Packaging.PackagePart>為：  
  
    -   在封裝中的另一個目標組件。  
  
    -   外部封裝的目標資源。  
  
 關聯性的來源<xref:System.IO.Packaging.Package>或來源<xref:System.IO.Packaging.PackagePart>會被視為 「 擁有者 」 的關聯性。  刪除來源物件時，會一併刪除來源物件所擁有的所有關聯性。  建立或刪除的關聯性的程序不會實際變更以任何方式的來源或目標物件。  
  
 A <xref:System.IO.Packaging.PackageDigitalSignature> （「 數位簽章 」） 是組件和關係代表隨附的數位簽章的組成<xref:System.IO.Packaging.Package>。  數位簽章識別建立者，並驗證已簽署組件和關聯性包含在<xref:System.IO.Packaging.Package>尚未經過修改。  
  
 封裝也支援數位版權管理 (DRM) 可讓內容中的項目<xref:System.IO.Packaging.Package>加密與特定存取權限授與授權的使用者。  
  
 根據<xref:System.IO.Packaging.Package>架構，<xref:System.Windows.Xps.Packaging.XpsDocument>是針對儲存在開啟文件而設計的封裝類型[XML Paper Specification (XPS)](http://go.microsoft.com/fwlink/?LinkID=65761)。  
  
 .NET Framework 會使用封裝來儲存內容、 資源和網頁和文件依預設會使用標準的 ZIP 檔案的關聯性。 任何 ZIP 檔案，您的應用程式可以使用<xref:System.IO.Packaging>類別來儲存並選擇性地保護任何類型或能夠有效率地存取單一容器中的資料檔案數目。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範建立的基本步驟<xref:System.IO.Packaging.Package>。  在此範例中，封裝會建立包含搭配的圖形影像會顯示在文件的文件。  (這是類似於其中的 HTML 檔案的情況\<i m g > 標記，參考外部影像檔。)兩個<xref:System.IO.Packaging.PackageRelationship>項目也會包含在封裝。  第一個，「 封裝層級 」 關聯性定義的文件部分封裝的根項目。  第二個、 「 組件層級 」 的關聯性定義的文件部分 （「 來源 」 的組件層級關聯性） 和其使用的映像組件 （""的目標組件層級關聯性） 之間的關聯。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.Package" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">套件的檔案 IO 權限。</param>
        <summary>將使用特定 <see cref="T:System.IO.Packaging.Package" /> 之 <see cref="T:System.IO.FileAccess" /> 類別的新執行個體初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是受保護的建構函式的<xref:System.IO.Packaging.Package>抽象基底類別。 在衍生類別中呼叫時<xref:System.IO.Packaging.Package.%23ctor%2A>建構函式初始化衍生類別的新執行個體。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="openFileAccess" /> 的值無效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
        <Parameter Name="streaming" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">套件的檔案 IO 權限。</param>
        <param name="streaming">
          <see langword="true" /> 表示開啟套件以進行資料流處理，否則為 <see langword="false" />。</param>
        <summary>將使用特定 <see cref="T:System.IO.Packaging.Package" /> 及資料流選項之 <see cref="T:System.IO.FileAccess" /> 類別的新執行個體初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是受保護的建構函式的<xref:System.IO.Packaging.Package>抽象基底的抽象基底類別。 在衍生類別中呼叫時<xref:System.IO.Packaging.Package.%23ctor%2A>建構函式初始化衍生類別的新執行個體。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="openFileAccess" /> 的值無效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存並關閉套件，以及所有基礎組件資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package>類別<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>執行相同的作業，沒有理由来呼叫<xref:System.IO.Packaging.Package.Dispose%2A>如果您呼叫<xref:System.IO.Packaging.Package.Close%2A>，反之亦然。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 和<xref:System.IO.Packaging.Package.Dispose%2A>內部呼叫<xref:System.IO.Packaging.Package.Flush%2A>。  
  
> [!NOTE]
>  `using`陳述式 (不同於`using`命名空間指示詞) 是建議的方式<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>封裝。  [寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)和[讀取封裝範例](http://go.microsoft.com/fwlink/?LinkID=160034)示範如何關閉和處置封裝使用`using`陳述式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立新的套件組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化空<xref:System.IO.Stream>新組件。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可以用來取得組件相關聯的資料流執行個體的參考。  
  
 如需封裝組件的詳細資訊，請參閱 1.1 規格的節開放封裝慣例 (OPC) 可供下載在[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.PackagePart>然後將資料儲存在組件中。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />實際建立組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">新組件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="contentType">資料流的內容類型。</param>
        <summary>以特定 URI 及內容類型建立新的未壓縮組件。</summary>
        <returns>新建立的組件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化空<xref:System.IO.Stream>新組件。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可以用來取得組件相關聯的資料流執行個體的參考。  
  
 組件<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>是<xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>。  
  
 如需有關封裝組件的詳細資訊，請參閱 > 一節 1.1 可供下載開放封裝慣例 (OPC) 規格中的[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.PackagePart>然後將資料儲存在組件中。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">套件中已經存在具有指定之 <paramref name="partUri" /> 的組件。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">套件是唯讀的 (無法新增組件)。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />實際建立組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">新組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="contentType">資料流的內容類型。</param>
        <param name="compressionOption">資料流、<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> 或 <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 壓縮的壓縮選項。</param>
        <summary>以特定 URI、內容類型及壓縮選項建立新組件。</summary>
        <returns>新建立的組件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設<xref:System.IO.Packaging.ZipPackage>衍生的類別，<xref:System.IO.Packaging.Package.CreatePart%2A>方法只支援兩個`compressionOption`值<xref:System.IO.Packaging.CompressionOption.NotCompressed>或<xref:System.IO.Packaging.CompressionOption.Normal>壓縮。  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption.Maximum>， <xref:System.IO.Packaging.CompressionOption.Fast>，或<xref:System.IO.Packaging.CompressionOption.SuperFast>使用<xref:System.IO.Packaging.CompressionOption.Normal>壓縮。  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 建立空<xref:System.IO.Stream>新組件。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可以用來取得組件相關聯的資料流執行個體的參考。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.PackagePart>然後將資料儲存在組件中。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">套件中已經存在具有指定之 <paramref name="partUri" /> 的組件。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionOption" /> 值不是有效的。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">套件是唯讀的 (無法新增組件)。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />實際建立組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">所建立之組件的[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="contentType">資料流的內容類型。</param>
        <param name="compressionOption">資料流的壓縮選項。</param>
        <summary>在衍生類別中覆寫時，請在套件中建立新的組件。</summary>
        <returns>建立的組件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生<xref:System.IO.Packaging.Package.CreatePartCore%2A>方法透過呼叫<xref:System.IO.Packaging.Package.CreatePart%2A>建立組件的方法為基礎的實體格式，衍生類別中實作。  
  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象類別實作<xref:System.IO.Packaging.Package>類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.CreatePart%2A>會在內部呼叫<xref:System.IO.Packaging.Package.CreatePartCore%2A>的<xref:System.IO.Packaging.ZipPackage>ZIP 檔案中建立新的組件的類別。  
  
 預設<xref:System.IO.Packaging.ZipPackage>衍生的類別，<xref:System.IO.Packaging.Package.CreatePartCore%2A>方法只支援兩個`compressionOption`值<xref:System.IO.Packaging.CompressionOption.NotCompressed>或<xref:System.IO.Packaging.CompressionOption.Normal>壓縮。  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption.Maximum>， <xref:System.IO.Packaging.CompressionOption.Fast>，或<xref:System.IO.Packaging.CompressionOption.SuperFast>使用<xref:System.IO.Packaging.CompressionOption.Normal>壓縮。  
  
 如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />實作應該進行的順序或所執行的作業不作任何假設<see cref="Overload:System.IO.Packaging.Package.CreatePart" />方法呼叫它。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立特定組件的套件層級關係。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。  
  
-   之間<xref:System.IO.Packaging.Package>目標<xref:System.IO.Packaging.PackagePart>封裝內。  
  
-   之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。  
  
 封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  建立或刪除的關聯性的程序不會實際變更的目標組件或以任何方式的資源。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例會說明如何建立<xref:System.IO.Packaging.PackageRelationship>之間<xref:System.IO.Packaging.Package>和根文件部分。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目標組件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="targetMode">指出目標組件是套件的 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定義關聯性角色的 URI。</param>
        <summary>以特定 URI、目標模式及關聯性類型建立套件層級關係。</summary>
        <returns>指定之組件的套件層級關係。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。  
  
-   之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。  
  
-   之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。  
  
 封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不會實際變更的目標組件或以任何方式的資源。  
  
 關聯性的目標不能是另一個關聯性。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必須是相對 URI，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  內部的相對 URI 可以是絕對路徑，開頭為斜線 （"/"） 字元例如"/ page1.xaml"或"/ images/picture4.jpg"，或相對路徑，例如 「.../ imagespicture1.jpg"解析針對封裝根目錄 （"/"） 做為基底 URI。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一個絕對或相對 URI 格式根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  「http://www.microsoft.com/page2.xml」 是絕對 URI 參照外部的目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg"是相對 URI，也會參考外部的目標資源 」 1.jpg"但可解析針對封裝本身的 URI 的範例。  
  
 `relationshipType` 必須是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。  
  
|封裝層級關聯性|URI 的關聯性類型|  
|---------------------------------|---------------------------|  
|核心屬性|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性|  
|數位簽章|http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/簽章|  
|數位簽章憑證|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章憑證|  
|數位簽章來源|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章來源|  
|縮圖|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/縮圖|  
  
 如需封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例說明如何使用<xref:System.IO.Packaging.Package.CreateRelationship%2A>建立<xref:System.IO.Packaging.PackageRelationship>之間<xref:System.IO.Packaging.Package>和根文件部分。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 組件是 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 且 <paramref name="targetUri" /> 是絕對 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 的值無效。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目標組件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="targetMode">指出目標組件是套件的 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定義關聯性角色的 URI。</param>
        <param name="id">唯一的 XML 識別項。</param>
        <summary>以特定 URI、目標模式、關聯性類型及[!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)] 建立套件層級關係。</summary>
        <returns>指定之組件的套件層級關係。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。  
  
-   之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。  
  
-   之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。  
  
 封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不會實際變更的目標組件或以任何方式的資源。  
  
 關聯性的目標不能是另一個關聯性。  
  
 `id` 必須是有效的 XML 識別碼。  `id`型別是 xsd:ID，且必須遵照 XML 結構描述第 2 部分中所指定的命名慣例： 資料類型規格 (請參閱[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 如果`id`指定為`null`就會自動產生的唯一識別碼。  `id`指定空字串無效。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必須是相對 URI，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  內部的相對 URI 可以是絕對路徑，開頭為斜線 （"/"） 字元例如"/ page1.xaml"或"/ images/picture4.jpg"，或相對路徑，例如 「.../ imagespicture1.jpg"解析針對封裝根目錄 （"/"） 做為基底 URI。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一個絕對或相對 URI 格式根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  「http://www.microsoft.com/page2.xml」 是絕對 URI 參照外部的目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg"是相對 URI，也會參考外部的目標資源 」 1.jpg"但可解析針對封裝本身的 URI 的範例。  
  
 `relationshipType` 必須是根據不正確的 URI [RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。  
  
|封裝層級關聯性|URI 的關聯性類型|  
|---------------------------------|---------------------------|  
|核心屬性|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性|  
|數位簽章|http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/簽章|  
|數位簽章憑證|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章憑證|  
|數位簽章來源|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章來源|  
|縮圖|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/縮圖|  
  
 如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例說明如何使用<xref:System.IO.Packaging.Package.CreateRelationship%2A>建立<xref:System.IO.Packaging.PackageRelationship>之間<xref:System.IO.Packaging.Package>和根文件部分。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 組件是 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 且 <paramref name="targetUri" /> 是絕對 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 的值無效。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 識別項，或是套件中已存在具有指定之 <paramref name="id" /> 的組件。</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要刪除之組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <summary>刪除套件中具有特定 URI 的組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必須是相對 URI 的絕對路徑的開頭為斜線 （"/"） 字元所組成。  絕對路徑會相對於封裝根目錄，而且根據的正確[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  "/ page1.xaml 」 和 「 / images/picture4.jpg"是有效的組件 Uri 的範例。  
  
 如果具有指定的組件，會引發任何例外狀況`partUri`不是在封裝中。  (您可以使用<xref:System.IO.Packaging.Package.PartExists%2A>方法，以判斷是否包含指定的組件`partUri`套件中。)  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />實際刪除組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要刪除之 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" />。</param>
        <summary>在衍生類別中覆寫時，刪除具有特定 URI 的組件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象類別實作<xref:System.IO.Packaging.Package>類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.DeletePart%2A>會在內部呼叫<xref:System.IO.Packaging.Package.DeletePartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別以執行實際刪除實體衍生類別中實作的格式為基礎的作業。  
  
 如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生的類別<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />實作會呼叫<see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />指定之組件的方法為基礎的實體格式，衍生類別中實作。  
  
 在衍生<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />實作應該進行的順序或所執行的作業不作任何假設<see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />方法呼叫它。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要刪除之 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的 <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
        <summary>刪除套件層級關係。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。  
  
-   之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。  
  
-   之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。  
  
 封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  
  
 如果具有指定的關聯性，會引發任何例外狀況`id`不是在封裝中。  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> 不會實際變更目標組件，以任何方式。  
  
 如需封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 識別項。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>清除並儲存所有組件與關聯性的內容、關閉套件，然後釋放所有的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要確定所有變更正確都儲存<xref:System.IO.Packaging.Package.Dispose%2A>也完成、 排清，並關閉所有的組件和包含在封裝中的關聯性。  
  
 如<xref:System.IO.Packaging.Package>類別<xref:System.IO.Packaging.Package.Dispose%2A>和<xref:System.IO.Packaging.Package.Close%2A>執行相同的作業-沒有理由来呼叫<xref:System.IO.Packaging.Package.Dispose%2A>如果您呼叫<xref:System.IO.Packaging.Package.Close%2A>，反之亦然。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 和<xref:System.IO.Packaging.Package.Dispose%2A>內部呼叫<xref:System.IO.Packaging.Package.Flush%2A>。  
  
 其中配置和管理非記憶體資源的衍生的類別應該覆寫此方法以釋放資源時<xref:System.IO.Packaging.Package.Dispose%2A>呼叫。 衍生類別覆寫也應該呼叫<xref:System.IO.Packaging.Package.Flush%2A>和基底類別<xref:System.IO.Packaging.Package.Dispose%2A>方法，以確定該基底類別清除一律會執行。  
  
> [!NOTE]
>  `using`陳述式 (不同於`using`命名空間指示詞) 是建議的方式<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>封裝。 [寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)示範如何關閉和處置封裝使用`using`陳述式。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得套件的檔案存取設定。</summary>
        <value>其中一個 <see cref="T:System.IO.FileAccess" /> 值：<see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A> 屬性沒有預設值。  檔案存取設定中指定<xref:System.IO.Packaging.Package.%23ctor%2A>建構函式呼叫，當您建立新的封裝，或在<xref:System.IO.Packaging.Package.Open%2A>開啟現有的封裝時呼叫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存套件包含的所有組件及關聯性的內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> 在衍生的類別會在內部呼叫<xref:System.IO.Packaging.Package.FlushCore%2A>執行實際的特定格式的排清作業的實作。  在衍生的類別的<xref:System.IO.Packaging.Package.FlushCore%2A>方法會負責實際儲存特定實體的衍生的類別實作的組件和關聯性內容。  
  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。 在預設作業<xref:System.IO.Packaging.Package.Flush%2A>會在內部呼叫<xref:System.IO.Packaging.Package.FlushCore%2A>ZIP 檔案封裝中儲存的組件和關聯性。  
  
 <xref:System.IO.Packaging.Package.Flush%2A> 就會呼叫自動<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>方法。  當<xref:System.IO.Packaging.Package.Close%2A>或<xref:System.IO.Packaging.Package.Dispose%2A>會呼叫您不需要呼叫<xref:System.IO.Packaging.Package.Flush%2A>分開。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">套件是唯讀的，無法修改。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.FlushCore" />實際上排清的組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，將所有組件與關聯性的內容儲存到衍生類別存放區。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> 會呼叫<xref:System.IO.Packaging.Package.Flush%2A>實體衍生類別中實作的格式為基礎的方法，以執行實際的清除作業。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生<see cref="M:System.IO.Packaging.Package.FlushCore" />實作不應做任何假設的順序或所執行的作業<see cref="M:System.IO.Packaging.Package.Flush" />方法呼叫它。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要傳回之組件的[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>傳回具有特定 URI 的組件。</summary>
        <returns>具有指定之 <paramref name="partUri" /> 的組件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException>如果具有指定的組件，會擲回`partUri`不存在。  
  
 <xref:System.IO.Packaging.Package.PartExists%2A>方法可以用來判斷是否`partUri`參考現有的組件。  
  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.GetPart%2A>會在內部呼叫<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別，以傳回要求的組件從 ZIP 檔案。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例會示範如何找出、 擷取及讀取包含在封裝的組件。  如需完整範例，請參閱[讀取封裝範例](http://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">具有指定之 <paramref name="partUri" /> 的組件不在套件內。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />實際上排清的組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要擷取之組件的[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>在衍生類別中覆寫時，傳回由特定 URI 定址的組件。</summary>
        <returns>要求的組件；或者，如果具有指定之 <paramref name="partUri" /> 的組件不存在套件中，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.GetPart%2A>會在內部呼叫<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別來擷取從 ZIP 檔案的一部分。  
  
 如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生的類別<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />實作會呼叫<see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />實體衍生類別中實作的格式為基礎的方法來存取，並傳回指定的組件。  
  
 在衍生<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />實作應該進行的順序或所執行的作業不作任何假設<see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />方法呼叫它。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回套件中所有組件的集合。</summary>
        <returns>包含在套件中的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 項目的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> 傳回一組所包含的所有組件中封裝包括<xref:System.IO.Packaging.PackageRelationship>組件。  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> 永遠不會傳回`null`; 不過，如果封裝不包含的任何部分，傳回的集合將包含零個元素。  
  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.GetParts%2A>呼叫<xref:System.IO.Packaging.Package.GetPartsCore%2A>方法<xref:System.IO.Packaging.ZipPackage>類別，以傳回組件從 ZIP 檔案。  
  
 如需封裝和封裝組件的詳細資訊，請參閱 1.1 規格的節開放封裝慣例 (OPC) 可供下載在[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.IO.Packaging.Package.GetParts%2A>方法，以取得組件中所包含的集合<xref:System.IO.Packaging.Package>。  完成程式的原始程式碼，請參閱[建立數位簽章範例封裝](http://go.microsoft.com/fwlink/?LinkID=159966)。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> 在衍生的類別會在內部呼叫<see cref="M:System.IO.Packaging.Package.GetPartsCore" />實際上排清的組件的方法為基礎的實體格式，衍生類別中實作。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，傳回套件中所有組件的陣列。</summary>
        <returns>包含在套件中的所有組件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生的類別<xref:System.IO.Packaging.Package.GetPartsCore%2A>實作會呼叫<xref:System.IO.Packaging.Package.GetParts%2A>實體衍生類別中實作的格式為基礎的方法來存取，並傳回組件的陣列。  
  
 根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>類別會提供和使用。  在預設作業<xref:System.IO.Packaging.Package.GetParts%2A>會在內部呼叫<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別來擷取組件從 ZIP 檔案。  
  
 如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生<see cref="M:System.IO.Packaging.Package.GetPartsCore" />實作應該進行的順序或所執行的作業不作任何假設<see cref="M:System.IO.Packaging.Package.GetParts" />方法呼叫它。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要傳回之關聯性的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>傳回具有特定識別項的套件層級關係。</summary>
        <returns>具有指定之 <paramref name="id" /> 的套件層級關係。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必須是有效的 XML 識別碼。  `id`型別是 xsd:ID，且必須遵照 XML 結構描述第 2 部分中所指定的命名慣例： 資料類型規格 (請參閱[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 識別項。</exception>
        <exception cref="T:System.InvalidOperationException">具有指定之 <paramref name="id" /> 的關聯性不在套件內。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回所有套件層級關係的集合。</summary>
        <returns>包含在套件中的所有套件層級關係的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 永遠不會傳回`null`; 不過，如果封裝不包含封裝層級關聯性，傳回的集合可能包含零個元素。  
  
 封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。  
  
-   之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。  
  
-   之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。  
  
 封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  建立或刪除的關聯性的程序不會實際變更的目標組件或以任何方式的資源。  
  
 如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">要進行比對並傳回集合的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>傳回符合特定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 的所有套件層級關係的集合。</summary>
        <returns>符合指定之 <paramref name="relationshipType" /> 的套件層級關係的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 永遠不會傳回`null`; 不過，如果沒有符合指定的封裝層級關聯性，傳回的集合可能包含零個元素`relationshipType`。  
  
 下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。  
  
|封裝層級關聯性|URI 的關聯性類型|  
|---------------------------------|---------------------------|  
|核心屬性|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性|  
|數位簽章|http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/簽章|  
|數位簽章憑證|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章憑證|  
|數位簽章來源|http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章來源|  
|縮圖|http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/縮圖|  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例會示範如何擷取封裝所定義的關聯性。  如需完整範例，請參閱[讀取封裝範例](http://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> 為空字串。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟封裝。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.Package>，結合<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>項目及儲存的資料。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">開啟封裝所在的 IO 資料流。</param>
        <summary>開啟位於特定 IO 資料流上的套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">要開啟的套件需要讀取或讀寫權限，而指定的 <paramref name="stream" /> 是唯寫，或是要開啟的套件需要寫入或讀寫權限，而指定的 <paramref name="stream" /> 是唯讀。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">封裝的路徑和檔名。</param>
        <summary>開啟特定路徑與檔名的封裝。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 這<xref:System.IO.Packaging.Package.Open%2A>方法會使用預設屬性來開啟封裝<xref:System.IO.FileMode.OpenOrCreate>， <xref:System.IO.FileAccess.ReadWrite>，和<xref:System.IO.FileShare.None>（以指定不同的屬性會使用其中一個其他的 Open 方法多載）。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.Package>，結合<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>項目及儲存的資料。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">開啟封裝所在的 IO 資料流。</param>
        <param name="packageMode">開啟套件的檔案模式。</param>
        <summary>使用特定 IO 資料流及檔案模式開啟套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 值無效。</exception>
        <exception cref="T:System.IO.IOException">要開啟的套件需要讀取或讀寫權限，而指定的 <paramref name="stream" /> 是唯寫，或是要開啟的套件需要寫入或讀寫權限，而指定的 <paramref name="stream" /> 是唯讀。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">封裝的路徑和檔名。</param>
        <param name="packageMode">開啟套件的檔案模式。</param>
        <summary>使用特定檔案模式開啟位於特定路徑的套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 這<xref:System.IO.Packaging.Package.Open%2A>方法會使用預設屬性來開啟封裝<xref:System.IO.FileAccess.ReadWrite>和<xref:System.IO.FileShare.None>（以指定不同的屬性會使用其中一個其他的 Open 方法多載）。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.Package>，結合<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>項目及儲存的資料。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 的值無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">開啟封裝所在的 IO 資料流。</param>
        <param name="packageMode">開啟套件的檔案模式。</param>
        <param name="packageAccess">開啟套件的檔案存取。</param>
        <summary>使用特定 IO 資料流、檔案模式及檔案存取設定開啟套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值無效。</exception>
        <exception cref="T:System.IO.IOException">要開啟的套件需要讀取或讀寫權限，而指定的 <paramref name="stream" /> 是唯寫，或是要開啟的套件需要寫入或讀寫權限，而指定的 <paramref name="stream" /> 是唯讀。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">封裝的路徑和檔名。</param>
        <param name="packageMode">開啟套件的檔案模式。</param>
        <param name="packageAccess">開啟套件的檔案存取。</param>
        <summary>使用特定檔案模式及檔案存取設定，開啟位於特定路徑的套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 這<xref:System.IO.Packaging.Package.Open%2A>方法預設值開啟封裝<xref:System.IO.FileShare.None>屬性 (若要指定不同的屬性使用<xref:System.IO.Packaging.Package.Open%2A>方法多載)。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何開啟和讀取<xref:System.IO.Packaging.Package>包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>項目及儲存的資料。  如需完整範例，請參閱[讀取封裝範例](http://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">封裝的路徑和檔名。</param>
        <param name="packageMode">開啟套件的檔案模式。</param>
        <param name="packageAccess">開啟套件的檔案存取。</param>
        <param name="packageShare">用來開啟套件的檔案共用模式。</param>
        <summary>使用特定檔案模式、檔案存取及檔案共用設定，開啟位於特定路徑的套件。</summary>
        <returns>已開啟的套件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是預設封裝類型，以供<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
   
  
## Examples  
 下列範例示範如何建立新<xref:System.IO.Packaging.Package>，結合<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>項目及儲存的資料。  如需完整範例，請參閱[寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" />、<paramref name="packageAccess" /> 或 <paramref name="packageShare" /> 的值無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得套件的核心屬性。</summary>
        <value>套件的核心屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關核心封裝屬性的詳細資訊，請參閱第 3.1 節可供下載開放封裝慣例 (OPC) 規格中的在[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要檢查之組件的 <see cref="T:System.Uri" />。</param>
        <summary>指出套件中是否存在具有特定 URI 的組件。</summary>
        <returns>
          如果套件內已經存在具有指定之 <paramref name="partUri" /> 的組件，就是 <see langword="true" />，否則就是 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri`開頭應該是正斜線字元"/"，而且是絕對根目錄中的封裝。  
  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">套件是唯寫的 (無法讀取資訊)。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要檢查之關聯性的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>指出套件中是否包含具有特定 ID 的套件層級關係。</summary>
        <returns>
          如果套件裝包含具有指定之 <paramref name="id" /> 的套件層級關係，就是 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 識別項。</exception>
        <exception cref="T:System.ObjectDisposedException">套件沒有開啟 (已呼叫 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的。</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>這個成員支援 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基礎結構，但不建議用於應用程式。  請改用類型安全的 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>