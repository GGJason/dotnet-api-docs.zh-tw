<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17689b0f14224a312a02e2a0b4b556ea430ede87" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48653772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示搭配 <see cref="T:System.IO.Packaging.Package" /> 一起使用之應用程式特有的 <see cref="T:System.IO.Packaging.PackWebRequest" /> 執行個體 (Instance) 集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageStore>定義封裝的參考集合已開啟並作用中應用程式。  套件新增至<xref:System.IO.Packaging.PackageStore>存取是由其索引鍵的 URI 值。  <xref:System.IO.Packaging.PackageStore>支援三種常見的用法：  
  
1.  存取<xref:System.IO.Packaging.PackagePart>透過資料<xref:System.IO.Packaging.PackWebRequest>。  
  
2.  應用程式取得的執行個體<xref:System.IO.Packaging.Package>指定套件的 URI。  
  
3.  存取會建立並儲存在封裝<xref:System.IO.MemoryStream>。  
  
 若要改善效能，並將重複的檔案開啟/關閉作業的額外負荷降至最低<xref:System.IO.Packaging.PackageStore>用來管理封裝所存取的執行個體<xref:System.IO.Packaging.PackWebRequest>，直接由應用程式。  當存取資料，在封裝中，<xref:System.IO.Packaging.Package>位址的要求<xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackagePart.Uri%2A>會先檢查封裝是否已經定義並在中開啟<xref:System.IO.Packaging.PackageStore>。  如果封裝定義在中，開啟<xref:System.IO.Packaging.PackageStore>，要求組件可以存取直接不重複開啟和關閉每個要求的套件。  
  
 如果您的應用程式開啟的套件<xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>，<xref:System.IO.Packaging.PackageStore.AddPackage%2A>可以呼叫以將封裝加入<xref:System.IO.Packaging.PackageStore>。  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 稍後應該呼叫以從封裝移除<xref:System.IO.Packaging.PackageStore>才能呼叫<xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>。  
  
 XPS 封裝以開啟<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>建構函式會自動新增和移除<xref:System.IO.Packaging.PackageStore>文件時建立和處置。  (您不需要呼叫<xref:System.IO.Packaging.PackageStore.AddPackage%2A>或是<xref:System.IO.Packaging.PackageStore.RemovePackage%2A>個別的 XPS 封裝以開啟時，才<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>建構函式。)  
  
 透過存取封裝的檔案 I/O 權限<xref:System.IO.Packaging.PackageStore>會保持開啟時，封裝上設定的 I/O 權限相同。  <xref:System.IO.Packaging.PackageStore>只提供已新增在存放區的套件參考。  它是由應用程式正確地開啟、 更新和關閉每個封裝。  
  
 套件新增至<xref:System.IO.Packaging.PackageStore>搭配使用時可在多執行緒環境中存取[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]剖析器，例如<xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>。  多執行緒環境中作業時，應用程式必須鎖定之前存取封裝。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">要在 <see cref="T:System.IO.Packaging.PackWebRequest" /> 中比較之「套件」<c></c>的關鍵 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="package">要加入至存放區的封裝。</param>
        <summary>將 <see cref="T:System.IO.Packaging.Package" /> 加入至存放區。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 定義封裝的索引鍵進行比較，當您呼叫的 URI <xref:System.IO.Packaging.PackWebRequest>。  
  
 如果`packageUri`符合<xref:System.IO.Packaging.PackagePart.Uri%2A>for<xref:System.IO.Packaging.PackagePart>中<xref:System.IO.Packaging.PackWebRequest>呼叫時，封裝中定義<xref:System.IO.Packaging.PackageStore>用來存取要求的組件。  
  
 如果`packageUri`se neshoduje <xref:System.IO.Packaging.PackagePart.Uri%2A> for<xref:System.IO.Packaging.PackagePart>在<xref:System.IO.Packaging.PackWebRequest>呼叫時，使用指定的 URI 封裝會開啟到存取要求的組件。  
  
 **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有的自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 類型。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> 是無效的封裝 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">存放區中已有具有指定之 <paramref name="packageUri" /> 的封裝。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">所要傳回之封裝的[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>從存放區傳回具有指定之 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 的 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <returns>具有指定之 <paramref name="packageUri" /> 的封裝；如果具有指定之 <paramref name="packageUri" /> 的封裝不在存放區中，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 會比對 uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法呼叫。  
  
 **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有的自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 類型。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.IO.Packaging.PackageStore.GetPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> 是無效的封裝 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">所要移除之封裝的[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>將具有指定之 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 的 <see cref="T:System.IO.Packaging.Package" /> 從存放區中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 會比對 uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法呼叫。  
  
 **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有的自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 類型。  
  
   
  
## Examples  
 下列範例示範如何使用 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> 是無效的封裝 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>