<Type Name="PackagePart" FullName="System.IO.Packaging.PackagePart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd36673001d31d8622d2ce270e9819b862ca76e2" /><Meta Name="ms.sourcegitcommit" Value="0609891c89ddaa91e4c02970acb00072fcc29baf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/13/2019" /><Meta Name="ms.locfileid" Value="65558082" /></Metadata><TypeSignature Language="C#" Value="public abstract class PackagePart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PackagePart extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackagePart" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PackagePart" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackagePart abstract" />
  <TypeSignature Language="F#" Value="type PackagePart = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供基底類別的組件儲存在<see cref="T:System.IO.Packaging.Package" />。  這個類別是抽象的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.IO.Packaging.PackagePart>包含三個基本元素：  
  
|Access|描述|  
|------------|-----------------|  
|<xref:System.IO.Packaging.PackagePart.Uri%2A>|[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]組件。|  
|<xref:System.IO.Packaging.PackagePart.ContentType%2A>|[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容資料流的類型。|  
|<xref:System.IO.Packaging.PackagePart.GetStream%2A>|組件的內容資料流。|  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [WPF 中的 Pack URI](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md)  
  
 [開放封裝慣例規格](https://go.microsoft.com/fwlink/?LinkID=71255)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="package">父代<see cref="T:System.IO.Packaging.Package" />組件。</param>
        <param name="partUri">組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相對於父 <see cref="T:System.IO.Packaging.Package" /> 根目錄。</param>
        <summary>初始化的新執行個體<see cref="T:System.IO.Packaging.PackagePart" />類別使用指定的父<see cref="P:System.IO.Packaging.PackagePart.Package" />和部分[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必須是有效<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根據形成[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格和[開放封裝慣例](https://go.microsoft.com/fwlink/?LinkID=71255)規格。  
  
 使用這個建構函式時<xref:System.IO.Packaging.PackagePart.ContentType%2A>組件不立即知道，且將稍後當<xref:System.IO.Packaging.Package.CreatePart%2A>呼叫。  
  
 根據預設，<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>組件的屬性會初始化為<xref:System.IO.Packaging.CompressionOption.NotCompressed>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri, contentType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="package">父代<see cref="T:System.IO.Packaging.Package" />組件。</param>
        <param name="partUri">組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相對於父 <see cref="T:System.IO.Packaging.Package" /> 根目錄。</param>
        <param name="contentType">[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容的部分資料流的類型。</param>
        <summary>初始化的新執行個體<see cref="T:System.IO.Packaging.PackagePart" />類別使用指定的父<see cref="P:System.IO.Packaging.PackagePart.Package" />、 組件[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，和[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容類型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必須是有效<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根據形成[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格和[開放封裝慣例](https://go.microsoft.com/fwlink/?LinkID=71255)規格。  
  
 根據預設，<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>組件的屬性會初始化為<xref:System.IO.Packaging.CompressionOption.NotCompressed>。  
  
 `contentType` 必須是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]根據以型別構成[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文字傳輸通訊協定為 HTTP*，區段 3.7。  下表顯示內容的範例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中所使用的型別[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文件。  
  
|描述|內容類型|  
|-----------------|------------------|  
|字型|application/vnd.ms-opentype|  
|ICC 設定檔|application/vnd.ms-color.iccprofile|  
|JPEG 影像|image/jpeg|  
|模糊化的字型|application/vnd.ms-package.obfuscated-opentype|  
|PNG 影像|image/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 影像|tiff 影像 /|  
|Windows Media Photo 影像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri, contentType, compressionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="package">父代<see cref="T:System.IO.Packaging.Package" />組件。</param>
        <param name="partUri">組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相對於父 <see cref="T:System.IO.Packaging.Package" /> 根目錄。</param>
        <param name="contentType">[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容的組件的資料流的類型。</param>
        <param name="compressionOption">部分資料流的壓縮選項。</param>
        <summary>初始化的新執行個體<see cref="T:System.IO.Packaging.PackagePart" />類別使用指定的父<see cref="P:System.IO.Packaging.PackagePart.Package" />、 組件[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容類型和<see cref="T:System.IO.Packaging.CompressionOption" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必須是有效<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根據形成[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格和[開放封裝慣例](https://go.microsoft.com/fwlink/?LinkID=71255)規格。  
  
 `contentType` 必須是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]根據以型別構成[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文字傳輸通訊協定為 HTTP*，區段 3.7。  下表顯示內容的範例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中所使用的型別[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文件。  
  
|描述|內容類型|  
|-----------------|------------------|  
|字型|application/vnd.ms-opentype|  
|ICC 設定檔|application/vnd.ms-color.iccprofile|  
|JPEG 影像|image/jpeg|  
|模糊化的字型|application/vnd.ms-package.obfuscated-opentype|  
|PNG 影像|image/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 影像|tiff 影像 /|  
|Windows Media Photo 影像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" />值無效。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <Member MemberName="CompressionOption">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.CompressionOption CompressionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Packaging.CompressionOption CompressionOption" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompressionOption As CompressionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::CompressionOption CompressionOption { System::IO::Packaging::CompressionOption get(); };" />
      <MemberSignature Language="F#" Value="member this.CompressionOption : System.IO.Packaging.CompressionOption" Usage="System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.CompressionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得組件內容資料流的壓縮選項。</summary>
        <value>組件內容資料流的壓縮選項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 是唯讀屬性，可存取時，才父<xref:System.IO.Packaging.Package>已開啟。  
  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A>屬性會由自動設定<xref:System.IO.Packaging.PackagePart.%23ctor%2A>建構函式。  設定建構函式之後,<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>無法變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string" Usage="System.IO.Packaging.PackagePart.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容資料流的類型。</summary>
        <value>[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]的組件的內容資料流的類型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 是唯讀屬性，可存取時，才父<xref:System.IO.Packaging.Package>已開啟。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A>屬性會由自動設定<xref:System.IO.Packaging.PackagePart.%23ctor%2A>建構函式。  設定建構函式之後,<xref:System.IO.Packaging.PackagePart.ContentType%2A>無法變更。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A>屬性是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]根據以型別構成[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文字傳輸通訊協定為 HTTP*，區段 3.7。  下表顯示內容的範例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中所使用的型別[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文件。  
  
|描述|內容類型|  
|-----------------|------------------|  
|字型|application/vnd.ms-opentype|  
|ICC 設定檔|application/vnd.ms-color.iccprofile|  
|JPEG 影像|image/jpeg|  
|模糊化的字型|application/vnd.ms-package.obfuscated-opentype|  
|PNG 影像|image/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 影像|tiff 影像 /|  
|Windows Media Photo 影像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。  
  
-或- 
在衍生類別所傳回的字串<see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />是空的方法。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立組件層級之間的關聯性這<see cref="T:System.IO.Packaging.PackagePart" />到指定的目標<see cref="T:System.IO.Packaging.PackagePart" />或外部的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組件層關係定義這個組件的目標組件或資源之間的關聯。  組件層級關聯性可以是兩種形式之一。  
  
-   來源之間<xref:System.IO.Packaging.PackagePart>到目標<xref:System.IO.Packaging.PackagePart>內<xref:System.IO.Packaging.Package>。  
  
-   來源<xref:System.IO.Packaging.PackagePart>封裝外部的目標資源。  
  
 在部分關聯性來源組件會被視為 「 擁有者 」 的關聯性。  刪除來源組件時，會一併刪除組件所擁有的所有關聯性。  建立或刪除關聯性的程序不會實際改變的目標組件或以任何方式的資源。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不會實際變更來源組件，或目標組件或以任何方式的資源。  
  
 關聯性的目標不能是另一個關聯性。  
  
 如需有關套件關聯性，請參閱下一節 1.3*開放封裝慣例 (OPC)* 規格可以從下載<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 如需 XPS 文件，請參閱*Open XML Paper Specification (XPS)* 下載<https://go.microsoft.com/fwlink/?LinkID=67000>。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目標組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="targetMode">其中一個列舉值。 例如，<see cref="F:System.IO.Packaging.TargetMode.Internal" />如果目標組件位於<see cref="T:System.IO.Packaging.Package" />; 或<see cref="F:System.IO.Packaging.TargetMode.External" />如果目標是外部資源<see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">關聯性的角色。</param>
        <summary>建立組件層級之間的關聯性這<see cref="T:System.IO.Packaging.PackagePart" />到指定的目標<see cref="T:System.IO.Packaging.PackagePart" />或外部的資源。</summary>
        <returns>組件層級之間的關聯性這<see cref="T:System.IO.Packaging.PackagePart" />到目標<see cref="T:System.IO.Packaging.PackagePart" />或外部的資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組件層關係定義這個組件的目標組件或資源之間的關聯。  組件層級關聯性可以是兩種形式之一。  
  
-   來源之間<xref:System.IO.Packaging.PackagePart>到目標<xref:System.IO.Packaging.PackagePart>內<xref:System.IO.Packaging.Package>。  
  
-   來源<xref:System.IO.Packaging.PackagePart>封裝外部的目標資源。  
  
 在部分關聯性來源組件會被視為 「 擁有者 」 的關聯性。  刪除來源組件時，會一併刪除組件所擁有的所有關聯性。  建立或刪除關聯性的程序不會實際改變的目標組件或以任何方式的資源。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不會實際變更來源組件，或目標組件或以任何方式的資源。  
  
 關聯性的目標不能是另一個關聯性。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必須是相對 URI，構成根據[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格。  內部的相對 URI 可以是任一個絕對路徑，開頭為正斜線 （"/"） 字元例如"/ page1.xaml"或"/ images/picture4.jpg"，或相對路徑，例如".../ imagespicture1.jpg 」 解析對封裝根目錄 （"/"） 作為基底 URI。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一個絕對或相對的 URI 格式，根據[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的泛型語法*規格。  「https://www.microsoft.com/page2.xml"是絕對 URI，參考外部目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg"是相對 URI，也會參考外部目標資源 」 1.jpg 」 但可解析封裝本身的 uri 的範例。  
  
 `relationshipType` 必須是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，根據形成[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格。  不同的套件類型可以定義不同的組件層級關聯性類型。  下表顯示組件層級`relationshipType`Uri 定義文件符合*Open XML Paper Specification (XPS)*。  
  
|XPS 文件組件層級關聯性|URI 的關聯性類型|  
|-------------------------------------------|---------------------------|  
|數位簽章定義|[http://schemas.microsoft.com/xps/2005/06/signature-definitions](https://schemas.microsoft.com/xps/2005/06/signature-definitions)|  
|DiscardControl|http://schemas.microsoft.com/xps/2005/06/discard-control|  
|DocumentStructure|http://schemas.microsoft.com/xps/2005/06/documentstructure|  
|PrintTicket|http://schemas.microsoft.com/xps/2005/06/printticket|  
|所需的資源|http://schemas.microsoft.com/xps/2005/06/required-resource|  
|受限制的字型|http://schemas.microsoft.com/xps/2005/06/restricted-font|  
|StartPart|http://schemas.microsoft.com/xps/2005/06/fixedrepresentation|  
|StoryFragments|http://schemas.microsoft.com/xps/2005/06/storyfragments|  
  
 如需有關套件關聯性，請參閱下一節 1.3*開放封裝慣例 (OPC)* 規格可以從下載<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 如需 XPS 文件，請參閱*Open XML Paper Specification (XPS)* 下載[ http://go.microsoft.com/fwlink/?LinkID=67000 ](https://go.microsoft.com/fwlink/?LinkID=67000)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />參數不是有效<see cref="T:System.IO.Packaging.TargetMode" />列舉值。</exception>
        <exception cref="T:System.ArgumentException">所識別的部分<paramref name="targetUri" />關聯性 （關聯性的目標不能是另一個關聯性）。  
  
-或- 
 <paramref name="targetMode" /> 指定為<see cref="F:System.IO.Packaging.TargetMode.Internal" />但<paramref name="targetUri" />是絕對的外部[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的 （無法新增新的關聯性）。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目標組件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="targetMode">其中一個列舉值。 例如，<see cref="F:System.IO.Packaging.TargetMode.Internal" />如果目標組件位於<see cref="T:System.IO.Packaging.Package" />; 或<see cref="F:System.IO.Packaging.TargetMode.External" />如果目標是外部資源<see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">關聯性的角色。</param>
        <param name="id">關聯性的唯一識別碼。</param>
        <summary>建立組件層級之間的關聯性這<see cref="T:System.IO.Packaging.PackagePart" />到指定的目標<see cref="T:System.IO.Packaging.PackagePart" />或外部的資源。</summary>
        <returns>組件層級之間的關聯性這<see cref="T:System.IO.Packaging.PackagePart" />到目標<see cref="T:System.IO.Packaging.PackagePart" />或外部的資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組件層關係定義這個組件的目標組件或資源之間的關聯。  組件層級關聯性可以是兩種形式之一。  
  
-   來源之間<xref:System.IO.Packaging.PackagePart>到目標<xref:System.IO.Packaging.PackagePart>內<xref:System.IO.Packaging.Package>。  
  
-   來源<xref:System.IO.Packaging.PackagePart>封裝外部的目標資源。  
  
 在部分關聯性來源組件會被視為 「 擁有者 」 的關聯性。  刪除來源組件時，會一併刪除組件所擁有的所有關聯性。  建立或刪除關聯性的程序不會實際改變的目標組件或以任何方式的資源。  
  
 `id` 必須是有效的 XML 識別項。  `id`型別是 xsd:ID，且必須遵照中所指定的命名慣例*XML 結構描述第 2 部分：資料型別*規格 (請參閱 < [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不會實際變更來源組件，或目標組件或以任何方式的資源。  
  
 關聯性的目標不能是另一個關聯性。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必須是相對 URI，構成根據[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格。  內部的相對 URI 可以是任一個絕對路徑，開頭為正斜線 （"/"） 字元例如"/ page1.xaml"或"/ images/picture4.jpg"，或相對路徑，例如".../ imagespicture1.jpg 」 解析對封裝根目錄 （"/"） 作為基底 URI。  
  
 如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一個絕對或相對的 URI 格式，根據[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的泛型語法*規格。  「https://www.microsoft.com/page2.xml"是絕對 URI，參考外部目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg"是相對 URI，也會參考外部目標資源 」 1.jpg 」 但可解析封裝本身的 uri 的範例。  
  
 `relationshipType` 必須是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，根據形成[RFC 3986](https://tools.ietf.org/html/rfc3986) *統一資源識別元 (URI) 的一般語法*規格。  不同的套件類型可以定義不同的組件層級關聯性類型。  下表顯示組件層級`relationshipType`Uri 定義文件符合*Open XML Paper Specification (XPS)*。  
  
|XPS 文件組件層級關聯性|URI 的關聯性類型|  
|-------------------------------------------|---------------------------|  
|數位簽章定義|http://schemas.microsoft.com/xps/2005/06/signature-definitions|  
|DiscardControl|http://schemas.microsoft.com/xps/2005/06/discard-control|  
|DocumentStructure|http://schemas.microsoft.com/xps/2005/06/documentstructure|  
|PrintTicket|http://schemas.microsoft.com/xps/2005/06/printticket|  
|所需的資源|http://schemas.microsoft.com/xps/2005/06/required-resource|  
|受限制的字型|http://schemas.microsoft.com/xps/2005/06/restricted-font|  
|StartPart|http://schemas.microsoft.com/xps/2005/06/fixedrepresentation|  
|StoryFragments|http://schemas.microsoft.com/xps/2005/06/storyfragments|  
  
 如需有關套件關聯性，請參閱下一節 1.3*開放封裝慣例 (OPC)* 規格可以從下載<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 如需 XPS 文件，請參閱*Open XML Paper Specification (XPS)* 下載[ http://go.microsoft.com/fwlink/?LinkID=67000 ](https://go.microsoft.com/fwlink/?LinkID=67000)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />參數不是有效<see cref="T:System.IO.Packaging.TargetMode" />列舉值。</exception>
        <exception cref="T:System.ArgumentException">所識別的部分<paramref name="targetUri" />關聯性 （關聯性的目標不能是另一個關聯性）。  
  
-或- 
 <paramref name="targetMode" /> 指定為<see cref="F:System.IO.Packaging.TargetMode.Internal" />但<paramref name="targetUri" />是絕對的外部[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的 （無法新增新的關聯性）。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 識別項。  
  
-或- 
具有指定的組件<paramref name="id" />已經存在。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="packagePart.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />来刪除之關聯性。</param>
        <summary>刪除指定的組件層級<see cref="T:System.IO.Packaging.PackageRelationship" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必須是有效的 XML 識別項。  `id`型別是 xsd:ID，且必須遵照中所指定的命名慣例*XML 結構描述第 2 部分：資料型別*規格 (請參閱 < [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 如果指定`id`se neshoduje<xref:System.IO.Packaging.PackageRelationship.Id%2A>沒有關聯性會刪除任何此組件所擁有的關聯性，並擲回任何例外狀況。  
  
 刪除指定的關聯性，以外<xref:System.IO.Packaging.PackagePart.DeleteRelationship%2A>方法不會實際變更這個組件或目標組件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯讀的 （無法刪除關聯性）。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 識別項。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetContentTypeCore">
      <MemberSignature Language="C#" Value="protected virtual string GetContentTypeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetContentTypeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetContentTypeCore () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetContentTypeCore();" />
      <MemberSignature Language="F#" Value="abstract member GetContentTypeCore : unit -&gt; string&#xA;override this.GetContentTypeCore : unit -&gt; string" Usage="packagePart.GetContentTypeCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，會傳回[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]組件內容的型別。</summary>
        <returns>[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]組件內容的型別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 為虛擬方法的<xref:System.IO.Packaging.PackagePart>抽象基底類別。 實作這個方法只能在建構時無法提供的內容類型值的衍生型別，或計算內容類型值是否為重要或高成本作業。 傳回的值必須是有效[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]內容類型。  
  
 在衍生的類別可以呼叫<xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A>初始化<xref:System.IO.Packaging.PackagePart.ContentType%2A>設為預設值為衍生類別的屬性。  之後<xref:System.IO.Packaging.PackagePart.ContentType%2A>屬性已設定它無法變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">在衍生的類別未提供所需的覆寫實作<see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />来傳回之關聯性。</param>
        <summary>傳回具有指定的關聯性<see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</summary>
        <returns>符合指定的關聯性<paramref name="id" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必須是有效的 XML 識別項。  `id`型別是 xsd:ID，且必須遵照中所指定的命名慣例*XML 結構描述第 2 部分：資料型別*規格 (請參閱 < [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 您可以使用<xref:System.IO.Packaging.PackagePart.RelationshipExists%2A>方法來判斷具有指定的關聯性<xref:System.IO.Packaging.PackageRelationship.Id%2A>屬於這個組件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 識別項。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> 為空字串。</exception>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。  
  
-或- 
使用指定的關聯性<paramref name="id" />不存在封裝中。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的 （無法讀取關聯性資訊）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="packagePart.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個組件所擁有的所有關聯性的集合。</summary>
        <returns>組件所擁有的所有關聯性的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的集合不`null`; 不過，此集合可能包含零個項目，如果組件沒有定義任何關聯性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的 （無法讀取關聯性資訊）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="packagePart.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />找出並傳回集合中之關聯性。</param>
        <summary>傳回符合指定的關聯性的集合<see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</summary>
        <returns>符合指定的關聯性集合<paramref name="relationshipType" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 絕不會是傳回的集合`null`; 不過，此集合可能包含零個項目，如果沒有任何關聯性符合指定`relationshipType`定義組件。  
  
 前置或尾端空格`relationshipType`自動修剪的字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> 為空字串。</exception>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的 （無法讀取關聯性資訊）。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">開放封裝慣例規格</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回組件內容資料流。</summary>
        <block subset="none" type="usage"><para>
            <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 在內部呼叫衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />實際開啟，並傳回部分資料流的方法在衍生類別中實作的實體格式作為基礎。  
  
根據預設，<see cref="T:System.IO.Packaging.ZipPackagePart" />子類別實作的抽象<see cref="T:System.IO.Packaging.PackagePart" />類別會提供和使用。  在預設作業中，<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />在內部呼叫<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />類別，以開啟，並傳回部分資料流從 ZIP 檔案。</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.IO.Stream" Usage="packagePart.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回組件內容資料流。</summary>
        <returns>組件內容資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會開啟內容資料流<xref:System.IO.FileMode>的<xref:System.IO.FileMode.OpenOrCreate>並<xref:System.IO.FileAccess>父系相同的權限<xref:System.IO.Packaging.Package>。  
  
 多載<xref:System.IO.Packaging.PackagePart.GetStream%2A>方法可讓您設定特定<xref:System.IO.FileMode>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.IO.IOException">所傳回的資料流物件<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />衍生子類別的方法是<see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> 在內部呼叫衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />實際開啟，並傳回部分資料流的方法在衍生類別中實作的實體格式作為基礎。  
  
根據預設，<see cref="T:System.IO.Packaging.ZipPackagePart" />子類別實作的抽象<see cref="T:System.IO.Packaging.PackagePart" />類別會提供和使用。  在預設作業中，<see cref="M:System.IO.Packaging.PackagePart.GetStream" />在內部呼叫<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />類別，以開啟，並傳回部分資料流從 ZIP 檔案。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="member this.GetStream : System.IO.FileMode -&gt; System.IO.Stream" Usage="packagePart.GetStream mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="mode">若要開啟內容資料流 I/O 模式。</param>
        <summary>傳回內容資料流開啟指定的 i/o <see cref="T:System.IO.FileMode" />。</summary>
        <returns>組件的內容資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileAccess>傳回的內容資料流的權限受到相同父系的權限<xref:System.IO.Packaging.Package>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />參數不是有效<see cref="T:System.IO.FileMode" />列舉值。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="mode" />參數與不相容的套件及組件的資料流。  
  
-或- 
所傳回的資料流物件<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />衍生子類別的方法是<see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> 在內部呼叫衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />實際開啟，並傳回部分資料流的方法在衍生類別中實作的實體格式作為基礎。  
  
根據預設，<see cref="T:System.IO.Packaging.ZipPackagePart" />子類別實作的抽象<see cref="T:System.IO.Packaging.PackagePart" />類別會提供和使用。  在預設作業中，<see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />在內部呼叫<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />類別，以開啟，並傳回部分資料流從 ZIP 檔案。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="member this.GetStream : System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Stream" Usage="packagePart.GetStream (mode, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">若要開啟內容資料流 I/O 模式。</param>
        <param name="access">若要在開啟的內容資料流時使用的存取權限。</param>
        <summary>傳回與指定開啟的組件內容資料流<see cref="T:System.IO.FileMode" />和<see cref="T:System.IO.FileAccess" />。</summary>
        <returns>組件內容資料流。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />參數不是有效<see cref="T:System.IO.FileMode" />列舉值。  
  
-或- 
<paramref name="access" />參數不是有效<see cref="T:System.IO.FileAccess" />列舉值。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="mode" /> 或<paramref name="access" />與套件及組件的資料流不相容。  
  
-或- 
<paramref name="access" />參數指定為<see cref="F:System.IO.FileAccess.Read" />但<paramref name="mode" />參數需要寫入存取權。  (<see cref="T:System.IO.FileMode" />的值<see cref="F:System.IO.FileMode.Create" />， <see cref="F:System.IO.FileMode.CreateNew" />， <see cref="F:System.IO.FileMode.Truncate" />，並<see cref="F:System.IO.FileMode.Append" />需要<see cref="F:System.IO.FileAccess.Write" />或<see cref="F:System.IO.FileAccess.ReadWrite" />存取。) 
-或- 
所傳回的資料流物件<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />衍生子類別的方法是<see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> 在內部呼叫衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />實際開啟，並傳回部分資料流的方法在衍生類別中實作的實體格式作為基礎。  
  
根據預設，<see cref="T:System.IO.Packaging.ZipPackagePart" />子類別實作的抽象<see cref="T:System.IO.Packaging.PackagePart" />類別會提供和使用。  在預設作業中，<see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />在內部呼叫<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />類別，以開啟，並傳回部分資料流從 ZIP 檔案。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStreamCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Stream GetStreamCore (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Stream GetStreamCore(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetStreamCore (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Stream ^ GetStreamCore(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="abstract member GetStreamCore : System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Stream" Usage="packagePart.GetStreamCore (mode, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">若要開啟內容資料流 I/O 模式。</param>
        <param name="access">若要在開啟的內容資料流時使用的存取權限。</param>
        <summary>當在衍生類別中覆寫時，會傳回開啟具有指定的組件內容資料流<see cref="T:System.IO.FileMode" />和<see cref="T:System.IO.FileAccess" />。</summary>
        <returns>組件的內容資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式不應該呼叫<xref:System.IO.Packaging.PackagePart.GetStreamCore%2A>直接，但應該改為呼叫<xref:System.IO.Packaging.PackagePart.GetStream%2A>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />實作應該做出任何假設所執行作業的順序<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />方法呼叫它。</para></block>
        <block subset="none" type="usage"><para>衍生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法會呼叫<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />實體衍生類別中實作的格式為基礎的方法，以開啟，並傳回部分資料流。  
  
根據預設，<see cref="T:System.IO.Packaging.ZipPackagePart" />子類別實作的抽象<see cref="T:System.IO.Packaging.PackagePart" />類別會提供和使用。  在預設作業中，<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />在內部呼叫<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />類別，以開啟，並傳回部分資料流從 ZIP 檔案。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Package">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package Package { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.Package Package" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Package" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Package As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::Package ^ Package { System::IO::Packaging::Package ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Package : System.IO.Packaging.Package" Usage="System.IO.Packaging.PackagePart.Package" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得父代<see cref="T:System.IO.Packaging.Package" />組件。</summary>
        <value>組件的父封裝。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Package%2A> 是唯讀屬性，可存取時，才父<xref:System.IO.Packaging.Package>已開啟。  
  
 <xref:System.IO.Packaging.PackagePart.Package%2A>屬性會由自動設定<xref:System.IO.Packaging.PackagePart.%23ctor%2A>建構函式。  它由建構函式，父設定之後<xref:System.IO.Packaging.PackagePart.Package%2A>無法變更組件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="packagePart.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />来檢查之關聯性。</param>
        <summary>傳回值，這個值，指出這個組件是否擁有與指定的關聯性<see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</summary>
        <returns><see langword="true" /> 如果這個組件擁有使用指定的關聯性<paramref name="id" />; 否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必須是有效的 XML 識別項。  `id`型別是 xsd:ID，且必須遵照中所指定的命名慣例*XML 結構描述第 2 部分：資料型別*規格 (請參閱 < [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 識別項。</exception>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <exception cref="T:System.IO.IOException">封裝是唯寫的 （無法讀取關聯性資訊）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="System.IO.Packaging.PackagePart.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]組件。</summary>
        <value>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]相對於套件根目錄組件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Uri%2A> 是唯讀屬性，可存取時，才父<xref:System.IO.Packaging.Package>已開啟。  
  
 <xref:System.IO.Packaging.PackagePart.Uri%2A>屬性會由自動設定<xref:System.IO.Packaging.PackagePart.%23ctor%2A>建構函式。  設定建構函式之後,<xref:System.IO.Packaging.PackagePart.Uri%2A>無法變更組件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">組件已被刪除。  
  
-或- 
<see cref="P:System.IO.Packaging.PackagePart.Package" />不是開啟 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />或<see cref="M:System.IO.Packaging.Package.Close" />已呼叫)。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>