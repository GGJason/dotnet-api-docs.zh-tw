<Type Name="PhysicalAddress" FullName="System.Net.NetworkInformation.PhysicalAddress">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b8976941c3741639b96311d96ea1ee11e702fc1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37477461" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PhysicalAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhysicalAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PhysicalAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class PhysicalAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class PhysicalAddress" />
  <TypeSignature Language="F#" Value="type PhysicalAddress = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1ea05-101">提供網路介面 (介面卡) 的媒體存取控制 (MAC) 位址。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1ea05-101">Provides the Media Access Control (MAC) address for a network interface (adapter).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea05-102">MAC 位址或實體位址，是可唯一識別每個節點，例如電腦或網路上的印表機的硬體位址。</span><span class="sxs-lookup"><span data-stu-id="1ea05-102">The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.</span></span>  
  
 <span data-ttu-id="1ea05-103">此類別的執行個體所傳回<xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="1ea05-103">Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ea05-104">下列程式碼範例會顯示本機電腦上的所有介面實體位址。</span><span class="sxs-lookup"><span data-stu-id="1ea05-104">The following code example displays the physical addresses of all interfaces on the local computer.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberSignature Language="F#" Value="new System.Net.NetworkInformation.PhysicalAddress : byte[] -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="new System.Net.NetworkInformation.PhysicalAddress address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="1ea05-105">
            <see cref="T:System.Byte" /> 陣列，包含位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-105">A <see cref="T:System.Byte" /> array containing the address.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea05-106">初始化 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-106">Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea05-107">在一般情況下，應用程式不需要呼叫這個建構函式;此類別的執行個體所傳回<xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1ea05-107">In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.</span></span>  
  
 <span data-ttu-id="1ea05-108">請注意，您也可以使用<xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A>方法用來建立的新執行個體<xref:System.Net.NetworkInformation.PhysicalAddress>。</span><span class="sxs-lookup"><span data-stu-id="1ea05-108">Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ea05-109">下列程式碼範例會建立新<xref:System.Net.NetworkInformation.PhysicalAddress>物件。</span><span class="sxs-lookup"><span data-stu-id="1ea05-109">The following code example creates a new <xref:System.Net.NetworkInformation.PhysicalAddress> object.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#4)]
 [!code-csharp[NCLPhysicalAddress#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="physicalAddress.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">
          <span data-ttu-id="1ea05-110">要與目前執行個體相比較的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-110">The <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea05-111">比較兩個 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-111">Compares two <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea05-112">如果這個執行個體和指定的執行個體包含相同位址則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-112">
              <see langword="true" /> if this instance and the specified instance contain the same address; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ea05-113">下列程式碼範例會比較兩個<xref:System.Net.NetworkInformation.PhysicalAddress>執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ea05-113">The following code example compares two <xref:System.Net.NetworkInformation.PhysicalAddress> instances.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberSignature Language="F#" Value="member this.GetAddressBytes : unit -&gt; byte[]" Usage="physicalAddress.GetAddressBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ea05-114">傳回目前執行個體的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-114">Returns the address of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea05-115">
            <see cref="T:System.Byte" /> 陣列，包含位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-115">A <see cref="T:System.Byte" /> array containing the address.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ea05-116">下列程式碼範例會呼叫此方法來擷取的位址<xref:System.Net.NetworkInformation.PhysicalAddress>並格式化顯示的位址。</span><span class="sxs-lookup"><span data-stu-id="1ea05-116">The following code example calls this method to retrieve the address of a <xref:System.Net.NetworkInformation.PhysicalAddress> and formats the address for display.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="physicalAddress.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ea05-117">傳回實體位址的雜湊值 (Hash Value)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-117">Returns the hash value of a physical address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea05-118">整數雜湊值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-118">An integer hash value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.NetworkInformation.PhysicalAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.NetworkInformation.PhysicalAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As PhysicalAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::NetworkInformation::PhysicalAddress ^ None;" />
      <MemberSignature Language="F#" Value=" staticval mutable None : System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea05-119">傳回新的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 執行個體，其中含有長度為零的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-119">Returns a new <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with a zero length address.</span>
          </span>
          <span data-ttu-id="1ea05-120">這個欄位是唯讀的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-120">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea05-121"><xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A>方法會傳回<xref:System.Net.NetworkInformation.PhysicalAddress.None>如果您指定`null`位址。</span><span class="sxs-lookup"><span data-stu-id="1ea05-121">The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ea05-122">下列程式碼範例示範如何使用此欄位測試剖析的地址的結果。</span><span class="sxs-lookup"><span data-stu-id="1ea05-122">The following code example demonstrates using this field to test the result of parsing an address.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.NetworkInformation.PhysicalAddress Parse(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (address As String) As PhysicalAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::NetworkInformation::PhysicalAddress ^ Parse(System::String ^ address);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.Parse address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="1ea05-123">
            <see cref="T:System.String" />，包含會被用來初始化以這個方法傳回之 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 執行個體的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-123">A <see cref="T:System.String" /> containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea05-124">剖析指定的 <see cref="T:System.String" />，並將其內容儲存為這個方法所傳回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 之位址位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-124">Parses the specified <see cref="T:System.String" /> and stores its contents as the address bytes of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> returned by this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea05-125">含有指定位址的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-125">A <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with the specified address.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea05-126">`address`參數必須包含字串，其中只能包含數字和大寫的字母為十六進位數字。</span><span class="sxs-lookup"><span data-stu-id="1ea05-126">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="1ea05-127">可接受的字串格式的一些範例如下所示：</span><span class="sxs-lookup"><span data-stu-id="1ea05-127">Some examples of string formats that are acceptable are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="1ea05-128">請注意，包含位址`f0-e1-d2-c3-b4-a5`剖析，並擲回例外狀況將會失敗。</span><span class="sxs-lookup"><span data-stu-id="1ea05-128">Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.</span></span>  
  
 <span data-ttu-id="1ea05-129">使用<xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A>方法來擷取從現有的位址<xref:System.Net.NetworkInformation.PhysicalAddress>執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ea05-129">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ea05-130">下列程式碼範例會建立<xref:System.Net.NetworkInformation.PhysicalAddress>藉由呼叫的執行個體<xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1ea05-130">The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="1ea05-131">
            <paramref name="address" /> 參數包含不合法的硬體位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-131">The <paramref name="address" /> parameter contains an illegal hardware address.</span>
          </span>
          <span data-ttu-id="1ea05-132">如果 <paramref name="address" /> 參數包含格式不正確的字串，也會發生這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-132">This exception also occurs if the <paramref name="address" /> parameter contains a string in the incorrect format.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="physicalAddress.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ea05-133">傳回這個執行個體的位址之 <see cref="T:System.String" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-133">Returns the <see cref="T:System.String" /> representation of the address of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea05-134">
            <see cref="T:System.String" />，包含這個執行個體中所含的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea05-134">A <see cref="T:System.String" /> containing the address contained in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ea05-135">下列程式碼範例會示範如何顯示在位址<xref:System.Net.NetworkInformation.PhysicalAddress>執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ea05-135">The following code example demonstrates displaying the address in a <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>