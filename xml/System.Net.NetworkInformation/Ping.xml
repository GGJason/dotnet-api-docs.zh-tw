<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cc2d3585a2bec0e0b422897dae63082edcb0ba2" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53334011" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>可以讓應用程式判斷是否能透過網路存取遠端電腦。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式使用<xref:System.Net.NetworkInformation.Ping>類別來偵測是否連線到遠端電腦。  
  
 網路拓樸可以判斷是否<xref:System.Net.NetworkInformation.Ping>可以成功連線遠端主機。 目前狀態和 proxy、 網路位址轉譯 (NAT) 設備或防火牆的設定可以防止<xref:System.Net.NetworkInformation.Ping>無法成功。 成功<xref:System.Net.NetworkInformation.Ping>表示只有該遠端主機可以連線網路; 較高層級服務 （例如 Web 伺服器） 上的遠端主機是否存在但不保證。  
  
 這個類別會提供類似 Ping.exe 命令列工具的功能。 <xref:System.Net.NetworkInformation.Ping.Send%2A>和<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法從該電腦將網際網路控制訊息通訊協定 (ICMP) 回應要求訊息傳送到遠端電腦並等候 ICMP 回應回覆訊息。 ICMP 訊息的詳細說明，請參閱 RFC 792，網址[ https://www.ietf.org ](https://www.ietf.org/)。  
  
 下列類型會搭配<xref:System.Net.NetworkInformation.Ping>類別，並詳細說明如下所述。  
  
|**類型名稱**|**描述**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|定義描述將 ICMP 回應要求訊息的結果的狀態碼。|  
|<xref:System.Net.NetworkInformation.PingOptions>|可讓您設定或擷取控制多少次要求封包的設定，可以轉送 (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>)，以及是否可以分散 (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> )。|  
|<xref:System.Net.NetworkInformation.PingReply>|包含 ICMP 回應要求的結果。|  
|<xref:System.Net.NetworkInformation.PingException>|無法復原的錯誤發生時，便會擲回。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|包含與相關聯的資料<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件，也就是時引發<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫完成或取消。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|提供回呼方法的委派時叫用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫完成或取消。|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>並<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會傳回在回覆<xref:System.Net.NetworkInformation.PingReply>物件。 <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType>屬性會傳回<xref:System.Net.NetworkInformation.IPStatus>值，指出要求的結果。  
  
 當傳送要求，您必須指定遠端電腦。 您可以藉由提供主機名稱的字串，字串格式的 IP 位址或<xref:System.Net.IPAddress>物件。  
  
 您也可以指定任何下列類型的資訊：  
  
-   隨附於要求的資料。 指定`buffer`可讓您了解特定大小的封包傳入及傳出遠端主機和網路路徑的最大傳輸單位所需的時間量。 (請參閱<xref:System.Net.NetworkInformation.Ping.Send%2A>或是<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載會採用`buffer`參數。)  
  
-   是否可以分散 ICMP Echo 封包在傳輸過程中。 (請參閱<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性和<xref:System.Net.NetworkInformation.Ping.Send%2A>或是<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載會採用`options`參數。)  
  
-   例如路由器或閘道，可以轉送封包到達目的地電腦或已被丟棄前幾次路由的節點。 (請參閱<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>而<xref:System.Net.NetworkInformation.Ping.Send%2A>或是<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載會採用`options`參數。)  
  
-   必須在其中接收回覆的時間限制。 (請參閱<xref:System.Net.NetworkInformation.Ping.Send%2A>或是<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載會採用`timeout`參數。  
  
 <xref:System.Net.NetworkInformation.Ping>類別提供了兼具同步與非同步傳送要求的方法。 如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。 如果您的應用程式應該不會封鎖，使用非同步<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>自己從執行緒集區自動配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委派指定的方法，稱為<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 您無法使用的相同執行個體<xref:System.Net.NetworkInformation.Ping>類別來產生多個同時的 ICMP 回應要求。 呼叫<xref:System.Net.NetworkInformation.Ping.Send%2A>雖然<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫是進行中或呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多次所有先前呼叫已完成的原因之前<xref:System.InvalidOperationException>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.NetworkInformation.Ping>類別以同步方式。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 下列程式碼範例示範如何使用<xref:System.Net.NetworkInformation.Ping>類別以非同步方式。  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">如何：Ping 主機</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">以 .NET Framework 進行網路程式設計</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">網路程式設計範例</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.NetworkInformation.Ping" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例將示範如何建立<xref:System.Net.NetworkInformation.Ping>執行個體。 完整的範例可用於<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源；<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Net.NetworkInformation.Ping" /> 物件所使用的 Unmanaged 資源，並選擇性處置 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會呼叫公用`Dispose()`方法和<xref:System.ComponentModel.Component.Finalize%2A>方法。 公用`Dispose()`方法會叫用受保護<xref:System.Net.NetworkInformation.Ping.Dispose%2A>方法`disposing`參數設定為`true`。 <xref:System.ComponentModel.Component.Finalize%2A> 叫用`Dispose`具有`disposing`設定為`false`。  
  
 當`disposing`參數是`true`，這個方法由任何 managed 物件持有的資源全部釋出這個<xref:System.Net.NetworkInformation.Ping>物件參考。 這個方法會叫用每個參考物件的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自類別<xref:System.Net.NetworkInformation.Ping>類別可以覆寫此方法以執行其他工作，例如記錄中包含的資料`e`參數。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />衍生類別時，請務必呼叫基底類別<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />方法，讓已註冊的委派收到事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當傳送網際網路控制訊息通訊協定 (ICMP) 回應訊息及接收對應之 ICMP 回應回覆訊息的非同步作業完成或取消時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式會使用<xref:System.Net.NetworkInformation.Ping.PingCompleted>呼叫其中一個所收集的事件，以取得完成狀態和資料的相關資訊<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 <xref:System.Net.NetworkInformation.PingCompletedEventHandler>委派會提供呼叫後的方法時叫用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發這個事件。  
  
   
  
## Examples  
 下列程式碼範例將示範如何指定回呼方法，以便<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 完整的範例可用於<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給遠端電腦，並從遠端電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何所傳回的 IP 位址<xref:System.Net.NetworkInformation.Ping.Send%2A>多載可以來自惡意的遠端電腦。 請勿連線到遠端電腦使用此。 使用 DNS 來判斷您要連接的機器的 IP 位址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，傳送給具有指定之 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則描述失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送至所指定的主機`address`32 <xref:System.Byte> ICMP 回應訊息使用的資料緩衝區。 方法會等候五秒將 ICMP 回應回覆訊息。 如果它未在該時間內接收回覆，則方法會傳回與<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送 32 <xref:System.Byte> ICMP 回應訊息使用的資料緩衝區。 方法會等候五秒將 ICMP 回應回覆訊息。 如果它未在該時間內接收回覆，則方法會傳回與<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。 相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個方法可以讓您為作業指定逾時值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定時間內收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 封包或封包片段在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需範例，示範如何呼叫<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。 這個方法可以讓您為作業指定逾時值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定時間內收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需範例，示範如何呼叫<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。 如果封包超過最大傳輸單位 (MTU)，此方法會傳回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定時間內收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 封包或封包片段在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />，或 <paramref name="buffer" /> 的大小大於 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定時間內收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 封包或封包片段在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.Send%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需範例，示範如何呼叫<xref:System.Net.NetworkInformation.Ping.Send%2A>多載，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />，或 <paramref name="buffer" /> 的大小大於 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定之 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。 這個多載可以讓您指定作業的逾時值，以及控制 ICMP 回應訊息封包的分散和存留時間值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。 如果封包超過最大傳輸單位 (MTU)，此方法會傳回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性來指定可以轉送 ICMP 回應訊息到達其目的地之前最大次數。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />，或 <paramref name="buffer" /> 的大小大於 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <summary>嘗試將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可讓您指定作業的逾時值，以及控制 ICMP 封包的分散和存留時間值。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 物件，如果收到 ICMP 回應的回覆訊息，則提供相關資訊，如果未收到訊息則提供失敗的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性來指定可以轉送 ICMP 回應訊息到達其目的地之前最大次數。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或長度為零的字串。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />，或 <paramref name="buffer" /> 的大小大於 65500 個位元組。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這些方法不會造成封鎖的應用程式的主執行緒。 如果您想要封鎖等候 ICMP 回應回覆訊息時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法。  
  
> [!NOTE]
>  任何所傳回的 IP 位址<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法可能來自惡意的遠端電腦。 請勿連線到遠端電腦使用此。 使用 DNS 來判斷您要連接的機器的 IP 位址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，傳送給具有指定之 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫此方法會從執行緒集區自動配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定時，會呼叫的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件，您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
> [!NOTE]
>  如果您的應用程式應該封鎖等候回覆時，使用其中一種<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 這個方法會傳送 32 <xref:System.Byte> ICMP 回應訊息使用的資料緩衝區。 方法會等候五秒將 ICMP 回應回覆訊息。 如果它未在該時間內接收回覆，則方法會傳回與<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 封包或封包片段在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需示範如何呼叫的程式碼範例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 方法。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫此方法會從執行緒集區自動配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定時，會呼叫的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件，您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
> [!NOTE]
>  如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 這個方法會傳送 32 <xref:System.Byte> ICMP 回應訊息使用的資料緩衝區。 方法會等候五秒將 ICMP 回應回覆訊息。 如果未在該時間內收到回覆方法會傳回與<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 封包或封包片段在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需示範如何呼叫的程式碼範例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> 方法。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 無法解析成有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，傳送給具有指定之 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>來指定時，會呼叫的方法委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需示範如何呼叫的程式碼範例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> 方法。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>來指定時，會呼叫的方法委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需示範如何呼叫的程式碼範例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 無法解析成有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定時，會呼叫的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件，您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
> [!NOTE]
>  如果您的應用程式會封鎖在等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 如需示範如何呼叫的程式碼範例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時應該不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>來指定時，會呼叫的方法委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 這個多載會使用預設設定，封包的分散和封包轉送。 包含 ICMP 回應訊息封包可以分散在傳輸過程中如果的總封包大小超過最大的封包大小可以傳送的其中一個本機和遠端電腦之間路由的節點。 若要避免分散程度，使用其中一種<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，取得`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性設`true`。 當<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 封包或封包片段 （如果分割） 在被捨棄之前，可以透過路由節點轉送 128 次。 若要變更此設定，請使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>採用多載`options`參數，以及組<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性設為所需的值。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多載，請參閱<xref:System.Net.NetworkInformation.Ping>類別概觀。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 無法解析成有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" />，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您指定作業的逾時值，以及控制 ICMP 回應訊息封包的分散和存留時間值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時必須不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>來指定時，會呼叫的方法委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 如果您的應用程式會封鎖在等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性來指定可以轉送 ICMP 回應訊息到達其目的地之前最大次數。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。 回呼方法的實作，請參閱<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法多載範例 > 一節。  
  
 下列程式碼範例需要下列命名空間：  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 下列程式碼範例會以非同步方式傳送的 ICMP 回應訊息。  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" />，識別 ICMP 回應訊息的目標電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="buffer"><see cref="T:System.Int32" /> 值，指定等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。　</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <param name="userToken">非同步作業完成時，傳遞至所叫用方法的物件。</param>
        <summary>嘗試以非同步方式將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可讓您指定作業的逾時值，以及控制 ICMP 封包的分散和存留時間值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會以非同步方式傳送回應訊息，並完成作業 （成功或失敗） 傳回的狀態，您的應用程式。 呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法時必須不會封鎖您的應用程式。 每次呼叫會自動從執行緒集區配置的執行緒中執行。 當非同步作業完成時，會引發<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 應用程式會使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>來指定時，會呼叫的方法委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引發事件。 您必須新增<xref:System.Net.NetworkInformation.PingCompletedEventHandler>再呼叫事件的委派<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委派的方法會接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件，其中包含<xref:System.Net.NetworkInformation.PingReply>物件，描述結果的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>物件會繼承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>屬性。 此屬性包含`userToken`物件傳遞至<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼叫。  
  
 如果您的應用程式應該封鎖等候回覆時，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 這些方法是同步。  
  
 如果所指定的時間內未收到 ICMP 回應回覆訊息`timeout`參數，ICMP 回應將會失敗，而<xref:System.Net.NetworkInformation.PingReply.Status%2A>屬性設定為<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定非常小的數字的時`timeout`，可接收 Ping 回覆即使`timeout`經過的毫秒數。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>屬性是`true`、 的總封包大小超過最大的封包大小可以由其中一個路由節點本機和遠端電腦之間傳送的 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>屬性來指定可以轉送 ICMP 回應訊息到達其目的地之前最大次數。 如果封包轉送指定的次數之後就不會到達其目的地，捨棄封包和 ICMP 回應要求失敗。 當發生這種情況<xref:System.Net.NetworkInformation.PingReply.Status%2A>設為<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 是 <see langword="null" /> 或空字串 ("")。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是 IPv6 位址，而且本機電腦正在執行 Windows 2000 之前的作業系統。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 無法解析成有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65500 個位元組。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要傳送的 ICMP 回應訊息。  
  
相關聯的列舉型別： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消傳送網際網路控制訊息通訊協定 (ICMP) 回應訊息之所有暫止的非同步要求，並且接收對應的 ICMP 回應回覆訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法來終止任何呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>，尚未完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息傳送給電腦，並從該電腦接收對應的 ICMP 回應回覆訊息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">IP 位址，識別 ICMP 回應訊息的目標電腦。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP 回應訊息的目的地電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">IP 位址，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP 回應訊息的目的地電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您為作業指定逾時值。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">IP 位址，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可讓您指定作業的逾時值以及要用於傳送和接收作業的緩衝區。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65,500 個位元組。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP 回應訊息的目的地電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可讓您指定作業的逾時值以及要用於傳送和接收作業的緩衝區。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">IP 位址，識別 ICMP 回應訊息的目標電腦。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <summary>使用指定資料緩衝區傳送網際網路控制訊息通訊協定 (ICMP) 回應訊息到具有指定 <see cref="T:System.Net.IPAddress" /> 的電腦，並以非同步作業方式接收來自該電腦的對應 ICMP 回應訊息。 這個多載可以讓您指定作業的逾時值、用於傳送和接收作業的緩衝區，以及控制 ICMP 回應訊息封包的分散和存留時間值。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小於零。</exception>
        <exception cref="T:System.InvalidOperationException">正在呼叫 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">傳送或接收 ICMP 訊息時發生例外狀況。 查看被擲回之例外狀況的內部真正例外狀況。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 位址。</exception>
        <exception cref="T:System.ObjectDisposedException">這個物件已經過處置。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超過 65,500 個位元組。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP 回應訊息的目的地電腦。 指定給這個參數的值可以是主機名稱或 IP 位址的字串表示。</param>
        <param name="timeout">等候 ICMP 回應回覆訊息的最大毫秒數 (在傳送回應訊息之後)。</param>
        <param name="buffer"><see cref="T:System.Byte" /> 陣列，包含要與 ICMP 回應訊息一同傳送以及要在 ICMP 回應回覆訊息中傳回的資料。 陣列的位元組不可以超過 65,500 以上。</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> 物件，用來控制 ICMP 回應訊息封包的分散和存留時間值。</param>
        <summary>以非同步作業的方式，將網際網路控制訊息通訊協定 (ICMP) 回應訊息，連同指定的資料緩衝區一起傳送給指定的電腦，並從該電腦接收對應的 ICMP 回應的回覆訊息。 這個多載可以讓您指定作業的逾時值、用於傳送和接收作業的緩衝區，以及控制 ICMP 回應訊息封包的分散和存留時間值。</summary>
        <returns>工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 物件會在已傳送 ICMP 封包，並在收到回應之後完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.Net.NetworkInformation.Ping" /> 類別執行個體使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
如果您在上呼叫任何方法<xref:System.Net.NetworkInformation.Ping>已經過處置的物件，您收到<xref:System.ObjectDisposedException>。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>