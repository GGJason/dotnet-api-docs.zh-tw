<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bc4bb9e15257bd0e0354a58210c82b2b416c6f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37477890" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供由於 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 作業而產生的狀態和資料等相關資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping>類別會嘗試傳送到遠端電腦的網際網路控制訊息通訊協定 (ICMP) 回應要求，並傳回接收 ICMP 回應回覆訊息透過電腦的資訊。 <xref:System.Net.NetworkInformation.Ping>類別使用的執行個體<xref:System.Net.NetworkInformation.PingReply>類別，以傳回作業，例如其狀態，以及傳送要求並接收回應所花費的時間的相關資訊。  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>方法傳回的執行個體<xref:System.Net.NetworkInformation.PingReply>直接類別。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法會傳回<xref:System.Net.NetworkInformation.PingReply>中<xref:System.Net.NetworkInformation.PingCompletedEventHandler>方法的<xref:System.Net.NetworkInformation.PingCompletedEventArgs>參數。 <xref:System.Net.NetworkInformation.PingReply>透過存取<xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A>屬性。  
  
 如果值<xref:System.Net.NetworkInformation.PingReply.Status%2A>不是<xref:System.Net.NetworkInformation.IPStatus.Success>，您不應該使用所傳回的值<xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>，<xref:System.Net.NetworkInformation.PingReply.Options%2A>或<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>屬性。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>屬性會傳回零，<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>屬性會傳回空陣列，而<xref:System.Net.NetworkInformation.PingReply.Options%2A>屬性會傳回`null`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.NetworkInformation.Ping>類別來以同步方式傳送的 ICMP 回應要求，並顯示回應。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得主機位址，該主機傳送網際網路控制訊息通訊協定 (ICMP) 回應回覆。</summary>
        <value>
          <see cref="T:System.Net.IPAddress" />，包含 ICMP 回應訊息的目的端。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.PingReply.Address%2A>傳回的任何<xref:System.Net.NetworkInformation.Ping.Send%2A>多載可以來自惡意的遠端電腦。 請勿連線到遠端電腦使用此位址。 使用 DNS 來判斷您要連接的機器的 IP 位址。  
  
   
  
## Examples  
 下列程式碼範例會以同步方式傳送的 ICMP 回應要求，並顯示這個屬性的值。  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在網際網路控制訊息通訊協定 (ICMP) 回應回覆訊息中所收到的資料緩衝區。</summary>
        <value>
          <see cref="T:System.Byte" /> 陣列，包含在 ICMP 回應回覆訊息中所收到的資料，如果沒有收到回覆則為空陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳送 ICMP 回應要求的資料緩衝區傳回寄件者回應的回覆中，因此您可以計算已知大小的封包往返傳輸時間。 資料緩衝區結合<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>選項，可用來探索來源和目的地電腦之間的網路路徑的最大傳輸單位。 如需詳細資訊，請參閱 RFC 1574，第 3.2 節，網址中的 「 追蹤路由 」 [ https://www.ietf.org ](https://www.ietf.org)。  
  
 搭配使用的預設緩衝區<xref:System.Net.NetworkInformation.Ping.Send%2A>和<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>包含 32 個位元組的資料。  
  
   
  
## Examples  
 下列程式碼範例會以同步方式傳送的 ICMP 回應要求，並顯示這個屬性所傳回的緩衝區大小。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得選項，用於傳送對網際網路控制訊息通訊協定 (ICMP) 回應要求的回覆。</summary>
        <value>如果 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 是 <see cref="P:System.Net.NetworkInformation.PingReply.Status" />，則為 <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> 物件，該物件包含用於傳送回覆的存留時間 (TTL) 及分割指示詞，否則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TTL 定義的節點可以轉送封包，其來源與目的地之間傳送的次數。 如果轉送，也就是的躍點數目超過指定的 TTL 值，將封包會被視為無法傳遞，並捨棄。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ICMP echo 要求控制項的封包片段中所指定的值。 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>已`true`封包大小超過最大傳輸單位的封包所採取的網路路徑，會捨棄封包和<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>會傳回錯誤。  
  
   
  
## Examples  
 下列程式碼範例會以同步方式傳送的 ICMP 回應要求，並顯示中所儲存的值<xref:System.Net.NetworkInformation.PingOptions>這個屬性所傳回的物件。  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於傳送網際網路控制訊息通訊協定 (ICMP) 回應要求及接收對應的 ICMP 回應回覆訊息的毫秒數。</summary>
        <value>
          <see cref="T:System.Int64" />，指定以毫秒為單位的往返時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果回應要求失敗，<xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>次會報告為 0 時，這也是要求成功時的有效值。 您必須檢查<xref:System.Net.NetworkInformation.PingReply.Status%2A>來判斷是否應該忽略這個屬性所傳回的值。  
  
   
  
## Examples  
 下列程式碼範例會以同步方式傳送的 ICMP 回應要求，並顯示這個屬性所傳回的緩衝區大小。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得嘗試傳送網際網路控制訊息通訊協定 (ICMP) 回應要求及接收對應的 ICMP 回應回覆訊息的狀態。</summary>
        <value>
          <see cref="T:System.Net.NetworkInformation.IPStatus" /> 值，指出要求的結果。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值<xref:System.Net.NetworkInformation.PingReply.Status%2A>不是<xref:System.Net.NetworkInformation.IPStatus.Success>，您不應該使用所傳回的值<xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>，<xref:System.Net.NetworkInformation.PingReply.Options%2A>或<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>屬性。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>並<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>屬性會傳回零，而<xref:System.Net.NetworkInformation.PingReply.Options%2A>屬性會傳回`null`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.NetworkInformation.Ping>類別來以同步方式傳送的 ICMP 回應要求，並顯示回應。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>