<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dacb12e8f4ae55b6d400f859ad650b5f3a4f3e5" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定義物件的方法，該物件會匯入有關繫結的自訂原則判斷提示。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IPolicyImportExtension> 介面，在特定端點所公開的 WSDL 資訊中搜尋有關端點功能或需求的自訂原則判斷提示。 一般而言，原則匯入工具會搜尋特定的判斷提示，以及插入繫結項目、設定繫結項目或修改合約，以支援判斷提示的需求。  
  
 和其對應的 <xref:System.ServiceModel.Description.IPolicyExportExtension> 不同的是，<xref:System.ServiceModel.Description.IPolicyImportExtension> 不需要由 <xref:System.ServiceModel.Channels.BindingElement> 物件實作；您可以使用如＜範例＞一節所示的用戶端組態區段載入它，或使用程式設計的方式，將它加入至 <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 建構函式。  
  
 Windows Communication Foundation (WCF) 會傳遞兩個物件至<xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A>方法，<xref:System.ServiceModel.Description.MetadataImporter>和<xref:System.ServiceModel.Description.PolicyConversionContext>。 一般而言，<xref:System.ServiceModel.Description.PolicyConversionContext> 物件已經包含各繫結範圍的原則判斷提示。  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> 實作會執行下列步驟：  
  
1.  藉由呼叫 <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>、<xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> 或 <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> 方法 (視範圍而定)，找出所負責的自訂原則判斷提示。  
  
2.  從判斷提示集合移除原則判斷提示。 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法只要一個步驟，即可尋找、傳回及移除判斷提示。  
  
3.  藉由將必要的自訂 <xref:System.ServiceModel.Channels.BindingElement> 加入至 <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> 屬性或修改 <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> 屬性，來修改繫結堆疊或合約。  
  
 步驟 2 是十分重要的。 呼叫所有原則匯入工具之後，WCF 會檢查存在的任何保留的原則判斷提示。 如果有的話，則 WCF 會假設原則匯入不成功，而不會匯入有關聯的繫結。  
  
> [!IMPORTANT]
>  惡意中繼資料提供者在嘗試不當利用原則匯入工具時，可能會嘗試在中繼資料中傳送格式不正確的 XML。 強烈建議自訂原則匯入工具對於可以傳遞給它的所有形式的 XML 都要很穩固。  
  
 自訂 <xref:System.ServiceModel.Description.MetadataImporter> 實作必須實作自己的 <xref:System.ServiceModel.Description.PolicyConversionContext> 物件，以擷取附加至自訂中繼資料格式的原則判斷提示。  
  
 如果要匯出和匯入不是原則判斷提示的自訂 WSDL 項目，請參閱 <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>。  
  
> [!NOTE]
>  您可以使用自訂原則匯入工具和匯入程式與[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)組態檔中使用相同的組態項目和`/svcutilConfig:<configFile>`選項。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一個步驟中找出、傳回和移除判斷提示。  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 下列程式碼範例會示範當叫用 <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> 時，用戶端應用程式組態檔載入自訂原則匯入工具。  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 來下載並將中繼資料解析成描述物件。  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">使用中的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 物件。</param>
        <param name="context">
          <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，同時包含可以匯入的原則判斷提示，以及可以加入實作繫結項目的繫結項目的集合。</param>
        <summary>定義可以匯入自訂原則判斷提示及加入實作繫結項目的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 `ImportPolicy` 方法，以取得原則判斷提示並執行匯入合約或繫結的一些修改，以支援判斷提示。 一般而言，原則匯入工具會設定或插入繫結項目至正在匯入的繫結，以回應尋找自訂原則判斷提示。  
  
 Windows Communication Foundation (WCF) 會傳遞兩個物件至<xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A>方法，<xref:System.ServiceModel.Description.MetadataImporter>和<xref:System.ServiceModel.Description.PolicyConversionContext>。 一般而言，<xref:System.ServiceModel.Description.PolicyConversionContext> 物件已經包含各繫結範圍的原則判斷提示。  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> 實作會執行下列步驟：  
  
1.  藉由呼叫 <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>、<xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> 或 <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> 方法 (視範圍而定)，找出所負責的自訂原則判斷提示。  
  
2.  從判斷提示集合移除原則判斷提示。 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法只要一個步驟，即可尋找、傳回及移除判斷提示。  
  
3.  藉由將必要的自訂 <xref:System.ServiceModel.Channels.BindingElement> 加入至 <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> 屬性或修改 <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> 屬性，來修改繫結堆疊或合約。  
  
 步驟 2 是十分重要的。 呼叫所有原則匯入工具之後，WCF 會檢查存在的任何保留的原則判斷提示。 如果有的話，則 WCF 會假設原則匯入不成功，而不會匯入有關聯的繫結。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一個步驟中找出、傳回和移除判斷提示。  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 下列程式碼範例會示範當叫用 <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> 時，用戶端應用程式組態檔載入自訂原則匯入工具。  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 來下載並將中繼資料解析成描述物件。  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>