<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="09d3094f5aac8acb8245cc86bcace579c8673d5e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37617271" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>可用於在服務或用戶端應用程式中延伸合約的執行階段行為的實作方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Description.IContractBehavior> 介面，以修改、檢查或延伸應用程式層級上某方面的合約執行。 不同於 <xref:System.ServiceModel.Description.IServiceBehavior> 和 <xref:System.ServiceModel.Description.IEndpointBehavior> 物件，<xref:System.ServiceModel.Description.IContractBehavior> 物件無法使用應用程式組態檔加入至執行階段，而只能以程式設計的方式或使用屬性來加入。  
  
 如需有關服務、 端點和合約行為之間做選擇的詳細資訊，請參閱[設定和擴充執行階段行為](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)。  
  
-   請使用 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 方法為繫結項目提供自訂資料，以支援行為。  
  
-   請使用 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法在用戶端應用程式中修改、檢查或插入延伸至合約。  
  
-   請使用 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 方法在服務應用程式中修改、檢查或插入延伸至合約。  
  
-   請使用 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 方法來確保合約可以支援特定功能。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 物件可以利用其中任何一種方法，但通常只有一種是重要的；在這種情況下，未使用的方法不需任何值便可傳回。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IContractBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 做為參數。 這些參數是供檢查之用；如果您修改物件，執行行為便沒有定義。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 型別可用於服務或 (和) 用戶端上。 如果要在服務上執行自訂工作，必須在建構服務執行階段之前將 <xref:System.ServiceModel.Description.IContractBehavior> 物件加入至 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 屬性，這會發生於在 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 物件上呼叫 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法時。 執行這項作業的方法有兩種。  
  
 第一種方法是在 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 物件上呼叫 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 方法之前，以程式設計的方法將自訂合約行為加入至 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 屬性。 使用這種方法時，會針對在任何端點上流經該合約的所有訊息套用此行為。  
  
> [!NOTE]
>  此行為會套用至相同型別的所有合約。 例如，如果您以程式設計的方式將相同的合約型別加入至一個以上的端點，此行為便會修改參考相同合約物件的所有端點。  
  
 第二種方法是建立實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性並套用至：  
  
-   合約介面。 在這種情況中，行為會套用至任何端點中該型別的所有合約。  
  
-   服務類別。  在這種情況中，行為會套用至所有端點 (不論何種合約)。  
  
-   回呼類別。  在這種情況中，行為會套用至雙工用戶端的端點。  
  
 如果自訂屬性也實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>，第二種方法的行為會有些許改變。 在這種情況下，行為如下所示：  
  
-   合約介面。 在此情況下，行為會套用至任何端點中該類型的所有合約和 Windows Communication Foundation (WCF) 會忽略值<xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>屬性。  
  
-   服務類別。  在此情況下，行為只會套用至其中合約為 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 屬性值的端點。  
  
-   回呼類別。  在此情況下，行為會套用至雙工用戶端的端點，WCF 會忽略值<xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>屬性。  
  
 如果要在目的用戶端上執行自訂工作，必須在建構用戶端執行階段之前將 <xref:System.ServiceModel.Description.IContractBehavior> 物件加入至 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 屬性，這會發生在呼叫 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 時。 執行此作業的方法有兩種：  
  
-   在呼叫 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A><xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>之前，以程式設計的方式將自訂合約行為加入至  屬性。  
  
-   建立也會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性。  
  
 如需有關以程式設計方式新增<xref:System.ServiceModel.Description.IContractBehavior>型別，以用戶端或服務的應用程式，請參閱[設定和擴充執行階段行為](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)。  
  
   
  
## Examples  
 下列程式碼範例假設自訂的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 實作呼叫提供「單一」行為的 `ObjectProviderBehavior`，並一律傳回相同的服務執行個體，而且不會加以回收。  
  
 如果要插入執行個體提供者自訂，此範例會示範如何實作自訂屬性 (`SingletonBehaviorAttribute`)，該屬性會實作 <xref:System.ServiceModel.Description.IContractBehavior> 以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，繫結其用法與 `ISampleService` 合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要修改的合約描述。</param>
        <param name="endpoint">要修改的端點。</param>
        <param name="bindingParameters">繫結項目支援行為所需的物件。</param>
        <summary>設定繫結項目以支援合約行為。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 方法，為繫結項目提供支援合約行為所需要的額外物件。  
  
 使用指定之服務合約的各個端點會呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">延伸所適用的合約描述。</param>
        <param name="endpoint">端點。</param>
        <param name="clientRuntime">用戶端執行階段。</param>
        <summary>實作合約上用戶端的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法以檢視、修改或加入自訂延伸至所有訊息或一個特定作業的用戶端執行階段。 如需有關您可以使用用戶端執行階段物件進行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation>。  
  
 如果行為只適合在服務應用程式中使用，<xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法可以擲回 <xref:System.NotImplementedException> 例外狀況。  
  
 使用指定之服務合約的各個端點會呼叫這個方法一次。  
  
 請注意，在描述中可以有兩個作業使用相同的名稱 (每個方向一個)，因此如果您必須逐一查看合約是雙工合約的作業時，必須聯結端點 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 以及由 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> 屬性傳回的端點之間的訊息方向。  
  
 由於其他行為可能已經加入或從執行階段移除某些作業，因此不保證描述中的作業數目和 <xref:System.ServiceModel.Dispatcher.ClientOperation> 屬性中的 <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> 物件相同。  
  
   
  
## Examples  
 下列程式碼範例假設自訂的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 實作呼叫提供「單一」行為的 `ObjectProviderBehavior`，並一律傳回相同的服務執行個體，而且不會加以回收。  
  
 如果要插入執行個體提供者自訂，此範例會示範如何實作自訂屬性 (`SingletonBehaviorAttribute`)，該屬性會實作 <xref:System.ServiceModel.Description.IContractBehavior> 以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，繫結其用法與 `ISampleService` 合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要修改的合約描述。</param>
        <param name="endpoint">公開合約的端點。</param>
        <param name="dispatchRuntime">控制服務執行的分派執行階段。</param>
        <summary>實作合約上用戶端的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 以檢視、修改或加入自訂延伸至特定合約中所有訊息或該合約中一個特定作業的服務執行階段。 如需有關您可以在服務應用程式中執行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 和 <xref:System.ServiceModel.Dispatcher.DispatchOperation>。  
  
 如果行為只適合在用戶端應用程式中使用，<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 方法可以擲回 <xref:System.NotImplementedException> 例外狀況。  
  
 使用指定之服務合約的各個端點會呼叫這個方法一次。  
  
 請注意，在描述中可以有兩個作業使用相同的名稱 (每個方向一個)，因此如果您必須逐一查看合約是雙工合約的作業時，必須聯結端點 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 以及由 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> 屬性傳回的端點之間的訊息方向。  
  
 此外，由於其他行為可能已經加入或從執行階段移除某些作業，因此不保證描述中的作業數目和 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 屬性中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 物件相同。  
  
   
  
## Examples  
 下列程式碼範例假設自訂的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 實作呼叫提供「單一」行為的 `ObjectProviderBehavior`，並一律傳回相同的服務執行個體，而且不會加以回收。  
  
 如果要插入執行個體提供者自訂，此範例會示範如何實作自訂屬性 (`SingletonBehaviorAttribute`)，該屬性會實作 <xref:System.ServiceModel.Description.IContractBehavior> 以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，繫結其用法與 `ISampleService` 合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要驗證的合約。</param>
        <param name="endpoint">要驗證的端點。</param>
        <summary>您可以實作此方法確認合約和端點可以支援合約行為。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 方法，以確認合約描述足以支援自訂合約行為。 實作可以檢查描述然後擲回或不傳回值。  
  
 使用指定之服務合約的各個端點會呼叫這個方法一次。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>