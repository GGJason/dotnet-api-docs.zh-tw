<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a4618-101">提供機制以在整個服務上修改或插入自訂延伸，包括 <see cref="T:System.ServiceModel.ServiceHostBase" />。</span><span class="sxs-lookup"><span data-stu-id="a4618-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4618-102">實作 <xref:System.ServiceModel.Description.IServiceBehavior>，以在應用程式層級修改、檢查或延伸服務執行的某些方面：</span><span class="sxs-lookup"><span data-stu-id="a4618-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="a4618-103">您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法來變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、訊息或參數攔截器、安全性延伸或其他自訂延伸物件。</span><span class="sxs-lookup"><span data-stu-id="a4618-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="a4618-104">您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 方法，在 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 建構執行的服務之前檢查描述，以確保能夠正確執行。</span><span class="sxs-lookup"><span data-stu-id="a4618-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before [!INCLUDE[indigo1](~/includes/indigo1-md.md)] constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="a4618-105">您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法，將服務的自訂資訊傳遞至繫結項目，以便能夠正確支援服務。</span><span class="sxs-lookup"><span data-stu-id="a4618-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="a4618-106"><xref:System.ServiceModel.Description.IServiceBehavior> 物件可以利用其中任何一種方法，但通常只有一種是重要的；在這種情況下，未使用的方法不需任何值便可傳回。</span><span class="sxs-lookup"><span data-stu-id="a4618-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4618-107">所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。</span><span class="sxs-lookup"><span data-stu-id="a4618-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="a4618-108"><xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查之用；如果您修改這些物件，執行行為便沒有定義。</span><span class="sxs-lookup"><span data-stu-id="a4618-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="a4618-109">如果要執行預定的自訂工作，必須在建構服務執行階段之前將 <xref:System.ServiceModel.Description.IServiceBehavior> 物件加入至 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 屬性。</span><span class="sxs-lookup"><span data-stu-id="a4618-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="a4618-110">執行這項作業的方法有三種：</span><span class="sxs-lookup"><span data-stu-id="a4618-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="a4618-111">在 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 物件上呼叫 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 方法之前，以程式設計方式將自訂服務行為加入至 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 屬性。</span><span class="sxs-lookup"><span data-stu-id="a4618-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="a4618-112">建立實作 <xref:System.ServiceModel.Description.IServiceBehavior> 的自訂屬性，並用來標示要修改的服務類別。</span><span class="sxs-lookup"><span data-stu-id="a4618-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="a4618-113">當<xref:System.ServiceModel.ServiceHost>物件建構，WCF 會使用反映來探索服務類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="a4618-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="a4618-114">如果任何屬性實作 <xref:System.ServiceModel.Description.IServiceBehavior>，便會加入至 <xref:System.ServiceModel.Description.ServiceDescription> 上的行為集合。</span><span class="sxs-lookup"><span data-stu-id="a4618-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="a4618-115">延伸 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 類別，以支援應用程式或電腦組態檔中的行為的規格。</span><span class="sxs-lookup"><span data-stu-id="a4618-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="a4618-116">如需詳細資訊，請參閱＜範例＞一節。</span><span class="sxs-lookup"><span data-stu-id="a4618-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="a4618-117">在 WCF 中的服務行為的範例包括<xref:System.ServiceModel.ServiceBehaviorAttribute>屬性<xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType>和<xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType>行為。</span><span class="sxs-lookup"><span data-stu-id="a4618-117">Examples of service behaviors in WCF include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4618-118">下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。</span><span class="sxs-lookup"><span data-stu-id="a4618-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="a4618-119">在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。</span><span class="sxs-lookup"><span data-stu-id="a4618-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="a4618-120">下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。</span><span class="sxs-lookup"><span data-stu-id="a4618-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="a4618-121">在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。</span><span class="sxs-lookup"><span data-stu-id="a4618-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="a4618-122">服務的服務描述。</span><span class="sxs-lookup"><span data-stu-id="a4618-122">The service description of the service.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="a4618-123">服務的主機。</span><span class="sxs-lookup"><span data-stu-id="a4618-123">The host of the service.</span></span></param>
        <param name="endpoints"><span data-ttu-id="a4618-124">服務端點。</span><span class="sxs-lookup"><span data-stu-id="a4618-124">The service endpoints.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="a4618-125">繫結項目可存取的自訂物件。</span><span class="sxs-lookup"><span data-stu-id="a4618-125">Custom objects to which binding elements have access.</span></span></param>
        <summary><span data-ttu-id="a4618-126">提供將自訂資料傳遞到繫結項目以支援合約實作的功能。</span><span class="sxs-lookup"><span data-stu-id="a4618-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4618-127">您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法將自訂資料物件加入至 `parameters` 集合，繫結項目可使用該集合取得額外的資訊，讓它們可以支援合約。</span><span class="sxs-lookup"><span data-stu-id="a4618-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="a4618-128">這個方法會針對每個接聽 URI 呼叫一次。</span><span class="sxs-lookup"><span data-stu-id="a4618-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="a4618-129">例如，如果服務有四個端點，其中兩個具有相同的接聽 URI，便會呼叫這個方法三次。</span><span class="sxs-lookup"><span data-stu-id="a4618-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="a4618-130">這是因為 `bindingParameters` 是以每個通道堆疊為目標，且每個接聽 URI 都有一個通道堆疊。</span><span class="sxs-lookup"><span data-stu-id="a4618-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="a4618-131">由於每個呼叫都會收到該接聽 URI 上的這些端點，因此兩個呼叫會分別取得單一 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>，而一個呼叫會取得兩個 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 物件的集合。</span><span class="sxs-lookup"><span data-stu-id="a4618-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4618-132">所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。</span><span class="sxs-lookup"><span data-stu-id="a4618-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="a4618-133"><xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。</span><span class="sxs-lookup"><span data-stu-id="a4618-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="a4618-134">服務描述。</span><span class="sxs-lookup"><span data-stu-id="a4618-134">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="a4618-135">目前正在建置的主機。</span><span class="sxs-lookup"><span data-stu-id="a4618-135">The host that is currently being built.</span></span></param>
        <summary><span data-ttu-id="a4618-136">提供功能以變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、訊息或參數攔截器、安全性延伸或其他自訂延伸物件。</span><span class="sxs-lookup"><span data-stu-id="a4618-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4618-137">您可以實作 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法以檢查或修改正在建構的 <xref:System.ServiceModel.ServiceHostBase> 物件，以便支援某些自訂執行情況。</span><span class="sxs-lookup"><span data-stu-id="a4618-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4618-138">所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。</span><span class="sxs-lookup"><span data-stu-id="a4618-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="a4618-139"><xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。</span><span class="sxs-lookup"><span data-stu-id="a4618-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4618-140">下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。</span><span class="sxs-lookup"><span data-stu-id="a4618-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="a4618-141">在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。</span><span class="sxs-lookup"><span data-stu-id="a4618-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="a4618-142">下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。</span><span class="sxs-lookup"><span data-stu-id="a4618-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="a4618-143">在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。</span><span class="sxs-lookup"><span data-stu-id="a4618-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="a4618-144">服務描述。</span><span class="sxs-lookup"><span data-stu-id="a4618-144">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="a4618-145">目前正在建構的服務主機。</span><span class="sxs-lookup"><span data-stu-id="a4618-145">The service host that is currently being constructed.</span></span></param>
        <summary><span data-ttu-id="a4618-146">提供檢查服務主機和服務描述的功能，以確認服務能夠順利執行。</span><span class="sxs-lookup"><span data-stu-id="a4618-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4618-147">您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 方法來確認目前的服務是否可以根據您的情況正確執行。</span><span class="sxs-lookup"><span data-stu-id="a4618-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4618-148">所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。</span><span class="sxs-lookup"><span data-stu-id="a4618-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="a4618-149"><xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。</span><span class="sxs-lookup"><span data-stu-id="a4618-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4618-150">下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。</span><span class="sxs-lookup"><span data-stu-id="a4618-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="a4618-151">在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。</span><span class="sxs-lookup"><span data-stu-id="a4618-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="a4618-152">下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。</span><span class="sxs-lookup"><span data-stu-id="a4618-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="a4618-153">在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。</span><span class="sxs-lookup"><span data-stu-id="a4618-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>