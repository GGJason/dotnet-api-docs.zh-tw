<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dc4826e93543f6c304bfab86dfb9281a94dd76ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417902" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>提供機制以在整個服務上修改或插入自訂延伸，包括 <see cref="T:System.ServiceModel.ServiceHostBase" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Description.IServiceBehavior>，以在應用程式層級修改、檢查或延伸服務執行的某些方面：  
  
-   您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法來變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、訊息或參數攔截器、安全性延伸或其他自訂延伸物件。  
  
-   使用<xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>方法來檢查描述之前 Windows Communication Foundation (WCF) 建構執行的服務，以確認可以正確執行。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法，將服務的自訂資訊傳遞至繫結項目，以便能夠正確支援服務。  
  
 <xref:System.ServiceModel.Description.IServiceBehavior> 物件可以利用其中任何一種方法，但通常只有一種是重要的；在這種情況下，未使用的方法不需任何值便可傳回。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。 <xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查之用；如果您修改這些物件，執行行為便沒有定義。  
  
 如果要執行預定的自訂工作，必須在建構服務執行階段之前將 <xref:System.ServiceModel.Description.IServiceBehavior> 物件加入至 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 屬性。 執行這項作業的方法有三種：  
  
-   在 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 物件上呼叫 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 方法之前，以程式設計方式將自訂服務行為加入至 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 屬性。  
  
-   建立實作 <xref:System.ServiceModel.Description.IServiceBehavior> 的自訂屬性，並用來標示要修改的服務類別。 當<xref:System.ServiceModel.ServiceHost>物件建構，WCF 會使用反映來探索服務類型的屬性。 如果任何屬性實作 <xref:System.ServiceModel.Description.IServiceBehavior>，便會加入至 <xref:System.ServiceModel.Description.ServiceDescription> 上的行為集合。  
  
-   延伸 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 類別，以支援應用程式或電腦組態檔中的行為的規格。 如需詳細資訊，請參閱＜範例＞一節。  
  
 在 WCF 中的服務行為的範例包括<xref:System.ServiceModel.ServiceBehaviorAttribute>屬性<xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType>和<xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType>行為。  
  
   
  
## Examples  
 下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。 在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。  
  
 下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">服務的服務描述。</param>
        <param name="serviceHostBase">服務的主機。</param>
        <param name="endpoints">服務端點。</param>
        <param name="bindingParameters">繫結項目可存取的自訂物件。</param>
        <summary>提供將自訂資料傳遞到繫結項目以支援合約實作的功能。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法將自訂資料物件加入至 `parameters` 集合，繫結項目可使用該集合取得額外的資訊，讓它們可以支援合約。  
  
 這個方法會針對每個接聽 URI 呼叫一次。 例如，如果服務有四個端點，其中兩個具有相同的接聽 URI，便會呼叫這個方法三次。 這是因為 `bindingParameters` 是以每個通道堆疊為目標，且每個接聽 URI 都有一個通道堆疊。 由於每個呼叫都會收到該接聽 URI 上的這些端點，因此兩個呼叫會分別取得單一 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>，而一個呼叫會取得兩個 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 物件的集合。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。 <xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">服務描述。</param>
        <param name="serviceHostBase">目前正在建置的主機。</param>
        <summary>提供功能以變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、訊息或參數攔截器、安全性延伸或其他自訂延伸物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法以檢查或修改正在建構的 <xref:System.ServiceModel.ServiceHostBase> 物件，以便支援某些自訂執行情況。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。 <xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。  
  
   
  
## Examples  
 下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。 在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。  
  
 下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">服務描述。</param>
        <param name="serviceHostBase">目前正在建構的服務主機。</param>
        <summary>提供檢查服務主機和服務描述的功能，以確認服務能夠順利執行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 方法來確認目前的服務是否可以根據您的情況正確執行。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IServiceBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 物件當做參數。 <xref:System.ServiceModel.Description.ServiceDescription> 參數僅供檢查和插入自訂項目；如果您要修改這些物件，就無法定義執行行為。  
  
   
  
## Examples  
 下列程式碼範例將示範如何使用組態檔中指定的服務行為，將自訂錯誤處理常式插入服務應用程式中。 在此範例中，錯誤處理常式會攔截所有例外狀況，並將其轉換為接著會傳回至用戶端的自訂 `GreetingFault` SOAP 錯誤。  
  
 下列 <xref:System.ServiceModel.Description.IServiceBehavior> 實作不會新增任何繫結參數物件、會將自訂 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 物件新增至每個 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性中，然後驗證要套用服務行為且 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 的型別為 `GreetingFault` 的每個服務作業。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 在此範例中，行為類別也會實作 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，使用它可以將服務行為插入應用程式組態檔，如下列程式碼範例的示範。  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>