<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56717b15a48dcbf3c245a67f6ee66d0ccf41e8bb" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548155" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>實作可用於延伸服務或用戶端應用程式中端點的執行階段行為的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IEndpointBehavior> 介面，以在用戶端或服務應用程式的應用程式層級修改、檢查或延伸端點執行的某些方面。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法在執行階段傳遞自訂資料，讓繫結可支援自訂行為。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法在用戶端應用程式中修改、檢查或插入延伸至端點。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法在服務應用程式中修改、檢查或插入延伸至端點執行。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法來確認 <xref:System.ServiceModel.Description.ServiceEndpoint> 符合特定需求。 這可以用於確保端點已啟用特定的組態設定，支援特定功能和其他需求。  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> 物件可以利用其中任何一種方法，但通常只有一種是重要的；在這種情況下，未使用的方法不需執行動作就可以傳回。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IEndpointBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件做為參數。 這個參數僅供檢查之用；如果您修改 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，執行行為就會變成未定義狀態。  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> 物件通常用於存取服務應用程式中 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> 物件的各種不同屬性，以及用戶端應用程式中的 <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>。 此外，您可以使用 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 屬性分別存取雙工用戶端和服務的屬性。  
  
 如需各種可用屬性和自訂的說明，請參閱 <<c0> [ 擴充 ServiceHost 與服務模型層](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)。  
  
 一旦決定自訂 （並視需要實作自訂介面） 和<xref:System.ServiceModel.Description.IEndpointBehavior>已決定適當的自訂範圍，將自訂必須插入 Windows 通訊Foundation (WCF) 執行階段藉由實作<xref:System.ServiceModel.Description.IEndpointBehavior>並將端點行為加入至執行階段。  
  
 有兩種方法可將行為加入至執行階段：  
  
-   在開啟服務主機 (服務應用程式中) 或通道處理站 (用戶端應用程式中) 之前，以程式設計的方式將自訂端點行為加入至 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> 屬性。  
  
-   使用應用程式組態檔來設定行為。 如需詳細資訊，請參閱 < [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md)。  
  
 若要執行預定的服務自訂工作，則必須在建構服務執行階段之前將 <xref:System.ServiceModel.Description.IEndpointBehavior> 物件加入至 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 屬性，這個執行階段會在針對 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 呼叫 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法時發生。 若要執行用戶端自訂工作，則必須在針對 <xref:System.ServiceModel.Description.IEndpointBehavior> 呼叫 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 方法或 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 方法之前，先將 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 物件加入至 <xref:System.ServiceModel.ChannelFactory%601> 屬性。  
  
   
  
## Examples  
 下列程式碼範例會示範將 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 物件新增至服務應用程式的端點行為的實作。 在這種情況中，`EndpointBehaviorMessageInspector` 類別會實作 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 以檢查傳入和傳出訊息、<xref:System.ServiceModel.Description.IEndpointBehavior> 介面將偵測器類別插入套用此行為的所有端點的檢查系統，以及 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 以使用應用程式組態檔來啟用訊息偵測器行為。  
  
 第一個步驟是實作訊息偵測器。  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 下一個程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法將訊息偵測器加入 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 屬性。  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 下列程式碼範例會示範 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 的實作，以便從組態檔啟用訊息偵測器行為。  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 最後，下列組態檔會顯示可以如何從組態來使用前面的範例。  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">要修改的端點。</param>
        <param name="bindingParameters">繫結項目支援行為所需的物件。</param>
        <summary>您可以實作這個方法，在執行階段將資料傳遞至繫結，以支援自訂行為。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法，為繫結項目提供支援端點行為所需要的額外物件。 如果在此處加入繫結參數，當建立通道接聽程式或通道處理站時，繫結可以找出這些物件。 一般而言，您會實作 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法將有關端點的資訊傳遞至自訂繫結項目，以便能夠正確建置支援通道。 如果不需要修改，則不會傳回值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">要自訂的端點。</param>
        <param name="clientRuntime">要自訂的用戶端執行階段。</param>
        <summary>實作端點上用戶端的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法，以在搭配端點的所有訊息上或針對特定作業檢視、修改或將自訂延伸加入至用戶端執行階段。 如需有關您可以使用用戶端執行階段物件進行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation>。  
  
 如果行為只預定用於服務應用程式，建議使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法擲回 <xref:System.NotImplementedException>。  
  
 由於其他行為可能已經加入或從執行階段移除某些作業，因此不保證描述中的作業數目和 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 屬性中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 物件相同。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">公開合約的端點。</param>
        <param name="endpointDispatcher">要修改或延伸的端點發送器。</param>
        <summary>實作端點上服務的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法，以在所有訊息上或針對端點中的特定作業檢視、修改或延伸服務執行階段。 如需您可以在服務應用程式中執行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>。  
  
 如果行為只預定用於用戶端應用程式，建議使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法擲回 <xref:System.NotImplementedException> 例外狀況。  
  
 請注意，當使用回呼合約時，描述中可以有兩個相同名稱的作業 (每個方向一個)。 如果您正在逐一查看作業，必須聯結端點 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 和由 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 屬性傳回的項目之間的訊息方向。  
  
 此外，由於其他行為可能已經加入或從執行階段移除某些作業，因此不保證描述中的作業數目和 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 屬性中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> 物件相同。  
  
   
  
## Examples  
 下列程式碼範例會示範將 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 物件新增至服務應用程式的端點行為的實作。 在這種情況中，`EndpointBehaviorMessageInspector` 類別會實作 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 以檢查傳入和傳出訊息、<xref:System.ServiceModel.Description.IEndpointBehavior> 介面將偵測器類別插入套用此行為的所有端點的檢查系統，以及 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 以使用應用程式組態檔來啟用訊息偵測器行為。  
  
 第一個步驟是實作訊息偵測器。  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 下一個程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法將訊息偵測器加入 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 屬性。  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 下列程式碼範例會示範 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 的實作，以便從組態檔啟用訊息偵測器行為。  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 最後，下列組態檔會顯示可以如何從組態來使用前面的範例。  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">要驗證的端點。</param>
        <summary>您可以實作這個方法以確認端點符合某些預定的準則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法來檢查結構，以確認任何一組條件。 使用這個方法，不需要在 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 或 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 中執行任何自訂。 如果端點通過驗證，就會傳回，否則會擲回例外狀況。  
  
 例如，<xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法可用於確保所有的端點都使用經過認可的企業繫結。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>