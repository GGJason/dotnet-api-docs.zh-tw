<Type Name="MetadataResolver" FullName="System.ServiceModel.Description.MetadataResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d74ae750b135b6054dad6d8ea0395fce5611640" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37456508" /></Metadata><TypeSignature Language="C#" Value="public static class MetadataResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MetadataResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.MetadataResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class MetadataResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataResolver abstract sealed" />
  <TypeSignature Language="F#" Value="type MetadataResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>擷取及匯入做為 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件的中繼資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.MetadataResolver> 類別，快速地從中繼資料匯入服務的端點。 這個類別會下載中繼資料，並將它轉換為 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件。 若要下載中繼資料並處理該資訊以做為 <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType>，請參閱 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 類別，將中繼資料當做 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件集合傳回，接著用來連接至服務執行個體。  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 下列程式碼範例會示範如何透過 HTTP GET 要求而非 WS-Transfer，使用 <xref:System.ServiceModel.Description.MetadataResolver> 下載中繼資料並將中繼資料當做 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件集合傳回。  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginResolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始非同步呼叫，這個呼叫會將中繼資料位址解析成該服務的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這些方法會開始 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法的非同步版本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址和非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的預設值以擷取中繼資料，而預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 則為 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約或回呼為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 <see langword="null" />，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址和非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的預設值以擷取中繼資料，而預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 則為 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 使用這個方法時，您需要指定合約類型。 宣告服務介面在用戶端程式碼或使用 Svcutil.exe 產生 WCF 用戶端，您可以指定的合約。 如果介面發生變更 （新增新的作業，例如） 您必須更新用戶端程式碼中的介面或產生新的 WCF 用戶端。 如果沒有這樣做，則會擲回例外狀況。 例如，您的服務會實作名為 ICalculator (定義 Add()、Sub()、Mult() 和 Div()) 的服務合約。 您建立用戶端應用程式，並產生 WCF 用戶端。 接著將名為 Echo() 的方法加入至 ICalculator。 如果接著撰寫呼叫的應用程式<xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29>而不會產生新的 WCF 用戶端中，您收到下列例外狀況。  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約或回呼為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="client">用來擷取中繼資料的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" />、非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 是 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約、用戶端或回呼為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 值、非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 的預設值是用來擷取中繼資料。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約或回呼為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" />、非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 的預設值是用來擷取中繼資料。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約或回呼為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <param name="client">用來擷取中繼資料的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <param name="callback">呼叫完成時叫用的非同步回呼委派。</param>
        <param name="asyncState">與非同步呼叫相關聯的狀態。</param>
        <summary>使用指定的位址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" />、<see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />、非同步狀態與委派，開始非同步呼叫以將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 物件。</summary>
        <returns><see cref="T:System.IAsyncResult" />，參考非同步解析作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約或回呼為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndResolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection EndResolve (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection EndResolve(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndResolve (result As IAsyncResult) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ EndResolve(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="static member EndResolve : IAsyncResult -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.EndResolve result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">從 <see cref="T:System.IAsyncResult" /> 方法的呼叫所接收的 <see cref="Overload:System.ServiceModel.Description.MetadataResolver.BeginResolve" /> 物件。</param>
        <summary>完成非同步呼叫，以將中繼資料解析成端點集合。</summary>
        <returns>中繼資料內含端點的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結束其中一個 <xref:System.ServiceModel.Description.MetadataResolver.BeginResolve%2A> 方法的非同步呼叫。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>下載中繼資料位址，並解析成該服務的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
 針對所有同步和非同步 `Resolve` 方法，如果沒有匯入任何端點或者沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <summary>使用指定的中繼資料位址，將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的預設值以擷取中繼資料，而預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 則為 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址或合約集合為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contract">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <summary>針對指定位址的指定合約下載中繼資料位址，並解析成 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法，指定下載及解析中繼資料時要使用的合約和中繼資料位址。  
  
 會使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的預設值以擷取中繼資料，而預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 則為 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 使用這個方法時，您需要指定合約類型。 宣告服務介面在用戶端程式碼或使用 Svcutil.exe 產生 WCF 用戶端，您可以指定的合約。 如果介面發生變更 （新增新的作業，例如） 您必須更新用戶端程式碼中的介面或產生新的 WCF 用戶端。 如果沒有這樣做，則會擲回例外狀況。 例如，您的服務會實作名為 ICalculator (定義 Add()、Sub()、Mult() 和 Div()) 的服務合約。 您建立用戶端應用程式，並產生 WCF 用戶端。 接著將名為 Echo() 的方法加入至 ICalculator。 如果接著撰寫呼叫的應用程式<xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29>而不會產生新的 WCF 用戶端中，您收到下列例外狀況。  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 類別，將中繼資料當做 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件集合傳回，接著用來連接至服務執行個體。  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址或合約為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="client">用來擷取中繼資料的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <summary>使用指定的中繼資料位址和 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 物件。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 是 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約集合或用戶端為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <summary>使用指定的位址和傳輸模式，將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 的預設值是用來擷取中繼資料。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址或合約集合為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contract">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <summary>使用指定的位址和傳輸模式，將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法指定合約、位址和要使用的下載機制。  
  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 的預設值是用來擷取中繼資料。  
  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
   
  
## Examples  
 下列程式碼範例會示範如何透過 HTTP GET 要求而非 WS-Transfer，使用 <xref:System.ServiceModel.Description.MetadataResolver> 下載中繼資料並將中繼資料當做 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件集合傳回。  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址或合約為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">要下載並解析其中繼資料的合約。</param>
        <param name="address">中繼資料的位址。</param>
        <param name="mode">擷取模式。</param>
        <param name="client">用來擷取中繼資料的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <summary>使用指定的位址、傳輸模式和傳輸用戶端，將中繼資料位址解析成指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件。</summary>
        <returns>指定之合約的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下載中繼資料，但不想將資訊解析成 <xref:System.ServiceModel.Description.ServiceEndpoint> 物件，請直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果沒有匯入端點，或者如果沒有符合合約的端點，則會傳回空集合。 如果傳回空集合，則會寫入警告追蹤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">位址、合約集合或用戶端為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 為空的、至少 <paramref name="contracts" /> 的其中一個成員為 null，或者 <paramref name="contracts" /> 包含一個以上同名且命名空間相同的合約。</exception>
      </Docs>
    </Member>
  </Members>
</Type>