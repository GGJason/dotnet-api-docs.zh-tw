<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f81e59d8133a5c2eb36be8e837971aebcd0fe8ef" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>實作方法，這些方法可用於延伸服務或用戶端應用程式中作業的執行階段行為。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior> 介面，以在用戶端或服務應用程式的應用程式層級修改、檢查或延伸作業執行的某些方面。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 方法在執行階段傳遞自訂資料，讓繫結可支援自訂行為。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 方法來修改、檢查或插入延伸至用戶端應用程式中的用戶端發送器。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 方法來修改、檢查或插入延伸至服務應用程式中的作業執行。  
  
-   您可以使用 <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> 方法來確認 <xref:System.ServiceModel.Description.OperationDescription> 符合特定需求。 這可以用於確保作業已啟用特定的組態設定，而且支援特定功能和其他需求。  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> 物件可以利用其中任何一種方法，但通常只有一種是重要的；在這種情況下，未使用的方法不需執行動作就可以傳回。  
  
> [!NOTE]
>  所有的 <xref:System.ServiceModel.Description.IOperationBehavior> 方法都會傳遞 <xref:System.ServiceModel.Description.OperationDescription> 物件做為參數。 這個參數僅供檢查之用；如果您修改 <xref:System.ServiceModel.Description.OperationDescription> 物件，執行行為就會變成未定義狀態。  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> 物件通常用於存取服務應用程式中 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 物件和用戶端應用程式中 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> 物件的各種屬性。  
  
 一般而言，開發人員會先檢閱擴充點，以判斷哪個自訂選項適合應用程式的情況，然後在適當的範圍內實作自訂。 例如，<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 物件可以為整個服務中的所有訊息插入自訂，而 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 物件可以為特定合約上的所有訊息插入自訂等等。 如需各種可用屬性和自訂的說明，請參閱[擴充 ServiceHost 與服務模型層](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)。  
  
 一旦決定自訂 （並視需要實作自訂介面） 和<xref:System.ServiceModel.Description.IOperationBehavior>是適當的範圍內的自訂功能，必須插入自訂至 Windows Communication Foundation (WCF) 執行階段藉由實作<xref:System.ServiceModel.Description.IOperationBehavior>並將作業行為加入至執行階段。  
  
 有兩種方法可將 <xref:System.ServiceModel.Description.IOperationBehavior> 加入至執行階段：  
  
-   在開啟服務主機 (在服務應用程式中) 或通道處理站 (在用戶端應用程式中) 之前，以程式設計的方式將自訂作業行為加入至 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 屬性。  
  
-   使用自訂屬性加入行為。  
  
 若要執行預定的服務自訂工作，則必須在建構服務執行階段之前將 <xref:System.ServiceModel.Description.IOperationBehavior> 物件加入至 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 屬性，這個執行階段會在針對 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 呼叫 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法時發生。 若要執行用戶端自訂工作，則必須在針對 <xref:System.ServiceModel.Description.IOperationBehavior> 呼叫 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 方法或 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 方法之前，先將 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 物件加入至 <xref:System.ServiceModel.ChannelFactory%601> 屬性。  
  
 雖然作業行為是設計用來輕鬆存取個別作業範圍的執行階段，但是您可以藉由存取父執行階段物件來存取較大範圍的執行階段。  
  
   
  
## Examples  
 下列程式碼範例將示範如何在針對作業叫用偵測器時，實作寫入主控台的 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>。 這項自訂只能附加到 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>，所以通常是由作業行為插入。  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 下列程式碼範例將示範作業行為如何將參數偵測器附加到執行階段。  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">正在檢查的作業。 只能用於檢查。 如果作業描述受到修改，結果就會變成未定義狀態。</param>
        <param name="bindingParameters">繫結項目支援行為所需的物件集合。</param>
        <summary>您可以實作這個方法，在執行階段將資料傳遞至繫結，以支援自訂行為。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 方法，為繫結項目提供支援作業行為所需要的額外物件。 如果在此處加入繫結參數，當建立通道接聽程式或通道處理站時，繫結可以找出並處理這些物件。 一般而言，您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 方法將有關作業的資訊傳遞至自訂繫結項目，以便能夠正確建置支援通道。 如果不需要修改，則不會傳回值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">正在檢查的作業。 只能用於檢查。 如果作業描述受到修改，結果就會變成未定義狀態。</param>
        <param name="clientOperation">公開 <c>operationDescription</c> 描述之作業自訂屬性的執行階段物件。</param>
        <summary>實作作業上用戶端的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 方法，以在搭配特定作業使用的所有訊息上檢視、修改或將自訂延伸加入至用戶端執行階段。 如需有關您可以使用用戶端執行階段物件進行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation>。  
  
 如果行為只預定用於服務應用程式，建議使用 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 方法擲回 <xref:System.NotImplementedException>。  
  
   
  
## Examples  
 下列程式碼範例將示範如何在針對作業叫用偵測器時，實作寫入主控台的 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>。 這項自訂只能附加到 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>，所以通常是由作業行為插入。  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 下列程式碼範例將示範作業行為如何將參數偵測器附加到執行階段。  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">正在檢查的作業。 只能用於檢查。 如果作業描述受到修改，結果就會變成未定義狀態。</param>
        <param name="dispatchOperation">公開 <c>operationDescription</c> 描述之作業自訂屬性的執行階段物件。</param>
        <summary>實作作業上服務的修改或延伸。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 方法，以在所有訊息上或針對特定作業檢視、修改或延伸服務執行階段。 如需您可以在服務應用程式中執行何種自訂的詳細資訊，請參閱 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>。  
  
 如果行為只預定用於用戶端應用程式，建議使用 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 方法擲回 <xref:System.NotImplementedException> 例外狀況。  
  
   
  
## Examples  
 下列程式碼範例將示範如何在針對作業叫用偵測器時，實作寫入主控台的 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>。 這項自訂只能附加到 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>，所以通常是由作業行為插入。  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 下列程式碼範例將示範作業行為如何將參數偵測器附加到執行階段。  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">正在檢查的作業。 只能用於檢查。 如果作業描述受到修改，結果就會變成未定義狀態。</param>
        <summary>您可以實作這個方法，確認作業符合某些所需的條件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以實作 <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> 方法來檢查結構，以確認任何一組條件。 使用這個方法，不需要在 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 或 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 中執行任何自訂。 如果作業通過驗證就會傳回，否則會擲回例外狀況。  
  
 例如，<xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> 方法可用於確保作業已獲授權。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>