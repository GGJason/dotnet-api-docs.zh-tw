<Type Name="IEnumerable" FullName="System.Collections.IEnumerable">
  <TypeSignature Language="C#" Value="public interface IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IEnumerable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("496B0ABE-CDEE-11d3-88E8-00902754C43A")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c7b48-101">公開能逐一查看非泛型集合內容一次的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="c7b48-101">Exposes an enumerator, which supports a simple iteration over a non-generic collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7b48-102"><xref:System.Collections.IEnumerable> 是可列舉的所有非泛型集合的基底介面。</span><span class="sxs-lookup"><span data-stu-id="c7b48-102"><xref:System.Collections.IEnumerable> is the base interface for all non-generic collections that can be enumerated.</span></span> <span data-ttu-id="c7b48-103">這個介面的泛型版本，請參閱<xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-103">For the generic version of this interface see <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c7b48-104"><xref:System.Collections.IEnumerable> 包含單一方法<xref:System.Collections.IEnumerable.GetEnumerator%2A>，它會傳回<xref:System.Collections.IEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-104"><xref:System.Collections.IEnumerable> contains a single method, <xref:System.Collections.IEnumerable.GetEnumerator%2A>, which returns an <xref:System.Collections.IEnumerator>.</span></span> <span data-ttu-id="c7b48-105"><xref:System.Collections.IEnumerator> 可讓您逐一查看集合的公開<xref:System.Collections.IEnumerator.Current%2A>屬性和<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Reset%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7b48-105"><xref:System.Collections.IEnumerator> provides the ability to iterate through the collection by exposing a <xref:System.Collections.IEnumerator.Current%2A> property and <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="c7b48-106">若要實作的最佳作法是<xref:System.Collections.IEnumerable>和<xref:System.Collections.IEnumerator>上集合類別，以便讓`foreach`(`For Each`在 Visual Basic 中) 語法，但是實作<xref:System.Collections.IEnumerable>就不需要。</span><span class="sxs-lookup"><span data-stu-id="c7b48-106">It is a best practice to implement <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> on your collection classes to enable the `foreach` (`For Each` in Visual Basic) syntax, however implementing <xref:System.Collections.IEnumerable> is not required.</span></span> <span data-ttu-id="c7b48-107">如果您的集合不實作<xref:System.Collections.IEnumerable>，您仍然必須遵循以支援此語法所提供的迭代器模式`GetEnumerator`傳回的介面、 類別或結構的方法。</span><span class="sxs-lookup"><span data-stu-id="c7b48-107">If your collection does not implement <xref:System.Collections.IEnumerable>, you must still follow the iterator pattern to support this syntax by providing a `GetEnumerator` method that returns an interface, class or struct.</span></span> <span data-ttu-id="c7b48-108">當使用 Visual Basic，您必須提供<xref:System.Collections.IEnumerator>實作，其由`GetEnumerator`。</span><span class="sxs-lookup"><span data-stu-id="c7b48-108">When using Visual Basic, you must provide an <xref:System.Collections.IEnumerator> implementation, which is returned by `GetEnumerator`.</span></span> <span data-ttu-id="c7b48-109">使用 C# 開發必須時提供類別，其中包含`Current`屬性，以及`MoveNext`和`Reset`所述的方法<xref:System.Collections.IEnumerator>，但類別沒有實作<xref:System.Collections.IEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-109">When developing with C# you must provide a class that contains a `Current` property, and `MoveNext` and `Reset` methods as described by <xref:System.Collections.IEnumerator>, but the class does not have to implement <xref:System.Collections.IEnumerator>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7b48-110">下列程式碼範例示範如何逐一查看所實作的自訂集合的最佳做法<xref:System.Collections.IEnumerable>和<xref:System.Collections.IEnumerator>介面。</span><span class="sxs-lookup"><span data-stu-id="c7b48-110">The following code example demonstrates the best practice for iterating a custom collection by implementing the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> interfaces.</span></span> <span data-ttu-id="c7b48-111">在此範例中，這些介面的成員不會明確呼叫，但都實作，以支援使用`foreach`(`For Each`在 Visual Basic 中) 來逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="c7b48-111">In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of `foreach` (`For Each` in Visual Basic) to iterate through the collection.</span></span> <span data-ttu-id="c7b48-112">這個範例是完整的主控台應用程式。</span><span class="sxs-lookup"><span data-stu-id="c7b48-112">This example is a complete Console app.</span></span> <span data-ttu-id="c7b48-113">若要編譯 Visual Basic 應用程式，變更**啟始物件**至**Sub Main**在專案的**屬性**頁面。</span><span class="sxs-lookup"><span data-stu-id="c7b48-113">To compile the Visual Basic app, change the **Startup object** to **Sub Main** in the project’s **Properties** page.</span></span>  
  
 <span data-ttu-id="c7b48-114">如需範例，示範如何實作<xref:System.Collections.IEnumerable>介面，請參閱[集合類別中實作 IEnumerable 介面](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</span><span class="sxs-lookup"><span data-stu-id="c7b48-114">For a sample that shows how to implement the <xref:System.Collections.IEnumerable> interface, see [Implementing the IEnumerable Interface in a Collection Class](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerable.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7b48-115">傳回逐一查看集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="c7b48-115">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="c7b48-116"><see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</span><span class="sxs-lookup"><span data-stu-id="c7b48-116">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7b48-117">C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `For Each`) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="c7b48-117">The `foreach` statement of the C# language (`For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="c7b48-118">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="c7b48-118">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="c7b48-119">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="c7b48-119">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="c7b48-120">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="c7b48-120">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="c7b48-121"><xref:System.Collections.IEnumerator.Reset%2A>方法也會列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="c7b48-121">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span>  <span data-ttu-id="c7b48-122">此位置<xref:System.Collections.IEnumerator.Current%2A>未定義屬性。</span><span class="sxs-lookup"><span data-stu-id="c7b48-122">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="c7b48-123">因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>方法，以將列舉值前進到第一個項目，再讀取的值集合的<xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-123">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="c7b48-124"><xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-124"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="c7b48-125"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="c7b48-125"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="c7b48-126">如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="c7b48-126">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="c7b48-127">列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="c7b48-127">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="c7b48-128">如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="c7b48-128">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="c7b48-129">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="c7b48-129">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="c7b48-130">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="c7b48-130">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="c7b48-131">如果對集合進行變更，例如加入、修改或刪除項目，列舉程式會永久失效，且其行為未定義。</span><span class="sxs-lookup"><span data-stu-id="c7b48-131">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="c7b48-132">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="c7b48-132">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="c7b48-133">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="c7b48-133">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="c7b48-134">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="c7b48-134">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7b48-135">下列程式碼範例示範實作<xref:System.Collections.IEnumerable>自訂集合的介面。</span><span class="sxs-lookup"><span data-stu-id="c7b48-135">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerable> interfaces for a custom collection.</span></span> <span data-ttu-id="c7b48-136">在此範例中，<xref:System.Collections.IEnumerable.GetEnumerator%2A>未明確呼叫，但它會實作以支援使用`foreach`(`For Each`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="c7b48-136">In this example, <xref:System.Collections.IEnumerable.GetEnumerator%2A> is not explicitly called, but it is implemented to support the use of `foreach` (`For Each` in Visual Basic).</span></span> <span data-ttu-id="c7b48-137">這個程式碼範例是一個較大範例的一部分<xref:System.Collections.IEnumerable>介面。</span><span class="sxs-lookup"><span data-stu-id="c7b48-137">This code example is part of a larger example for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>