<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEnumerable.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe072b174fa23a4232cd0583f55c9377b122c0b4e183.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b174fa23a4232cd0583f55c9377b122c0b4e183</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.IEnumerable">
          <source>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</source>
          <target state="translated">公開能逐一查看非泛型集合內容一次的列舉程式。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> is the base interface for all non-generic collections that can be enumerated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> 是可列舉的所有非泛型集合的基底介面。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>For the generic version of this interface see <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">這個介面的泛型版本，請參閱<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> contains a single method, <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> 包含單一方法<ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>，它會傳回<ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> provides the ability to iterate through the collection by exposing a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> 可讓您逐一查看集合的公開<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>屬性和<ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>It is a best practice to implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> on your collection classes to enable the <ph id="ph3">`foreach`</ph> (<ph id="ph4">`For Each`</ph> in Visual Basic) syntax, however implementing <ph id="ph5">&lt;xref:System.Collections.IEnumerable&gt;</ph> is not required.</source>
          <target state="translated">若要實作的最佳作法是<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>上集合類別，以便讓<ph id="ph3">`foreach`</ph>(<ph id="ph4">`For Each`</ph>在 Visual Basic 中) 語法，但是實作<ph id="ph5">&lt;xref:System.Collections.IEnumerable&gt;</ph>就不需要。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>If your collection does not implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you must still follow the iterator pattern to support this syntax by providing a <ph id="ph2">`GetEnumerator`</ph> method that returns an interface, class or struct.</source>
          <target state="translated">如果您的集合不實作<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>，您仍然必須遵循以支援此語法所提供的迭代器模式<ph id="ph2">`GetEnumerator`</ph>傳回的介面、 類別或結構的方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>When using Visual Basic, you must provide an <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> implementation, which is returned by <ph id="ph2">`GetEnumerator`</ph>.</source>
          <target state="translated">當使用 Visual Basic，您必須提供<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>實作，其由<ph id="ph2">`GetEnumerator`</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>When developing with C# you must provide a class that contains a <ph id="ph1">`Current`</ph> property, and <ph id="ph2">`MoveNext`</ph> and <ph id="ph3">`Reset`</ph> methods as described by <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph>, but the class does not have to implement <ph id="ph5">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</source>
          <target state="translated">使用 C# 開發必須時提供類別，其中包含<ph id="ph1">`Current`</ph>屬性，以及<ph id="ph2">`MoveNext`</ph>和<ph id="ph3">`Reset`</ph>所述的方法<ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph>，但類別沒有實作<ph id="ph5">&lt;xref:System.Collections.IEnumerator&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>The following code example demonstrates the best practice for iterating a custom collection by implementing the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces.</source>
          <target state="translated">下列程式碼範例示範如何逐一查看所實作的自訂集合的最佳做法<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph> in Visual Basic) to iterate through the collection.</source>
          <target state="translated">在此範例中，這些介面的成員不會明確呼叫，但都實作，以支援使用<ph id="ph1">`foreach`</ph>(<ph id="ph2">`For Each`</ph>在 Visual Basic 中) 來逐一查看集合。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>This example is a complete Console app.</source>
          <target state="translated">這個範例是完整的主控台應用程式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>To compile the Visual Basic app, change the <bpt id="p1">**</bpt>Startup object<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Sub Main<ept id="p2">**</ept> in the project’s <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept> page.</source>
          <target state="translated">若要編譯 Visual Basic 應用程式，變更<bpt id="p1">**</bpt>啟始物件<ept id="p1">**</ept>至<bpt id="p2">**</bpt>Sub Main<ept id="p2">**</ept>在專案的<bpt id="p3">**</bpt>屬性<ept id="p3">**</ept>頁面。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>For a sample that shows how to implement the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, see <bpt id="p1">[</bpt>Implementing the IEnumerable Interface in a Collection Class<ept id="p1">](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</ept></source>
          <target state="translated">如需範例，示範如何實作<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>介面，請參閱<bpt id="p1">[</bpt>集合類別中實作 IEnumerable 介面<ept id="p1">](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">傳回逐一查看集合的列舉值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 物件，可用於逐一查看集合。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">C# 語言的 <ph id="ph1">`foreach`</ph> 陳述式 (在 Visual Basic 中為 <ph id="ph2">`For Each`</ph>) 會隱藏列舉值的複雜度。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建議您使用 <ph id="ph1">`foreach`</ph>，而不要直接使用列舉值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">一開始，列舉程式位在集合中的第一個項目之前。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法也會列舉值帶回至這個位置。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">此位置<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>未定義屬性。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，您必須呼叫<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法，以將列舉值前進到第一個項目，再讀取的值集合的<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 會傳回相同的物件直到呼叫 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 或 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 會將 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 設定為下一個項目。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>傳回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列舉值位於這個位置上，後續呼叫<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>也會傳回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最後一個呼叫<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>傳回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>是未定義。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要再次將 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 設定為集合的第一個元素，您可以在呼叫 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 之後，接著呼叫 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合維持不變，列舉程式就持續有效。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果對集合進行變更，例如加入、修改或刪除項目，列舉程式會永久失效，且其行為未定義。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">下列程式碼範例示範實作<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>自訂集合的介面。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>In this example, <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> is not explicitly called, but it is implemented to support the use of <ph id="ph2">`foreach`</ph> (<ph id="ph3">`For Each`</ph> in Visual Basic).</source>
          <target state="translated">在此範例中，<ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>未明確呼叫，但它會實作以支援使用<ph id="ph2">`foreach`</ph>(<ph id="ph3">`For Each`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>This code example is part of a larger example for the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">這個程式碼範例是一個較大範例的一部分<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>介面。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>