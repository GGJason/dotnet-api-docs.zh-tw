<Type Name="Queue" FullName="System.Collections.Queue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c13a095cb4edc6cca59925f4cd0e5e99da7adec5" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56072373" /></Metadata><TypeSignature Language="C#" Value="public class Queue : ICloneable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Queue" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue&#xA;Implements ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queue : ICloneable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Queue = class&#xA;    interface ICollection&#xA;    interface ICloneable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f1cfb-101">表示物件的先進先出 (FIFO) 集合。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-101">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f1cfb-102">這個類別會實作佇列，以循環的陣列。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-102">This class implements a queue as a circular array.</span></span> <span data-ttu-id="f1cfb-103">物件儲存在<xref:System.Collections.Queue>其中一端插入和移除其他。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-103">Objects stored in a <xref:System.Collections.Queue> are inserted at one end and removed from the other.</span></span>  

> [!IMPORTANT]
>  <span data-ttu-id="f1cfb-104">我們不建議您改用`Queue`開發新的類別。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-104">We don't recommend that you use the `Queue` class for new development.</span></span> <span data-ttu-id="f1cfb-105">相反地，我們建議您先使用一般<xref:System.Collections.Generic.Queue%601>類別。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-105">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Queue%601> class.</span></span> <span data-ttu-id="f1cfb-106">如需詳細資訊，請參閱 <<c0> [ 不應使用非泛型集合](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)GitHub 上。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-106">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

 <span data-ttu-id="f1cfb-107">佇列和堆疊時很有用的資訊; 需暫存儲存體也就是當您可能想要擷取其值之後捨棄項目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-107">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="f1cfb-108">使用<xref:System.Collections.Queue>如果您需要存取相同的順序，將它儲存在集合中的資訊。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-108">Use <xref:System.Collections.Queue> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="f1cfb-109">使用<xref:System.Collections.Stack>如果您要以相反順序存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-109">Use <xref:System.Collections.Stack> if you need to access the information in reverse order.</span></span> <span data-ttu-id="f1cfb-110">使用<xref:System.Collections.Concurrent.ConcurrentQueue%601>或<xref:System.Collections.Concurrent.ConcurrentStack%601>如果您需要從多個執行緒同時存取集合。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-110">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="f1cfb-111">三個主要的作業可對<xref:System.Collections.Queue>和其項目：</span><span class="sxs-lookup"><span data-stu-id="f1cfb-111">Three main operations can be performed on a <xref:System.Collections.Queue> and its elements:</span></span>  
  
-   <span data-ttu-id="f1cfb-112"><xref:System.Collections.Queue.Enqueue%2A> 將項目加入至結尾<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-112"><xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="f1cfb-113"><xref:System.Collections.Queue.Dequeue%2A> 從開頭移除最舊的項目<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-113"><xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="f1cfb-114"><xref:System.Collections.Queue.Peek%2A> 傳回最舊的項目，是在開頭<xref:System.Collections.Queue>但不會移除從<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-114"><xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the <xref:System.Collections.Queue> but does not remove it from the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-115">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-115">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span> <span data-ttu-id="f1cfb-116">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-116">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-117">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-117">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-118">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-118">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-119">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-119">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="f1cfb-120">預設的成長因子為 2.0。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-120">The default growth factor is 2.0.</span></span> <span data-ttu-id="f1cfb-121">容量<xref:System.Collections.Queue>至少至少四個，不論等比級數因數一定會增加。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-121">The capacity of the <xref:System.Collections.Queue> will always increase by at least a minimum of four, regardless of the growth factor.</span></span> <span data-ttu-id="f1cfb-122">比方說，<xref:System.Collections.Queue>含成長因子的 1.0 將永遠增加容量中四個需要更大的容量時。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-122">For example, a <xref:System.Collections.Queue> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</span></span>  
  
 <span data-ttu-id="f1cfb-123"><xref:System.Collections.Queue> 接受`null`做為有效的值，並允許重複的項目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-123"><xref:System.Collections.Queue> accepts `null` as a valid value and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="f1cfb-124">此集合的泛型版本，請參閱 <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f1cfb-124">For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-125">下列範例示範如何建立及新增值以<xref:System.Collections.Queue>以及如何列印出其值。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-125">The following example shows how to create and add values to a <xref:System.Collections.Queue> and how to print out its values.</span></span>  
  
 [!code-cpp[Classic Queue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="f1cfb-126">公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-126">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="f1cfb-127">不保證任何執行個體成員是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-127">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="f1cfb-128">若要保證的執行緒安全<see cref="T:System.Collections.Queue" />，所有作業都必須都透過包裝函式所傳回<see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />方法。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-128">To guarantee the thread safety of the <see cref="T:System.Collections.Queue" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> method.</span></span>  
  
<span data-ttu-id="f1cfb-129">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-129">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f1cfb-130">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-130">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="f1cfb-131">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-131">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.Generic.Queue`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1cfb-132">初始化 <see cref="T:System.Collections.Queue" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-132">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-133">初始化 <see cref="T:System.Collections.Queue" /> 類別的新執行個體，其為空白、具有預設初始容量且使用預設的等比級數因數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-133">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the default initial capacity, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-134">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-134">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="f1cfb-135">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-135">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-136">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-136">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-137">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-137">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-138">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-138">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="f1cfb-139">這個建構函式是 o （1） 的作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-139">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.ICollection col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection col) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (col As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::ICollection ^ col);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : System.Collections.ICollection -&gt; System.Collections.Queue" Usage="new System.Collections.Queue col" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="col" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="col"><span data-ttu-id="f1cfb-140">要複製元素來源的 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-140">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</span></span></param>
        <summary><span data-ttu-id="f1cfb-141">初始化 <see cref="T:System.Collections.Queue" /> 類別的新執行個體，其中含有從指定之集合複製過來的項目、具有與複製的項目數一樣的初始容量且使用預設的等比級數因數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-141">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-142">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-142">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="f1cfb-143">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-143">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-144">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-144">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-145">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-145">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-146">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-146">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="f1cfb-147">將元素複製到<xref:System.Collections.Queue>它們會讀取的相同順序<xref:System.Collections.IEnumerator>的<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-147">The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="f1cfb-148">這個建構函式是 O (`n`) 運算，其中`n`是中的項目數`col`。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-148">This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1cfb-149"><paramref name="col" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-149"><paramref name="col" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int -&gt; System.Collections.Queue" Usage="new System.Collections.Queue capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="f1cfb-150"><see cref="T:System.Collections.Queue" /> 可包含的初始項目數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-150">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span></span></param>
        <summary><span data-ttu-id="f1cfb-151">初始化 <see cref="T:System.Collections.Queue" /> 類別的新執行個體，其為空白、具有初始容量且使用預設的等比級數因數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-151">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-152">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-152">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="f1cfb-153">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-153">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-154">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-154">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-155">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-155">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-156">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-156">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="f1cfb-157">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-157">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-158">這個建構函式是 O (`n`) 運算，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-158">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1cfb-159"><paramref name="capacity" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-159"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity, float growFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 growFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, growFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity, float growFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int * single -&gt; System.Collections.Queue" Usage="new System.Collections.Queue (capacity, growFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="growFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="f1cfb-160"><see cref="T:System.Collections.Queue" /> 可包含的初始項目數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-160">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span></span></param>
        <param name="growFactor"><span data-ttu-id="f1cfb-161">擴充 <see cref="T:System.Collections.Queue" /> 之容量的因數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-161">The factor by which the capacity of the <see cref="T:System.Collections.Queue" /> is expanded.</span></span></param>
        <summary><span data-ttu-id="f1cfb-162">初始化 <see cref="T:System.Collections.Queue" /> 類別的新執行個體，其為空白、具有初始容量且使用指定的等比級數因數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-162">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the specified growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-163">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-163">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="f1cfb-164">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-164">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-165">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-165">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-166">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-166">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-167">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-167">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="f1cfb-168">營運<xref:System.Collections.Queue>一定會增加的最小的值，不論等比級數因數，為 1.0 的成長因子也不會阻止<xref:System.Collections.Queue>從增加的大小。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-168">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="f1cfb-169">如果可以估計集合的大小，指定初始容量，就不需要執行數項調整大小作業新增項目時<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-169">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-170">這個建構函式是 O (`n`) 運算，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-170">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1cfb-171"><paramref name="capacity" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-171"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1cfb-172">-或-</span><span class="sxs-lookup"><span data-stu-id="f1cfb-172">-or-</span></span> 
 <span data-ttu-id="f1cfb-173"><paramref name="growFactor" /> 小於 1.0 或大於 10.0。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-173"><paramref name="growFactor" /> is less than 1.0 or greater than 10.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-174">從 <see cref="T:System.Collections.Queue" /> 移除所有物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-174">Removes all objects from the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-175"><xref:System.Collections.Queue.Count%2A> 是設為零，並且從項目集合中的其他物件的參考也釋出。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-175"><xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="f1cfb-176">容量會維持不變。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-176">The capacity remains unchanged.</span></span> <span data-ttu-id="f1cfb-177">若要重設的容量<xref:System.Collections.Queue>，呼叫<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-177">To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="f1cfb-178">修剪空白<xref:System.Collections.Queue>設定的容量<xref:System.Collections.Queue>預設容量。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-178">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="f1cfb-179">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-179">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-180">下列範例示範如何清除的值<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-180">The following example shows how to clear the values of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="queue.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-181">建立 <see cref="T:System.Collections.Queue" /> 的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-181">Creates a shallow copy of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-182"><see cref="T:System.Collections.Queue" /> 的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-182">A shallow copy of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-183">不論它們是參考型別或實值型別，但是它不會複製參考所參考的物件集合的元素複製集合的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-183">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="f1cfb-184">新的集合中的參考會指向相同原始集合中的參考所指向的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-184">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="f1cfb-185">相反地，項目複製集合的深層複本，並直接或間接參考的元素，所有項目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-185">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="f1cfb-186">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-186">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="queue.Contains obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f1cfb-187">要在 <see cref="T:System.Collections.Queue" /> 中尋找的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-187">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="f1cfb-188">這個值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-188">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f1cfb-189">判斷某項目是否在 <see cref="T:System.Collections.Queue" /> 中。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-189">Determines whether an element is in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-190">如果在 <see langword="true" /> 中找到 <paramref name="obj" />，則為 <see cref="T:System.Collections.Queue" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-190"><see langword="true" /> if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Queue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-191">這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-191">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f1cfb-192">這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-192">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-193">從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>並<xref:System.IComparable.CompareTo%2A>上的方法`obj`來判斷是否`item`存在。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-193">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists.</span></span> <span data-ttu-id="f1cfb-194">在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>並<xref:System.IComparable.CompareTo%2A>方法`obj`參數集合中的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-194">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="f1cfb-195">執行不區分文化特性的字串作業</span><span class="sxs-lookup"><span data-stu-id="f1cfb-195">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="queue.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="f1cfb-196">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Queue" /> 複製過來之項目的目的端。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-196">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="f1cfb-197"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-197">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="f1cfb-198"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-198">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="f1cfb-199">從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Queue" /> 元素至現有一維 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-199">Copies the <see cref="T:System.Collections.Queue" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-200">將元素複製到<xref:System.Array>所在的列舉值逐一查看的順序相同<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-200">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-201">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-201">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-202">下列範例示範如何將複製<xref:System.Collections.Queue>到一維陣列。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-202">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1cfb-203"><paramref name="array" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-203"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1cfb-204"><paramref name="index" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-204"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1cfb-205"><paramref name="array" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-205"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="f1cfb-206">-或-</span><span class="sxs-lookup"><span data-stu-id="f1cfb-206">-or-</span></span> 
<span data-ttu-id="f1cfb-207">來源 <see cref="T:System.Collections.Queue" /> 中的項目數大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-207">The number of elements in the source <see cref="T:System.Collections.Queue" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="f1cfb-208">來源 <see cref="T:System.Collections.Queue" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-208">The type of the source <see cref="T:System.Collections.Queue" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Queue.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1cfb-209">取得 <see cref="T:System.Collections.Queue" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-209">Gets the number of elements contained in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <value><span data-ttu-id="f1cfb-210"><see cref="T:System.Collections.Queue" /> 中所包含的項目數。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-210">The number of elements contained in the <see cref="T:System.Collections.Queue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-211">營運<xref:System.Collections.Queue>是的項目數，<xref:System.Collections.Queue>可以儲存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-211">The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store.</span></span> <span data-ttu-id="f1cfb-212"><xref:System.Collections.Queue.Count%2A> 是實際的項目數<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-212"><xref:System.Collections.Queue.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-213">營運<xref:System.Collections.Queue>永遠是大於或等於<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-213">The capacity of a <xref:System.Collections.Queue> is always greater than or equal to <xref:System.Collections.Queue.Count%2A>.</span></span> <span data-ttu-id="f1cfb-214">如果<xref:System.Collections.Queue.Count%2A>超過容量加入元素時，會自動將舊的項目複製並加入新項目之前，重新配置內部陣列增加容量。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-214">If <xref:System.Collections.Queue.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span> <span data-ttu-id="f1cfb-215">新的處理能力取決於目前的容量乘以成長因子，也就是決定何時<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-215">The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="f1cfb-216">營運<xref:System.Collections.Queue>一定會增加的最小的值，不論等比級數因數，為 1.0 的成長因子也不會阻止<xref:System.Collections.Queue>從增加的大小。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-216">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="f1cfb-217">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-217">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-218">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-218">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public virtual object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Dequeue();" />
      <MemberSignature Language="F#" Value="abstract member Dequeue : unit -&gt; obj&#xA;override this.Dequeue : unit -&gt; obj" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-219">移除並傳回在 <see cref="T:System.Collections.Queue" /> 前端的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-219">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-220">從 <see cref="T:System.Collections.Queue" /> 前端移除的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-220">The object that is removed from the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-221">這個方法與 <xref:System.Collections.Queue.Peek%2A> 方法類似，但是 <xref:System.Collections.Queue.Peek%2A> 不會修改 <xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-221">This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-222">`null` 可以加入至<xref:System.Collections.Queue>做為值。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-222">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="f1cfb-223">區別 null 值，而結尾<xref:System.Collections.Queue>，檢查<xref:System.Collections.Queue.Count%2A>屬性或 catch <xref:System.InvalidOperationException>，它就會擲回時<xref:System.Collections.Queue>是空的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-223">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="f1cfb-224">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-224">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-225">下列範例示範如何加入項目來<xref:System.Collections.Queue>，移除項目，從<xref:System.Collections.Queue>，或檢視之項目的開頭<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-225">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1cfb-226"><see cref="T:System.Collections.Queue" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-226">The <see cref="T:System.Collections.Queue" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual void Enqueue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Enqueue (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Enqueue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : obj -&gt; unit&#xA;override this.Enqueue : obj -&gt; unit" Usage="queue.Enqueue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f1cfb-227">要加入至 <see cref="T:System.Collections.Queue" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-227">The object to add to the <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="f1cfb-228">這個值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-228">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f1cfb-229">將物件加入至 <see cref="T:System.Collections.Queue" /> 的末端。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-229">Adds an object to the end of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-230">營運<xref:System.Collections.Queue>是的項目數<xref:System.Collections.Queue>可以保存。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-230">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="f1cfb-231">當項目新增至<xref:System.Collections.Queue>，自動增加容量視需要透過重新配置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-231">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="f1cfb-232">藉由呼叫，您可以減少容量<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-232">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-233">成長因子是需要更大的容量時，目前的容量相乘的數字。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-233">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="f1cfb-234">等比級數因數會決定當<xref:System.Collections.Queue>建構。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-234">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="f1cfb-235">營運<xref:System.Collections.Queue>一定會增加的最小的值，不論等比級數因數，為 1.0 的成長因子也不會阻止<xref:System.Collections.Queue>從增加的大小。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-235">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="f1cfb-236">如果<xref:System.Collections.Queue.Count%2A>小於比內部陣列的容量，這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-236">If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="f1cfb-237">如果內部陣列需要重新配置以便容納新的項目，這個方法會變成 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-237">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-238">下列範例示範如何加入項目來<xref:System.Collections.Queue>，移除項目，從<xref:System.Collections.Queue>，或檢視之項目的開頭<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-238">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.Dequeue" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-239">傳回在 <see cref="T:System.Collections.Queue" /> 中逐一查看的列舉值。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-239">Returns an enumerator that iterates through the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-240">
  <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-240">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-241">C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-241">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="f1cfb-242">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-242">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="f1cfb-243">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-243">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="f1cfb-244">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-244">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="f1cfb-245"><xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-245"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="f1cfb-246">在這個位置上，<xref:System.Collections.IEnumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-246">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="f1cfb-247">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-247">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-248"><xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-248"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="f1cfb-249"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-249"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="f1cfb-250">如果<xref:System.Collections.IEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-250">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f1cfb-251">列舉值位於此位置，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-251">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="f1cfb-252">如果上次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-252">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="f1cfb-253">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-253">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="f1cfb-254">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-254">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="f1cfb-255">如果對集合進行變更，例如加入、修改或刪除項目，列舉程式會永久失效，且其行為未定義。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-255">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="f1cfb-256">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-256">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="f1cfb-257">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-257">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="f1cfb-258">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-258">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="f1cfb-259">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-259">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Queue.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1cfb-260">取得值，這個值表示對 <see cref="T:System.Collections.Queue" /> 的存取是否同步 (安全執行緒)。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-260">Gets a value indicating whether access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="f1cfb-261">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.Queue" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-261"><see langword="true" /> if access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="f1cfb-262">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-263">若要保證的執行緒安全<xref:System.Collections.Queue>，所有作業都必須都透過包裝函式所傳回<xref:System.Collections.Queue.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-263">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="f1cfb-264">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-264">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f1cfb-265">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-265">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="f1cfb-266">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-266">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-267">下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Queue.SyncRoot%2A>在整個列舉期間。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-267">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="f1cfb-268">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-268">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="f1cfb-269">下列範例示範如何同步處理<xref:System.Collections.Queue>，判斷是否<xref:System.Collections.Queue>同步處理，並使用 同步處理<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-269">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="abstract member Peek : unit -&gt; obj&#xA;override this.Peek : unit -&gt; obj" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-270">傳回 <see cref="T:System.Collections.Queue" /> 前端的物件而不需移除它。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-270">Returns the object at the beginning of the <see cref="T:System.Collections.Queue" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-271">在 <see cref="T:System.Collections.Queue" /> 前端的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-271">The object at the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-272">這個方法與 <xref:System.Collections.Queue.Dequeue%2A> 方法類似，但是 <xref:System.Collections.Queue.Peek%2A> 不會修改 <xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-272">This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="f1cfb-273">`null` 可以加入至<xref:System.Collections.Queue>做為值。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-273">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="f1cfb-274">區別 null 值，而結尾<xref:System.Collections.Queue>，檢查<xref:System.Collections.Queue.Count%2A>屬性或 catch <xref:System.InvalidOperationException>，它就會擲回時<xref:System.Collections.Queue>是空的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-274">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="f1cfb-275">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-275">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-276">下列範例示範如何加入項目來<xref:System.Collections.Queue>，移除項目，從<xref:System.Collections.Queue>，或檢視之項目的開頭<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-276">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1cfb-277"><see cref="T:System.Collections.Queue" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-277">The <see cref="T:System.Collections.Queue" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Queue Synchronized (System.Collections.Queue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Queue Synchronized(class System.Collections.Queue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Queue ^ Synchronized(System::Collections::Queue ^ queue);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Queue -&gt; System.Collections.Queue" Usage="System.Collections.Queue.Synchronized queue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Queue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="System.Collections.Queue" />
      </Parameters>
      <Docs>
        <param name="queue"><span data-ttu-id="f1cfb-278">要同步處理的 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-278">The <see cref="T:System.Collections.Queue" /> to synchronize.</span></span></param>
        <summary><span data-ttu-id="f1cfb-279">傳回包裝原始佇列並且為安全執行緒的新 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-279">Returns a new <see cref="T:System.Collections.Queue" /> that wraps the original queue, and is thread safe.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-280">同步 (安全執行緒) 的 <see cref="T:System.Collections.Queue" /> 包裝函式。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-280">A <see cref="T:System.Collections.Queue" /> wrapper that is synchronized (thread safe).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-281">這個方法所傳回的包裝函式會鎖定佇列之前，讓它安全執行緒的方式執行，執行作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-281">The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</span></span>  
  
 <span data-ttu-id="f1cfb-282">若要保證的執行緒安全<xref:System.Collections.Queue>，必須透過此包裝函式只完成所有作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-282">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="f1cfb-283">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-283">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f1cfb-284">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-284">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="f1cfb-285">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-285">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-286">下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Queue.SyncRoot%2A>在整個列舉期間。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-286">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="f1cfb-287">這個方法是 o （1） 作業。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-287">This method is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="f1cfb-288">下列範例示範如何同步處理<xref:System.Collections.Queue>，判斷是否<xref:System.Collections.Queue>同步處理，並使用 同步處理<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-288">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1cfb-289"><paramref name="queue" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-289"><paramref name="queue" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Queue.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1cfb-290">取得可用以同步存取 <see cref="T:System.Collections.Queue" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-290">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <value><span data-ttu-id="f1cfb-291">可用以同步存取 <see cref="T:System.Collections.Queue" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-291">An object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-292">若要建立的同步處理的版本<xref:System.Collections.Queue>，使用<xref:System.Collections.Queue.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-292">To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span> <span data-ttu-id="f1cfb-293">不過，在衍生的類別可以提供自己的同步處理的版本<xref:System.Collections.Queue>使用<xref:System.Collections.Queue.SyncRoot%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-293">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the <xref:System.Collections.Queue.SyncRoot%2A> property.</span></span> <span data-ttu-id="f1cfb-294">同步處理的程式碼必須執行作業<xref:System.Collections.Queue.SyncRoot%2A>的<xref:System.Collections.Queue>中，不要直接依賴<xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-294">The synchronizing code must perform operations on the <xref:System.Collections.Queue.SyncRoot%2A> of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>.</span></span> <span data-ttu-id="f1cfb-295">如此可確保衍生自其他物件的集合可以正常運作，</span><span class="sxs-lookup"><span data-stu-id="f1cfb-295">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="f1cfb-296">具體來說，它會維護適當的同步處理的其他執行緒可能同時修改<xref:System.Collections.Queue>物件。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-296">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.</span></span>  
  
 <span data-ttu-id="f1cfb-297">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-297">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f1cfb-298">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-298">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="f1cfb-299">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-299">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-300">下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Queue.SyncRoot%2A>在整個列舉期間。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-300">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="f1cfb-301">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-301">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToArray () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; obj[]&#xA;override this.ToArray : unit -&gt; obj[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-302">將 <see cref="T:System.Collections.Queue" /> 元素複製到新的陣列。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-302">Copies the <see cref="T:System.Collections.Queue" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="f1cfb-303">新的陣列，包含複製自 <see cref="T:System.Collections.Queue" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-303">A new array containing elements copied from the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-304"><xref:System.Collections.Queue>則不會修改。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-304">The <xref:System.Collections.Queue> is not modified.</span></span> <span data-ttu-id="f1cfb-305">新陣列中項目的順序是從開頭項目的順序相同<xref:System.Collections.Queue>至它的結尾。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-305">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.</span></span>  
  
 <span data-ttu-id="f1cfb-306">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-306">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1cfb-307">下列範例示範如何將複製<xref:System.Collections.Queue>到一維陣列。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-307">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="queue.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1cfb-308">將容量設為 <see cref="T:System.Collections.Queue" /> 中的實際元素數目。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-308">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1cfb-309">這個方法可用來最小化佇列的記憶體額外負荷如果沒有新的項目會新增至佇列。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-309">This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</span></span>  
  
 <span data-ttu-id="f1cfb-310">若要重設<xref:System.Collections.Queue>設為初始狀態，呼叫<xref:System.Collections.Queue.Clear%2A>方法之前呼叫<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-310">To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="f1cfb-311">修剪空白<xref:System.Collections.Queue>設定的容量<xref:System.Collections.Queue>預設容量。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-311">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="f1cfb-312">這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.Queue.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-312">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f1cfb-313"><see cref="T:System.Collections.Queue" /> 是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="f1cfb-313">The <see cref="T:System.Collections.Queue" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Clear" />
        <altmember cref="P:System.Collections.Queue.Count" />
      </Docs>
    </Member>
  </Members>
</Type>