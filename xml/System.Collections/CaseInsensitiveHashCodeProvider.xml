<Type Name="CaseInsensitiveHashCodeProvider" FullName="System.Collections.CaseInsensitiveHashCodeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db07357e7cfca540912da34e4aefc87d874b197a" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52610169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CaseInsensitiveHashCodeProvider extends System.Object implements class System.Collections.IHashCodeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Collections.CaseInsensitiveHashCodeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class CaseInsensitiveHashCodeProvider&#xA;Implements IHashCodeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CaseInsensitiveHashCodeProvider : System::Collections::IHashCodeProvider" />
  <TypeSignature Language="F#" Value="type CaseInsensitiveHashCodeProvider = class&#xA;    interface IHashCodeProvider" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IHashCodeProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.Obsolete("Please use StringComparer instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用忽略字串大小寫的雜湊演算法，提供物件的雜湊程式碼。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks
  
<xref:System.Collections.CaseInsensitiveHashCodeProvider> 會實作<xref:System.Collections.IHashCodeProvider>介面，支援在字串不區分大小寫比較，就如同<xref:System.Collections.CaseInsensitiveComparer>實作<xref:System.Collections.IComparer>支援不區分大小寫的比較，在字串上的介面。  
  
> [!IMPORTANT]
>  我們不建議您改用`CaseInsensitiveHashCodeProvider`開發新的類別。 相反地，我們建議您使用<xref:System.StringComparer?displayProperty=nameWithType>所傳回的物件<xref:System.StringComparer.CurrentCultureIgnoreCase?displayProperty=nameWithType>， <xref:System.StringComparer.InvariantCultureIgnoreCase?displayProperty=nameWithType>，或<xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType>屬性。

 做為索引鍵所使用的物件<xref:System.Collections.Hashtable>才能覆寫<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>方法 (或<xref:System.Collections.IHashCodeProvider>介面) 和<xref:System.Object.Equals%2A?displayProperty=nameWithType>方法 (或<xref:System.Collections.IComparer>介面)。 方法或介面的實作必須處理區分大小寫相同的方式;否則，<xref:System.Collections.Hashtable>可能不正確地運作。 例如，建立<xref:System.Collections.Hashtable>，您必須使用此類別<xref:System.Collections.CaseInsensitiveComparer>類別或任何不區分大小寫<xref:System.Collections.IComparer>實作。  
  
   
  
## Examples  
 下列程式碼範例會建立一個區分大小寫的雜湊表和不區分大小寫的雜湊表，並示範它們的行為差異，即使兩者都包含相同的項目。  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.IHashCodeProvider" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveHashCodeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveHashCodeProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用目前執行緒的 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />，初始化 <see cref="P:System.Threading.Thread.CurrentCulture" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Collections.CaseInsensitiveHashCodeProvider>執行個體使用這個建構函式，建立<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>儲存目前執行緒。 比較程序會使用儲存的文化特性來決定的大小寫規則;因此，雜湊程式碼比較可能會有不同的結果，根據文化特性。 如需有關特定文化特性比較的詳細資訊，請參閱 <<c0> <xref:System.Globalization> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立一個區分大小寫的雜湊表和不區分大小寫的雜湊表，並示範它們的行為差異，即使兩者都包含相同的項目。  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveHashCodeProvider (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveHashCodeProvider(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Collections.CaseInsensitiveHashCodeProvider : System.Globalization.CultureInfo -&gt; System.Collections.CaseInsensitiveHashCodeProvider" Usage="new System.Collections.CaseInsensitiveHashCodeProvider culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">新 <see cref="T:System.Globalization.CultureInfo" /> 所使用的 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />。</param>
        <summary>使用指定的 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較程序使用指定<xref:System.Globalization.CultureInfo?displayProperty=nameWithType>來決定的大小寫規則。 雜湊程式碼比較可能會有不同的結果，根據文化特性。 如需有關特定文化特性比較的詳細資訊，請參閱 <<c0> <xref:System.Globalization> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立一個區分大小寫的雜湊表和不區分大小寫的雜湊表，並示範它們的行為差異，即使兩者都包含相同的項目。  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="culture" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveHashCodeProvider Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveHashCodeProvider Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveHashCodeProvider.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As CaseInsensitiveHashCodeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveHashCodeProvider ^ Default { System::Collections::CaseInsensitiveHashCodeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.CaseInsensitiveHashCodeProvider" Usage="System.Collections.CaseInsensitiveHashCodeProvider.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveHashCodeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 的執行個體，它與目前執行緒的 <see cref="P:System.Threading.Thread.CurrentCulture" /> 相關聯，而且永遠可以使用。</summary>
        <value>
          <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 的執行個體，與目前執行緒的 <see cref="P:System.Threading.Thread.CurrentCulture" /> 相關聯。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Collections.CaseInsensitiveHashCodeProvider>執行個體使用無參數建構函式，建立<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>儲存目前執行緒。 比較程序會使用儲存的文化特性來決定的大小寫規則;因此，雜湊程式碼比較可能會有不同的結果，根據文化特性。 如需有關特定文化特性比較的詳細資訊，請參閱 <<c0> <xref:System.Globalization> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultInvariant">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveHashCodeProvider DefaultInvariant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveHashCodeProvider DefaultInvariant" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveHashCodeProvider.DefaultInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInvariant As CaseInsensitiveHashCodeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveHashCodeProvider ^ DefaultInvariant { System::Collections::CaseInsensitiveHashCodeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultInvariant : System.Collections.CaseInsensitiveHashCodeProvider" Usage="System.Collections.CaseInsensitiveHashCodeProvider.DefaultInvariant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveHashCodeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 的執行個體，它與 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 相關聯，而且永遠可以使用。</summary>
        <value>
          <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 的執行個體，與 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 相關聯。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較程序使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>來決定的大小寫規則。 雜湊程式碼比較可能會有不同的結果，根據文化特性。 如需有關特定文化特性比較的詳細資訊，請參閱 <<c0> <xref:System.Globalization> 命名空間並[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立一個區分大小寫的雜湊表和不區分大小寫的雜湊表，並示範它們的行為差異，即使兩者都包含相同的項目。  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveHashCodeProvider.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="caseInsensitiveHashCodeProvider.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
        <summary>傳回給定物件的雜湊程式碼，使用忽略字串大小寫的雜湊演算法。</summary>
        <returns>給定物件的雜湊程式碼，使用忽略字串大小寫的雜湊演算法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的傳回值必須不會保存兩個原因。 首先，類別的雜湊函式可能會改變以產生更好的分佈，藉此呈現從舊的雜湊函式的任何值沒有什麼用處。 其次，這個類別的預設實作不保證相同的值會由不同執行個體。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">在集合中執行不區分文化特性的字串作業</related>
      </Docs>
    </Member>
  </Members>
</Type>