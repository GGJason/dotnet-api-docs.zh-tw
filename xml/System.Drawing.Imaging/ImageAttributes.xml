<Type Name="ImageAttributes" FullName="System.Drawing.Imaging.ImageAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c44fa72df38de4c28091eaa19c874e19f8aa0366" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46676672" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ImageAttributes : ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ImageAttributes extends System.Object implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Imaging.ImageAttributes" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImageAttributes&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImageAttributes sealed : ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type ImageAttributes = class&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>包含如何在呈現期間操作點陣圖和中繼檔色彩的相關資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護數個彩色調整設定，包括彩色調整矩陣、 灰階調整矩陣、 gamma 修正值、 色彩對應資料表，以及色彩臨界值。 在呈現期間，色彩可以更正、 變黑、 淡化，並移除。 若要套用這類的操作，初始化<xref:System.Drawing.Imaging.ImageAttributes>物件，並傳遞該路徑<xref:System.Drawing.Imaging.ImageAttributes>物件 (以及路徑<xref:System.Drawing.Image>) 來<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
   
  
## Examples  
 下列範例會為所有的一種色彩 （0.2，0.0、 0.4，1.0） 的映像和雙精度浮點數的紅色元件會加入紅色、 綠色和藍色元件中的 0.2  
  
 下圖顯示原始的映像，在左邊和轉換後的映像，在右邊。  
  
 ![色彩](~/add/media/colortrans1.png "色彩")  
  
 下列範例中的程式碼會使用下列步驟執行的重新著色：  
  
1.  初始化<xref:System.Drawing.Imaging.ColorMatrix>物件。  
  
2.  建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並傳遞<xref:System.Drawing.Imaging.ColorMatrix>物件<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
3.  傳遞<xref:System.Drawing.Imaging.ImageAttributes>物件至<xref:System.Drawing.Graphics.DrawImage%2A>方法<xref:System.Drawing.Graphics>物件。  
  
 [!code-csharp[System.Drawing.RecoloringImages#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RecoloringImages/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.RecoloringImages#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RecoloringImages/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/44df4556-a433-49c0-ac0f-9a12063a5860">如何： 使用色彩矩陣轉換單一色彩</related>
    <related type="Article" href="http://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">將影像重新著色</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImageAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearBrushRemapTable">
      <MemberSignature Language="C#" Value="public void ClearBrushRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearBrushRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearBrushRemapTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearBrushRemapTable();" />
      <MemberSignature Language="F#" Value="member this.ClearBrushRemapTable : unit -&gt; unit" Usage="imageAttributes.ClearBrushRemapTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除此 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 物件的筆刷色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定一個預設分類的色彩重新對應表 [點陣圖] 類別中，不同的色彩重新對應表，仍筆刷分類不同的色彩重新對應表。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何筆刷分類的調整設定，預設設定會套用到筆刷分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設的重新對應表轉換為綠色、 紅色，而且您會指定 1.8 預設值 gamma 值。 如果您呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法、 （綠色到紅色） 的預設重新對應表和預設值 gamma 值 (1.8) 不會套用到筆刷。 如果您稍後呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable%2A>方法，筆刷分類不會還原成預設值重新對應表; 相反地，筆刷分類會有任何重新對應表。 同樣地，筆刷分類不會還原成預設值 gamma 值;相反地，筆刷分類會有任何的 gamma 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除色鍵 (透明度範圍)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorKey ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorKey();" />
      <MemberSignature Language="F#" Value="member this.ClearColorKey : unit -&gt; unit" Usage="imageAttributes.ClearColorKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的色鍵 (透明度範圍)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定一個預設分類的色彩索引鍵、 點陣圖 類別中，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorKey (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorKey(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearColorKey : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearColorKey type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經清除色鍵的分類。</param>
        <summary>清除指定分類的色鍵 (透明度範圍)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定一個預設分類的色彩索引鍵、 點陣圖 類別中，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設色彩索引鍵，可使用介於 200 到 255 的紅色元件的任何色彩變成透明，而且您指定預設值 gamma 值 1.8。 如果您設定的畫筆分類的色彩索引鍵呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法的預設色彩索引鍵，預設值 gamma 值不會套用到畫筆。 如果您在稍後藉由呼叫清除的畫筆色彩索引鍵<xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A>方法中，[畫筆] 類別不會還原成預設的色彩索引鍵; 相反地，[畫筆] 類別會有任何的色彩索引鍵。 同樣地，[畫筆] 類別不會還原成預設值 gamma 值;相反地，[畫筆] 類別會有任何的 gamma 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除彩色調整矩陣。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorMatrix ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorMatrix();" />
      <MemberSignature Language="F#" Value="member this.ClearColorMatrix : unit -&gt; unit" Usage="imageAttributes.ClearColorMatrix " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的彩色調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的彩色調整矩陣、 點陣圖 類別中，不同的彩色調整矩陣和仍然畫筆分類的不同的彩色調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，則預設設定會套用到畫筆分類。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorMatrix (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorMatrix(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearColorMatrix : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearColorMatrix type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經清除彩色調整矩陣的分類。</param>
        <summary>清除指定分類的彩色調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的彩色調整矩陣、 點陣圖 類別中，不同的彩色調整矩陣和仍然畫筆分類的不同的彩色調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，則預設設定會套用到畫筆分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定的彩色調整矩陣和預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的彩色調整矩陣<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法中，預設的彩色調整矩陣將不會套用，不要原子筆。 如果您稍後清除畫筆的彩色調整矩陣藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A>方法中，[畫筆] 類別不會還原成預設調整矩陣; 相反地，[畫筆] 類別會有任何調整矩陣。 同樣地，[畫筆] 類別不會還原成預設值 gamma 值;相反地，[畫筆] 類別會有任何的 gamma 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>停用 Gamma 修正。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearGamma ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearGamma();" />
      <MemberSignature Language="F#" Value="member this.ClearGamma : unit -&gt; unit" Usage="imageAttributes.ClearGamma " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停用預設分類的 Gamma 修正。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearGamma (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearGamma(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearGamma : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearGamma type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已停用 Gamma 修正的分類。</param>
        <summary>停用指定分類的 Gamma 修正。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，則預設設定會套用到畫筆分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定的 gamma 值和預設分類的彩色調整矩陣。 如果您藉由呼叫設定畫筆分類的 gamma 值<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法中，預設值 gamma 值將不會套用，不要原子筆。 如果您在稍後藉由呼叫清除畫筆 gamma 值<xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A>方法中，[畫筆] 類別不會還原成預設值 gamma 值; 相反地，[畫筆] 類別會有任何的 gamma 值。 同樣地，[畫筆] 類別不會還原成預設的彩色調整矩陣。相反地，[畫筆] 類別會有任何的彩色調整矩陣。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除 <see langword="NoOp" /> 設定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearNoOp ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearNoOp();" />
      <MemberSignature Language="F#" Value="member this.ClearNoOp : unit -&gt; unit" Usage="imageAttributes.ClearNoOp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的 <see langword="NoOp" /> 設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 您可以藉由呼叫停用預設分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。 稍後，您可以藉由呼叫恢復預設分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。 色彩調整再傳回給呼叫之前是什麼<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearNoOp (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearNoOp(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearNoOp : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearNoOp type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已清除 <see langword="NoOp" /> 設定的分類。</param>
        <summary>清除指定分類的 <see langword="NoOp" /> 設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 您可以藉由呼叫停用特定的分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。 稍後，您可以藉由呼叫恢復該分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。 色彩調整再傳回給呼叫之前是什麼<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除 CMYK (青色-洋紅-黃色-黑色) 輸出色頻設定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannel();" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannel : unit -&gt; unit" Usage="imageAttributes.ClearOutputChannel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的 CMYK (青色-洋紅-黃色-黑色) 輸出色頻設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類輸出色頻和點陣圖分類不同的輸出色頻。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannel (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannel(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannel : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearOutputChannel type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已清除輸出色頻設定的分類。</param>
        <summary>清除指定分類的 (青色-洋紅-黃色-黑色) 輸出色頻設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類輸出色頻和點陣圖分類不同的輸出色頻。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定輸出色頻和預設分類調整矩陣。 如果您設定輸出色頻的點陣圖類別藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，則預設輸出通道不會套用至點陣圖。 如果您稍後清除點陣圖輸出通道，藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A>方法中，點陣圖類別不會還原成預設輸出通道，而是點陣圖類別目錄會有任何的輸出色頻設定。 同樣地，[點陣圖] 類別不會還原成預設的彩色調整矩陣。相反地，點陣圖類別目錄會有任何的彩色調整矩陣。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除輸出色頻色彩設定檔的設定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannelColorProfile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannelColorProfile();" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannelColorProfile : unit -&gt; unit" Usage="imageAttributes.ClearOutputChannelColorProfile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類之輸出色頻色彩設定檔的設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的輸出通道的設定檔和點陣圖分類的不同輸出通道設定檔。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannelColorProfile (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannelColorProfile(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannelColorProfile : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearOutputChannelColorProfile type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已清除輸出色頻設定檔設定的分類。</param>
        <summary>清除指定分類之輸出色頻色彩設定檔的設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的輸出通道的設定檔和點陣圖分類的不同輸出通道設定檔。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定的輸出通道的設定檔，以及預設分類調整矩陣。 如果您藉由呼叫設定點陣圖分類的輸出通道設定檔<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，則預設輸出通道的設定檔不會套用至點陣圖。 如果您稍後清除點陣圖輸出通道的設定檔，藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A>方法中，點陣圖類別不會還原成預設輸出通道的設定檔; 相反地，點陣圖類別目錄會有任何輸出色頻設定檔設定。 同樣地，[點陣圖] 類別不會還原成預設的彩色調整矩陣。相反地，點陣圖類別目錄會有任何的彩色調整矩陣。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除色彩重新對應表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearRemapTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearRemapTable();" />
      <MemberSignature Language="F#" Value="member this.ClearRemapTable : unit -&gt; unit" Usage="imageAttributes.ClearRemapTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設類別目錄重新對應表 [點陣圖] 類別中，不同的重新對應表，仍畫筆分類不同的重新對應表。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearRemapTable (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearRemapTable(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearRemapTable : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearRemapTable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已清除重新對應表的分類。</param>
        <summary>清除指定分類的色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設類別目錄重新對應表 [點陣圖] 類別中，不同的重新對應表，仍畫筆分類不同的重新對應表。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，則預設設定會套用到畫筆分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定重新對應表和預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的重新對應表<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法中，預設重新對應表將不會套用，不要原子筆。 如果您在稍後藉由呼叫清除畫筆重新對應表<xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A>方法中，[畫筆] 類別不會還原成預設值重新對應表; 相反地，[畫筆] 類別會有任何重新對應表。 同樣地，[畫筆] 類別不會還原成預設值 gamma 值;相反地，[畫筆] 類別會有任何的 gamma 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除閾值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearThreshold ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearThreshold();" />
      <MemberSignature Language="F#" Value="member this.ClearThreshold : unit -&gt; unit" Usage="imageAttributes.ClearThreshold " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除預設分類的閾值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 臨界值是介於 0 到 1，指定每個色彩元件的停損點的值。 例如，假設臨界值設定為 0.7，而且假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) is greater than 0.7 x 255, 的所以紅色元件會變更為 255 （完全強度）。 綠色元件 (50) 小於 0.7 x 255, 因此綠色元件將會變更為 0。 藍色元件 (220) is greater than 0.7 x 255, 的所以藍色元件會變更為 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的臨界值、 不同的臨界值，如 [點陣圖] 類別中，並仍畫筆分類的不同臨界值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearThreshold (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearThreshold(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearThreshold : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearThreshold type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已清除閾值的分類。</param>
        <summary>清除指定分類的閾值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 臨界值是介於 0 到 1，指定每個色彩元件的停損點的值。 例如，假設臨界值設定為 0.7，而且假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) 大於 0.7x55，所以紅色元件會變更為 255 （完全強度）。 綠色元件 (50) 小於 0.7 x 255, 因此綠色元件將會變更為 0。 藍色元件 (220) is greater than 0.7 x 255, 的所以藍色元件會變更為 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的臨界值、 不同的臨界值，如 [點陣圖] 類別中，並仍畫筆分類的不同臨界值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定的臨界值和預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的閾值<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法中，預設的閾值不會套用到畫筆。 如果您在稍後藉由呼叫清除畫筆閾值<xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A>方法中，[畫筆] 類別不會還原成預設臨界值; 相反地，[畫筆] 類別會有沒有臨界值。 同樣地，[畫筆] 類別不會還原成預設值 gamma 值;相反地，[畫筆] 類別會有任何的 gamma 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="imageAttributes.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立這個 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 物件的完全相同複本。</summary>
        <returns>這個類別建立的 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 物件，其轉型為物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="imageAttributes.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放這個 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 物件使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Drawing.Imaging.ImageAttributes>。 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 方法會將 <xref:System.Drawing.Imaging.ImageAttributes> 保留在無法使用的狀態。 之後呼叫<xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A>，您必須釋放所有的參考<xref:System.Drawing.Imaging.ImageAttributes>讓記憶體回收行程可以回收記憶體，<xref:System.Drawing.Imaging.ImageAttributes>所佔用。 如需詳細資訊，請參閱 <<c0> [ 清除 Unmanaged 資源向上](~/docs/standard/garbage-collection/unmanaged.md)並[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Drawing.Imaging.ImageAttributes>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Drawing.Imaging.ImageAttributes> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ImageAttributes ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="imageAttributes.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允許物件在記憶體回收進行回收之前，嘗試釋放資源並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustedPalette">
      <MemberSignature Language="C#" Value="public void GetAdjustedPalette (System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetAdjustedPalette(class System.Drawing.Imaging.ColorPalette palette, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetAdjustedPalette (palette As ColorPalette, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetAdjustedPalette(System::Drawing::Imaging::ColorPalette ^ palette, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.GetAdjustedPalette : System.Drawing.Imaging.ColorPalette * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.GetAdjustedPalette (palette, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="palette" Type="System.Drawing.Imaging.ColorPalette" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="palette">
          <see cref="T:System.Drawing.Imaging.ColorPalette" />，其在輸入時會包含要調整的調色盤，而在輸出時會包含調整過的調色盤。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定其調整設定將套用至調色盤的分類。</param>
        <summary>根據指定分類的調整設定來調整調色盤中的色彩。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的色彩重新對應表 [點陣圖] 類別中，不同的色彩重新對應表，仍畫筆分類不同的色彩重新對應表。  
  
 當您呼叫<xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A>方法中，您可以指定用來調整調色盤色彩的調整類別。 例如，如果您傳遞<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>至<xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A>方法中，將點陣圖類別目錄的設定用來調整調色盤色彩的調整。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBrushRemapTable">
      <MemberSignature Language="C#" Value="public void SetBrushRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBrushRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBrushRemapTable (map As ColorMap())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBrushRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map);" />
      <MemberSignature Language="F#" Value="member this.SetBrushRemapTable : System.Drawing.Imaging.ColorMap[] -&gt; unit" Usage="imageAttributes.SetBrushRemapTable map" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> 物件的陣列。</param>
        <summary>設定筆刷分類的色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件： 指定舊的色彩，另一個則指定對應的新色彩的其中一個。 在呈現期間，符合其中一項舊的色彩重新對應表中的任何色彩會變更為對應的新色彩。  
  
 呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法具有相同的效果，以傳遞<xref:System.Drawing.Imaging.ColorAdjustType.Brush>到<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法。 指定的重新對應表適用於使用筆刷填滿的中繼檔中的項目。  
  
 這個方法被要僅能搭配中繼檔。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  建立單一項目<xref:System.Drawing.Imaging.ColorMap>保留做為舊的色彩的紅色和綠色 做為新色彩的陣列。  
  
2.  將這個陣列傳遞給新建立<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定色鍵 (透明度範圍)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorKey (colorLow As Color, colorHigh As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorKey(System::Drawing::Color colorLow, System::Drawing::Color colorHigh);" />
      <MemberSignature Language="F#" Value="member this.SetColorKey : System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="imageAttributes.SetColorKey (colorLow, colorHigh)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="colorLow">低色鍵值。</param>
        <param name="colorHigh">高色鍵值。</param>
        <summary>設定預設分類的色鍵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定的最高和最低色彩索引鍵的值，以便可以進行透明色彩範圍。 任何色彩，其每個三個元件 （紅色、 綠色、 藍色） 的高和最低的色彩索引鍵之對應元件之間進行透明。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的色彩索引鍵、 點陣圖 類別中，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%28System.Drawing.Color%2CSystem.Drawing.Color%2CSystem.Drawing.Imaging.ColorAdjustType%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorKey (colorLow As Color, colorHigh As Color, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorKey(System::Drawing::Color colorLow, System::Drawing::Color colorHigh, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorKey : System.Drawing.Color * System.Drawing.Color * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorKey (colorLow, colorHigh, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorLow">低色鍵值。</param>
        <param name="colorHigh">高色鍵值。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經設定色鍵的分類。</param>
        <summary>設定指定分類的色鍵 (透明度範圍)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定的最高和最低色彩索引鍵的值，以便可以進行透明色彩範圍。 任何色彩，其每個三個元件 （紅色、 綠色、 藍色） 的高和最低的色彩索引鍵之對應元件之間進行透明。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的色彩索引鍵、 點陣圖 類別中，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定畫筆分類的色彩索引鍵<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  開啟<xref:System.Drawing.Image>，會使用檔案 Circle.bmp，並將它繪製到螢幕。  
  
2.  會建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定其色彩索引鍵，藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法。  
  
3.  若要使用的色彩索引鍵在畫面中繪製的影像<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorMatrices">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定彩色調整矩陣和灰階調整矩陣。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <param name="grayMatrix">灰階調整矩陣。</param>
        <summary>設定預設分類的彩色調整矩陣和灰階調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的調整矩陣、 不同的調整矩陣的點陣圖分類和 [畫筆] 類別的不同的調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%29?displayProperty=nameWithType>方法就相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=nameWithType>方法並傳遞<xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType>如`flags`參數。 <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType> 指定會調整的彩色調整矩陣，而不是灰階調整矩陣的 （包括灰階） 的所有色彩。 因此，傳遞至這個方法的灰階調整矩陣沒有任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix, flags As ColorMatrixFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix, System::Drawing::Imaging::ColorMatrixFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <param name="grayMatrix">灰階調整矩陣。</param>
        <param name="flags">
          <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，指定將會受到彩色調整和灰階調整矩陣影響之影像和色彩的類型。</param>
        <summary>設定預設分類的彩色調整矩陣和灰階調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的調整矩陣、 不同的調整矩陣的點陣圖分類和 [畫筆] 類別的不同的調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix, mode As ColorMatrixFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix, System::Drawing::Imaging::ColorMatrixFlag mode, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix, mode, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <param name="grayMatrix">灰階調整矩陣。</param>
        <param name="mode">
          <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，指定將會受到彩色調整和灰階調整矩陣影響之影像和色彩的類型。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已設定彩色調整和灰階調整矩陣的分類。</param>
        <summary>設定指定分類的彩色調整矩陣和灰階調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的調整矩陣、 不同的調整矩陣的點陣圖分類和 [畫筆] 類別的不同的調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定的畫筆分類的彩色調整和灰階調整矩陣<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定彩色調整矩陣。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix -&gt; unit" Usage="imageAttributes.SetColorMatrix newColorMatrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <summary>設定預設分類的彩色調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的彩色調整矩陣、 點陣圖 類別中，不同的彩色調整矩陣和仍然畫筆分類的不同的彩色調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29?displayProperty=nameWithType>方法就相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=nameWithType>方法並傳遞<xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType>如`flags`參數。 <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType> 指定會調整的彩色調整矩陣的 （包括灰階） 的所有色彩  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  建立矩形映像的所有值都設為 128，產生使用中型灰色純色填滿矩形的色彩。 然後，程式碼會繪製此矩形映像至畫面。  
  
2.  會建立<xref:System.Drawing.Imaging.ColorMatrix>，並設定其<xref:System.Drawing.Drawing2D.Matrix>1.75，強調映像的紅色元件的位置。  
  
3.  會建立<xref:System.Drawing.Imaging.ImageAttributes>物件並呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法。  
  
4.  影像 （第二個矩形） 繪製到螢幕時使用<xref:System.Drawing.Imaging.ColorMatrix>只是設定在<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
 請注意，第二個矩形的色彩為紅色反白。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">將影像重新著色</related>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix, flags As ColorMatrixFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrixFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag -&gt; unit" Usage="imageAttributes.SetColorMatrix (newColorMatrix, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <param name="flags">
          <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，指定將會受到彩色調整矩陣影響之影像和色彩的類型。</param>
        <summary>設定預設分類的彩色調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的彩色調整矩陣、 點陣圖 類別中，不同的彩色調整矩陣和仍然畫筆分類的不同的彩色調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29>方法。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">將影像重新著色</related>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix, mode As ColorMatrixFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrixFlag mode, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorMatrix (newColorMatrix, mode, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">彩色調整矩陣。</param>
        <param name="mode">
          <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，指定將會受到彩色調整矩陣影響之影像和色彩的類型。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經設定彩色調整矩陣的分類。</param>
        <summary>設定指定分類的彩色調整矩陣。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的彩色調整矩陣、 點陣圖 類別中，不同的彩色調整矩陣和仍然畫筆分類的不同的彩色調整矩陣。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定畫筆分類的彩色調整矩陣<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> 方法。 若要執行此範例中，貼上程式碼的 Windows Form 和呼叫`RotateColors`從表單<xref:System.Windows.Forms.Control.Paint>事件處理方法，傳遞`e`做為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.RotateColors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RotateColors/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.RotateColors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RotateColors/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定 Gamma 值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetGamma (gamma As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGamma(float gamma);" />
      <MemberSignature Language="F#" Value="member this.SetGamma : single -&gt; unit" Usage="imageAttributes.SetGamma gamma" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="gamma">Gamma 修正值。</param>
        <summary>設定預設分類的 Gamma 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 典型值`gamma`參數是從 1.0 2.2; 不過，從 0.1 到 5.0 的值無法證明在某些情況下很有用。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 可能有助於舊的 CRT 監視器或監視器處於不尋常的光源狀況，例如產業的環境或視窗會顯示一般的範圍外的 gamma 值。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 此外，您需要將映像檔案路徑變更為您的系統上有效的路徑和映像名稱。 該程式碼執行下列動作：  
  
1.  開啟<xref:System.Drawing.Image>，會使用檔案 Camera.jpg，並將它繪製至畫面使用的預設值 gamma。  
  
2.  會建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定藉由呼叫其 gamma 2.2<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法。  
  
3.  影像 (第二個 camera) 繪製到螢幕使用只在設定 gamma 值<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetGamma (gamma As Single, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGamma(float gamma, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetGamma : single * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetGamma (gamma, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="gamma">Gamma 修正值。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 列舉的元素，指定已經設定 Gamma 值的分類。</param>
        <summary>設定指定分類的 Gamma 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 典型值`gamma`參數是從 1.0 2.2; 不過，從 0.1 到 5.0 的值無法證明在某些情況下很有用。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定畫筆分類的 gamma 值<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
 可能有助於舊的 CRT 監視器或監視器處於不尋常的光源狀況，例如產業的環境或視窗會顯示一般的範圍外的 gamma 值。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%28System.Single%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>關閉色彩調整。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetNoOp ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetNoOp();" />
      <MemberSignature Language="F#" Value="member this.SetNoOp : unit -&gt; unit" Usage="imageAttributes.SetNoOp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉預設分類的彩色調整。 您可以呼叫 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> 方法，以重新啟用在呼叫 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> 方法之前既有的彩色調整設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  開啟<xref:System.Drawing.Image>使用 Camera.jpg 的檔案。  
  
2.  設定 gamma 值<xref:System.Drawing.Imaging.ImageAttributes>0.25 的物件。  
  
3.  將影像繪製到螢幕。  
  
4.  呼叫 <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 方法。  
  
5.  影像 (第二個 camera) 繪製到螢幕;不過，因為<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>呼叫方法、 設定預設值為 1.0 和映像的值 gamma 會繪製到螢幕與預設 gamma 值。  
  
 請注意，在左邊的影像是非常褪色 (0.25 的 gamma) 右側的映像具有更高對比 (gamma 為 1.0)。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetNoOp (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetNoOp(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetNoOp : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetNoOp type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已關閉色彩修正的分類。</param>
        <summary>關閉指定分類的彩色調整。 您可以呼叫 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> 方法，以重新啟用在呼叫 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> 方法之前既有的彩色調整設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的 gamma 值、 [點陣圖] 類別中，不同的 gamma 值和仍然畫筆分類不同的 gamma 值。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定 CMYK (青色-洋紅-黃色-黑色) 輸出色頻。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannel (flags As ColorChannelFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannel(System::Drawing::Imaging::ColorChannelFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannel : System.Drawing.Imaging.ColorChannelFlag -&gt; unit" Usage="imageAttributes.SetOutputChannel flags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
      </Parameters>
      <Docs>
        <param name="flags">
          <see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> 的元素，指定輸出色頻。</param>
        <summary>設定預設分類的 CMYK (青色-洋紅-黃色-黑色) 輸出色頻。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法來將影像轉換為 CMYK 色彩空間，並檢查其中一個 CMYK 色彩色板的強度。 例如，假設您建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定其點陣圖輸出通道<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>。 如果您傳遞的路徑<xref:System.Drawing.Imaging.ImageAttributes>物件至<xref:System.Drawing.Graphics.DrawImage%2A>方法，計算青色元件的每個像素，然後在轉譯之影像中的每個像素深淺是灰色，表示其青色色頻的濃度。 同樣地，您可以轉譯表示洋紅色、 黃色和黑色通道的強度的映像。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類輸出色頻和點陣圖分類不同的輸出色頻。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 方法。 若要執行此範例中，請將下列程式碼貼入 Windows 表單。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件，並呼叫`ShowOutputChannels`，並傳遞`e`做為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.Misc3#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannel (flags As ColorChannelFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannel(System::Drawing::Imaging::ColorChannelFlag flags, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannel : System.Drawing.Imaging.ColorChannelFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetOutputChannel (flags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="flags">
          <see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> 的元素，指定輸出色頻。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經設定輸出色頻的分類。</param>
        <summary>設定指定分類的 CMYK (青色-洋紅-黃色-黑色) 輸出色頻。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法來將影像轉換為 CMYK 色彩空間，並檢查其中一個 CMYK 色彩色板的強度。 例如，假設您建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定其點陣圖輸出通道<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>。 如果您傳遞的路徑<xref:System.Drawing.Imaging.ImageAttributes>物件至<xref:System.Drawing.Graphics.DrawImage%2A>方法，計算青色元件的每個像素，然後在轉譯之影像中的每個像素深淺是灰色，表示其青色色頻的濃度。 同樣地，您可以轉譯表示洋紅色、 黃色和黑色通道的強度的映像。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類輸出色頻和點陣圖分類不同的輸出色頻。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定輸出色頻的點陣圖分類<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>至<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，沒有預設的調整設定會套用至點陣圖。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 方法。 若要執行此範例中，請將下列程式碼貼入 Windows 表單。 處理表單的<xref:System.Windows.Forms.Control.Paint>事件，並呼叫`ShowOutputChannels`，並傳遞`e`做為<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.Misc3#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定輸出色頻色彩設定檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannelColorProfile (colorProfileFilename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannelColorProfile(System::String ^ colorProfileFilename);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannelColorProfile : string -&gt; unit" Usage="imageAttributes.SetOutputChannelColorProfile colorProfileFilename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">色彩設定檔的路徑名稱。 如果色彩設定檔位於 %SystemRoot%\System32\Spool\Drivers\Color 目錄中，這個參數可以是檔案名稱。 否則，這個參數就必須是完整路徑名稱。</param>
        <summary>設定預設分類的輸出色頻色彩設定檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法來將影像轉換為 CMYK （青色-洋紅-黃色-黑色） 色彩空間，並檢查其中一個 CMYK 的強度色彩頻道。 例如，假設您撰寫程式碼來執行下列步驟：  
  
1.  建立<xref:System.Drawing.Image>。  
  
2.  建立<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
3.  傳遞<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>要<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
4.  傳遞至的色彩設定檔的路徑名稱<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
5.  傳遞的路徑<xref:System.Drawing.Image>並<xref:System.Drawing.Imaging.ImageAttributes>物件到<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 將使用的色彩設定檔案，來計算在圖中，每個像素的青色元件，因此已轉譯影像中的每個像素深淺的灰色，表示其青色色頻的濃度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的輸出色頻色彩設定檔案和點陣圖分類不同的輸出色頻色彩設定檔案。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannelColorProfile (colorProfileFilename As String, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannelColorProfile(System::String ^ colorProfileFilename, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannelColorProfile : string * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetOutputChannelColorProfile (colorProfileFilename, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">色彩設定檔的路徑名稱。 如果色彩設定檔位於 %SystemRoot%\System32\Spool\Drivers\Color 目錄中，這個參數可以是檔案名稱。 否則，這個參數就必須是完整路徑名稱。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已設定輸出色頻色彩設定檔的分類。</param>
        <summary>設定指定分類的輸出色頻色彩設定檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法來將影像轉換為 CMYK （青色-洋紅-黃色-黑色） 色彩空間，並檢查其中一個 CMYK 的強度色彩頻道。 例如，假設您撰寫程式碼來執行下列步驟：  
  
1.  建立<xref:System.Drawing.Image>。  
  
2.  建立<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
3.  傳遞<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>要<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
4.  傳遞至的色彩設定檔的路徑名稱<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
5.  傳遞的路徑<xref:System.Drawing.Image>並<xref:System.Drawing.Imaging.ImageAttributes>物件到<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 將使用的色彩設定檔案，來計算在圖中，每個像素的青色元件，因此已轉譯影像中的每個像素深淺的灰色，表示其青色色頻的濃度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的輸出色頻色彩設定檔案和點陣圖分類不同的輸出色頻色彩設定檔案。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖的分類。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定輸出色頻色彩設定檔案，點陣圖分類<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>至<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>沒有任何預設的調整設定會套用至點陣圖的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定色彩重新對應表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetRemapTable (map As ColorMap())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map);" />
      <MemberSignature Language="F#" Value="member this.SetRemapTable : System.Drawing.Imaging.ColorMap[] -&gt; unit" Usage="imageAttributes.SetRemapTable map" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> 型別的色彩配對陣列。 每個色彩配對包含現有色彩 (第一個值) 和現有色彩所要對應至的色彩 (第二個值)。</param>
        <summary>設定預設分類的色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件： 指定舊的色彩，另一個則指定對應的新色彩的其中一個。 在呈現期間，符合其中一項舊的色彩重新對應表中的任何色彩會變更為對應的新色彩。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類、 [點陣圖] 類別中，色彩重新對應表和仍然畫筆分類不同的色彩重新對應表色彩重新對應。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  建立映像 （紅色圓圈），將其儲存為 Circle2.jpg、 開啟該映像，並繪製到螢幕。  
  
2.  建立對應的色彩為紅色到綠色的色彩對應。  
  
3.  繪製到螢幕一次，但這次使用的色彩對應稍早建立的映像。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetRemapTable (map As ColorMap(), type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetRemapTable : System.Drawing.Imaging.ColorMap[] * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetRemapTable (map, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> 型別的色彩配對陣列。 每個色彩配對包含現有色彩 (第一個值) 和現有色彩所要對應至的色彩 (第二個值)。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已設定色彩重新對應表的分類。</param>
        <summary>設定指定分類的色彩重新對應表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件： 指定舊的色彩，另一個則指定對應的新色彩的其中一個。 在呈現期間，符合其中一項舊的色彩重新對應表中的任何色彩會變更為對應的新色彩。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類、 [點陣圖] 類別中，色彩重新對應表和仍然畫筆分類不同的色彩重新對應表色彩重新對應。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定畫筆分類的色彩重新對應表<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%28System.Drawing.Imaging.ColorMap%5B%5D%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定閾值 (透明度範圍)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreshold (threshold As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreshold(float threshold);" />
      <MemberSignature Language="F#" Value="member this.SetThreshold : single -&gt; unit" Usage="imageAttributes.SetThreshold threshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="threshold">指定閾值的實數。</param>
        <summary>設定預設分類的閾值 (透明度範圍)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 臨界值是介於 0 到 1，指定每個色彩元件的停損點的值。 例如，假設臨界值設定為 0.7，而且假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) is greater than 0.7 x 255, 的所以紅色元件會變更為 255 （完全強度）。 綠色元件 (50) 小於 0.7 x 255, 因此綠色元件將會變更為 0。 藍色元件 (220) is greater than 0.7 x 255, 的所以藍色元件會變更為 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的臨界值、 點陣圖類別目錄的臨界值和仍然畫筆分類的不同臨界值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  開啟<xref:System.Drawing.Image>並將它繪製到螢幕。  
  
2.  會建立<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定其臨界值使用<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法。  
  
3.  繪製至畫面的映像所使用的臨界值<xref:System.Drawing.Imaging.ImageAttributes>物件。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreshold (threshold As Single, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreshold(float threshold, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetThreshold : single * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetThreshold (threshold, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="threshold">閾值，介於 0.0 到 1.0 之間，做為要對應至最大值或最小值的排序色彩中斷點。</param>
        <param name="type">
          <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的元素，指定已經設定色彩閾值的分類。</param>
        <summary>設定指定分類的閾值 (透明度範圍)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 臨界值是介於 0 到 1，指定每個色彩元件的停損點的值。 例如，假設臨界值設定為 0.7，而且假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) is greater than 0.7 x 255, 的所以紅色元件會變更為 255 （完全強度）。 綠色元件 (50) 小於 0.7 x 255, 因此綠色元件將會變更為 0。 藍色元件 (220) is greater than 0.7 x 255, 的所以藍色元件會變更為 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩和灰階調整五大類設定： 預設、 點陣圖、 筆刷、 畫筆、 和文字。 例如，您可以指定預設分類的臨界值、 點陣圖類別目錄的臨界值和仍然畫筆分類的不同臨界值。  
  
 預設的彩色調整和灰階調整設定適用於沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何畫筆分類的調整設定，預設設定會套用到 [畫筆] 類別。  
  
 當您指定的彩色調整或特定分類的灰階調整設定，調整預設不再適用於該類別。 例如，假設您指定預設分類的調整設定的集合。 如果您藉由傳遞設定畫筆分類的閾值<xref:System.Drawing.Imaging.ColorAdjustType.Pen>至<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法，沒有預設的調整設定會套用至畫筆。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%28System.Single%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetWrapMode">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定環繞模式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetWrapMode (mode As WrapMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode -&gt; unit" Usage="imageAttributes.SetWrapMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的元素，指定如何使用重複的影像複本來並排填滿區域。</param>
        <summary>設定環繞模式，這個模式是用來決定如何橫越形狀或在形狀界限並排紋理。 當紋理小於它正在填滿的形狀時，紋理會橫越形狀來並排，以便將它填滿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法就相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29>並傳遞<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如`color`參數。 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 指定呈現影像外部的像素色彩。 這個色彩時，會顯示 [模式] 參數設定為<xref:System.Drawing.Drawing2D.WrapMode.Clamp>，且來源矩形傳遞給<xref:System.Drawing.Graphics.DrawImage%2A>方法大於影像本身。  
  
   
  
## Examples  
 下列程式碼範例專為搭配 Windows Form 使用，而且需要<xref:System.Windows.Forms.PaintEventArgs> `e`，這是參數的<xref:System.Windows.Forms.Control.Paint>事件處理常式。 該程式碼執行下列動作：  
  
1.  開啟<xref:System.Drawing.Image>Circle3.jpg 從檔案 （小型的紅色填入圓圈），並將它繪製到螢幕。  
  
2.  會建立<xref:System.Drawing.Imaging.ImageAttributes>物件以及設定<xref:System.Drawing.Drawing2D.WrapMode>列舉型別<xref:System.Drawing.Drawing2D.WrapMode.Tile>。  
  
3.  建立<xref:System.Drawing.TextureBrush>Circle3.jpg 檔案中使用的映像。  
  
4.  繪製矩形填滿小型的紅色填滿的圓形的畫面。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode, System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode * System.Drawing.Color -&gt; unit" Usage="imageAttributes.SetWrapMode (mode, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="mode">
          <see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的元素，指定如何使用重複的影像複本來並排填滿區域。</param>
        <param name="color">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 物件，指定所呈現影像外部的像素色彩。 如果模式參數設定為 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />，而且傳遞至 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 的來源矩形大於影像本身，就會顯示這個色彩。</param>
        <summary>指定用來決定如何橫越形狀或在形狀界限並排紋理的環繞模式和色彩。 當紋理小於它正在填滿的形狀時，紋理會橫越形狀來並排，以便將它填滿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color, bool clamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode, System::Drawing::Color color, bool clamp);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode * System.Drawing.Color * bool -&gt; unit" Usage="imageAttributes.SetWrapMode (mode, color, clamp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="clamp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">
          <see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的元素，指定如何使用重複的影像複本來並排填滿區域。</param>
        <param name="color">色彩物件，指定所呈現影像外部的像素色彩。 如果模式參數設定為 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />，而且傳遞至 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 的來源矩形大於影像本身，就會顯示這個色彩。</param>
        <param name="clamp">這個參數沒有作用。 請將它設定為 <see langword="false" />。</param>
        <summary>指定用來決定如何橫越形狀或在形狀界限並排紋理的環繞模式和色彩。 當紋理小於它正在填滿的形狀時，紋理會橫越形狀來並排，以便將它填滿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>