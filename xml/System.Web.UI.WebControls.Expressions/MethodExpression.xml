<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="970264dc27c15aef12009b2e30f6891735a746f3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585713" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type MethodExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供指定方法中所定義自訂 LINQ 查詢的方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.QueryExtender>控制項支援的自訂 LINQ 查詢。 您可以定義自訂 LINQ 查詢方法和使用<xref:System.Web.UI.WebControls.Expressions.MethodExpression>篩選器叫用中的查詢選項<xref:System.Web.UI.WebControls.QueryExtender>控制項。  
  
 包含自訂 LINQ 查詢的方法必須符合下列準則：  
  
-   方法必須為靜態 (`Shared`在 Visual Basic 中)。 第一個參數必須是<xref:System.Linq.IQueryable%601>或<xref:System.Collections.Generic.IEnumerable%601>物件。 方法可以有一個以上的參數。  
  
-   傳回值不能變更<xref:System.Linq.IQueryable%601>或<xref:System.Collections.Generic.IEnumerable%601>查詢的類型。  
  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression>搜尋包含以下列順序查詢的方法：  
  
1.  如果<xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>屬性中指定<xref:System.Web.UI.WebControls.QueryExtender>控制項，<xref:System.Web.UI.WebControls.Expressions.MethodExpression>物件會尋找指定的型別中的方法。  
  
2.  如果資料來源實作<xref:System.Web.DynamicData.IDynamicDataSource>，方法會尋找內容型別上的方法 (<xref:System.Data.Linq.DataContext>或<xref:System.Data.Objects.ObjectContext>物件。)  
  
3.  方法會尋找範本控制項、 頁面的基底類別或使用者控制項的方法。  
  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression>類別就像<xref:System.Web.UI.WebControls.Expressions.CustomExpression>類別不同處在於方法運算式執行以回應方法呼叫，而自訂的運算式執行以回應事件。  
  
   
  
## Examples  
 下列範例示範如何搜尋 AdventureWorks 資料庫有 400 或多個清單價格的產品中的 [產品] 資料表的 ListPrice 欄位。 此範例示範如何建立自訂的 LINQ 查詢方法中的網頁程式碼以及如何叫用中的方法<xref:System.Web.UI.WebControls.QueryExtender>控制項。  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 下列範例會示範如何呼叫中頁面的方法。  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="methodExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">要使用的資料來源控制項。</param>
        <summary>使用指定的 <see cref="T:System.Linq.IQueryable" /> 物件來解析運算式。</summary>
        <returns>用於解析運算式之 <see cref="T:System.Linq.IQueryable" /> 物件的執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">資料來源控制項是 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">找不到方法。  -或-  此方法非為靜態。  -或-  所傳遞 <see langword="IQuerable&lt;T&gt;" /> 物件的型別已變更。</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreIfNotFound : bool with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否應該忽略運算式。</summary>
        <value>如果要忽略運算式則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression>物件會搜尋包含查詢尋找在特定位置，並搜尋以特定順序的方法。 您可以將此屬性設定為`false`擲回例外狀況，如果<xref:System.Web.UI.WebControls.Expressions.CustomExpression>物件找不到包含 LINQ 的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MethodName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定包含自訂 LINQ 查詢之方法的名稱。</summary>
        <value>包含自訂 LINQ 查詢之方法的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression>物件可讓您呼叫的方法中定義的自訂 LINQ 查詢。 您指定的方法中<xref:System.Web.UI.WebControls.QueryExtender>網頁中的控制項。  
  
   
  
## Examples  
 下列範例示範如何指定`FilterStandardPrice`方法中的<xref:System.Web.UI.WebControls.QueryExtender>控制項。 定義自訂 LINQ 查詢中`FilterStandardPrice`方法。  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定類別，這個類別的方法包含自訂查詢。</summary>
        <value>前述方法為其中成員的類別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression>類別可讓您指定的資料來源中的自訂運算式<xref:System.Web.UI.WebControls.QueryExtender>控制項。 您可以使用<xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>屬性，以指定的方法所屬的類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>