<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpandoObject.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5819b018355c643d951c9252212c100d95e7d4b18.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">819b018355c643d951c9252212c100d95e7d4b18</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.ExpandoObject">
          <source>Represents an object whose members can be dynamically added and removed at run time.</source>
          <target state="translated">代表可在執行階段以動態方式加入和移除其成員的物件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class enables you to add and delete members of its instances at run time and also to set and get values of these members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>類別可讓您加入和刪除成員，其執行個體的執行階段，也可以設定及取得這些成員的值。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This class supports dynamic binding, which enables you to use standard syntax like <ph id="ph1">`sampleObject.sampleMember`</ph> instead of more complex syntax like <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>.</source>
          <target state="translated">這個類別支援可讓您使用類似下面的標準語法的動態繫結<ph id="ph1">`sampleObject.sampleMember`</ph>而不是更複雜的語法，例如<ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the standard Dynamic Language Runtime (DLR) interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`ExpandoObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>類別會實作標準動態語言執行階段 (DLR) 介面<ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>，可讓您共用的執行個體<ph id="ph3">`ExpandoObject`</ph>支援 DLR 互通性模型的語言之間的類別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For example, you can create an instance of the <ph id="ph1">`ExpandoObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">例如，您可以建立的執行個體<ph id="ph1">`ExpandoObject`</ph>類別在 C# 中，並將它傳遞給 IronPython 函式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> and <bpt id="p2">[</bpt>Introducing the ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> on the C# Frequently Asked Questions Web site.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>動態語言執行階段概觀<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>和<bpt id="p2">[</bpt>簡介 ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> C# 常見問題集問題網站上。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class is an implementation of the dynamic object concept that enables getting, setting, and invoking members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>類別是動態物件概念，讓使用者入門、 設定，以及叫用成員的實作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define types that have their own dynamic dispatch semantics, use the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">如果您想要定義型別具有自己的動態分派語意，請使用<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define how dynamic objects participate in the interoperability protocol and manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">如果您想要定義如何動態物件參與互通性通訊協定和管理快取 DLR 快速動態分派，建立您自己實作<ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Creating an Instance</source>
          <target state="translated">建立執行個體</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In C#, to enable late binding for an instance of the <ph id="ph1">`ExpandoObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">在 C# 中，以啟用晚期繫結的執行個體<ph id="ph1">`ExpandoObject`</ph>類別，您必須使用<ph id="ph2">`dynamic`</ph>關鍵字。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>使用動態類型<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">在 Visual Basic 中，動態作業支援晚期繫結。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>早期和晚期繫結<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何建立執行個體<ph id="ph1">`ExpandoObject`</ph>類別。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Adding New Members</source>
          <target state="translated">加入新成員</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can add properties, methods, and events to instances of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">您可以加入屬性、 方法和事件的執行個體<ph id="ph1">`ExpandoObject`</ph>類別。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a new property to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何將新屬性的執行個體加入<ph id="ph1">`ExpandoObject`</ph>類別。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The methods represent lambda expressions that are stored as delegates, which can be invoked when they are needed.</source>
          <target state="translated">方法將代表 lambda 運算式會儲存為必要時，您可以叫用的委派。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a method that increments a value of the dynamic property.</source>
          <target state="translated">下列程式碼範例示範如何加入的方法，以遞增的動態屬性的值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add an event to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何將事件的執行個體加入<ph id="ph1">`ExpandoObject`</ph>類別。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Passing As a Parameter</source>
          <target state="translated">傳遞做為參數</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can pass instances of the <ph id="ph1">`ExpandoObject`</ph> class as parameters.</source>
          <target state="translated">您可以將傳遞的執行個體<ph id="ph1">`ExpandoObject`</ph>類別做為參數。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Note that these instances are treated as dynamic objects in C# and late-bound objects in Visual Basic.</source>
          <target state="translated">請注意，這些執行個體都視為動態物件，在 C# 和 Visual Basic 中的晚期繫結物件。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This means that you do not have IntelliSense for object members and you do not receive compiler errors when you call non-existent members.</source>
          <target state="translated">這表示您沒有物件成員的 IntelliSense，而且您沒有收到編譯器錯誤，當您呼叫不存在的成員。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you call a member that does not exist, an exception occurs.</source>
          <target state="translated">如果您呼叫不存在的成員，就會發生例外狀況。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how you can create and use a method to print the names and values of properties.</source>
          <target state="translated">下列程式碼範例示範如何建立和使用方式來列印的名稱和屬性的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Enumerating and Deleting Members</source>
          <target state="translated">列舉及刪除成員</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 類別會實作 <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> 介面。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables enumeration of members added to the instance of the <ph id="ph1">`ExpandoObject`</ph> class at run time.</source>
          <target state="translated">這可讓成員加入至執行個體的列舉型別<ph id="ph1">`ExpandoObject`</ph>在執行階段類別。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This can be useful if you do not know at compile time what members an instance might have.</source>
          <target state="translated">這很有用，如果您不知道在編譯階段執行個體可能會有哪些成員。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example shows how you can cast an instance of the <ph id="ph1">`ExpandoObject`</ph> class to the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface and enumerate the instance's members.</source>
          <target state="translated">下列程式碼範例示範如何轉型的執行個體<ph id="ph1">`ExpandoObject`</ph>類別<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>介面和列舉的執行個體成員。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In languages that do not have syntax for deleting members (such as C# and Visual Basic), you can delete a member by implicitly casting an instance of the <ph id="ph1">`ExpandoObject`</ph> to the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface and then deleting the member as a key/value pair.</source>
          <target state="translated">在沒有刪除成員 （例如 C# 和 Visual Basic） 的語法的語言中，您可以刪除成員以隱含方式轉換的執行個體<ph id="ph1">`ExpandoObject`</ph>至<ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph>介面，並刪除的成員當做索引鍵/值組。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This is shown in the following example.</source>
          <target state="translated">這在下列範例中顯示。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Receiving Notifications of Property Changes</source>
          <target state="translated">接收通知的內容變更</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface and can raise a <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> event when a member is added, deleted, or modified.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>類別會實作<ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>介面，並且可以產生<ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph>事件時加入、 刪除或修改成員。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables <ph id="ph1">`ExpandoObject`</ph> class integration with Windows Presentation Foundation (WPF) data binding and other environments that require notification about changes in the object content.</source>
          <target state="translated">這可讓<ph id="ph1">`ExpandoObject`</ph>類別與 Windows Presentation Foundation (WPF) 資料繫結和其他需要變更物件內容的相關通知的環境整合。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an event handler for the <ph id="ph1">`PropertyChanged`</ph> event.</source>
          <target state="translated">下列程式碼範例示範如何建立事件處理常式<ph id="ph1">`PropertyChanged`</ph>事件。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.#ctor">
          <source>Initializes a new <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> that does not have members.</source>
          <target state="translated">初始化沒有成員的新 <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">傳回逐一查看集合的列舉值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>，可用於逐一查看集合。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</source>
          <target state="translated">運算式，表示分派給動態虛擬方法的 MetaObject。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The provided MetaObject will dispatch to the dynamic virtual methods.</source>
          <target state="translated">提供的 MetaObject 將會分派給動態虛擬方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</source>
          <target state="translated">此物件可以封裝在另一個 MetaObject 內部，以提供個別動作的自訂行為。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 型別的物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>