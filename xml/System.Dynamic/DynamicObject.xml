<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="048b7221c8f650af7e40e1fc748386ee05216b4b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410542" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="1caf9-101">提供基底類別，以便指定在執行階段時的動態行為。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1caf9-101">Provides a base class for specifying dynamic behavior at run time.</span>
      </span>
      <span data-ttu-id="1caf9-102">這個類別必須是繼承類別，您無法直接將其執行個體化。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1caf9-102">This class must be inherited from; you cannot instantiate it directly.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-103">`DynamicObject`類別可讓您定義可以在動態的物件上執行哪些作業，以及如何執行這些作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="1caf9-104">例如，您可以定義當您嘗試取得或設定物件屬性、 呼叫方法，或執行標準的算術運算，例如加法和乘法時，會發生什麼事。</span><span class="sxs-lookup"><span data-stu-id="1caf9-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="1caf9-105">這個類別可以是很有用，如果您想要建立更方便的通訊協定文件庫。</span><span class="sxs-lookup"><span data-stu-id="1caf9-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="1caf9-106">例如，如果您的程式庫的使用者必須使用類似下面的語法`Scriptobj.SetProperty("Count", 1)`，您可以提供想要使用許多更簡單的語法的能力`scriptobj.Count = 1`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="1caf9-107">您無法直接建立的執行個體`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="1caf9-108">若要實作動態行為，您可能想要繼承自`DynamicObject`類別並覆寫必要的方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="1caf9-109">例如，如果您需要的設定和取得屬性的唯一作業時，您可以覆寫只<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="1caf9-110">在 C# 中，若要啟用從衍生類別的執行個體的動態行為`DynamicObject`類別，您必須使用`dynamic`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1caf9-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="1caf9-111">如需詳細資訊，請參閱[使用動態類型](~/docs/csharp/programming-guide/types/using-type-dynamic.md)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="1caf9-112">在 Visual Basic 中，動態作業支援晚期繫結。</span><span class="sxs-lookup"><span data-stu-id="1caf9-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="1caf9-113">如需詳細資訊，請參閱[早期和晚期繫結](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-113">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="1caf9-114">下列程式碼範例示範如何建立衍生自類別的執行個體`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="1caf9-115">您也可以加入您自己的成員類別衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1caf9-116">如果您的類別定義的屬性，而且也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法時，動態語言執行階段 (DLR) 首先會使用語言繫結器來尋找靜態定義的類別中的屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1caf9-117">如果沒有這類屬性，會呼叫 DLR<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="1caf9-118">`DynamicObject`類別會實作 DLR 介面<xref:System.Dynamic.IDynamicMetaObjectProvider>，可讓您共用的執行個體`DynamicObject`支援 DLR 互通性模型的語言之間的類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="1caf9-119">例如，您可以建立的執行個體`DynamicObject`類別在 C# 中，並將它傳遞給 IronPython 函式。</span><span class="sxs-lookup"><span data-stu-id="1caf9-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="1caf9-120">如需詳細資訊，請參閱[動態語言執行階段概觀](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1caf9-121">如果您有一個簡單的案例，您需要的物件，但是只可加入及移除成員，在執行階段，不需要定義特定作業並沒有靜態成員，使用<xref:System.Dynamic.ExpandoObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="1caf9-122">如果您有更進階的案例，您要定義動態參與互通性通訊協定，或您需要管理 DLR 快速動態分派快取的物件，建立您自己實作<xref:System.Dynamic.IDynamicMetaObjectProvider>介面。</span><span class="sxs-lookup"><span data-stu-id="1caf9-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-123">假設您想要提供替代語法來存取值在字典中，因此，而是撰寫的`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"`在 Visual Basic 中)，您可以撰寫`sampleDictionary.Text = "Sample text"`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1caf9-124">此外，您想要區分大小寫，此語法以便`sampleDictionary.Text`相當於`sampleDictionary.text`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1caf9-125">下列程式碼範例示範`DynamicDictionary`類別，衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1caf9-126">`DynamicDictionary`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵 / 值組，並且會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以支援新語法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1caf9-127">它也提供`Count`包含屬性，其中顯示多少動態屬性字典。</span><span class="sxs-lookup"><span data-stu-id="1caf9-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="1caf9-128">如需其他範例，請參閱[建立包裝函式與 DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) C# 常見問題集部落格上。</span><span class="sxs-lookup"><span data-stu-id="1caf9-128">For more examples, see [Creating Wrappers with DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1caf9-129">讓衍生型別得以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 型別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-130">您無法直接建立的執行個體<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-131">若要實作動態行為，您必須繼承自<xref:System.Dynamic.DynamicObject>類別並覆寫必要的方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="1caf9-132">在 C# 中，以啟用動態行為的類別執行個體衍生自<xref:System.Dynamic.DynamicObject>類別，您必須使用`dynamic`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1caf9-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="1caf9-133">如需詳細資訊，請參閱[使用動態類型](~/docs/csharp/programming-guide/types/using-type-dynamic.md)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="1caf9-134">在 Visual Basic 中，動態作業支援晚期繫結。</span><span class="sxs-lookup"><span data-stu-id="1caf9-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="1caf9-135">如需詳細資訊，請參閱[早期和晚期繫結](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-135">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-136">下列程式碼範例示範如何建立衍生自類別的執行個體<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1caf9-137">傳回所有動態成員名稱的列舉型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-137">Returns the enumeration of all dynamic member names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-138">包含動態成員名稱的序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-138">A sequence that contains dynamic member names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-139">這個方法，所以僅限偵錯。</span><span class="sxs-lookup"><span data-stu-id="1caf9-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="1caf9-140">運算式，表示分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-141">提供分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span>
          </span>
          <span data-ttu-id="1caf9-142">此物件可以封裝在另一個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 內部，以提供個別動作的自訂行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span>
          </span>
          <span data-ttu-id="1caf9-143">這個方法支援語言實作者適用的動態語言執行階段基礎結構，但不建議直接在程式碼中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-144">
            <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-145">提供二進位運算的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-145">Provides information about the binary operation.</span>
          </span>
          <span data-ttu-id="1caf9-146">
            <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="1caf9-147">例如，對於 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 <c>ExpressionType.Add</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1caf9-148">二進位運算的右運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-148">The right operand for the binary operation.</span>
          </span>
          <span data-ttu-id="1caf9-149">例如，對於 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>arg</c> 等於 <c>second</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>arg</c> is equal to <c>second</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-150">二進位運算的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-150">The result of the binary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-151">提供二進位運算的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-151">Provides implementation for binary operations.</span>
          </span>
          <span data-ttu-id="1caf9-152">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定加法和乘法這類運算的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-153">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-153">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-154">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-155">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-155">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-156">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定的二進位運算應該如何執行動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-157">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-158">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-159">當您有二元運算，例如加法或乘法時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="1caf9-160">例如，如果<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>會覆寫方法，它會針對陳述式類似自動叫用`sum = first + second`或`multiply = first*second`，其中`first`衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="1caf9-161">您可以使用來取得執行二進位運算的類型資訊`Operation`屬性`binder`參數。</span><span class="sxs-lookup"><span data-stu-id="1caf9-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="1caf9-162">如果只在 C# 和 Visual Basic 中，使用動態物件`binder.Operation`屬性可以有下列值從<xref:System.Linq.Expressions.ExpressionType>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="1caf9-163">不過，在 IronPython 或 IronRuby 等其他語言，您可以有其他值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="1caf9-164">值</span><span class="sxs-lookup"><span data-stu-id="1caf9-164">Value</span></span>|<span data-ttu-id="1caf9-165">描述</span><span class="sxs-lookup"><span data-stu-id="1caf9-165">Description</span></span>|<span data-ttu-id="1caf9-166">C#</span><span class="sxs-lookup"><span data-stu-id="1caf9-166">C#</span></span>|<span data-ttu-id="1caf9-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="1caf9-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="1caf9-168">不含溢位檢查，數值運算元的加法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="1caf9-169">不含溢位檢查，數值運算元的加法複合指派運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="1caf9-170">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="1caf9-171">位元`AND`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="1caf9-172">位元`AND`複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="1caf9-173">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="1caf9-174">算術除法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="1caf9-175">複合指派算術除法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="1caf9-176">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="1caf9-177">位元`XOR`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="1caf9-178">位元`XOR`複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="1caf9-179">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="1caf9-180">「 大於 」 的比較。</span><span class="sxs-lookup"><span data-stu-id="1caf9-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="1caf9-181">「 大於或等於"的比較。</span><span class="sxs-lookup"><span data-stu-id="1caf9-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="1caf9-182">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="1caf9-183">位元左移位運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="1caf9-184">位元左移位複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="1caf9-185">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="1caf9-186">「 小於 」 比較。</span><span class="sxs-lookup"><span data-stu-id="1caf9-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="1caf9-187">「 小於或等於要 「 比較。</span><span class="sxs-lookup"><span data-stu-id="1caf9-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="1caf9-188">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="1caf9-189">算術餘數運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="1caf9-190">算術餘數複合指派運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="1caf9-191">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="1caf9-192">而不會對數值運算元溢位檢查的乘法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="1caf9-193">不含溢位檢查，數字運算元乘法複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="1caf9-194">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="1caf9-195">不是相等比較。</span><span class="sxs-lookup"><span data-stu-id="1caf9-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="1caf9-196">位元 or 邏輯的`OR`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="1caf9-197">位元 or 邏輯的`OR`複合指派。</span><span class="sxs-lookup"><span data-stu-id="1caf9-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="1caf9-198">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="1caf9-199">數學運算的乘冪的數字。</span><span class="sxs-lookup"><span data-stu-id="1caf9-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="1caf9-200">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="1caf9-201">位元右移位運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="1caf9-202">位元右移位複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="1caf9-203">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="1caf9-204">而不會對數值運算元溢位檢查的減法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="1caf9-205">不含溢位檢查，數字運算元減法複合指派作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="1caf9-206">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1caf9-207">若要實作`OrElse`(`a || b`) 和`AndAlso`(`a && b`) 在 C# 中的動態物件的作業，您可以同時實作<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>方法和<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="1caf9-208">`OrElse`作業組成一元`IsTrue`作業和二進位`Or`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="1caf9-209">`Or`只有當使用者執行作業的結果`IsTrue`作業`false`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="1caf9-210">`AndAlso`作業組成一元`IsFalse`作業和二進位`And`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="1caf9-211">`And`只有當使用者執行作業的結果`IsFalse`作業`false`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-212">假設您需要的資料結構來儲存數字、 文字及數值表示法，而且您想要定義基本的數學運算，例如加法和減法，這類資料。</span><span class="sxs-lookup"><span data-stu-id="1caf9-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="1caf9-213">下列程式碼範例示範`DynamicNumber`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-214">`DynamicNumber` 覆寫<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>方法，以啟用數學運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="1caf9-215">它也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法讓存取項目。</span><span class="sxs-lookup"><span data-stu-id="1caf9-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="1caf9-216">在此範例中，支援只有加法與減法運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="1caf9-217">如果您嘗試撰寫的陳述式，例如`resultNumber = firstNumber*secondNumber`，擲回執行階段例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1caf9-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-218">提供轉換作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-218">Provides information about the conversion operation.</span>
          </span>
          <span data-ttu-id="1caf9-219">
            <c>binder.Type</c> 屬性提供物件必須轉換成的目標類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span>
          </span>
          <span data-ttu-id="1caf9-220">例如，對於 C# 中的 <c>(String)sampleObject</c> (Visual Basic 中的 <c>CType(sampleObject, Type)</c>) 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Type</c> 會傳回 <see cref="T:System.String" /> 類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span>
          </span>
          <span data-ttu-id="1caf9-221">
            <c>binder.Explicit</c> 屬性提供發生之轉換類型的資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span>
          </span>
          <span data-ttu-id="1caf9-222">如果是明確轉換則會傳回 <see langword="true" />，如果是隱含轉換則會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-223">型別轉換作業的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-223">The result of the type conversion operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-224">提供型別轉換作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-224">Provides implementation for type conversion operations.</span>
          </span>
          <span data-ttu-id="1caf9-225">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定物件型別轉換作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-226">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-226">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-227">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-228">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-228">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-229">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定型別轉換應該如何執行動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-230">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-231">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-232">在 C# 中，如果覆寫這個方法是，它會自動叫用時有一個明確或隱含的轉換，如下列程式碼範例所示。</span><span class="sxs-lookup"><span data-stu-id="1caf9-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="1caf9-233">在 Visual Basic 中支援只明確轉換。</span><span class="sxs-lookup"><span data-stu-id="1caf9-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="1caf9-234">如果您覆寫這個方法，它可以使用呼叫<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>或<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>函式。</span><span class="sxs-lookup"><span data-stu-id="1caf9-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-235">假設您需要的資料結構來儲存數字、 文字及數值表示法，而且您想要用於字串和整數定義此資料結構的轉換。</span><span class="sxs-lookup"><span data-stu-id="1caf9-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="1caf9-236">下列程式碼範例示範`DynamicNumber`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-237">`DynamicNumber` 覆寫<xref:System.Dynamic.DynamicObject.TryConvert%2A>方法，讓型別轉換。</span><span class="sxs-lookup"><span data-stu-id="1caf9-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="1caf9-238">它也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以啟用存取資料的項目。</span><span class="sxs-lookup"><span data-stu-id="1caf9-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="1caf9-239">在此範例中，只用於字串和整數轉換支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="1caf9-240">如果您嘗試將物件轉換成任何其他類型，則會擲回執行階段例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1caf9-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-241">提供初始設定作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-241">Provides information about the initialization operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1caf9-242">在初始設定期間傳遞給物件的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-242">The arguments that are passed to the object during initialization.</span>
          </span>
          <span data-ttu-id="1caf9-243">例如，對於 <c>new SampleType(100)</c> 運算 (其中 <c>SampleType</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類型)，<c>args[0]</c> 等於 100。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-244">初始設定的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-244">The result of the initialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-245">提供作業的實作，這些作業會初始化動態物件的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span>
          </span>
          <span data-ttu-id="1caf9-246">這個方法並不適用於 C# 或 Visual Basic。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-246">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-247">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-247">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-248">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-249">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-249">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-250">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法來指定初始化的動態物件的新執行個體的方式。</span><span class="sxs-lookup"><span data-stu-id="1caf9-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="1caf9-251">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-252">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-253">C# 和 Visual Basic 編譯器永遠不會發出程式碼以使用這個方法，因為不支援第一級的型別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="1caf9-254">這個方法是使用類似下面的語法支援的動態物件初始化語言`dynamic new`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-255">提供刪除的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-255">Provides information about the deletion.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="1caf9-256">要刪除的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-256">The indexes to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-257">提供依索引刪除物件之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-257">Provides the implementation for operations that delete an object by index.</span>
          </span>
          <span data-ttu-id="1caf9-258">這個方法並不適用於 C# 或 Visual Basic。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-258">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-259">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-259">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-260">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-261">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-261">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-262">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何刪除具有指定的索引的值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="1caf9-263">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-264">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-265">C# 和 Visual Basic 編譯器永遠不會發出程式碼以使用這個方法，因為不支援這種作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="1caf9-266">這個方法適用於支援的索引，刪除物件，例如語法的語言`del sampleObject[1,2]`Python 中。</span><span class="sxs-lookup"><span data-stu-id="1caf9-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-267">提供刪除的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-267">Provides information about the deletion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-268">提供刪除物件成員之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-268">Provides the implementation for operations that delete an object member.</span>
          </span>
          <span data-ttu-id="1caf9-269">這個方法並不適用於 C# 或 Visual Basic。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-269">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-270">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-270">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-271">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-272">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-272">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-273">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何刪除物件成員。</span><span class="sxs-lookup"><span data-stu-id="1caf9-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="1caf9-274">當這個方法不會覆寫時，執行階段繫結器的語言會決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-275">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-276">C# 和 Visual Basic 編譯器永遠不會發出程式碼以使用這個方法，因為不支援這種作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="1caf9-277">這個方法適用於支援的刪除成員，例如語法的語言`del sampleObject.SampleMember`Python 中。</span><span class="sxs-lookup"><span data-stu-id="1caf9-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-278">提供作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-278">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="1caf9-279">用於作業的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-279">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="1caf9-280">例如，對於 C# 中的 <c>sampleObject[3]</c> (Visual Basic 中的 <c>sampleObject(3)</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-281">索引作業的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-281">The result of the index operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-282">提供依索引取得值之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-282">Provides the implementation for operations that get a value by index.</span>
          </span>
          <span data-ttu-id="1caf9-283">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定索引作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-284">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-284">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-285">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-286">(在大部分情況下，會擲回執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-286">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-287">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定由索引所取得的值應該如何執行動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-288">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-289">(在大部分情況下，會擲回執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-290">如果這個方法會覆寫時，它會自動叫用時，您有類似的作業`sampleObject[3]`在 C# 或`sampleObject(3)`Visual Basic、 where`sampleObject`衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-291">假設您想要建立的物件屬性可以是這類存取由名稱`Property0`， `Property1`，依此類推，或索引，以便，例如`sampleObject.Property0`相當於`sampleObject[0]`在 C# 或`sampleObject(0)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="1caf9-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="1caf9-292">下列程式碼範例示範`SampleDynamicObject`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-293">`SampleDynamicObject`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵-值組。</span><span class="sxs-lookup"><span data-stu-id="1caf9-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1caf9-294">`SampleDynamicObject` 覆寫<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>和<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>方法，以啟用索引的存取。</span><span class="sxs-lookup"><span data-stu-id="1caf9-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="1caf9-295">它會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以啟用存取，以屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="1caf9-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-296">提供已呼叫動態作業之物件的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-296">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="1caf9-297">
            <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="1caf9-298">例如，對於 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="1caf9-299">
            <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-300">取得作業的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-300">The result of the get operation.</span>
          </span>
          <span data-ttu-id="1caf9-301">例如，如果是針對屬性呼叫這個方法，您可以將屬性值指派給 <c>result</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-301">For example, if the method is called for a property, you can assign the property value to <c>result</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-302">提供取得成員值之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-302">Provides the implementation for operations that get member values.</span>
          </span>
          <span data-ttu-id="1caf9-303">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定取得屬性值這類作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-304">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-304">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-305">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-306">(在大部分情況下，會擲回執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-306">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-307">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何取得成員值的作業執行的動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-308">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-309">(在大部分情況下，會擲回執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-310">當您有類似的陳述式時，會呼叫這個方法`Console.WriteLine(sampleObject.SampleProperty)`，其中`sampleObject`是衍生自類別的執行個體<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1caf9-311">您也可以加入您自己的成員類別衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1caf9-312">如果您的類別定義的屬性，而且也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法時，動態語言執行階段 (DLR) 首先會使用語言繫結器來尋找靜態定義的類別中的屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1caf9-313">如果沒有這類屬性，會呼叫 DLR<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-314">假設您想要提供替代語法來存取值在字典中，因此，而是撰寫的`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"`在 Visual Basic 中)，您可以撰寫`sampleDictionary.Text = "Sample text"`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1caf9-315">此外，此語法必須區分大小寫，以便`sampleDictionary.Text`相當於`sampleDictionary.text`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1caf9-316">下列程式碼範例示範`DynamicDictionary`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-317">`DynamicDictionary`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵 / 值組，並且會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以支援新語法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1caf9-318">它也提供`Count`包含屬性，其中顯示多少動態屬性字典。</span><span class="sxs-lookup"><span data-stu-id="1caf9-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-319">提供叫用作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-319">Provides information about the invoke operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1caf9-320">在叫用作業期間傳遞給物件的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-320">The arguments that are passed to the object during the invoke operation.</span>
          </span>
          <span data-ttu-id="1caf9-321">例如，對於 <c>sampleObject(100)</c> 作業 (其中<c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args[0]</c> 等於 100。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-322">物件引動過程的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-322">The result of the object invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-323">提供叫用物件之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-323">Provides the implementation for operations that invoke an object.</span>
          </span>
          <span data-ttu-id="1caf9-324">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定叫用物件或委派這類作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-325">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-325">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-326">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-327">在大多數情況下，會擲回語言特有執行階段例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-327">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-328">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何叫用物件的作業執行的動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-329">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-330">(在大部分情況下，會擲回執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-331">如果這個方法會覆寫時，它會自動叫用時，您有類似的作業`sampleObject(100)`，其中`sampleObject`衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1caf9-332">在 C# 中，但在 Visual Basic 中不支援叫用物件的作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="1caf9-333">Visual Basic 編譯器永遠不會發出程式碼以使用這個方法，和 Visual Basic 語言不支援類似下面的語法`sampleObject(100)`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-334">假設您需要的資料結構，以便儲存文字和數字表示的數字。</span><span class="sxs-lookup"><span data-stu-id="1caf9-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="1caf9-335">您想要可以個別指定每個屬性的值，也能夠初始化單一陳述式中的所有屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="1caf9-336">下列程式碼範例示範`DynamicNumber`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-337">`DynamicNumber` 覆寫<xref:System.Dynamic.DynamicObject.TryInvoke%2A>方法，以啟用一次初始化的所有屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="1caf9-338">它也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法讓您存取個別物件屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-339">提供動態作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-339">Provides information about the dynamic operation.</span>
          </span>
          <span data-ttu-id="1caf9-340">
            <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="1caf9-341">例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleMethod"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span>
          </span>
          <span data-ttu-id="1caf9-342">
            <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1caf9-343">在叫用作業期間傳遞給物件成員的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-343">The arguments that are passed to the object member during the invoke operation.</span>
          </span>
          <span data-ttu-id="1caf9-344">例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args [0]</c> 等於 100。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-345">成員引動過程的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-345">The result of the member invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-346">提供叫用成員之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-346">Provides the implementation for operations that invoke a member.</span>
          </span>
          <span data-ttu-id="1caf9-347">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定呼叫方法這類作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-348">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-348">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-349">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-350">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-350">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-351">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何叫用該物件成員的作業執行的動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-352">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-353">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-354">如果這個方法會覆寫時，它會自動叫用時執行的作業，例如`sampleObject.SampleMethod(100)`，其中`sampleObject`衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="1caf9-355">您也可以將自己的方法加入類別衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-356">例如，如果您覆寫<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>方法時，動態分派系統第一次嘗試判斷類別中是否存在指定的方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="1caf9-357">如果找不到方法，它會使用<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>實作。</span><span class="sxs-lookup"><span data-stu-id="1caf9-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="1caf9-358">這個方法不支援`ref`和`out`參數。</span><span class="sxs-lookup"><span data-stu-id="1caf9-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="1caf9-359">中的所有參數`args`傳值方式傳遞的陣列。</span><span class="sxs-lookup"><span data-stu-id="1caf9-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-360">假設您想要提供替代語法來存取值在字典中，因此，而是撰寫的`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"`在 Visual Basic 中)，您可以撰寫`sampleDictionary.Text = "Sample text"`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1caf9-361">此外，您會想要能夠呼叫此字典中的所有標準字典方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="1caf9-362">下列程式碼範例示範`DynamicDictionary`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-363">`DynamicDictionary`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵-值組。</span><span class="sxs-lookup"><span data-stu-id="1caf9-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1caf9-364">它會覆寫<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>方法，以支援的方法<xref:System.Collections.Generic.Dictionary%602>類別並覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以支援新語法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1caf9-365">它也提供`Print`方法，會列印出所有字典索引鍵和值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-366">提供作業的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-366">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="1caf9-367">用於作業的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-367">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="1caf9-368">例如，對於 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1caf9-369">要設定給具有所指定索引之物件的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-369">The value to set to the object that has the specified index.</span>
          </span>
          <span data-ttu-id="1caf9-370">例如，對於 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，「值」<c></c>等於 10。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>value</c> is equal to 10.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-371">提供依索引設定值之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-371">Provides the implementation for operations that set a value by index.</span>
          </span>
          <span data-ttu-id="1caf9-372">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定依指定之索引存取物件之作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-373">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-373">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-374">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-375">在大多數情況下，會擲回語言特有執行階段例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-375">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-376">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定的索引來存取物件的作業應該如何執行動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-377">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-378">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-379">如果這個方法會覆寫時，它會自動叫用時，您有類似的作業`sampleObject[3] = 10`在 C# 或`sampleObject(3) = 10`Visual Basic、 where`sampleObject`衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-380">假設您想要建立的物件屬性可以是這類存取由名稱`Property0`， `Property1`，依此類推，或索引，以便，例如`sampleObject.Property0`相當於`sampleObject[0]`在 C# 或`sampleObject(0)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="1caf9-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="1caf9-381">下列程式碼範例示範`SampleDynamicObject`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-382">`SampleDynamicObject`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵-值組。</span><span class="sxs-lookup"><span data-stu-id="1caf9-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1caf9-383">`SampleDynamicObject` 覆寫<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>和<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>方法，以啟用索引的存取。</span><span class="sxs-lookup"><span data-stu-id="1caf9-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="1caf9-384">它會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以啟用存取，以屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="1caf9-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-385">提供已呼叫動態作業之物件的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-385">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="1caf9-386">
            <c>binder.Name</c> 屬性會提供獲得指派該值之成員的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span>
          </span>
          <span data-ttu-id="1caf9-387">例如，對於 <c>sampleObject.SampleProperty = "Test"</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="1caf9-388">
            <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1caf9-389">要設定給成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-389">The value to set to the member.</span>
          </span>
          <span data-ttu-id="1caf9-390">例如，對於 <c>sampleObject.SampleProperty = "Test"</c> (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>value</c> 會傳回 "Test"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <c>value</c> is "Test".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-391">提供設定成員值之作業的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-391">Provides the implementation for operations that set member values.</span>
          </span>
          <span data-ttu-id="1caf9-392">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定設定屬性值這類作業的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-393">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-393">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-394">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-395">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-395">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-396">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定應該如何將值設定為成員的作業執行的動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-397">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-398">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-399">當您有類似的陳述式時，會呼叫這個方法`sampleObject.SampleProperty = "Test"`，其中`sampleObject`是衍生自類別的執行個體<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1caf9-400">您也可以加入您自己的成員類別衍生自`DynamicObject`類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1caf9-401">如果您的類別定義的屬性，而且也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法時，動態語言執行階段 (DLR) 首先會使用語言繫結器來尋找靜態定義的類別中的屬性。</span><span class="sxs-lookup"><span data-stu-id="1caf9-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1caf9-402">如果沒有這類屬性，會呼叫 DLR<xref:System.Dynamic.DynamicObject.TrySetMember%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-403">假設您想要提供替代語法來存取值在字典中，因此，而是撰寫的`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"`在 Visual Basic 中)，您可以撰寫`sampleDictionary.Text = "Sample text"`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1caf9-404">此外，此語法必須區分大小寫，以便`sampleDictionary.Text`相當於`sampleDictionary.text`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1caf9-405">下列程式碼範例示範`DynamicDictionary`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-406">`DynamicDictionary`類別包含的物件`Dictionary<string, object>`類型 (`Dictionary(Of String, Object)`在 Visual Basic 中) 來儲存索引鍵 / 值組，並且會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法，以支援新語法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1caf9-407">它也提供`Count`包含屬性，其中顯示多少動態屬性字典。</span><span class="sxs-lookup"><span data-stu-id="1caf9-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="1caf9-408">提供一元運算的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-408">Provides information about the unary operation.</span>
          </span>
          <span data-ttu-id="1caf9-409">
            <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="1caf9-410">例如，對於 <c>negativeNumber = -number</c> 陳述式 (其中 <c>number</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 "Negate"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="1caf9-411">一元運算的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-411">The result of the unary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1caf9-412">提供一元運算的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-412">Provides implementation for unary operations.</span>
          </span>
          <span data-ttu-id="1caf9-413">衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定負號、遞增或遞減這類運算的動態行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1caf9-414">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-414">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1caf9-415">如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="1caf9-416">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1caf9-416">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1caf9-417">類別衍生自<xref:System.Dynamic.DynamicObject>類別可以覆寫這個方法，以指定一元運算應該如何執行動態物件。</span><span class="sxs-lookup"><span data-stu-id="1caf9-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="1caf9-418">當此方法不會覆寫時，執行階段繫結器的語言決定行為。</span><span class="sxs-lookup"><span data-stu-id="1caf9-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1caf9-419">(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="1caf9-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1caf9-420">當您有一元運算，例如否定，遞增或遞減，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="1caf9-421">例如，如果<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>會覆寫方法，這個方法會自動叫用的陳述式例如`negativeNumber = -number`，其中`number`衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1caf9-422">您可以使用，以取得有關一元運算的類型資訊`Operation`屬性`binder`參數。</span><span class="sxs-lookup"><span data-stu-id="1caf9-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="1caf9-423">如果只在 C# 和 Visual Basic 中，使用動態物件`binder.Operation`屬性可以有下列值從<xref:System.Linq.Expressions.ExpressionType>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="1caf9-424">不過，在 IronPython 或 IronRuby 等其他語言，您可以有其他值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="1caf9-425">值</span><span class="sxs-lookup"><span data-stu-id="1caf9-425">Value</span></span>|<span data-ttu-id="1caf9-426">描述</span><span class="sxs-lookup"><span data-stu-id="1caf9-426">Description</span></span>|<span data-ttu-id="1caf9-427">C#</span><span class="sxs-lookup"><span data-stu-id="1caf9-427">C#</span></span>|<span data-ttu-id="1caf9-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="1caf9-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="1caf9-429">一元遞減運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="1caf9-430">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="1caf9-431">一元遞增作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="1caf9-432">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="1caf9-433">算術負運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="1caf9-434">邏輯否定。</span><span class="sxs-lookup"><span data-stu-id="1caf9-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="1caf9-435">的補數。</span><span class="sxs-lookup"><span data-stu-id="1caf9-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="1caf9-436">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="1caf9-437">False 條件值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="1caf9-438">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="1caf9-439">True 的條件值。</span><span class="sxs-lookup"><span data-stu-id="1caf9-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="1caf9-440">不支援。</span><span class="sxs-lookup"><span data-stu-id="1caf9-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="1caf9-441">一元加號。</span><span class="sxs-lookup"><span data-stu-id="1caf9-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="1caf9-442">若要實作`OrElse`(`a || b`) 和`AndAlso`(`a && b`) 在 C# 中的動態物件的作業，您可以同時實作<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>方法和<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1caf9-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="1caf9-443">`OrElse`作業組成一元`IsTrue`作業和二進位`Or`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="1caf9-444">`Or`只有當使用者執行作業的結果`IsTrue`作業`false`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="1caf9-445">`AndAlso`作業組成一元`IsFalse`作業和二進位`And`作業。</span><span class="sxs-lookup"><span data-stu-id="1caf9-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="1caf9-446">`And`只有當使用者執行作業的結果`IsFalse`作業`false`。</span><span class="sxs-lookup"><span data-stu-id="1caf9-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1caf9-447">假設您需要的資料結構來儲存數字、 文字及數值表示法，而且您想要定義這類資料的算術負運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="1caf9-448">下列程式碼範例示範`DynamicNumber`類別，衍生自<xref:System.Dynamic.DynamicObject>類別。</span><span class="sxs-lookup"><span data-stu-id="1caf9-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1caf9-449">`DynamicNumber` 覆寫<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>方法，以啟用的算術負運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="1caf9-450">也會覆寫<xref:System.Dynamic.DynamicObject.TrySetMember%2A>和<xref:System.Dynamic.DynamicObject.TryGetMember%2A>方法讓存取項目。</span><span class="sxs-lookup"><span data-stu-id="1caf9-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="1caf9-451">在此範例中，支援只算術負運算。</span><span class="sxs-lookup"><span data-stu-id="1caf9-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="1caf9-452">如果您嘗試撰寫的陳述式，例如`negativeNumber = +number`，則執行階段發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1caf9-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>