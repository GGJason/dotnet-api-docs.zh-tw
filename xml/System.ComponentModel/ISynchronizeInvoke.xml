<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b181c-101">提供同步或非同步執行委派 (Delegate) 的方式。</span><span class="sxs-lookup"><span data-stu-id="b181c-101">Provides a way to synchronously or asynchronously execute a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b181c-102"><xref:System.ComponentModel.ISynchronizeInvoke>介面會提供事件發生時的物件之間的同步和非同步通訊。</span><span class="sxs-lookup"><span data-stu-id="b181c-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="b181c-103">實作這個介面的物件，可接收通知已發生事件，並可以回應關於事件的查詢。</span><span class="sxs-lookup"><span data-stu-id="b181c-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="b181c-104">如此一來，用戶端可以確保在提交取決於第一個完成的後續要求之前已處理一個要求。</span><span class="sxs-lookup"><span data-stu-id="b181c-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="b181c-105"><xref:System.ComponentModel.ISynchronizeInvoke>類別提供兩種方式可以叫用程序：</span><span class="sxs-lookup"><span data-stu-id="b181c-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="b181c-106">以非同步的方式，透過使用<xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b181c-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="b181c-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 啟動處理序，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="b181c-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="b181c-108">使用<xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>等候直到在啟動的程序<xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>完成。</span><span class="sxs-lookup"><span data-stu-id="b181c-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="b181c-109">以同步方式，透過使用<xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b181c-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="b181c-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 啟動處理程序、 等待它完成，然後再傳回。</span><span class="sxs-lookup"><span data-stu-id="b181c-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="b181c-111">使用<xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>當控制項的主要執行緒會從適當的執行緒呼叫封送處理呼叫的執行緒不同。</span><span class="sxs-lookup"><span data-stu-id="b181c-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b181c-112"><xref:System.Security.Permissions.HostProtectionAttribute>屬性套用至這個類別具有下列<xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A>屬性值： <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>。</span><span class="sxs-lookup"><span data-stu-id="b181c-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="b181c-113"><xref:System.Security.Permissions.HostProtectionAttribute> 不會影響桌面應用程式 (這些應用程式的啟動方式一般都是按兩下圖示、輸入命令或在瀏覽器輸入 URL)。</span><span class="sxs-lookup"><span data-stu-id="b181c-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="b181c-114">如需詳細資訊，請參閱<xref:System.Security.Permissions.HostProtectionAttribute>類別或[SQL Server 程式設計和主機保護屬性](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)。</span><span class="sxs-lookup"><span data-stu-id="b181c-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="b181c-115">方法的 <see cref="T:System.Delegate" />，採用包含在 <c>args</c> 中的相同數目和類型的參數。</span><span class="sxs-lookup"><span data-stu-id="b181c-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <c>args</c>.</span></span></param>
        <param name="args"><span data-ttu-id="b181c-116">做為引數傳遞至指定方法的 <see cref="T:System.Object" /> 型別的陣列。</span><span class="sxs-lookup"><span data-stu-id="b181c-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span></span> <span data-ttu-id="b181c-117">如果不需要引數，則這個可為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b181c-117">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="b181c-118">在建立此物件的執行緒上以非同步方式執行委派。</span><span class="sxs-lookup"><span data-stu-id="b181c-118">Asynchronously executes the delegate on the thread that created this object.</span></span></summary>
        <returns><span data-ttu-id="b181c-119"><see cref="T:System.IAsyncResult" /> 介面，表示由呼叫這個方法所啟動的非同步作業 (Asynchronous Operation)。</span><span class="sxs-lookup"><span data-stu-id="b181c-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b181c-120">`method`委派會在建立物件，而不是在其上執行緒的執行緒上執行<xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="b181c-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="b181c-121">會以非同步方式呼叫的委派，這個方法會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="b181c-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="b181c-122">您可以從任何執行緒呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="b181c-122">You can call this method from any thread.</span></span> <span data-ttu-id="b181c-123">如果您需要使用此方法啟動的處理序的傳回值，呼叫<xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>来取得其值。</span><span class="sxs-lookup"><span data-stu-id="b181c-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="b181c-124">如果您要以同步方式呼叫委派時，請使用<xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="b181c-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="b181c-125"><see cref="T:System.IAsyncResult" /> 介面，表示透過呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 所啟動的非同步作業。</span><span class="sxs-lookup"><span data-stu-id="b181c-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span></span></param>
        <summary><span data-ttu-id="b181c-126">等候直到由呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 所啟動的處理序完成，然後傳回處理序所產生的值。</span><span class="sxs-lookup"><span data-stu-id="b181c-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span></span></summary>
        <returns><span data-ttu-id="b181c-127"><see cref="T:System.Object" />，表示由非同步作業所產生的傳回值。</span><span class="sxs-lookup"><span data-stu-id="b181c-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b181c-128">這個方法會取得代表非同步作業的傳回值<xref:System.IAsyncResult>傳遞此介面。</span><span class="sxs-lookup"><span data-stu-id="b181c-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="b181c-129">如果尚未完成非同步作業，這個方法會等候直到得到結果為止。</span><span class="sxs-lookup"><span data-stu-id="b181c-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="b181c-130"><see cref="T:System.Delegate" />，含有了要呼叫的方法，在控制項執行緒的內容中。</span><span class="sxs-lookup"><span data-stu-id="b181c-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span></span></param>
        <param name="args"><span data-ttu-id="b181c-131"><see cref="T:System.Object" /> 型別的陣列，表示要傳遞至指定方法的引數。</span><span class="sxs-lookup"><span data-stu-id="b181c-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span></span> <span data-ttu-id="b181c-132">如果不需要引數，則這個可為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b181c-132">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="b181c-133">在建立此物件的執行緒上同步執行委派，並封送處理對建立執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="b181c-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span></span></summary>
        <returns><span data-ttu-id="b181c-134"><see cref="T:System.Object" />，是表示來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b181c-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b181c-135">不同於<xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>，這個方法會以同步方式運作，也就是說，它會等候處理程序完成後再傳回。</span><span class="sxs-lookup"><span data-stu-id="b181c-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="b181c-136">在呼叫時引發的例外狀況會傳播回到呼叫端。</span><span class="sxs-lookup"><span data-stu-id="b181c-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="b181c-137">使用此方法時從另一個執行緒呼叫的方法來封送處理至適當的執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="b181c-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b181c-138">取得值，表示當呼叫實作這個介面的物件時，呼叫端是否必須呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />。</span><span class="sxs-lookup"><span data-stu-id="b181c-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span></span></summary>
        <value>
          <span data-ttu-id="b181c-139">如果呼叫端必須呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b181c-139"><see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b181c-140">此屬性會決定是否必須呼叫<xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>當建立物件的方法呼叫會實作這個介面。</span><span class="sxs-lookup"><span data-stu-id="b181c-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="b181c-141">這類物件會繫結至特定的執行緒，並不是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="b181c-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="b181c-142">如果您從不同的執行緒呼叫的方法，您必須使用<xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>方法來封送處理至適當的執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="b181c-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>