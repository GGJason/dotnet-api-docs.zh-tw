<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="606bfa8ffd9f758de42817a0e4e7eaf9e11c8260" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368672" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供類別的並行管理，可支援非同步方法呼叫。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您的類別必須提供非同步行為根據[事件架構非同步模式概觀](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，您將會遇到的並行管理問題的數字。 尤其是需求，以確保執行緒或適用於應用程式模型的內容會呼叫事件處理常式 (例如，Windows Forms 應用程式，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]應用程式、 主控台應用程式，等等)。 <xref:System.ComponentModel.AsyncOperationManager>提供便利的方式建立的類別所支援的所有應用程式模式下會正確地執行[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。  
  
 <xref:System.ComponentModel.AsyncOperationManager>類別有一個方法， <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，它會傳回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，可用來追蹤特定的非同步工作的持續時間。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>工作完成時，工作可以以警示用戶端使用。 它也可以用來張貼進度更新和累加結果，而不終止作業。  
  
 如需實作非同步類別的詳細資訊，請參閱[實作事件架構非同步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.ComponentModel.AsyncOperationManager>類別來建立支援非同步作業的任何應用程式模型的類別。 它會顯示如何實作此類別測試以判斷是否為質數的數字。 這項計算會耗費大量時間，讓它在不同執行緒上完成。 進度報告、 累加結果和完成通知會由<xref:System.ComponentModel.AsyncOperation>類別，這樣可確保用戶端事件處理常式會呼叫適當的執行緒或內容上。  
  
 如需完整的程式碼清單，請參閱[How to： 實作支援事件架構非同步模式的元件](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。 如需用戶端的完整程式碼清單，請參閱[How to： 實作事件架構非同步模式的用戶端](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">物件，用來使一項用戶端狀態 (例如工作 ID) 與特定非同步作業產生關聯。</param>
        <summary>傳回 <see cref="T:System.ComponentModel.AsyncOperation" />，以追蹤特定非同步作業的持續期間。</summary>
        <returns>
          <see cref="T:System.ComponentModel.AsyncOperation" />，可以用來追蹤非同步方法引動過程的持續期間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法會傳回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>可讓您追蹤特定的非同步作業的持續時間，並在作業完成時警示應用程式模型。 您也可以使用張貼進度更新和累加結果，而不終止作業。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>會正確地封送處理至適當的執行緒或應用程式模型的內容，這些呼叫。  
  
 如果您實作支援事件架構非同步模式的類別，您的類別應該呼叫<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>每次您*MethodName* `Async`方法呼叫。 可讓方法的呼叫用戶端應用程式可以使用`userSuppliedState`參數來唯一識別每個引動過程，以便區分的非同步作業執行期間引發的事件。  
  
> [!CAUTION]
>  用戶端程式碼必須提供的唯一值`userSuppliedState`參數。 非唯一工作識別碼可能會導致您的實作不正確地報告進度和其他事件。 您的程式碼應該檢查是否有非唯一工作識別碼，則擲回<xref:System.ArgumentException?displayProperty=nameWithType>偵測到。  
  
 您的程式碼應該追蹤每個<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>傳回<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>和對應的基礎非同步作業中使用物件，後續更新，並結束作業。 這個追蹤可以是只要傳遞<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>做為參數之間的委派。 在更複雜的設計中，您的類別可以維護的集合<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>物件、 將物件加入時啟動的工作和完成或取消工作時加以移除。 這個方法可讓您可以查看唯一`userSuppliedState`參數值，然後是使用類別，可支援多個並行引動過程時，您應該使用的方法。  
  
 如需實作非同步類別的詳細資訊，請參閱[實作事件架構非同步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法來建立<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>用於追蹤非同步作業的持續時間。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.ComponentModel.AsyncOperationManager>類別。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定非同步作業的同步處理內容。</summary>
        <value>非同步作業的同步處理內容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作是無限制執行緒的實作。  
  
 執行緒應該設定<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A>屬性`null`完畢後，否則就會永遠不會處置其原廠出無限制執行緒的處理站。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">用來設定同步處理內容。 要求的值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 相關聯的狀態：</permission>
      </Docs>
    </Member>
  </Members>
</Type>