<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f474ecdee2a97c14c094c467c2c99713e70b1fe" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56348276" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="adf1d-101">為支援非同步方法呼叫的類別，提供並行管理。</span><span class="sxs-lookup"><span data-stu-id="adf1d-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="adf1d-102">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="adf1d-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf1d-103">如果您的類別需要以提供非同步行為，根據[事件架構非同步模式概觀](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，您將會遇到幾個的並行存取管理問題。</span><span class="sxs-lookup"><span data-stu-id="adf1d-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="adf1d-104">尤其是，確保在事件處理常式會呼叫的執行緒或適用於應用程式模型的內容上的需求 (例如，Windows Forms 應用程式，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]應用程式、 主控台應用程式，等等)。</span><span class="sxs-lookup"><span data-stu-id="adf1d-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="adf1d-105"><xref:System.ComponentModel.AsyncOperationManager>提供便利的方式建立所支援的所有應用程式模型下正常執行的類別[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="adf1d-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="adf1d-106"><xref:System.ComponentModel.AsyncOperationManager>類別具有一個方法<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，以傳回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，可用來追蹤特定非同步工作的持續時間。</span><span class="sxs-lookup"><span data-stu-id="adf1d-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="adf1d-107"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>工作完成時，可以對警示的用戶端使用一項工作。</span><span class="sxs-lookup"><span data-stu-id="adf1d-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="adf1d-108">它也可以用來張貼而不終止作業的進度更新和累加結果。</span><span class="sxs-lookup"><span data-stu-id="adf1d-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="adf1d-109">如需有關如何實作非同步類別的詳細資訊，請參閱 <<c0> [ 實作事件架構非同步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="adf1d-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf1d-110">下列程式碼範例示範如何使用<xref:System.ComponentModel.AsyncOperationManager>類別來建立支援的任何應用程式模型的非同步作業的類別。</span><span class="sxs-lookup"><span data-stu-id="adf1d-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="adf1d-111">它示範如何實作此類別測試的數字，以判斷是否為質數。</span><span class="sxs-lookup"><span data-stu-id="adf1d-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="adf1d-112">可能耗費時間，這項計算，因此它會對個別的執行緒。</span><span class="sxs-lookup"><span data-stu-id="adf1d-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="adf1d-113">進度報告、 累加結果和完成通知會由<xref:System.ComponentModel.AsyncOperation>類別，可確保用戶端的事件處理常式會呼叫適當的執行緒或內容上。</span><span class="sxs-lookup"><span data-stu-id="adf1d-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="adf1d-114">如需完整的程式碼清單，請參閱[How to:實作支援事件架構非同步模式的元件](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。</span><span class="sxs-lookup"><span data-stu-id="adf1d-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="adf1d-115">如需完整的程式碼的清單用戶端，請參閱[How to:實作事件架構非同步模式的用戶端](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="adf1d-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="adf1d-116">實作事件架構非同步模式</span><span class="sxs-lookup"><span data-stu-id="adf1d-116">Implementing the Event-based Asynchronous Pattern</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="adf1d-117">Managed 執行緒處理的最佳實施方針</span><span class="sxs-lookup"><span data-stu-id="adf1d-117">Managed Threading Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="adf1d-118">物件，用來使一項用戶端狀態 (例如工作 ID) 與特定非同步作業產生關聯。</span><span class="sxs-lookup"><span data-stu-id="adf1d-118">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="adf1d-119">傳回 <see cref="T:System.ComponentModel.AsyncOperation" />，以追蹤特定非同步作業的持續期間。</span><span class="sxs-lookup"><span data-stu-id="adf1d-119">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="adf1d-120"><see cref="T:System.ComponentModel.AsyncOperation" />，可以用來追蹤非同步方法引動過程的持續期間。</span><span class="sxs-lookup"><span data-stu-id="adf1d-120">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf1d-121"><xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法會傳回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，可用來追蹤特定非同步作業的持續時間，並在作業完成時，發出警示的應用程式模型。</span><span class="sxs-lookup"><span data-stu-id="adf1d-121">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="adf1d-122">您也可以使用它來張貼而不終止作業的進度更新和累加結果。</span><span class="sxs-lookup"><span data-stu-id="adf1d-122">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="adf1d-123"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>會正確地封送處理這些呼叫的適當執行緒或應用程式模型的內容。</span><span class="sxs-lookup"><span data-stu-id="adf1d-123">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="adf1d-124">如果您實作支援事件架構非同步模式的類別，您的類別應該呼叫<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>每次您*MethodName* `Async`呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="adf1d-124">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="adf1d-125">可讓方法的呼叫用戶端應用程式可以使用`userSuppliedState`參數來唯一識別每個引動過程，以便區別非同步作業的執行期間引發的事件。</span><span class="sxs-lookup"><span data-stu-id="adf1d-125">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="adf1d-126">用戶端程式碼必須提供的唯一值`userSuppliedState`參數。</span><span class="sxs-lookup"><span data-stu-id="adf1d-126">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="adf1d-127">非唯一工作識別碼可能會導致您的實作不正確地報告進度和其他事件。</span><span class="sxs-lookup"><span data-stu-id="adf1d-127">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="adf1d-128">您的程式碼應該檢查是否有非唯一工作識別碼，則擲回<xref:System.ArgumentException?displayProperty=nameWithType>偵測到。</span><span class="sxs-lookup"><span data-stu-id="adf1d-128">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="adf1d-129">追蹤您的程式碼應該每隔<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>所傳回<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，並使用對應基礎的非同步作業中的物件，來張貼社交動向更新及終止作業。</span><span class="sxs-lookup"><span data-stu-id="adf1d-129">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="adf1d-130">這個追蹤可以是簡單，只要傳遞<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>做為委派之間的參數。</span><span class="sxs-lookup"><span data-stu-id="adf1d-130">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="adf1d-131">在更複雜的設計中，您的類別可以維護的集合<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>物件、 將物件加入時啟動的工作和完成或取消工作時加以移除。</span><span class="sxs-lookup"><span data-stu-id="adf1d-131">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="adf1d-132">此方法可讓您檢查唯一`userSuppliedState`參數值，然後是使用類別，可支援多個並行引動過程時，您應該使用的方法。</span><span class="sxs-lookup"><span data-stu-id="adf1d-132">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="adf1d-133">如需有關如何實作非同步類別的詳細資訊，請參閱 <<c0> [ 實作事件架構非同步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="adf1d-133">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf1d-134">下列程式碼範例示範如何使用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法用來建立<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>用於追蹤非同步作業的持續時間。</span><span class="sxs-lookup"><span data-stu-id="adf1d-134">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="adf1d-135">此程式碼範例是針對提供之較大範例的一部分<xref:System.ComponentModel.AsyncOperationManager>類別。</span><span class="sxs-lookup"><span data-stu-id="adf1d-135">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="adf1d-136">實作事件架構非同步模式</span><span class="sxs-lookup"><span data-stu-id="adf1d-136">Implementing the Event-based Asynchronous Pattern</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="adf1d-137">Managed 執行緒處理的最佳實施方針</span><span class="sxs-lookup"><span data-stu-id="adf1d-137">Managed Threading Best Practices</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="adf1d-138">取得或設定非同步作業的同步處理內容。</span><span class="sxs-lookup"><span data-stu-id="adf1d-138">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="adf1d-139">非同步作業的同步處理內容。</span><span class="sxs-lookup"><span data-stu-id="adf1d-139">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf1d-140">預設實作是無限制執行緒實作。</span><span class="sxs-lookup"><span data-stu-id="adf1d-140">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="adf1d-141">執行緒應該設定<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A>屬性設`null`完畢後，否則就會永遠不會處置其原廠出無限制執行緒的處理站。</span><span class="sxs-lookup"><span data-stu-id="adf1d-141">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="adf1d-142">用來設定同步處理內容。</span><span class="sxs-lookup"><span data-stu-id="adf1d-142">for setting the synchronization context.</span></span> <span data-ttu-id="adf1d-143">要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="adf1d-143">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="adf1d-144">相關聯的狀態：</span><span class="sxs-lookup"><span data-stu-id="adf1d-144">Associated state:</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>