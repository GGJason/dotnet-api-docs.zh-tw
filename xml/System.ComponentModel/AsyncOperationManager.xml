<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperationManager.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5606bfa8ffd9f758de42817a0e4e7eaf9e11c8260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">606bfa8ffd9f758de42817a0e4e7eaf9e11c8260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Provides concurrency management for classes that support asynchronous method calls.</source>
          <target state="translated">提供類別的並行管理，可支援非同步方法呼叫。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>If your class needs to provide asynchronous behavior according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.</source>
          <target state="translated">如果您的類別必須提供非同步行為根據<bpt id="p1">[</bpt>事件架構非同步模式概觀<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>，您將會遇到的並行管理問題的數字。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).</source>
          <target state="translated">尤其是需求，以確保執行緒或適用於應用程式模型的內容會呼叫事件處理常式 (例如，Windows Forms 應用程式，<ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph>應用程式、 主控台應用程式，等等)。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>提供便利的方式建立的類別所支援的所有應用程式模式下會正確地執行<ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that can be used to track the duration of a particular asynchronous task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>類別有一個方法， <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>，它會傳回<ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>，可用來追蹤特定的非同步工作的持續時間。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for a task can be used to alert clients when a task completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>工作完成時，工作可以以警示用戶端使用。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It can also be used to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">它也可以用來張貼進度更新和累加結果，而不終止作業。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">如需實作非同步類別的詳細資訊，請參閱<bpt id="p1">[</bpt>實作事件架構非同步模式<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class to create a class that supports asynchronous operations for any application model.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>類別來建立支援非同步作業的任何應用程式模型的類別。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It shows how to implement a class that tests a number to determine whether it is prime.</source>
          <target state="translated">它會顯示如何實作此類別測試以判斷是否為質數的數字。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This calculation can be time consuming, so it is done on a separate thread.</source>
          <target state="translated">這項計算會耗費大量時間，讓它在不同執行緒上完成。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Progress reports, incremental results, and completion notifications are handled by the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class, which ensures that the client's event handlers are called on the proper thread or context.</source>
          <target state="translated">進度報告、 累加結果和完成通知會由<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>類別，這樣可確保用戶端事件處理常式會呼叫適當的執行緒或內容上。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">如需完整的程式碼清單，請參閱<bpt id="p1">[</bpt>How to： 實作支援事件架構非同步模式的元件<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">如需用戶端的完整程式碼清單，請參閱<bpt id="p1">[</bpt>How to： 實作事件架構非同步模式的用戶端<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</source>
          <target state="translated">物件，用來使一項用戶端狀態 (例如工作 ID) 與特定非同步作業產生關聯。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> for tracking the duration of a particular asynchronous operation.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph>，以追蹤特定非同步作業的持續期間。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> that you can use to track the duration of an asynchronous method invocation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph>，可以用來追蹤非同步方法引動過程的持續期間。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>方法會傳回<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>可讓您追蹤特定的非同步作業的持續時間，並在作業完成時警示應用程式模型。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>You can also use it to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">您也可以使用張貼進度更新和累加結果，而不終止作業。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>會正確地封送處理至適當的執行緒或應用程式模型的內容，這些呼叫。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> method is called.</source>
          <target state="translated">如果您實作支援事件架構非同步模式的類別，您的類別應該呼叫<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>每次您<bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph2">`Async`</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The client application that makes calls to the method can use the <ph id="ph1">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</source>
          <target state="translated">可讓方法的呼叫用戶端應用程式可以使用<ph id="ph1">`userSuppliedState`</ph>參數來唯一識別每個引動過程，以便區分的非同步作業執行期間引發的事件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Client code must provide a unique value for the <ph id="ph1">`userSuppliedState`</ph> parameter.</source>
          <target state="translated">用戶端程式碼必須提供的唯一值<ph id="ph1">`userSuppliedState`</ph>參數。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">非唯一工作識別碼可能會導致您的實作不正確地報告進度和其他事件。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should check for a non-unique task ID and throw an <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> if one is detected.</source>
          <target state="translated">您的程式碼應該檢查是否有非唯一工作識別碼，則擲回<ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph>偵測到。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should track every <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> returned by <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</source>
          <target state="translated">您的程式碼應該追蹤每個<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>傳回<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>和對應的基礎非同步作業中使用物件，後續更新，並結束作業。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This tracking can be as simple as passing the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> as a parameter among delegates.</source>
          <target state="translated">這個追蹤可以是只要傳遞<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>做為參數之間的委派。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>In more sophisticated designs, your class can maintain a collection of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</source>
          <target state="translated">在更複雜的設計中，您的類別可以維護的集合<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>物件、 將物件加入時啟動的工作和完成或取消工作時加以移除。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This approach allows you to check for unique <ph id="ph1">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</source>
          <target state="translated">這個方法可讓您可以查看唯一<ph id="ph1">`userSuppliedState`</ph>參數值，然後是使用類別，可支援多個並行引動過程時，您應該使用的方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">如需實作非同步類別的詳細資訊，請參閱<bpt id="p1">[</bpt>實作事件架構非同步模式<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for tracking the duration of asynchronous operations.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>方法來建立<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph>用於追蹤非同步作業的持續時間。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">這個程式碼範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Gets or sets the synchronization context for the asynchronous operation.</source>
          <target state="translated">取得或設定非同步作業的同步處理內容。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The synchronization context for the asynchronous operation.</source>
          <target state="translated">非同步作業的同步處理內容。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The default implementation is the free-threaded implementation.</source>
          <target state="translated">預設實作是無限制執行緒的實作。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>A thread should set the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id="ph2">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.</source>
          <target state="translated">執行緒應該設定<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph>屬性<ph id="ph2">`null`</ph>完畢後，否則就會永遠不會處置其原廠出無限制執行緒的處理站。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>for setting the synchronization context.</source>
          <target state="translated">用來設定同步處理內容。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">要求的值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Associated state:</source>
          <target state="translated">相關聯的狀態：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>