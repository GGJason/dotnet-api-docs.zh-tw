<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeDescriptionProvider.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac578810a0d3161e71e0b4f17da0881ab026be14b8d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78810a0d3161e71e0b4f17da0881ab026be14b8d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Provides supplemental metadata to the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>.</source>
          <target state="translated">提供補充性中繼資料給 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>類別會擴充以動態方式新增、 修改或隱藏特性，例如屬性、 屬性和事件類型或物件與相關聯的類型資訊。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>There can be multiple type description provider classes that offer metadata to a single <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</source>
          <target state="translated">可以有多個類型描述提供者的類別提供中繼資料至單一<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>There are two ways to associate a <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> with a <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>:</source>
          <target state="translated">有兩種方法，使<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>與<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>At design time, when the target class can be assigned the appropriate <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProviderAttribute&gt;</ph> tag.</source>
          <target state="translated">在設計階段，當目標類別可以指派適當<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProviderAttribute&gt;</ph>標記。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>At run time, when one of the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.AddProvider%2A&gt;</ph> methods of the <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class can be called.</source>
          <target state="translated">在執行階段，當一的<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.AddProvider%2A&gt;</ph>方法<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>可以呼叫類別。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>These overloaded methods require either the target object or its class type.</source>
          <target state="translated">這些多載的方法需要目標物件或其類別類型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> class relies on a parent object of the same type, supplied during construction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>類別必須仰賴屬於相同類型，在建構期間提供的父物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>This allows classes that derive from <ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph> to selectively override methods.</source>
          <target state="translated">這可讓類別衍生自<ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph>選擇性地覆寫的方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Instances of <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> are only built upon demand, minimizing the impact of custom type information on performance.</source>
          <target state="translated">執行個體<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>只建置在需求，自訂型別資訊，對效能的影響降到最低。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Your derived type might be marked as <ph id="ph1">&lt;see langword="internal" /&gt;</ph> or <ph id="ph2">&lt;see langword="private" /&gt;</ph>, but an instance of your type can be created with the <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph> class.</source>
          <target state="translated">您衍生的型別可能會標示為<ph id="ph1">&lt;see langword="internal" /&gt;</ph>或<ph id="ph2">&lt;see langword="private" /&gt;</ph>，但您的型別執行個體可以建立與<ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Do not write insecure code by assuming the caller is trusted.</source>
          <target state="translated">請勿撰寫假設呼叫端不安全的程式碼受到信任。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Assume instead that callers might create instances of your type in partial trust.</source>
          <target state="translated">相反地，假設呼叫端可能會建立類型執行個體，在部分信任中。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
          <source>This constructor is equivalent to calling the other <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29&gt;</ph> constructor with a parameter value that is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">這個建構函式相當於呼叫其他<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29&gt;</ph>建構函式的參數值與<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>The parent type description provider.</source>
          <target state="translated">父型別描述提供者。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> class using a parent type description provider.</source>
          <target state="translated">使用父型別描述提供者，初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeDescriptionProvider" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>If the <ph id="ph1">`parent`</ph> parameter is <ph id="ph2">`null`</ph>, all <ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> methods will return default values.</source>
          <target state="translated">如果<ph id="ph1">`parent`</ph>參數是<ph id="ph2">`null`</ph>，則所有<ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>方法會傳回預設值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>Otherwise, all <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> methods will delegate to the methods of <ph id="ph2">`parent`</ph>.</source>
          <target state="translated">否則，所有<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>方法會將委派的方法<ph id="ph2">`parent`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>The following table shows the default return values for <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> methods.</source>
          <target state="translated">下表顯示的預設傳回值<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>Method</source>
          <target state="translated">方法</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>Default return value</source>
          <target state="translated">預設的傳回值</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>A newly created object through a call to the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method.</source>
          <target state="translated">新建立的物件，用來呼叫<ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>A default instance of a <ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph> class.</source>
          <target state="translated">預設執行個體<ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>A default instance of a <ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph> class.</source>
          <target state="translated">預設執行個體<ph id="ph1">&lt;xref:System.ComponentModel.CustomTypeDescriptor&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
          <source>The <ph id="ph1">`objectType`</ph> first parameter.</source>
          <target state="translated"><ph id="ph1">`objectType`</ph>第一個參數。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>An optional service provider.</source>
          <target state="translated">選擇性的服務提供者。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>The type of object to create.</source>
          <target state="translated">要建立的物件類型。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>This parameter is never <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個參數絕對不是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>An optional array of types that represent the parameter types to be passed to the object's constructor.</source>
          <target state="translated">選擇性的型別陣列，表示要傳遞至物件建構函式的參數型別。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>This array can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or of zero length.</source>
          <target state="translated">這個陣列可以是 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 或長度為零。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>An optional array of parameter values to pass to the object's constructor.</source>
          <target state="translated">要傳遞給物件建構函式的選擇性參數值陣列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>Creates an object that can substitute for another data type.</source>
          <target state="translated">建立可以代替另一種資料類型的物件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>The substitute <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">替代的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph> specified by the <ph id="ph2">`provider`</ph> parameter is passed in by the <ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> method of the <ph id="ph4">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph>所指定<ph id="ph2">`provider`</ph>參數傳入<ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType&gt;</ph>方法<ph id="ph4">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>If <ph id="ph1">`provider`</ph> is not <ph id="ph2">`null`</ph>, the service provider can be used by the type description provider to obtain additional context about the creation call.</source>
          <target state="translated">如果<ph id="ph1">`provider`</ph>不<ph id="ph2">`null`</ph>，以取得有關建立呼叫的其他內容類型描述提供者可以使用服務提供者。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A&gt;</ph> method is <ph id="ph2">`virtual`</ph> and, by default, returns the result of the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> method if <ph id="ph4">`provider`</ph> is <ph id="ph5">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A&gt;</ph>方法<ph id="ph2">`virtual`</ph>，根據預設，會傳回的結果<ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph>方法如果<ph id="ph4">`provider`</ph>是<ph id="ph5">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, this method will invoke the <ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A&gt;</ph> method of the parent provider.</source>
          <target state="translated">如果<ph id="ph1">`provider`</ph>是<ph id="ph2">`null`</ph>，這個方法會叫用<ph id="ph3">&lt;xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A&gt;</ph>父提供者的方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
          <source>If the derived class is not interested in providing a substitute instance, it should just call the base implementation.</source>
          <target state="translated">如果衍生的類別不想要提供替代的執行個體，它只應該呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>The object for which to get the cache.</source>
          <target state="translated">要為其取得快取的物件。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>Gets a per-object cache, accessed as an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> of key/value pairs.</source>
          <target state="translated">取得個別物件的快取，以索引鍵/值組的 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 方式存取。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> if the provided object supports caching; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果提供的物件支援快取，則為 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> may need to perform complex operations on collections of metadata.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>可能需要執行複雜的作業，對中繼資料集合。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>Because types are not unloaded for the life of a domain, the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class will automatically cache the results of these operations based on type.</source>
          <target state="translated">因為型別並未加入網域的存留期間卸載<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>類別將會自動快取類型為根據這些作業的結果。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>However, some operations use live object instances.</source>
          <target state="translated">不過，某些作業使用即時物件執行個體。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>These operations cannot be cached within the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class because caching them would prevent the object from being garbage collected.</source>
          <target state="translated">這些作業就無法快取內<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>類別，因為快取它們會防止物件被記憶體回收。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>Instead, the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class allows for a per-object cache, accessed as an <ph id="ph2">&lt;xref:System.Collections.IDictionary&gt;</ph> of key/value pairs, to exist on an object.</source>
          <target state="translated">相反地，<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>類別可讓每個物件的快取，以存取<ph id="ph2">&lt;xref:System.Collections.IDictionary&gt;</ph>的物件上存在的索引鍵/值組。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A&gt;</ph> method returns an instance of this cache.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A&gt;</ph>方法會傳回此快取的執行個體。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A&gt;</ph> method will return <ph id="ph2">`null`</ph> if there is no supported cache for an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A&gt;</ph>方法會傳回<ph id="ph2">`null`</ph>如果沒有任何支援的快取中的物件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>The default <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph> used by <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> examines the object to see if it is a sited component that implements the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDictionaryService&gt;</ph> interface.</source>
          <target state="translated">預設值<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider&gt;</ph>供<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>會檢查物件是否實作站台的元件<ph id="ph3">&lt;xref:System.ComponentModel.Design.IDictionaryService&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>If the object is, it uses the dictionary service to store the object's cache.</source>
          <target state="translated">如果物件是，它會使用字典服務物件的快取儲存。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>Otherwise, the object it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">否則，該物件會傳回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>Other type description providers may provide their own implementation here.</source>
          <target state="translated">其他類型描述提供者可能會提供自己的實作。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
          <source>For example, dependency objects can just attach a property of type <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>.</source>
          <target state="translated">例如，相依性物件可以只將附加型別的屬性<ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>The object for which to get the extended type descriptor.</source>
          <target state="translated">要為其取得擴充型別描述項的物件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>Gets an extended custom type descriptor for the given object.</source>
          <target state="translated">取得特定物件的擴充自訂型別描述項。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph> that can provide extended metadata for the object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph>，可以提供物件的擴充中繼資料。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object.</source>
          <target state="translated">擴充的類型描述元是的提供內容的其他物件加入至這個物件，但不會實際物件定義的自訂類型描述元。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>For example, in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> component model, objects that implement the <ph id="ph2">&lt;xref:System.ComponentModel.IExtenderProvider&gt;</ph> interface can attach properties to other objects that reside in the same logical container.</source>
          <target state="translated">例如，在<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>元件模型物件會實作<ph id="ph2">&lt;xref:System.ComponentModel.IExtenderProvider&gt;</ph>介面可以將屬性附加至相同的邏輯容器中其他物件。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>The overloaded <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph> methods do not return a type descriptor that provides these extra extended properties.</source>
          <target state="translated">多載<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph>方法不會傳回型別描述項會提供這些額外的擴充屬性。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph> method returns the set of these extended properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph>方法會傳回這些延伸的屬性集。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> will automatically merge the results of these two property collections.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>就會自動合併這些兩個屬性集合的結果。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>While the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> component model supports only extended properties, <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph> can be used for extended attributes as well as events, if the type description provider supports it.</source>
          <target state="translated">雖然<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>元件模型支援擴充屬性，僅<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph>可用於擴充的屬性，以及事件，如果類型描述提供者支援它。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph> is <ph id="ph2">`virtual`</ph> and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph> 是<ph id="ph2">`virtual`</ph>，根據預設，會傳回傳回空的結果，如果沒有父提供者傳遞自訂類型描述元。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
          <source>If a parent provider was passed, this method will invoke the parent provider's <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph> method.</source>
          <target state="translated">如果父提供者已通過，則這個方法會叫用父提供者的<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
          <source>The object to get extender providers for.</source>
          <target state="translated">要為其取得擴充項提供者的物件。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
          <source>Gets the extender providers for the specified object.</source>
          <target state="translated">取得指定之物件的擴充項提供者。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
          <source>An array of extender providers for <ph id="ph1">&lt;paramref name="instance" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 之擴充項提供者的陣列。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
          <source>The specified component.</source>
          <target state="translated">指定的元件。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
          <source>Gets the name of the specified component, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the component has no name.</source>
          <target state="translated">取得指定之元件的名稱，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph> (如果元件沒有名稱)。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
          <source>The name of the specified component.</source>
          <target state="translated">指定之元件的名稱。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
          <source><ph id="ph1">&lt;paramref name="component" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="component" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Performs normal reflection against an object.</source>
          <target state="translated">對物件執行一般反映。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>An instance of the type (should not be <ph id="ph1">&lt;see langword="null" /&gt;</ph>).</source>
          <target state="translated">型別的執行個體 (不可以是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>Performs normal reflection against the given object.</source>
          <target state="translated">對指定的物件執行一般反映。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>The type of reflection for this <ph id="ph1">&lt;paramref name="instance" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 的反映類型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> method is a lower-level version of the <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>方法是較低層級版本的<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>If no custom type descriptor can be located for an object, <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> is called to perform normal reflection against the object.</source>
          <target state="translated">如果沒有自訂類型描述元可以找到物件，<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>呼叫以執行一般反映的物件。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source>Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</source>
          <target state="translated">如果已呼叫會使用執行個體，而不是類型的型別描述元成員，請使用這個方法多載。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>The type of object for which to retrieve the <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph>.</source>
          <target state="translated">要為其擷取 <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph> 之物件的型別。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>Performs normal reflection against a type.</source>
          <target state="translated">對型別執行一般反映。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>The type of reflection for this <ph id="ph1">&lt;paramref name="objectType" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;paramref name="objectType" /&gt;</ph> 的反映類型。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> method is a lower-level version of the <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>方法是較低層級版本的<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>If no custom type descriptor can be located for an object, <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> is called to perform normal reflection against the object.</source>
          <target state="translated">如果沒有自訂類型描述元可以找到物件，<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>呼叫以執行一般反映的物件。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source>Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</source>
          <target state="translated">如果已呼叫類型描述元成員使用類型，而不是執行個體，請使用這個方法多載。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="objectType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="objectType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>The type of object for which to retrieve the <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph>.</source>
          <target state="translated">要為其擷取 <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph> 之物件的型別。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>An instance of the type.</source>
          <target state="translated">型別的執行個體。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">可以是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>Performs normal reflection against the given object with the given type.</source>
          <target state="translated">對具有特定型別的特定物件執行一般反映。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>The type of reflection for this <ph id="ph1">&lt;paramref name="objectType" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;paramref name="objectType" /&gt;</ph> 的反映類型。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> method is a lower-level version of the <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>方法是較低層級版本的<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>If no custom type descriptor can be located for an object, <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> is called to perform normal reflection against the object.</source>
          <target state="translated">如果沒有自訂類型描述元可以找到物件，<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>呼叫以執行一般反映的物件。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>This method is prototyped as <ph id="ph1">&lt;see langword="virtual" /&gt;</ph>, and by default returns <ph id="ph2">&lt;paramref name="objectType" /&gt;</ph> if no parent provider was passed.</source>
          <target state="translated">這個方法是做為原型<ph id="ph1">&lt;see langword="virtual" /&gt;</ph>，以及預設傳回<ph id="ph2">&lt;paramref name="objectType" /&gt;</ph>如果傳遞沒有父提供者。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
          <source>If a parent provider was passed, this method will invoke the parent provider's <ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /&gt;</ph> method.</source>
          <target state="translated">如果父提供者已通過，則這個方法會叫用父提供者的<ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source>The type to convert to its runtime equivalent.</source>
          <target state="translated">要轉換成其執行階段對等項目的型別。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source>Converts a reflection type into a runtime type.</source>
          <target state="translated">將反映型別轉換成執行階段型別。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the runtime equivalent of <ph id="ph2">&lt;paramref name="reflectionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，表示 <ph id="ph2">&lt;paramref name="reflectionType" /&gt;</ph> 的執行階段對等項目。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A&gt;</ph> method reverses the <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph> method to convert a reflection type back into a runtime type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A&gt;</ph>方法反轉<ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A&gt;</ph>方法，以反映類型轉換回執行階段型別。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source>Using the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A&gt;</ph> method is preferred over using the <ph id="ph2">&lt;xref:System.Type.UnderlyingSystemType%2A&gt;</ph> property, which was used in earlier versions to return the runtime type.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A&gt;</ph>建議的方法，透過使用<ph id="ph2">&lt;xref:System.Type.UnderlyingSystemType%2A&gt;</ph>屬性，已在舊版本中用來傳回執行階段型別。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="reflectionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reflectionType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeDescriptionProvider">
          <source>Gets a custom type descriptor for the given type or object.</source>
          <target state="translated">取得特定型別或物件的自訂型別描述項。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
          <source>An instance of the type.</source>
          <target state="translated">型別的執行個體。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no instance was passed to the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>.</source>
          <target state="translated">如果未傳遞執行個體至 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>，可以為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
          <source>Gets a custom type descriptor for the given object.</source>
          <target state="translated">取得特定物件的自訂型別描述項。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph> that can provide metadata for the type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph>，可以提供型別的中繼資料。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
          <source>The type of object for which to retrieve the type descriptor.</source>
          <target state="translated">要為其擷取型別描述項之物件的型別。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
          <source>Gets a custom type descriptor for the given type.</source>
          <target state="translated">取得特定型別的自訂型別描述項。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph> that can provide metadata for the type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph>，可以提供型別的中繼資料。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>The type of object for which to retrieve the type descriptor.</source>
          <target state="translated">要為其擷取型別描述項之物件的型別。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>An instance of the type.</source>
          <target state="translated">型別的執行個體。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no instance was passed to the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>.</source>
          <target state="translated">如果未傳遞執行個體至 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph>，可以為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>Gets a custom type descriptor for the given type and object.</source>
          <target state="translated">取得特定型別和物件的自訂型別描述項。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph> that can provide metadata for the type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ICustomTypeDescriptor" /&gt;</ph>，可以提供型別的中繼資料。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>This method is prototyped as <ph id="ph1">`virtual`</ph> and, by default, returns an empty descriptor if no parent provider was passed.</source>
          <target state="translated">這個方法是做為原型<ph id="ph1">`virtual`</ph>，根據預設，會傳回空的描述元如果沒有父提供者傳遞。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>If a parent provider was passed, this method will invoke the parent provider's <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph> method.</source>
          <target state="translated">如果父提供者已通過，則這個方法會叫用父提供者的<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /&gt;</ph> method should return a custom type descriptor for the object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /&gt;</ph>方法應該傳回物件的自訂類型描述元。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
          <source>If the method does not provide type information for the object, it should return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果方法並未提供物件的類型資訊，應傳回<ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
          <source>The type to test for compatibility.</source>
          <target state="translated">要測試其相容性的型別。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
          <source>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</source>
          <target state="translated">取得值，這個值指出指定的型別是否與型別描述及其型別描述提供者的鏈結相容。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is compatible with the type description and its chain of type description providers; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="type" /&gt;</ph> 與型別描述及其型別描述提供者的鏈結相容則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>