<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InvocationExpression.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e5b8215e732cc20694221a7156d47c9738d95a99.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5b8215e732cc20694221a7156d47c9738d95a99</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.InvocationExpression">
          <source>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</source>
          <target state="translated">代表將委派或 Lambda 運算式套用至引數運算式清單的運算式。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.InvocationExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%2A&gt;</ph> factory methods to create an <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%2A&gt;</ph>factory 方法，來建立<ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.InvocationExpression">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Invoke&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph>的<ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph>是<ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Invoke&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.InvocationExpression">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> that represents invoking a lambda expression with specified arguments.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph>表示叫用指定的引數的 lambda 運算式。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.Arguments">
          <source>Gets the arguments that the delegate or lambda expression is applied to.</source>
          <target state="translated">取得要套用委派或 Lambda 運算式的引數。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.InvocationExpression.Arguments">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects which represent the arguments that the delegate is applied to.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> 物件的 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>，代表要套用委派的引數。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.Expression">
          <source>Gets the delegate or lambda expression to be applied.</source>
          <target state="translated">取得要套用的委派或 Lambda 運算式。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.InvocationExpression.Expression">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the delegate to be applied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>，代表要套用的委派。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.NodeType">
          <source>Returns the node type of this expression.</source>
          <target state="translated">傳回此運算式的節點類型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.NodeType">
          <source>Extension nodes should return <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph> when overriding this method.</source>
          <target state="translated">延伸節點覆寫這個方法時應該傳回 <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.InvocationExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> of the expression.</source>
          <target state="translated">運算式的 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">傳回運算式樹狀節點的引數數目。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>You should not use this member.</source>
          <target state="translated">您不應該使用這個成員。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>The number of arguments to the expression tree node as <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">運算式樹狀結構節點，做為引數數目<ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">引數的索引。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">傳回位於索引的引數，如果索引超出範圍則擲回引數。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>You should not use this member.</source>
          <target state="translated">您不應該使用這個成員。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds, as <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">位於索引的引數，如果索引超出範圍則擲回引數，如同 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.InvocationExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /&gt;</ph> represents.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /&gt;</ph> 代表之運算式的靜態類型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.InvocationExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">代表運算式靜態類型的 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /&gt;</ph> property of the result.</source>
          <target state="translated">結果的 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /&gt;</ph> property of the result.</source>
          <target state="translated">結果的 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">建立類似這個運算式的新運算式，但使用提供的子系。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">如果所有子系都相同，則會傳回這個運算式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">如果未變更任何子系，則為這個運算式；否則為已更新子系的運算式。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>