<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36555644" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3f0af-101">提供內部介面以存取多個樹狀節點 (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 InexExpression) 的引數。</span><span class="sxs-lookup"><span data-stu-id="3f0af-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span></span>  <span data-ttu-id="3f0af-102">您不應該使用這個 API。</span><span class="sxs-lookup"><span data-stu-id="3f0af-102">You should not use this API.</span></span>  <span data-ttu-id="3f0af-103">它只有在 DLL 重構時為公用，且存在的唯一目的是將內部效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="3f0af-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="3f0af-104">此工具可執行兩種最佳化，減少運算式樹狀架構的大小。</span><span class="sxs-lookup"><span data-stu-id="3f0af-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="3f0af-105">第一種會使樹狀節點保留 IList&lt;T&gt;，而不是 ReadOnlyCollection。</span><span class="sxs-lookup"><span data-stu-id="3f0af-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="3f0af-106">IList&lt;T&gt; 可為各節點節省 ReadOnlyCollection 的配置成本。</span><span class="sxs-lookup"><span data-stu-id="3f0af-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="3f0af-107">第二種可建立特定的子類別，以便保留特定數目的引數 (例如 Block2、Block3、Block4)。</span><span class="sxs-lookup"><span data-stu-id="3f0af-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="3f0af-108">如此一來，這些節點會避免同時配置 ReadOnlyCollection 和陣列來儲存其項目，每個節點可省下 32 位元組。</span><span class="sxs-lookup"><span data-stu-id="3f0af-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="3f0af-109">運算式樹狀架構節點會繼續公開 ReadOnlyCollections 的原始 LINQ 屬性。</span><span class="sxs-lookup"><span data-stu-id="3f0af-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="3f0af-110">為了執行這個動作，節點會重複使用欄位來同時儲存陣列或通常儲存在陣列中的項目。</span><span class="sxs-lookup"><span data-stu-id="3f0af-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="3f0af-111">如為陣列，集合為 IList&lt;T&gt; 類型而不是 ReadOnlyCollection&lt;T&gt; 類型。</span><span class="sxs-lookup"><span data-stu-id="3f0af-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="3f0af-112">節點一經初步建構即為陣列。</span><span class="sxs-lookup"><span data-stu-id="3f0af-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="3f0af-113">當編譯器存取成員時，它會使用此介面。</span><span class="sxs-lookup"><span data-stu-id="3f0af-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="3f0af-114">存取陣列項目時會將陣列升階至 ReadOnlyCollection。</span><span class="sxs-lookup"><span data-stu-id="3f0af-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="3f0af-115">如為物件，我們會將第一個引數儲存在物件的類型欄位中。</span><span class="sxs-lookup"><span data-stu-id="3f0af-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="3f0af-116">一開始建構節點時，欄位就會保留運算式。</span><span class="sxs-lookup"><span data-stu-id="3f0af-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="3f0af-117">編譯器會透過此介面來存取引數，而第一個引數的存取子會使用 Expression.ReturnObject 傳回處理 Expression 或 ReadOnlyCollection 狀況的物件。</span><span class="sxs-lookup"><span data-stu-id="3f0af-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="3f0af-118">當使用者存取 ReadOnlyCollection 時，會更新物件欄位以便直接保留 ReadOnlyCollection。</span><span class="sxs-lookup"><span data-stu-id="3f0af-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="3f0af-119">運算式務必始終傳回相同的 ReadOnlyCollection。</span><span class="sxs-lookup"><span data-stu-id="3f0af-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="3f0af-120">否則，重新寫入器的樹狀查核器會中斷。</span><span class="sxs-lookup"><span data-stu-id="3f0af-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="3f0af-121">這會中斷 LINQ v1 的變更，使得同一個運算式節點傳回不同的 ReadOnlyCollections。</span><span class="sxs-lookup"><span data-stu-id="3f0af-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="3f0af-122">目前的使用者可以依據物件識別，得知節點是否已變更。</span><span class="sxs-lookup"><span data-stu-id="3f0af-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="3f0af-123">將 ReadOnlyCollection 儲存在多載的欄位中可同時降低記憶體使用量並維持公用 API 的相容性。</span><span class="sxs-lookup"><span data-stu-id="3f0af-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f0af-124">傳回運算式樹狀節點的引數數目。</span><span class="sxs-lookup"><span data-stu-id="3f0af-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="3f0af-125">您不應該使用這個類型。</span><span class="sxs-lookup"><span data-stu-id="3f0af-125">You should not use this type.</span></span>  <span data-ttu-id="3f0af-126">它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="3f0af-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="3f0af-127">運算式樹狀節點做為引數數目<see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="3f0af-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f0af-128">引數的索引。</span><span class="sxs-lookup"><span data-stu-id="3f0af-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="3f0af-129">傳回位於索引的引數，如果索引超出範圍則擲回引數。</span><span class="sxs-lookup"><span data-stu-id="3f0af-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="3f0af-130">您不應該使用這個類型。</span><span class="sxs-lookup"><span data-stu-id="3f0af-130">You should not use this type.</span></span>  <span data-ttu-id="3f0af-131">它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="3f0af-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="3f0af-132">位於索引的引數，如果索引超出範圍則擲回引數，如同 <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="3f0af-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>