<Type Name="ExpressionVisitor" FullName="System.Linq.Expressions.ExpressionVisitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f99a221de282290997c80aa097ba0950265cc8c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460712" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionVisitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionVisitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionVisitor abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d0f80-101">代表運算式樹狀的造訪者或重寫器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0f80-101">Represents a visitor or rewriter for expression trees.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f80-102">這個類別被為了繼承來建立更具特製化的類別，其功能需要周遊、 檢查或複製為運算式樹狀架構。</span><span class="sxs-lookup"><span data-stu-id="d0f80-102">This class is designed to be inherited to create more specialized classes whose functionality requires traversing, examining or copying an expression tree.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionVisitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d0f80-103">初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-103">Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Visit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f80-104">將運算式或運算式清單分派給此類別中較為特殊的其中一種造訪方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-104">Dispatches the expression or the list of expressions to one of the more specialized visit methods in this class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt; Visit (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Linq.Expressions.Expression&gt; Visit(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Linq.Expressions.Expression&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Visit (nodes As ReadOnlyCollection(Of Expression)) As ReadOnlyCollection(Of Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Linq::Expressions::Expression ^&gt; ^ Visit(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Linq::Expressions::Expression ^&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">
          <span data-ttu-id="d0f80-105">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-105">The expressions to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-106">將運算式清單分派給此類別中較為特殊的造訪方法之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-106">Dispatches the list of expressions to one of the more specialized visit methods in this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-107">如果任何項目已經修改，則傳回修改的運算式清單，否則傳回原始運算式清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-107">The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Visit (System.Linq.Expressions.Expression node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Visit (node As Expression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Visit(System::Linq::Expressions::Expression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-108">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-108">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-109">將運算式分派給此類別中較為特殊的造訪方法之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-109">Dispatches the expression to one of the more specialized visit methods in this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-110">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-110">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; Visit&lt;T&gt; (System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; nodes, Func&lt;T,T&gt; elementVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; Visit&lt;T&gt;(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; nodes, class System.Func`2&lt;!!T, !!T&gt; elementVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Visit(Of T) (nodes As ReadOnlyCollection(Of T), elementVisitor As Func(Of T, T)) As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ Visit(System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ nodes, Func&lt;T, T&gt; ^ elementVisitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="elementVisitor" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="d0f80-111">節點的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-111">The type of the nodes.</span>
          </span>
        </typeparam>
        <param name="nodes">
          <span data-ttu-id="d0f80-112">要造訪的節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-112">The nodes to visit.</span>
          </span>
        </param>
        <param name="elementVisitor">
          <span data-ttu-id="d0f80-113">造訪單一項目的委派，並選擇性地將它取代為新項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-113">A delegate that visits a single element, optionally replacing it with a new element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-114">使用特殊的項目造訪者，造訪集合中所有的節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-114">Visits all nodes in the collection using a specified element visitor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-115">如果任何項目已經修改，則傳回修改的節點清單，否則傳回原始節點清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-115">The modified node list, if any of the elements were modified; otherwise, returns the original node list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VisitAndConvert&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f80-116">造訪運算式，並將結果轉換回原始運算式型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-116">Visits an expression, casting the result back to the original expression type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VisitAndConvert&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; VisitAndConvert&lt;T&gt; (System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; nodes, string callerName) where T : System.Linq.Expressions.Expression;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; VisitAndConvert&lt;(class System.Linq.Expressions.Expression) T&gt;(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; nodes, string callerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitAndConvert(Of T As Expression) (nodes As ReadOnlyCollection(Of T), callerName As String) As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Linq::Expressions::Expression System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ VisitAndConvert(System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ nodes, System::String ^ callerName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="callerName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="d0f80-117">運算式的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-117">The type of the expressions.</span>
          </span>
        </typeparam>
        <param name="nodes">
          <span data-ttu-id="d0f80-118">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-118">The expressions to visit.</span>
          </span>
        </param>
        <param name="callerName">
          <span data-ttu-id="d0f80-119">呼叫方法的名稱，用來回報較佳的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-119">The name of the calling method; used to report to report a better error message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-120">瀏覽集合中的運算式，並將結果轉換回原始運算式類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-120">Visits all expressions in the collection, casting the results back to the original expression type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-121">如果任一運算式已經修正，則會傳回修正的運算式集合，否則傳回原始運算式集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-121">The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d0f80-122">其中一個運算式的瀏覽方法傳回不同的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-122">The visit method for one of the expressions returned a different type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VisitAndConvert&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T VisitAndConvert&lt;T&gt; (T node, string callerName) where T : System.Linq.Expressions.Expression;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T VisitAndConvert&lt;(class System.Linq.Expressions.Expression) T&gt;(!!T node, string callerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitAndConvert(Of T As Expression) (node As T, callerName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Linq::Expressions::Expression T VisitAndConvert(T node, System::String ^ callerName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="T" />
        <Parameter Name="callerName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="d0f80-123">運算式的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-123">The type of the expression.</span>
          </span>
        </typeparam>
        <param name="node">
          <span data-ttu-id="d0f80-124">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-124">The expression to visit.</span>
          </span>
        </param>
        <param name="callerName">
          <span data-ttu-id="d0f80-125">呼叫方法的名稱，用來回報較佳的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-125">The name of the calling method; used to report to report a better error message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-126">造訪運算式，並將結果轉換回原始運算式型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-126">Visits an expression, casting the result back to the original expression type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-127">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-127">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d0f80-128">這個節點的造訪方法傳回不同的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-128">The visit method for this node returned a different type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitBinary (node As BinaryExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitBinary(System::Linq::Expressions::BinaryExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-129">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-129">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-130">造訪 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-130">Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-131">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-131">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBlock">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitBlock (System.Linq.Expressions.BlockExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitBlock(class System.Linq.Expressions.BlockExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitBlock (node As BlockExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitBlock(System::Linq::Expressions::BlockExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.BlockExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-132">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-132">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-133">造訪 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-133">Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-134">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-134">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchBlock">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.CatchBlock VisitCatchBlock (System.Linq.Expressions.CatchBlock node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.CatchBlock VisitCatchBlock(class System.Linq.Expressions.CatchBlock node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitCatchBlock (node As CatchBlock) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::CatchBlock ^ VisitCatchBlock(System::Linq::Expressions::CatchBlock ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.CatchBlock" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-135">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-135">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-136">造訪 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-136">Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-137">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-137">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitConditional (node As ConditionalExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitConditional(System::Linq::Expressions::ConditionalExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-138">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-138">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-139">造訪 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-139">Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-140">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-140">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitConstant (node As ConstantExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitConstant(System::Linq::Expressions::ConstantExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-141">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-141">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-142">造訪 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-142">Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-143">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-143">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDebugInfo">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitDebugInfo (System.Linq.Expressions.DebugInfoExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitDebugInfo(class System.Linq.Expressions.DebugInfoExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitDebugInfo (node As DebugInfoExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitDebugInfo(System::Linq::Expressions::DebugInfoExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DebugInfoExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-144">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-144">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-145">造訪 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-145">Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-146">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-146">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefault">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitDefault (System.Linq.Expressions.DefaultExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitDefault(class System.Linq.Expressions.DefaultExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitDefault (node As DefaultExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitDefault(System::Linq::Expressions::DefaultExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DefaultExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-147">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-147">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-148">造訪 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-148">Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-149">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-149">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDynamic">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitDynamic (System.Linq.Expressions.DynamicExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitDynamic(class System.Linq.Expressions.DynamicExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitDynamic (node As DynamicExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitDynamic(System::Linq::Expressions::DynamicExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DynamicExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-150">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-150">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-151">造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-151">Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-152">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-152">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementInit">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.ElementInit VisitElementInit (System.Linq.Expressions.ElementInit node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.ElementInit VisitElementInit(class System.Linq.Expressions.ElementInit node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitElementInit (node As ElementInit) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::ElementInit ^ VisitElementInit(System::Linq::Expressions::ElementInit ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ElementInit" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-153">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-153">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-154">造訪 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-154">Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-155">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-155">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitExtension (node As Expression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitExtension(System::Linq::Expressions::Expression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-156">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-156">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-157">造訪延伸運算式的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-157">Visits the children of the extension expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-158">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-158">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f80-159">這可以被覆寫，請瀏覽或重寫節點特定的副檔名。</span><span class="sxs-lookup"><span data-stu-id="d0f80-159">This can be overridden to visit or rewrite specific extension nodes.</span></span>  
  
 <span data-ttu-id="d0f80-160">如果未覆寫，會呼叫這個方法<xref:System.Linq.Expressions.Expression.VisitChildren%2A>，這可讓節點有機會查核其子系。</span><span class="sxs-lookup"><span data-stu-id="d0f80-160">If it is not overridden, this method will call <xref:System.Linq.Expressions.Expression.VisitChildren%2A>, which gives the node a chance to walk its children.</span></span> <span data-ttu-id="d0f80-161">根據預設，<xref:System.Linq.Expressions.Expression.VisitChildren%2A>會嘗試減少節點。</span><span class="sxs-lookup"><span data-stu-id="d0f80-161">By default, <xref:System.Linq.Expressions.Expression.VisitChildren%2A> will try to reduce the node.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGoto">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitGoto (System.Linq.Expressions.GotoExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitGoto(class System.Linq.Expressions.GotoExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitGoto (node As GotoExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitGoto(System::Linq::Expressions::GotoExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.GotoExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-162">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-162">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-163">造訪 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-163">Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-164">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-164">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndex">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitIndex (System.Linq.Expressions.IndexExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitIndex(class System.Linq.Expressions.IndexExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitIndex (node As IndexExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitIndex(System::Linq::Expressions::IndexExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.IndexExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-165">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-165">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-166">造訪 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-166">Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-167">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-167">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocation">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitInvocation (System.Linq.Expressions.InvocationExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitInvocation(class System.Linq.Expressions.InvocationExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitInvocation (node As InvocationExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitInvocation(System::Linq::Expressions::InvocationExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.InvocationExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-168">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-168">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-169">造訪 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-169">Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-170">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-170">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabel">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitLabel (System.Linq.Expressions.LabelExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLabel(class System.Linq.Expressions.LabelExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitLabel (node As LabelExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitLabel(System::Linq::Expressions::LabelExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LabelExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-171">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-171">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-172">造訪 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-172">Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-173">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-173">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabelTarget">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.LabelTarget VisitLabelTarget (System.Linq.Expressions.LabelTarget node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.LabelTarget VisitLabelTarget(class System.Linq.Expressions.LabelTarget node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitLabelTarget (node As LabelTarget) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::LabelTarget ^ VisitLabelTarget(System::Linq::Expressions::LabelTarget ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-174">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-174">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-175">造訪 <see cref="T:System.Linq.Expressions.LabelTarget" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-175">Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-176">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-176">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLambda&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitLambda&lt;T&gt; (System.Linq.Expressions.Expression&lt;T&gt; node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLambda&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;!!T&gt; node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitLambda(Of T) (node As Expression(Of T)) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename T&gt;&#xA; virtual System::Linq::Expressions::Expression ^ VisitLambda(System::Linq::Expressions::Expression&lt;T&gt; ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="d0f80-177">委派的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-177">The type of the delegate.</span>
          </span>
        </typeparam>
        <param name="node">
          <span data-ttu-id="d0f80-178">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-178">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-179">造訪 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-179">Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-180">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-180">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitListInit">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitListInit (System.Linq.Expressions.ListInitExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitListInit(class System.Linq.Expressions.ListInitExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitListInit (node As ListInitExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitListInit(System::Linq::Expressions::ListInitExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ListInitExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-181">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-181">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-182">造訪 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-182">Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-183">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-183">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLoop">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitLoop (System.Linq.Expressions.LoopExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLoop(class System.Linq.Expressions.LoopExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitLoop (node As LoopExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitLoop(System::Linq::Expressions::LoopExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LoopExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-184">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-184">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-185">造訪 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-185">Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-186">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-186">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitMember (node As MemberExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitMember(System::Linq::Expressions::MemberExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-187">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-187">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-188">造訪 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-188">Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-189">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-189">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAssignment">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.MemberAssignment VisitMemberAssignment (System.Linq.Expressions.MemberAssignment node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.MemberAssignment VisitMemberAssignment(class System.Linq.Expressions.MemberAssignment node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitMemberAssignment (node As MemberAssignment) As MemberAssignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::MemberAssignment ^ VisitMemberAssignment(System::Linq::Expressions::MemberAssignment ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberAssignment" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-190">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-190">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-191">造訪 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-191">Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-192">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-192">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberBinding">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.MemberBinding VisitMemberBinding (System.Linq.Expressions.MemberBinding node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.MemberBinding VisitMemberBinding(class System.Linq.Expressions.MemberBinding node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitMemberBinding (node As MemberBinding) As MemberBinding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::MemberBinding ^ VisitMemberBinding(System::Linq::Expressions::MemberBinding ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberBinding" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-193">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-193">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-194">造訪 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-194">Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-195">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-195">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberInit">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitMemberInit (System.Linq.Expressions.MemberInitExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitMemberInit(class System.Linq.Expressions.MemberInitExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitMemberInit (node As MemberInitExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitMemberInit(System::Linq::Expressions::MemberInitExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberInitExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-196">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-196">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-197">造訪 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-197">Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-198">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-198">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberListBinding">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.MemberListBinding VisitMemberListBinding (System.Linq.Expressions.MemberListBinding node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.MemberListBinding VisitMemberListBinding(class System.Linq.Expressions.MemberListBinding node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitMemberListBinding (node As MemberListBinding) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::MemberListBinding ^ VisitMemberListBinding(System::Linq::Expressions::MemberListBinding ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberListBinding" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-199">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-199">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-200">造訪 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-200">Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-201">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-201">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberMemberBinding">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding (System.Linq.Expressions.MemberMemberBinding node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding(class System.Linq.Expressions.MemberMemberBinding node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitMemberMemberBinding (node As MemberMemberBinding) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::MemberMemberBinding ^ VisitMemberMemberBinding(System::Linq::Expressions::MemberMemberBinding ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberMemberBinding" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-202">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-202">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-203">造訪 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-203">Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-204">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-204">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitMethodCall (node As MethodCallExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitMethodCall(System::Linq::Expressions::MethodCallExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-205">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-205">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-206">造訪 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-206">Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-207">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-207">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitNew (node As NewExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitNew(System::Linq::Expressions::NewExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.NewExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-208">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-208">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-209">造訪 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-209">Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-210">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-210">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNewArray">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitNewArray (System.Linq.Expressions.NewArrayExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitNewArray(class System.Linq.Expressions.NewArrayExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitNewArray (node As NewArrayExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitNewArray(System::Linq::Expressions::NewArrayExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.NewArrayExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-211">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-211">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-212">造訪 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-212">Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-213">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-213">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitParameter (System.Linq.Expressions.ParameterExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitParameter(class System.Linq.Expressions.ParameterExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitParameter (node As ParameterExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitParameter(System::Linq::Expressions::ParameterExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ParameterExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-214">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-214">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-215">造訪 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-215">Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-216">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-216">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRuntimeVariables">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitRuntimeVariables (System.Linq.Expressions.RuntimeVariablesExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitRuntimeVariables(class System.Linq.Expressions.RuntimeVariablesExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitRuntimeVariables (node As RuntimeVariablesExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitRuntimeVariables(System::Linq::Expressions::RuntimeVariablesExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.RuntimeVariablesExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-217">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-217">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-218">造訪 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-218">Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-219">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-219">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitch">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitSwitch (System.Linq.Expressions.SwitchExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSwitch(class System.Linq.Expressions.SwitchExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitSwitch (node As SwitchExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitSwitch(System::Linq::Expressions::SwitchExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.SwitchExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-220">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-220">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-221">造訪 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-221">Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-222">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-222">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchCase">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.SwitchCase VisitSwitchCase (System.Linq.Expressions.SwitchCase node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.SwitchCase VisitSwitchCase(class System.Linq.Expressions.SwitchCase node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitSwitchCase (node As SwitchCase) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Linq::Expressions::SwitchCase ^ VisitSwitchCase(System::Linq::Expressions::SwitchCase ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.SwitchCase" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-223">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-223">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-224">造訪 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-224">Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-225">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-225">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTry">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitTry (System.Linq.Expressions.TryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitTry(class System.Linq.Expressions.TryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitTry (node As TryExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitTry(System::Linq::Expressions::TryExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.TryExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-226">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-226">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-227">造訪 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-227">Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-228">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-228">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeBinary">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitTypeBinary (System.Linq.Expressions.TypeBinaryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitTypeBinary(class System.Linq.Expressions.TypeBinaryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitTypeBinary (node As TypeBinaryExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitTypeBinary(System::Linq::Expressions::TypeBinaryExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.TypeBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-229">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-229">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-230">造訪 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-230">Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-231">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-231">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitUnary (node As UnaryExpression) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitUnary(System::Linq::Expressions::UnaryExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="d0f80-232">要造訪的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-232">The expression to visit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f80-233">造訪 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-233">Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f80-234">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f80-234">The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>