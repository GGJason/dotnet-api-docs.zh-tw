<Type Name="BinaryExpression" FullName="System.Linq.Expressions.BinaryExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8cb9e6d04bad12553686e9642a20d42bb42b9f11" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36556148" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.BinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryExpression : System::Linq::Expressions::Expression" />
  <TypeSignature Language="F#" Value="type BinaryExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/BinaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2ec1f-101">Represents an expression that has a binary operator.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2ec1f-101">Represents an expression that has a binary operator.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-102">下表摘要說明可以用來建立處理站方法<xref:System.Linq.Expressions.BinaryExpression>的特定節點類型，由<xref:System.Linq.Expressions.Expression.NodeType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-102">The following tables summarize the factory methods that can be used to create a <xref:System.Linq.Expressions.BinaryExpression> that has a specific node type, represented by the <xref:System.Linq.Expressions.Expression.NodeType%2A> property.</span></span> <span data-ttu-id="2ec1f-103">每個資料表包含特定類別的作業，例如算術或位元的資訊。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-103">Each table contains information for a specific class of operations such as arithmetic or bitwise.</span></span>  
  
## <a name="binary-arithmetic-operations"></a><span data-ttu-id="2ec1f-104">二進位算術運算</span><span class="sxs-lookup"><span data-stu-id="2ec1f-104">Binary Arithmetic Operations</span></span>  
  
|<span data-ttu-id="2ec1f-105">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-105">Node Type</span></span>|<span data-ttu-id="2ec1f-106">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-106">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Add>|<xref:System.Linq.Expressions.Expression.Add%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.AddChecked>|<xref:System.Linq.Expressions.Expression.AddChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Divide>|<xref:System.Linq.Expressions.Expression.Divide%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Modulo>|<xref:System.Linq.Expressions.Expression.Modulo%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Multiply>|<xref:System.Linq.Expressions.Expression.Multiply%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.MultiplyChecked>|<xref:System.Linq.Expressions.Expression.MultiplyChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Power>|<xref:System.Linq.Expressions.Expression.Power%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Subtract>|<xref:System.Linq.Expressions.Expression.Subtract%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.SubtractChecked>|<xref:System.Linq.Expressions.Expression.SubtractChecked%2A>|  
  
## <a name="bitwise-operations"></a><span data-ttu-id="2ec1f-107">位元運算</span><span class="sxs-lookup"><span data-stu-id="2ec1f-107">Bitwise Operations</span></span>  
  
|<span data-ttu-id="2ec1f-108">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-108">Node Type</span></span>|<span data-ttu-id="2ec1f-109">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-109">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.And>|<xref:System.Linq.Expressions.Expression.And%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Or>|<xref:System.Linq.Expressions.Expression.Or%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.ExclusiveOr>|<xref:System.Linq.Expressions.Expression.ExclusiveOr%2A>|  
  
## <a name="shift-operations"></a><span data-ttu-id="2ec1f-110">移位作業</span><span class="sxs-lookup"><span data-stu-id="2ec1f-110">Shift Operations</span></span>  
  
|<span data-ttu-id="2ec1f-111">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-111">Node Type</span></span>|<span data-ttu-id="2ec1f-112">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-112">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.LeftShift>|<xref:System.Linq.Expressions.Expression.LeftShift%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.RightShift>|<xref:System.Linq.Expressions.Expression.RightShift%2A>|  
  
## <a name="conditional-boolean-operations"></a><span data-ttu-id="2ec1f-113">條件式的布林運算</span><span class="sxs-lookup"><span data-stu-id="2ec1f-113">Conditional Boolean Operations</span></span>  
  
|<span data-ttu-id="2ec1f-114">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-114">Node Type</span></span>|<span data-ttu-id="2ec1f-115">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-115">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.AndAlso>|<xref:System.Linq.Expressions.Expression.AndAlso%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.OrElse>|<xref:System.Linq.Expressions.Expression.OrElse%2A>|  
  
## <a name="comparison-operations"></a><span data-ttu-id="2ec1f-116">比較作業</span><span class="sxs-lookup"><span data-stu-id="2ec1f-116">Comparison Operations</span></span>  
  
|<span data-ttu-id="2ec1f-117">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-117">Node Type</span></span>|<span data-ttu-id="2ec1f-118">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-118">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Equal>|<xref:System.Linq.Expressions.Expression.Equal%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.NotEqual>|<xref:System.Linq.Expressions.Expression.NotEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual>|<xref:System.Linq.Expressions.Expression.GreaterThanOrEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThan>|<xref:System.Linq.Expressions.Expression.GreaterThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThan>|<xref:System.Linq.Expressions.Expression.LessThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThanOrEqual>|<xref:System.Linq.Expressions.Expression.LessThanOrEqual%2A>|  
  
## <a name="coalescing-operations"></a><span data-ttu-id="2ec1f-119">聯合運算</span><span class="sxs-lookup"><span data-stu-id="2ec1f-119">Coalescing Operations</span></span>  
  
|<span data-ttu-id="2ec1f-120">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-120">Node Type</span></span>|<span data-ttu-id="2ec1f-121">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-121">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Coalesce>|<xref:System.Linq.Expressions.Expression.Coalesce%2A>|  
  
## <a name="array-indexing-operations"></a><span data-ttu-id="2ec1f-122">陣列索引作業</span><span class="sxs-lookup"><span data-stu-id="2ec1f-122">Array Indexing Operations</span></span>  
  
|<span data-ttu-id="2ec1f-123">節點類型</span><span class="sxs-lookup"><span data-stu-id="2ec1f-123">Node Type</span></span>|<span data-ttu-id="2ec1f-124">Factory 方法</span><span class="sxs-lookup"><span data-stu-id="2ec1f-124">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.ArrayIndex>|<xref:System.Linq.Expressions.Expression.ArrayIndex%2A>|  
  
 <span data-ttu-id="2ec1f-125">此外，<xref:System.Linq.Expressions.Expression.MakeBinary%2A>方法也可以用來建立<xref:System.Linq.Expressions.BinaryExpression>。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-125">In addition, the <xref:System.Linq.Expressions.Expression.MakeBinary%2A> methods can also be used to create a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="2ec1f-126">這些 factory 方法，可以用來建立<xref:System.Linq.Expressions.BinaryExpression>的任何節點型別，表示二進位運算。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-126">These factory methods can be used to create a <xref:System.Linq.Expressions.BinaryExpression> of any node type that represents a binary operation.</span></span> <span data-ttu-id="2ec1f-127">這些方法的參數型別的<xref:System.Linq.Expressions.Expression.NodeType%2A>指定想要的節點類型。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-127">The parameter of these methods that is of type <xref:System.Linq.Expressions.Expression.NodeType%2A> specifies the desired node type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ec1f-128">下列範例會建立<xref:System.Linq.Expressions.BinaryExpression>物件，代表從另一個數字的減法。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-128">The following example creates a <xref:System.Linq.Expressions.BinaryExpression> object that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="2ec1f-129">The visitor to visit this node with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-129">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2ec1f-130">Dispatches to the specific visit method for this node type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-130">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="2ec1f-131">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-131">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2ec1f-132">The result of visiting this node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-132">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-133">這個預設實作<xref:System.Linq.Expressions.ExpressionType.Extension>節點呼叫<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-133">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="2ec1f-134">覆寫這個方法來呼叫更特定類別上的方法在衍生的訪客的<xref:System.Linq.Expressions.ExpressionVisitor>類別。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-134">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="2ec1f-135">不過，它應該仍然支援未知的訪客藉由呼叫<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-135">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-136">Gets a value that indicates whether the expression tree node can be reduced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-136">Gets a value that indicates whether the expression tree node can be reduced.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-137">如果運算式樹狀結構節點可以精簡，否則為 false，則為 true。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-137">True if the expression tree node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conversion">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression Conversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression Conversion" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conversion As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LambdaExpression ^ Conversion { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Conversion : System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-138">Gets the type conversion function that is used by a coalescing or compound assignment operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-138">Gets the type conversion function that is used by a coalescing or compound assignment operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-139">代表類型轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-139">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-140"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>屬性是`null`任何<xref:System.Linq.Expressions.BinaryExpression>其<xref:System.Linq.Expressions.Expression.NodeType%2A>屬性不是<xref:System.Linq.Expressions.ExpressionType.Coalesce>。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-140">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null` for any <xref:System.Linq.Expressions.BinaryExpression> whose <xref:System.Linq.Expressions.Expression.NodeType%2A> property is not <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLifted : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-141">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-141">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-142">
            <see langword="true" /> 如果節點表示消除的呼叫。否則， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-142">
              <see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-143">如果運算子不可為 null 的運算元，但可為 null 的運算元會傳遞給它，會消除運算子呼叫。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-143">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftedToNull">
      <MemberSignature Language="C#" Value="public bool IsLiftedToNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftedToNull" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiftedToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiftedToNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLiftedToNull : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-144">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator whose return type is lifted to a nullable type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-144">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator whose return type is lifted to a nullable type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-145">
            <see langword="true" /> 如果運算子的傳回型別已消除可為 null 的類型;否則， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-145">
              <see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-146">如果運算子不可為 null 的運算元，但可為 null 的運算元會傳遞給它，會消除運算子呼叫。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-146">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span> <span data-ttu-id="2ec1f-147">如果值<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>是`true`，則運算子會傳回 null 的型別，而且可為 null 的運算元判斷值為`null`，則運算子會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-147">If the value of <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> is `true`, the operator returns a nullable type, and if a nullable operand evaluates to `null`, the operator returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Left" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Left { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-148">Gets the left operand of the binary operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-148">Gets the left operand of the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-149">
            <see cref="T:System.Linq.Expressions.Expression" />表示二進位運算的左的運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-149">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Linq.Expressions.BinaryExpression.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-150">Gets the implementing method for the binary operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-150">Gets the implementing method for the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-151">代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-151">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-152">如果<xref:System.Linq.Expressions.BinaryExpression>表示使用預先定義的運算子，作業<xref:System.Linq.Expressions.BinaryExpression.Method%2A>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-152">If a <xref:System.Linq.Expressions.BinaryExpression> represents an operation that uses a predefined operator, the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-153">Reduces the binary expression node to a simpler expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-153">Reduces the binary expression node to a simpler expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2ec1f-154">The reduced expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-154">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ec1f-155">如果 CanReduce 傳回 true，則應該傳回有效的運算式。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-155">If CanReduce returns true, this should return a valid expression.</span></span>  
  
 <span data-ttu-id="2ec1f-156">這個方法可以傳回其他本身必須精簡的節點。</span><span class="sxs-lookup"><span data-stu-id="2ec1f-156">This method can return another node which itself must be reduced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Right" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Right { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2ec1f-157">Gets the right operand of the binary operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-157">Gets the right operand of the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2ec1f-158">
            <see cref="T:System.Linq.Expressions.Expression" />表示二進位運算的右運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-158">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.BinaryExpression Update (System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.BinaryExpression Update(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.LambdaExpression conversion, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (left As Expression, conversion As LambdaExpression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::BinaryExpression ^ Update(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::LambdaExpression ^ conversion, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="binaryExpression.Update (left, conversion, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="2ec1f-159">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-159">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="2ec1f-160">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-160">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="2ec1f-161">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-161">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2ec1f-162">Creates a new expression that is like this one, but using the supplied children.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-162">Creates a new expression that is like this one, but using the supplied children.</span>
          </span>
          <span data-ttu-id="2ec1f-163">If all of the children are the same, it will return this expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-163">If all of the children are the same, it will return this expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2ec1f-164">This expression if no children are changed or an expression with the updated children.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2ec1f-164">This expression if no children are changed or an expression with the updated children.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>