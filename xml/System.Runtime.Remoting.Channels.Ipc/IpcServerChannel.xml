<Type Name="IpcServerChannel" FullName="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f896138607f91e115b31255c622873e5c162713e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489712" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class IpcServerChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IpcServerChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class IpcServerChannel&#xA;Implements IChannel, IChannelReceiver, ISecurableChannel" />
  <TypeSignature Language="C++ CLI" Value="public ref class IpcServerChannel : System::Runtime::Remoting::Channels::IChannel, System::Runtime::Remoting::Channels::IChannelReceiver, System::Runtime::Remoting::Channels::ISecurableChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>針對遠端呼叫實作使用 IPC 系統傳輸訊息的伺服器通道。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通道會使用.NET Framework 遠端處理基礎結構來傳輸遠端呼叫。 當用戶端呼叫遠端物件時，呼叫會序列化成訊息是由用戶端通道所傳送和接收的伺服器通道。 收到訊息之後，它是還原序列化，並處理。 任何傳回的值是由伺服器通道傳送，並由用戶端通道接收。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>類別會在相同電腦上的應用程式定義域之間使用 Windows 處理序間通訊 (IPC) 系統來傳輸訊息。 在相同電腦上的應用程式定義域之間的通訊，IPC 通道時，速度比 TCP 或 HTTP 通道。  
  
 若要在伺服器端執行額外處理的訊息，指定的實作<xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider>透過其中所處理的所有訊息的介面<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>傳遞執行個體。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>執行個體會接受二進位或 SOAP 格式中序列化的訊息。  
  
 A<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>物件具有相關聯的組態屬性可以設定在執行階段組態檔中 (藉由叫用靜態<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>方法) 或以程式設計方式 (藉由傳遞<xref:System.Collections.IDictionary>集合<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A>建構函式）。 如需這些組態屬性的清單，請參閱文件<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A>建構函式。  
  
> [!CAUTION]
>  設定時`exclusiveAddressUse`屬性`false`中`properties`引數，數個<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>物件可以在註冊相同具名管道。 在此情況下要求可以移至任何已註冊的通道。 這項設定會被視為安全，只有當同時使用 Alc。  
  
   
  
## Examples  
 下列程式碼範例說明如何使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>類別。  
  
 [!code-cpp[Remoting_Ipc#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#10)]
 [!code-csharp[Remoting_Ipc#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#10)]  
  
 上述程式碼用來公開下列遠端物件。  
  
 [!code-cpp[Remoting_Ipc#0](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/counter.cpp#0)]
 [!code-csharp[Remoting_Ipc#0](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/counter.cs#0)]  
  
 如需從遠端使用此物件的用戶端的範例，請參閱<xref:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ portName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName">通道要使用的 IPC 連接埠名稱。</param>
        <summary>使用指定的 IPC 連接埠名稱，初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個建構函式。  
  
 [!code-cpp[Remoting_Ipc#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#11)]
 [!code-csharp[Remoting_Ipc#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">
          <see cref="T:System.Collections.IDictionary" /> 集合，指定通道要使用的組態屬性值。</param>
        <param name="sinkProvider">通道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 實作。</param>
        <summary>使用指定的通道屬性和接收，初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需通道組態屬性的詳細資訊，請參閱[通道和格式器組態屬性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果您不需要接收功能，設定`sinkProvider`參數`null`。  
  
> [!CAUTION]
>  設定時`exclusiveAddressUse`屬性`false`中`properties`引數，數個<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>物件可以在註冊相同具名管道。 在此情況下要求可以移至任何已註冊的通道。 這項設定會被視為安全，只有當同時使用 Alc。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個建構函式。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#41)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">通道的名稱。</param>
        <param name="portName">通道要使用的 IPC 連接埠名稱。</param>
        <summary>使用指定的通道名稱和 IPC 連接埠名稱，初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式設定<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A>屬性使用`name`參數。 如果您想要註冊一個以上的通道，每個通道都必須具有唯一的名稱。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個建構函式。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#42)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, class System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider, securityDescriptor As CommonSecurityDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider, System::Security::AccessControl::CommonSecurityDescriptor ^ securityDescriptor);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
        <Parameter Name="securityDescriptor" Type="System.Security.AccessControl.CommonSecurityDescriptor" />
      </Parameters>
      <Docs>
        <param name="properties">
          <see cref="T:System.Collections.IDictionary" /> 集合，指定通道要使用的組態屬性值。</param>
        <param name="sinkProvider">通道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 實作。</param>
        <param name="securityDescriptor">通道要使用的 <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" />。</param>
        <summary>使用指定的通道屬性、接收 (Sink) 和安全性描述元 (Security Descriptor)，初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需通道組態屬性的詳細資訊，請參閱[通道和格式器組態屬性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果您不需要接收功能，設定`sinkProvider`參數`null`。 如果您不需要的安全性描述元，設定`securityDescriptor`參數`null`。  
  
> [!CAUTION]
>  設定時`exclusiveAddressUse`屬性`false`中`properties`引數，數個<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>物件可以在註冊相同具名管道。 在此情況下要求可以移至任何已註冊的通道。 這項設定會被視為安全，只有當同時使用 Alc。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name">通道的名稱。</param>
        <param name="portName">通道要使用的 IPC 連接埠名稱。</param>
        <param name="sinkProvider">通道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 實作。</param>
        <summary>使用指定的通道名稱、IPC 連接埠名稱和接收 (Sink)，初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式設定<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A>屬性使用`name`參數。 如果您想要註冊一個以上的通道，每個通道都必須具有唯一的名稱。  
  
 如果您不需要接收功能，設定`sinkProvider`參數`null`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個建構函式。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#43)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelData As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ChannelData { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得通道特定資料。</summary>
        <value>
          <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 執行個體，包含通道專用資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然執行個體的形式傳回<xref:System.Object?displayProperty=nameWithType>類別，這個屬性的值可以轉換成的執行個體<xref:System.Runtime.Remoting.Channels.ChannelDataStore>描述的通道<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>物件接聽。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData%2A> 屬性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#15)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前通道的名稱。</summary>
        <value>
          <see cref="T:System.String" /> 執行個體，包含通道的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個已註冊的通道都有唯一的名稱。 名稱用來呼叫時，擷取特定頻道<xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>方法。 預設名稱是 「 ipc 伺服器 」。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> 屬性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前通道的優先權。</summary>
        <value>整數，表示指派給通道的優先權。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 優先權會控制哪些通道資料會出現在次序<xref:System.Runtime.Remoting.ObjRef>執行個體，則會出現較低優先順序通道之前的較高優先順序通道。 用戶端嘗試連接到伺服器中的通道中列出的順序<xref:System.Runtime.Remoting.ObjRef>執行個體。 預設的優先順序是 20;允許使用負值的優先順序。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority%2A> 屬性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#13)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChannelUri">
      <MemberSignature Language="C#" Value="public string GetChannelUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChannelUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChannelUri () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChannelUri();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前通道的 URI。</summary>
        <returns>
          <see cref="T:System.String" />，包含通道的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通道 URI 供用戶端用來指定遠端伺服器通道。  
  
   
  
## Examples  
 下列程式碼範例說明如何使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri%2A>方法。  
  
 [!code-cpp[Remoting_Ipc#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#12)]
 [!code-csharp[Remoting_Ipc#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public virtual string[] GetUrlsForUri (string objectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUrlsForUri (objectUri As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetUrlsForUri(System::String ^ objectUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectUri">其 URL 被要求之物件的 URI。</param>
        <summary>傳回具有指定 URI 之物件的所有 URL 陣列，裝載於目前 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 執行個體上。</summary>
        <returns>具有指定 URI 之物件的 URL 陣列，裝載於目前 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 執行個體上。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法由<xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri%2A> 方法。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSecured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecured { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定指出目前通道是否安全的布林值。</summary>
        <value>布林值，指出目前執行個體是否安全。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">要從中擷取遠端已知物件 URI 的來源 URL。</param>
        <param name="objectURI">當這個方法傳回時，會包含存有遠端已知物件 URI 的 <see cref="T:System.String" /> 執行個體。</param>
        <summary>從指定的 URL 擷取通道 URI 和遠端已知物件 URI。</summary>
        <returns>目前通道的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 物件的 URI 是唯一識別特定物件執行個體的值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse%2A> 方法。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartListening(System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">指定初始狀態的物件，但如果不想將特定狀態傳遞至通道，則為 <see langword="null" />。</param>
        <summary>指示目前通道開始接聽要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您不需要呼叫這個方法，以開始接聽新初始化通道。  
  
 使用這個方法來重新啟動之後通道上的接聽<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening%2A>已停止接聽通道上呼叫方法。  
  
 資料物件可以用來傳遞至通道的特定初始狀態。 如果您不想將特定的狀態傳遞至通道，傳遞`null`為`data`參數值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定的接聽連接埠無法使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopListening(System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">指定初始狀態的物件，但如果不想將特定狀態傳遞至通道，則為 <see langword="null" />。</param>
        <summary>指示目前通道停止接聽要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要停止接聽通道上使用這個方法。 若要重新啟動接聽，請使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening%2A>方法。  
  
 資料物件可以用來傳遞至通道的特定初始狀態。 如果您不想將特定的狀態傳遞至通道，傳遞`null`為`data`參數值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>