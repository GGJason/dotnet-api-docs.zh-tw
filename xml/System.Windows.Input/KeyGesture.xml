<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0fcef4401a44729f37aa4c6278d1a7b97a6c45a" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55315737" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義可以用來叫用 (Invoke) 命令的鍵盤組合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個相關聯<xref:System.Windows.Input.ModifierKeys>。 此規則的例外狀況是函式索引鍵和數字鍵台鍵，可有效<xref:System.Windows.Input.KeyGesture>本身。 例如，您可以建立<xref:System.Windows.Input.KeyGesture>藉由使用 F12 鍵，但若要使用 X 鍵入<xref:System.Windows.Input.KeyGesture>必須搭配輔助按鍵。  
  
 您可以在一般情況下，  
  
 您可以使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>要<xref:System.Windows.Input.ICommand>，如此一來，叫用命令時<xref:System.Windows.Input.KeyGesture>，就會發生。  
  
 針對<xref:System.Windows.Input.KeyGesture>[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用方式，通常在中設定的屬性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding.Gesture%2A>，萬一其中筆勢代表標準的索引鍵和輔助按鍵。 您也可以設定<xref:System.Windows.Input.KeyBinding.Gesture%2A>只函式金鑰，或只是修飾詞的屬性索引鍵組合。 不過，它是設定較常見<xref:System.Windows.Input.KeyBinding.Key%2A>屬性，如果想要的命令繫結是以任何修飾詞，函式金鑰或<xref:System.Windows.Input.KeyBinding.Modifiers%2A>輔助按鍵，只想要的命令繫結時。  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>XAML 值  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 單一索引鍵值，必須是其中一種功能鍵 (F1-12) 或數字鍵台的金鑰。  
  
 `oneOrMoreModifierKeys`  
 一或多個所定義的輔助按鍵<xref:System.Windows.Input.ModifierKeys>列舉型別，以"+"字元分隔。  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 單一索引鍵的值。  
  
   
  
## Examples  
 下列範例示範如何繫結<xref:System.Windows.Input.ApplicationCommands.Close%2A>命令來<xref:System.Windows.Input.KeyGesture>使用<xref:System.Windows.Input.KeyBinding>。  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 下列範例示範如何使用<xref:System.Windows.Input.KeyGesture>在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。 請注意，[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用量不會直接宣告`<KeyGesture>`項目。 物件項目使用方式不可能因為<xref:System.Windows.Input.KeyGesture>不會公開公用預設建構函式。 相反地，[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用 typeconverter 行為來宣告整個<xref:System.Windows.Input.KeyGesture>做為內嵌`Gesture`屬性值。  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.KeyGesture" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">與這個筆勢關聯的按鍵。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.KeyGesture" /> 初始化 <see cref="T:System.Windows.Input.Key" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個相關聯<xref:System.Windows.Input.ModifierKeys>。  此規則的例外狀況是函式索引鍵和數字鍵台鍵，可有效<xref:System.Windows.Input.KeyGesture>本身。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式來建立<xref:System.Windows.Input.KeyGesture>和其關聯<xref:System.Windows.Input.KeyBinding>。  <xref:System.Windows.Input.KeyBinding>接著會新增至<xref:System.Windows.Input.InputBindingCollection>的<xref:System.Windows.Window>。  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" /> 不是有效的 <see cref="T:System.Windows.Input.Key" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> 不是有效的 <see cref="T:System.Windows.Input.KeyGesture" />。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">與筆勢相關聯的按鍵。</param>
        <param name="modifiers">與筆勢相關聯的輔助按鍵 (Modifier Key)。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.KeyGesture" /> 和 <see cref="T:System.Windows.Input.Key" />，初始化 <see cref="T:System.Windows.Input.ModifierKeys" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個相關聯<xref:System.Windows.Input.ModifierKeys>。 此規則的例外狀況是函式索引鍵和數字鍵台鍵，可有效<xref:System.Windows.Input.KeyGesture>本身。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式來建立<xref:System.Windows.Input.KeyGesture>和其關聯<xref:System.Windows.Input.KeyBinding>。 <xref:System.Windows.Input.KeyBinding>接著會新增至<xref:System.Windows.Input.InputBindingCollection>的<xref:System.Windows.Window>。  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> 不是有效的 <see cref="T:System.Windows.Input.ModifierKeys" />  
  
-或- 
 <paramref name="key" /> 不是有效的 <see cref="T:System.Windows.Input.Key" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> 和 <paramref name="modifiers" /> 不會組成有效的 <see cref="T:System.Windows.Input.KeyGesture" />。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">與筆勢相關聯的按鍵。</param>
        <param name="modifiers">與筆勢相關聯的輔助按鍵 (Modifier Key)。</param>
        <param name="displayString"><see cref="T:System.Windows.Input.KeyGesture" /> 的字串表示。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.KeyGesture" />, <see cref="T:System.Windows.Input.Key" /> 和顯示字串初始化 <see cref="T:System.Windows.Input.ModifierKeys" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.KeyGesture.DisplayString%2A>屬性設定為`displayString`參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> 不是有效的 <see cref="T:System.Windows.Input.ModifierKeys" />  
  
-或- 
 <paramref name="key" /> 不是有效的 <see cref="T:System.Windows.Input.Key" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> 和 <paramref name="modifiers" /> 不會組成有效的 <see cref="T:System.Windows.Input.KeyGesture" />。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Input.KeyGesture" /> 的字串表示。</summary>
        <value>這個 <see cref="T:System.Windows.Input.KeyGesture" /> 的顯示字串。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果建構函式中未設定的顯示字串，則會傳回空字串。  
  
 如果這個屬性是空的<xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>方法會傳回字串，從建立<xref:System.Windows.Input.KeyGesture.Key%2A>和<xref:System.Windows.Input.KeyGesture.Modifiers%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">特定文化特性 (Culture) 的資訊。</param>
        <summary>傳回可用來顯示 <see cref="T:System.Windows.Input.KeyGesture" /> 的字串。</summary>
        <returns>要顯示的字串</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果顯示字串所設定的建構函式，則會傳回字串;否則，將會建立字串從<xref:System.Windows.Input.KeyGesture.Key%2A>並<xref:System.Windows.Input.KeyGesture.Modifiers%2A>與任何必要的轉換所控管指定<xref:System.Globalization.CultureInfo>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個 <see cref="T:System.Windows.Input.KeyGesture" /> 關聯的按鍵。</summary>
        <value>與筆勢相關聯的按鍵。  預設值為 <see cref="F:System.Windows.Input.Key.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個相關聯<xref:System.Windows.Input.ModifierKeys>。  此規則的例外狀況是函式索引鍵和數字鍵台鍵，可有效<xref:System.Windows.Input.KeyGesture>本身。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">目標。</param>
        <param name="inputEventArgs">要和這個筆勢比較的輸入事件資料。</param>
        <summary>判斷這個 <see cref="T:System.Windows.Input.KeyGesture" /> 是否符合與指定 <see cref="T:System.Windows.Input.InputEventArgs" /> 物件關聯的輸入。</summary>
        <returns>如果事件資料符合這個 <see cref="T:System.Windows.Input.KeyGesture" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` 可用來更明確決定是否應該叫用命令的特定項目上。  
  
   
  
## Examples  
 下列範例示範如何測試是否<xref:System.Windows.Input.KeyGesture>比對的執行個體相關聯的輸入<xref:System.Windows.Input.InputEventArgs>。 A<xref:System.Windows.UIElement.KeyDown>比較事件資料與建立事件處理常式<xref:System.Windows.Input.KeyGesture>使用<xref:System.Windows.Input.KeyGesture.Matches%2A>方法。  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個 <see cref="T:System.Windows.Input.KeyGesture" /> 關聯的輔助按鍵。</summary>
        <value>與筆勢相關聯的輔助按鍵 (Modifier Key)。 預設值為 <see cref="F:System.Windows.Input.ModifierKeys.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個相關聯<xref:System.Windows.Input.ModifierKeys>。 此規則的例外狀況是函式索引鍵和數字鍵台鍵，可有效<xref:System.Windows.Input.KeyGesture>本身。 例如，您可以建立<xref:System.Windows.Input.KeyGesture>藉由使用 F12 鍵，但若要使用 X 鍵入<xref:System.Windows.Input.KeyGesture>必須搭配輔助按鍵。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>