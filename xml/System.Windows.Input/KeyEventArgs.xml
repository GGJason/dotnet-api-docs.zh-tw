<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9905ae3cafddd89f4b877a8c63f6835ce4a84ffe" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55320716" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4cc39-101">提供 <see cref="E:System.Windows.UIElement.KeyUp" /> 和 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件的資料，以及相關附加事件和預覽事件。</span><span class="sxs-lookup"><span data-stu-id="4cc39-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-102">此事件資料類別會搭配下列附加事件：</span><span class="sxs-lookup"><span data-stu-id="4cc39-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="4cc39-103">此事件資料類別也可搭配基底項目上的下列路由事件。</span><span class="sxs-lookup"><span data-stu-id="4cc39-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="4cc39-104">這些路由的事件轉送先前所列出的附加的事件，使其更容易存取中的一般項目模型[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="4cc39-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="4cc39-105">附加的事件和基底的項目路由事件共用其事件資料，而事件反昇和通道路由事件的版本也會共用事件資料。</span><span class="sxs-lookup"><span data-stu-id="4cc39-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="4cc39-106">傳送的事件路由，這可能會影響事件的處理的特性。</span><span class="sxs-lookup"><span data-stu-id="4cc39-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="4cc39-107">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="4cc39-107">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="4cc39-108">索引鍵可以是最新和已切換狀態或向下和切換狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="4cc39-109">基於這個理由，判斷是否已啟動的索引鍵或向下不簡單，只要檢查<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>做為數值的值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="4cc39-110">相反地，您應該檢查值，藉由將其視為旗標列舉型別。</span><span class="sxs-lookup"><span data-stu-id="4cc39-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="4cc39-111">使用`AND`比較的第一個位元。</span><span class="sxs-lookup"><span data-stu-id="4cc39-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="4cc39-112">或者，使用協助程式屬性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>來判斷是否指定的索引鍵已啟動、 關閉，或切換。</span><span class="sxs-lookup"><span data-stu-id="4cc39-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyEventArgs : System.Windows.Input.KeyboardDevice * System.Windows.PresentationSource * int * System.Windows.Input.Key -&gt; System.Windows.Input.KeyEventArgs" Usage="new System.Windows.Input.KeyEventArgs (keyboard, inputSource, timestamp, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard"><span data-ttu-id="4cc39-113">與這個事件相關聯的邏輯鍵盤裝置。</span><span class="sxs-lookup"><span data-stu-id="4cc39-113">The logical keyboard device associated with this event.</span></span></param>
        <param name="inputSource"><span data-ttu-id="4cc39-114">輸入來源。</span><span class="sxs-lookup"><span data-stu-id="4cc39-114">The input source.</span></span></param>
        <param name="timestamp"><span data-ttu-id="4cc39-115">輸入的時間。</span><span class="sxs-lookup"><span data-stu-id="4cc39-115">The time when the input occurred.</span></span></param>
        <param name="key"><span data-ttu-id="4cc39-116">事件參考的按鍵。</span><span class="sxs-lookup"><span data-stu-id="4cc39-116">The key referenced by the event.</span></span></param>
        <summary><span data-ttu-id="4cc39-117">初始化 <see cref="T:System.Windows.Input.KeyEventArgs" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4cc39-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.DeadCharProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-118">取得屬於廢鍵組合 (Dead Key Composition) 之一部分的按鍵，以建立單一組合 (Combined) 字元。</span><span class="sxs-lookup"><span data-stu-id="4cc39-118">Gets the key that is part of dead key composition to create a single combined character.</span></span></summary>
        <value><span data-ttu-id="4cc39-119">屬於廢鍵組合之一部分的按鍵，以建立單一組合字元。</span><span class="sxs-lookup"><span data-stu-id="4cc39-119">The key that is part of dead key composition to create a single combined character.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-120">廢鍵，當按下時，會產生任何可見字元但指示的索引鍵是結合所產生的下一個字母按鍵的字元。</span><span class="sxs-lookup"><span data-stu-id="4cc39-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="4cc39-121">如果<xref:System.Windows.Input.KeyEventArgs.Key%2A>傳回<xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>，您可以使用這個屬性，以取得實際輸入的金鑰。</span><span class="sxs-lookup"><span data-stu-id="4cc39-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.ImeProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-122">取得事件參考的鍵盤按鍵 (如果該按鍵將由[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] 處理)。</span><span class="sxs-lookup"><span data-stu-id="4cc39-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span></span></summary>
        <value><span data-ttu-id="4cc39-123">事件參考的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputSource : System.Windows.PresentationSource" Usage="System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-124">取得提供這個輸入的輸入來源。</span><span class="sxs-lookup"><span data-stu-id="4cc39-124">Gets the input source that provided this input.</span></span></summary>
        <value><span data-ttu-id="4cc39-125">輸入來源。</span><span class="sxs-lookup"><span data-stu-id="4cc39-125">The input source.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4cc39-126">取得輸入的來源。</span><span class="sxs-lookup"><span data-stu-id="4cc39-126">for getting the input source.</span></span> <span data-ttu-id="4cc39-127">相關聯的列舉型別： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4cc39-127">Associated enumerations: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="keyEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler"><span data-ttu-id="4cc39-128">以特定型別的方式呼叫的泛型處理常式。</span><span class="sxs-lookup"><span data-stu-id="4cc39-128">The generic handler to call in a type-specific way.</span></span></param>
        <param name="genericTarget"><span data-ttu-id="4cc39-129">對其呼叫處理常式的目標。</span><span class="sxs-lookup"><span data-stu-id="4cc39-129">The target to call the handler on.</span></span></param>
        <summary><span data-ttu-id="4cc39-130">以型別專屬的方式叫用事件處理常式，這樣做能夠提升事件系統的效率。</span><span class="sxs-lookup"><span data-stu-id="4cc39-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-131">此實作會轉換為泛型處理常式<xref:System.Windows.Input.KeyEventHandler>然後再叫用。</span><span class="sxs-lookup"><span data-stu-id="4cc39-131">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="4cc39-132">如需這個實作模式和它的原因的詳細資訊，請參閱 <<c0> <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> 並[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="4cc39-132">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDown : bool" Usage="System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-133">取得值，這個值指出事件參考的按鍵是否為已按下的狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span></span></summary>
        <value><span data-ttu-id="4cc39-134">如果按鍵為已按下狀態，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-134"><see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-135"><xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="4cc39-135">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="4cc39-136">比方說，<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>方法會傳回指定的索引鍵是否關閉。</span><span class="sxs-lookup"><span data-stu-id="4cc39-136">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4cc39-137">下列範例會檢查是否索引鍵相關聯的執行個體<xref:System.Windows.Input.KeyEventArgs>取得的狀態已關閉<xref:System.Windows.Input.KeyEventArgs.IsDown%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4cc39-137">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRepeat : bool" Usage="System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-138">取得值，這個值指出事件參考的鍵盤按鍵是否為重複的按鍵。</span><span class="sxs-lookup"><span data-stu-id="4cc39-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span></span></summary>
        <value><span data-ttu-id="4cc39-139">如果為重複按鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-139"><see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="4cc39-140">它沒有預設值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-140">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4cc39-141">下列範例會檢查是否索引鍵相關聯的執行個體<xref:System.Windows.Input.KeyEventArgs>取得的狀態是重複的索引鍵<xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4cc39-141">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsToggled : bool" Usage="System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-142">取得值，這個值指出事件參考的按鍵是否為已切換的狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span></span></summary>
        <value><span data-ttu-id="4cc39-143">如果按鍵為已切換狀態，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-143"><see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="4cc39-144">它沒有預設值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-144">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-145"><xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="4cc39-145">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="4cc39-146">比方說，<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法會傳回指定的索引鍵是否已切換。</span><span class="sxs-lookup"><span data-stu-id="4cc39-146">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4cc39-147">下列範例會檢查是否索引鍵相關聯的執行個體<xref:System.Windows.Input.KeyEventArgs>可以取得的狀態切換<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4cc39-147">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUp : bool" Usage="System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-148">取得值，這個值指出事件參考的按鍵是否為已釋放的狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span></span></summary>
        <value><span data-ttu-id="4cc39-149">如果按鍵為已釋放的狀態，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-149"><see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="4cc39-150">它沒有預設值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-150">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-151"><xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="4cc39-151">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="4cc39-152">比方說，<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>方法會傳回是否指定已啟動。</span><span class="sxs-lookup"><span data-stu-id="4cc39-152">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4cc39-153">下列範例會檢查是否索引鍵相關聯的執行個體<xref:System.Windows.Input.KeyEventArgs>取得的狀態也已開始<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4cc39-153">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-154">取得與事件關聯的鍵盤按鍵。</span><span class="sxs-lookup"><span data-stu-id="4cc39-154">Gets the keyboard key associated with the event.</span></span></summary>
        <value><span data-ttu-id="4cc39-155">事件參考的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-155">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4cc39-156">下列範例會建立<xref:System.Windows.Input.KeyEventHandler>，並檢查是否與索引鍵相關聯<xref:System.Windows.Input.KeyEventArgs>是<xref:System.Windows.Input.Key.Return>索引鍵。</span><span class="sxs-lookup"><span data-stu-id="4cc39-156">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyStates : System.Windows.Input.KeyStates" Usage="System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-157">取得與這個事件關聯的鍵盤按鍵狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-157">Gets the state of the keyboard key associated with this event.</span></span></summary>
        <value><span data-ttu-id="4cc39-158">按鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-158">The state of the key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4cc39-159">索引鍵可以是最新和已切換狀態或向下和切換狀態。</span><span class="sxs-lookup"><span data-stu-id="4cc39-159">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="4cc39-160">基於這個理由，判斷是否已啟動的索引鍵或向下不簡單，只要檢查<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>做為數值的值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-160">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="4cc39-161">相反地，您應該檢查值，藉由將其視為旗標列舉型別。</span><span class="sxs-lookup"><span data-stu-id="4cc39-161">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="4cc39-162">使用`AND`比較的第一個位元。</span><span class="sxs-lookup"><span data-stu-id="4cc39-162">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="4cc39-163">或者，使用協助程式屬性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>來判斷是否指定的索引鍵已啟動、 關閉，或切換。</span><span class="sxs-lookup"><span data-stu-id="4cc39-163">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4cc39-164">下列範例會檢查是否索引鍵相關聯的執行個體<xref:System.Windows.Input.KeyEventArgs>已關閉，藉由執行位元`AND`比較<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>的索引鍵和<xref:System.Windows.Input.KeyStates.Down>列舉值。</span><span class="sxs-lookup"><span data-stu-id="4cc39-164">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cc39-165">取得事件參考的鍵盤按鍵 (如果該按鍵將由系統處理)。</span><span class="sxs-lookup"><span data-stu-id="4cc39-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span></span></summary>
        <value><span data-ttu-id="4cc39-166">事件參考的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="4cc39-166">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>