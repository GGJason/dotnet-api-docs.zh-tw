<Type Name="Keyboard" FullName="System.Windows.Input.Keyboard">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba75b03b83a967a922f2461d1953849641ff020d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56395215" /></Metadata><TypeSignature Language="C#" Value="public static class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard abstract sealed" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="29be0-101">表示鍵盤裝置。</span><span class="sxs-lookup"><span data-stu-id="29be0-101">Represents the keyboard device.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-102"><xref:System.Windows.Input.Keyboard>類別提供鍵盤相關事件、 方法和屬性，可提供鍵盤狀態的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="29be0-102">The <xref:System.Windows.Input.Keyboard> class provides keyboard-related events, methods, and properties that provide information regarding the state of the keyboard.</span></span>  
  
 <span data-ttu-id="29be0-103">每個事件，<xref:System.Windows.Input.Keyboard>定義為附加的事件也會重新公開在基底類別所<xref:System.Windows.UIElement>和<xref:System.Windows.ContentElement>做為新的路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-103">Each of the events that <xref:System.Windows.Input.Keyboard> defines as an attached event is also re-exposed by the base element classes <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> as a new routed event.</span></span> <span data-ttu-id="29be0-104">一般而言，會在處理鍵盤事件的應用程式更方便<xref:System.Windows.UIElement>並<xref:System.Windows.ContentElement>，而不是使用<xref:System.Windows.Input.Keyboard>事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-104">Generally, it is more convenient to handle keyboard events for an application on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>, rather than using the <xref:System.Windows.Input.Keyboard> events.</span></span> <span data-ttu-id="29be0-105">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-105">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-106">為了讓接收鍵盤輸入的項目，必須是可焦點化項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-106">In order for an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="29be0-107">大部分<xref:System.Windows.UIElement>衍生的物件是預設的可設定焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-107">Most <xref:System.Windows.UIElement> derived objects are focusable by default.</span></span> <span data-ttu-id="29be0-108">否則，若要讓項目可設定焦點，設定<xref:System.Windows.UIElement.Focusable%2A>屬性的基底項目`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-108">Otherwise, to make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="29be0-109">如需有關基底元素的詳細資訊，請參閱[基底的項目概觀](~/docs/framework/wpf/advanced/base-elements-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-109">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-110"><xref:System.Windows.Controls.Panel> 類別，例如<xref:System.Windows.Controls.StackPanel>並<xref:System.Windows.Controls.Canvas>，設定的預設值<xref:System.Windows.UIElement.Focusable%2A>至`false`。</span><span class="sxs-lookup"><span data-stu-id="29be0-110"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`.</span></span> <span data-ttu-id="29be0-111">因此，對於這些物件，以取得鍵盤焦點<xref:System.Windows.UIElement.Focusable%2A>必須設為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-111">Therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="29be0-112">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-112">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-113">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-113">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-114">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-114">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-115">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-115">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-116">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-116">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-117">靜態成員<xref:System.Windows.Input.Keyboard>主要類別委派<xref:System.Windows.Input.KeyboardDevice>的呼叫的執行緒，因此不一定是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="29be0-117">The static members of the <xref:System.Windows.Input.Keyboard> class delegate to the primary <xref:System.Windows.Input.KeyboardDevice> of the calling thread, so they are not necessarily thread-safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-118">下列範例示範如何使用<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法，以判斷索引鍵是否為已切換狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-118">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine if a key is in the toggled state.</span></span> <span data-ttu-id="29be0-119">如果<xref:System.Windows.Input.Key>傳遞至<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>是切換，變更按鈕的背景。</span><span class="sxs-lookup"><span data-stu-id="29be0-119">If the <xref:System.Windows.Input.Key> passed to <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> is toggled, the background of a button is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="AddGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-120">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-120">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-121">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-121">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-122">加入 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-122">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-123">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-123">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-124">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-124">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-125">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-125">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-126">加入 <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-126">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-127">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-127">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-128">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-128">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-129">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-129">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-130">加入 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-130">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-131">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-131">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-132">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-132">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-133">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-133">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-134">加入 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-134">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-135">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-135">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-136">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-136">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-137">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-137">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-138">加入 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-138">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-139">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-139">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-140">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-140">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-141">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-141">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-142">加入 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-142">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-143">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-143">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-144">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-144">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-145">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-145">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-146">加入 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-146">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-147">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-147">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-148">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-148">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-149">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-149">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-150">加入 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-150">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-151">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-151">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-152">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-152">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-153">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-153">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-154">加入 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-154">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-155">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-155">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-156">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-156">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-157">要加入的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-157">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="29be0-158">加入 <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-158">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-159">這個方法提供程式碼存取附加的屬性存取子和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的屬性處理<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-159">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFocus">
      <MemberSignature Language="C#" Value="public static void ClearFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.ClearFocus" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearFocus();" />
      <MemberSignature Language="F#" Value="static member ClearFocus : unit -&gt; unit" Usage="System.Windows.Input.Keyboard.ClearFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29be0-160">清除焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-160">Clears focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-161">如果焦點是在 Win32 視窗中，WPF 會呼叫<xref:System.Windows.Input.Keyboard.ClearFocus%2A>在還原焦點時就會關閉功能表上的方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-161">If focus is within a Win32 window, WPF calls the <xref:System.Windows.Input.Keyboard.ClearFocus%2A> method on restoration of focus when a menu is closed.</span></span>  
  
 <span data-ttu-id="29be0-162">Win32 焦點時離開功能表模式，就會傳回至裝載的子系 HWND，且沒有任何項目 WPF 焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-162">When leaving menu mode, Win32 focus is returned to the hosted child HWND, and no element has WPF focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRestoreFocusMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultRestoreFocusMode As RestoreFocusMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RestoreFocusMode DefaultRestoreFocusMode { System::Windows::Input::RestoreFocusMode get(); void set(System::Windows::Input::RestoreFocusMode value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRestoreFocusMode : System.Windows.Input.RestoreFocusMode with get, set" Usage="System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RestoreFocusMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-163">取得或設定 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 在還原焦點時的行為。</span><span class="sxs-lookup"><span data-stu-id="29be0-163">Gets or sets the behavior of [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] when restoring focus.</span></span></summary>
        <value><span data-ttu-id="29be0-164">指定 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 在還原焦點時之行為的列舉值。</span><span class="sxs-lookup"><span data-stu-id="29be0-164">An enumeration value that specifies the behavior of [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] when restoring focus.</span></span> <span data-ttu-id="29be0-165">預設為 <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-165">The default in <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement Focus (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement Focus(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Focus (element As IInputElement) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ Focus(System::Windows::IInputElement ^ element);" />
      <MemberSignature Language="F#" Value="static member Focus : System.Windows.IInputElement -&gt; System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.Focus element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-166">要在其上設定鍵盤焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-166">The element on which to set keyboard focus.</span></span></param>
        <summary><span data-ttu-id="29be0-167">設定鍵盤焦點於指定的項目上。</span><span class="sxs-lookup"><span data-stu-id="29be0-167">Sets keyboard focus on the specified element.</span></span></summary>
        <returns><span data-ttu-id="29be0-168">擁有鍵盤焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-168">The element with keyboard focus.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-169">要接收鍵盤輸入的項目，項目必須是可設定焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-169">For an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="29be0-170">若要將項目可設定焦點，將<xref:System.Windows.UIElement.Focusable%2A>屬性的基底項目`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-170">To make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="29be0-171">如需有關基底元素的詳細資訊，請參閱[基底的項目概觀](~/docs/framework/wpf/advanced/base-elements-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-171">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  <span data-ttu-id="29be0-172"><xref:System.Windows.Controls.Panel> 類別，例如<xref:System.Windows.Controls.StackPanel>並<xref:System.Windows.Controls.Canvas>，設定的預設值<xref:System.Windows.UIElement.Focusable%2A>要`false`; 因此，若要取得鍵盤焦點，這些物件<xref:System.Windows.UIElement.Focusable%2A>必須設為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-172"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`; therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="29be0-173">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-173">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-174">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-174">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-175">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-175">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-176">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-176">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-177">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-177">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-178">具有鍵盤焦點的項目也會有邏輯焦點的項目所屬焦點範圍。</span><span class="sxs-lookup"><span data-stu-id="29be0-178">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="29be0-179">具有邏輯焦點的項目可能會或可能沒有鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-179">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-180">下列範例所示<xref:System.Windows.FrameworkElement.Loaded>設定鍵盤焦點的事件處理常式<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="29be0-180">The following example shows a <xref:System.Windows.FrameworkElement.Loaded> event handler that sets keyboard focus on a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[focussample#FocusSampleSetFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplesetfocus)]
 [!code-vb[focussample#FocusSampleSetFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplesetfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElement">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement FocusedElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement FocusedElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.FocusedElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FocusedElement As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ FocusedElement { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusedElement : System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.FocusedElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-181">取得擁有鍵盤焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-181">Gets the element that has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="29be0-182">擁有焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-182">The focused element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-183">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-183">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-184">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-184">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-185">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-185">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-186">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-186">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-187">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-187">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-188">具有鍵盤焦點的項目也會有邏輯焦點的項目所屬焦點範圍。</span><span class="sxs-lookup"><span data-stu-id="29be0-188">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="29be0-189">具有邏輯焦點的項目可能會或可能沒有鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-189">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-190">下列範例會取得具有鍵盤焦點的項目，並將它轉換成<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="29be0-190">The following example gets the element with keyboard focus and casts it to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="29be0-191">如果具有鍵盤焦點的項目<xref:System.Windows.Controls.Control>，變更項目的背景。</span><span class="sxs-lookup"><span data-stu-id="29be0-191">If the element with keyboard focus is a <xref:System.Windows.Controls.Control>, the background of the element is changed.</span></span>  
  
 [!code-csharp[focussample#GetKeyboardFocusedElement](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#getkeyboardfocusedelement)]
 [!code-vb[focussample#GetKeyboardFocusedElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#getkeyboardfocusedelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyStates">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyStates GetKeyStates (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Input.KeyStates GetKeyStates(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::KeyStates GetKeyStates(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member GetKeyStates : System.Windows.Input.Key -&gt; System.Windows.Input.KeyStates" Usage="System.Windows.Input.Keyboard.GetKeyStates key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29be0-192">指定的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-192">The specified key.</span></span></param>
        <summary><span data-ttu-id="29be0-193">取得指定按鍵的按鍵狀態集。</span><span class="sxs-lookup"><span data-stu-id="29be0-193">Gets the set of key states for the specified key.</span></span></summary>
        <returns><span data-ttu-id="29be0-194"><see cref="T:System.Windows.Input.KeyStates" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="29be0-194">A bitwise combination of the <see cref="T:System.Windows.Input.KeyStates" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-195"><xref:System.Windows.Input.KeyStates> 是位元欄位列舉型別。因此，就可以在多個狀態的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-195"><xref:System.Windows.Input.KeyStates> is a bit field enumeration; therefore, it is possible for a key to be in multiple states.</span></span>  <span data-ttu-id="29be0-196">例如，索引鍵可能是處於已按下狀態以及如所示為已切換狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-196">For example, a key could be in the pressed state as well as in the toggled state.</span></span>  <span data-ttu-id="29be0-197">您可以使用位元比較作業來判斷的狀態的索引鍵的確切狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-197">Use bit comparison operations to determine the exact state or states the key is in.</span></span>  
  
 <span data-ttu-id="29be0-198"><xref:System.Windows.Input.Keyboard>類別提供了一些靜態方法，而這些方法也可用來取得索引鍵的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="29be0-198">The <xref:System.Windows.Input.Keyboard> class provides a number of static methods which can also be used to obtain key state information.</span></span>  <span data-ttu-id="29be0-199">方法是： <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>， <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>，和<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>。</span><span class="sxs-lookup"><span data-stu-id="29be0-199">The methods are: <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>, <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>, and <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-200">下列範例示範如何使用<xref:System.Windows.Input.Keyboard.GetKeyStates%2A>方法來判斷<xref:System.Windows.Input.Key.Return>的關鍵在於<xref:System.Windows.Input.KeyStates.Down>狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-200">The following example shows how to use the <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method to determine if the <xref:System.Windows.Input.Key.Return> key is in the <xref:System.Windows.Input.KeyStates.Down> state.</span></span>  <span data-ttu-id="29be0-201">位元 AND 運算，用來比較<xref:System.Windows.Input.KeyStates>傳回從<xref:System.Windows.Input.Keyboard.GetKeyStates%2A>而<xref:System.Windows.Input.Key.Down>狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-201">A bit AND operation is used to compare the <xref:System.Windows.Input.KeyStates> returned from <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> and the <xref:System.Windows.Input.Key.Down> state.</span></span> <span data-ttu-id="29be0-202">如果機碼下的背景<xref:System.Windows.Controls.Button>變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-202">If the key is down, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardgetkeystates)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardgetkeystates)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" Usage="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-203">當項目接收到鍵盤焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-203">Occurs when an element receives keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-204">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-204">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-205">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-205">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-206">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-206">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-207">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-207">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-208">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-208">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-209">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-209">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-210">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-210">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-211">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-211">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-212">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-212">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-213">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-213">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-214">如果<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>事件或<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>處理事件，並變更鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="29be0-214">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does change.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocusEvent"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-215">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-215">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-216">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-216">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.GotKeyboardFocusEvent>|  
|<span data-ttu-id="29be0-217">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-217">Routing strategy</span></span>|<span data-ttu-id="29be0-218">事件反昇</span><span class="sxs-lookup"><span data-stu-id="29be0-218">Bubbling</span></span>|  
|<span data-ttu-id="29be0-219">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-219">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="29be0-220">對應的通道事件是<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-220">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-221">下列範例會建立<xref:System.Windows.Controls.TextBox>，並將附加事件處理常式<xref:System.Windows.UIElement.GotKeyboardFocus>事件和<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-221">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="29be0-222">當<xref:System.Windows.Controls.TextBox>取得鍵盤焦點，變更背景色彩和文字<xref:System.Windows.Controls.TextBox>已清除。</span><span class="sxs-lookup"><span data-stu-id="29be0-222">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="29be0-223">當<xref:System.Windows.Controls.TextBlock>失去鍵盤焦點的背景色彩會變更，以及其重設在此範例中使用變數來呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-223">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called which resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-224">識別 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-224">Identifies the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-225">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-225">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-226">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-227">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-227">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyDown">
      <MemberSignature Language="C#" Value="public static bool IsKeyDown (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyDown(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyDown(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyDown : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyDown key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29be0-228">指定的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-228">The specified key.</span></span></param>
        <summary><span data-ttu-id="29be0-229">判斷指定的按鍵是否為已按下。</span><span class="sxs-lookup"><span data-stu-id="29be0-229">Determines whether the specified key is pressed.</span></span></summary>
        <returns><span data-ttu-id="29be0-230">如果 <paramref name="key" /> 為已按下狀態則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-230"><see langword="true" /> if <paramref name="key" /> is in the down state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-231"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>方法可用來判斷狀態的特定索引鍵的集合。</span><span class="sxs-lookup"><span data-stu-id="29be0-231">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-232">下列範例示範如何使用<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>方法，以判斷特定的索引鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-232">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="29be0-233"><xref:System.Windows.Input.Key.Return>金鑰傳遞至<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-233">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method.</span></span>  <span data-ttu-id="29be0-234">如果此方法會傳回`true`，背景<xref:System.Windows.Controls.Button>變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-234">If the method returns `true`, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeydown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeydown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsDown" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyToggled">
      <MemberSignature Language="C#" Value="public static bool IsKeyToggled (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyToggled(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyToggled(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyToggled : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyToggled key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29be0-235">指定的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-235">The specified key.</span></span></param>
        <summary><span data-ttu-id="29be0-236">判斷指定的按鍵是否為已切換。</span><span class="sxs-lookup"><span data-stu-id="29be0-236">Determines whether the specified key is toggled.</span></span></summary>
        <returns><span data-ttu-id="29be0-237">如果 <paramref name="key" /> 為已切換狀態則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-237"><see langword="true" /> if <paramref name="key" /> is in the toggled state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-238"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>方法可用來判斷狀態的特定索引鍵的集合。</span><span class="sxs-lookup"><span data-stu-id="29be0-238">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-239">下列範例示範如何使用<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法，以判斷特定的索引鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-239">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine the state of a specific key.</span></span> <span data-ttu-id="29be0-240"><xref:System.Windows.Input.Key.Return>金鑰傳遞至<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-240">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method.</span></span>  <span data-ttu-id="29be0-241">如果此方法會傳回`true`，則背景的<xref:System.Windows.Controls.Button>變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-241">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyUp">
      <MemberSignature Language="C#" Value="public static bool IsKeyUp (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyUp(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyUp(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyUp : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyUp key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29be0-242">要進行檢查的按鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-242">The key to check.</span></span></param>
        <summary><span data-ttu-id="29be0-243">判斷指定的按鍵是否為已放開。</span><span class="sxs-lookup"><span data-stu-id="29be0-243">Determines whether the specified key is released.</span></span></summary>
        <returns><span data-ttu-id="29be0-244">如果 <paramref name="key" /> 為已放開狀態則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-244"><see langword="true" /> if <paramref name="key" /> is in the up state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-245"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>方法可用來判斷狀態的特定索引鍵的集合。</span><span class="sxs-lookup"><span data-stu-id="29be0-245">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-246">下列範例示範如何使用<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>方法，以判斷特定的索引鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="29be0-246">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="29be0-247"><xref:System.Windows.Input.Key.Return>金鑰傳遞至<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-247">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method.</span></span>  <span data-ttu-id="29be0-248">如果此方法會傳回`true`，則背景的<xref:System.Windows.Controls.Button>變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-248">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeyup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeyup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" Usage="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-249">發生於鍵盤輸入提供者取得焦點時。</span><span class="sxs-lookup"><span data-stu-id="29be0-249">Occurs when the keyboard input provider acquires focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-250">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-250">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-251">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-251">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-252">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-252">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-253">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-253">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-254">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-254">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-255">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-255">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-256">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-256">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="29be0-257">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-257">Routing strategy</span></span>|<span data-ttu-id="29be0-258">事件反昇</span><span class="sxs-lookup"><span data-stu-id="29be0-258">Bubbling</span></span>|  
|<span data-ttu-id="29be0-259">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-259">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="29be0-260">對應的通道事件是<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-260">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-261">識別 <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-261">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-262">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-262">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-263">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-263">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-264">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-264">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" Usage="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-265">當按下鍵盤上的按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-265">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-266">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-266">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-267">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-267">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-268">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-268">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-269">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-269">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-270">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-270">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-271">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-271">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-272">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-272">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyDownEvent>|  
|<span data-ttu-id="29be0-273">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-273">Routing strategy</span></span>|<span data-ttu-id="29be0-274">事件反昇</span><span class="sxs-lookup"><span data-stu-id="29be0-274">Bubbling</span></span>|  
|<span data-ttu-id="29be0-275">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-275">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="29be0-276">對應的通道事件是<xref:System.Windows.Input.Keyboard.PreviewKeyDown>。</span><span class="sxs-lookup"><span data-stu-id="29be0-276">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyDown>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-277">下列範例會建立<xref:System.Windows.Controls.TextBox>，將附加事件處理常式<xref:System.Windows.UIElement.KeyDown>事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-277">The following example creates <xref:System.Windows.Controls.TextBox> that attaches an event handler for the <xref:System.Windows.UIElement.KeyDown> event.</span></span>  <span data-ttu-id="29be0-278">當<xref:System.Windows.Input.Key.Return>按下時，事件處理常式會顯示在文字<xref:System.Windows.Controls.TextBox>在<xref:System.Windows.Controls.TextBlock>。</span><span class="sxs-lookup"><span data-stu-id="29be0-278">When the <xref:System.Windows.Input.Key.Return> is pressed, the event handler displays the text in the <xref:System.Windows.Controls.TextBox> in a <xref:System.Windows.Controls.TextBlock>.</span></span>  
  
 [!code-xml[keydown#KeyDownUI](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml#keydownui)]  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-279">識別 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-279">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-280">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-280">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-281">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-281">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-282">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-282">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" Usage="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-283">當放開鍵盤上的按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-283">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-284">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-284">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-285">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-285">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-286">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-286">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-287">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-287">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-288">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-288">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-289">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-290">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-290">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyUpEvent>|  
|<span data-ttu-id="29be0-291">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-291">Routing strategy</span></span>|<span data-ttu-id="29be0-292">事件反昇</span><span class="sxs-lookup"><span data-stu-id="29be0-292">Bubbling</span></span>|  
|<span data-ttu-id="29be0-293">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-293">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="29be0-294">對應的通道事件是<xref:System.Windows.Input.Keyboard.PreviewKeyUp>。</span><span class="sxs-lookup"><span data-stu-id="29be0-294">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-295">識別 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-295">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-296">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-296">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-297">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-297">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-298">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-298">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" Usage="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-299">當項目失去鍵盤焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-299">Occurs when an element loses keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-300">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-300">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-301">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-301">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-302">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-302">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-303">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-303">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-304">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-304">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-305">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-305">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-306">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-306">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-307">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-307">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-308">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-308">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-309">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-309">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-310">如果<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>事件或<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>處理事件、 鍵盤焦點不會變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-310">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-311">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-312">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-312">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.LostKeyboardFocusEvent>|  
|<span data-ttu-id="29be0-313">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-313">Routing strategy</span></span>|<span data-ttu-id="29be0-314">事件反昇</span><span class="sxs-lookup"><span data-stu-id="29be0-314">Bubbling</span></span>|  
|<span data-ttu-id="29be0-315">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-315">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="29be0-316">對應的通道事件是<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-316">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-317">下列範例會建立<xref:System.Windows.Controls.TextBox>，並將附加事件處理常式<xref:System.Windows.UIElement.GotKeyboardFocus>事件和<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-317">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="29be0-318">當<xref:System.Windows.Controls.TextBox>取得鍵盤焦點，變更背景色彩和文字<xref:System.Windows.Controls.TextBox>已清除。</span><span class="sxs-lookup"><span data-stu-id="29be0-318">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="29be0-319">當<xref:System.Windows.Controls.TextBlock>失去鍵盤焦點的背景色彩會變更，且會呼叫方法的範例中使用的變數會重設。</span><span class="sxs-lookup"><span data-stu-id="29be0-319">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called that resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-320">識別 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-320">Identifies the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-321">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-321">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-322">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-322">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-323">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-323">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.Keyboard.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-324">取得目前按下的 <see cref="T:System.Windows.Input.ModifierKeys" /> 集。</span><span class="sxs-lookup"><span data-stu-id="29be0-324">Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed.</span></span></summary>
        <value><span data-ttu-id="29be0-325"><see cref="T:System.Windows.Input.ModifierKeys" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="29be0-325">A bitwise combination of the <see cref="T:System.Windows.Input.ModifierKeys" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-326"><xref:System.Windows.Input.ModifierKeys> 是位元欄位列舉型別，因此很可能同時被按下的多個輔助按鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-326"><xref:System.Windows.Input.ModifierKeys> is a bit field enumeration, so it is possible for multiple modifier keys to be pressed at the same time.</span></span>  <span data-ttu-id="29be0-327">使用位元作業，來決定確切組的輔助按鍵按下。</span><span class="sxs-lookup"><span data-stu-id="29be0-327">Use bit operations to determine the exact set of modifier keys pressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29be0-328">下列範例會使用位元 AND 比較以判斷<xref:System.Windows.Input.ModifierKeys.Control>輔助按鍵。</span><span class="sxs-lookup"><span data-stu-id="29be0-328">The following example uses a bit AND comparison to determine if the <xref:System.Windows.Input.ModifierKeys.Control> modifier key is pressed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyboardmodifiersbitoperation)]
 [!code-vb[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyboardmodifiersbitoperation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" Usage="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-329">當項目正在取得鍵盤焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-329">Occurs when an element is in the process of acquiring keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-330">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-330">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-331">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-331">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-332">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-332">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-333">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-333">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-334">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-334">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-335">如果<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>事件或<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>處理事件、 鍵盤焦點不會變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-335">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="29be0-336">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-336">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-337">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-337">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-338">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-338">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-339">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-339">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-340">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-340">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyborad"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-341">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-341">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-342">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-342">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="29be0-343">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-343">Routing strategy</span></span>|<span data-ttu-id="29be0-344">通道</span><span class="sxs-lookup"><span data-stu-id="29be0-344">Tunneling</span></span>|  
|<span data-ttu-id="29be0-345">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-345">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="29be0-346">對應的事件反昇事件是<xref:System.Windows.Input.Keyboard.GotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-346">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.GotKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-347">識別 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-347">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-348">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-348">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-349">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-349">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-350">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-350">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" Usage="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-351">發生於鍵盤輸入提供者正在取得鍵盤焦點時。</span><span class="sxs-lookup"><span data-stu-id="29be0-351">Occurs when the keyboard input provider is in the process of acquiring focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-352">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-352">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-353">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-353">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-354">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-354">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-355">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-355">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-356">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-356">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-357">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-357">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-358">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-358">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="29be0-359">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-359">Routing strategy</span></span>|<span data-ttu-id="29be0-360">通道</span><span class="sxs-lookup"><span data-stu-id="29be0-360">Tunneling</span></span>|  
|<span data-ttu-id="29be0-361">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-361">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="29be0-362">對應的事件反昇事件是<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-362">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-363">識別 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-363">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-364">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-364">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-365">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-365">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-366">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-366">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" Usage="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-367">當按下鍵盤上的按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-367">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-368">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-368">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-369">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-369">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-370">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-370">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-371">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-371">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-372">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-372">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-373">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-374">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-374">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyDownEvent>|  
|<span data-ttu-id="29be0-375">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-375">Routing strategy</span></span>|<span data-ttu-id="29be0-376">通道</span><span class="sxs-lookup"><span data-stu-id="29be0-376">Tunneling</span></span>|  
|<span data-ttu-id="29be0-377">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-377">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="29be0-378">對應的事件反昇事件是<xref:System.Windows.Input.Keyboard.KeyDown>。</span><span class="sxs-lookup"><span data-stu-id="29be0-378">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-379">識別 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-379">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-380">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-380">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-381">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-382">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-382">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" Usage="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-383">當放開鍵盤上的按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-383">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-384">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-384">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-385">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-385">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-386">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-386">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-387">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-387">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-388">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-388">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-389">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-389">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-390">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-390">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyUpEvent>|  
|<span data-ttu-id="29be0-391">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-391">Routing strategy</span></span>|<span data-ttu-id="29be0-392">通道</span><span class="sxs-lookup"><span data-stu-id="29be0-392">Tunneling</span></span>|  
|<span data-ttu-id="29be0-393">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-393">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="29be0-394">對應的事件反昇事件是<xref:System.Windows.Input.Keyboard.KeyUp>。</span><span class="sxs-lookup"><span data-stu-id="29be0-394">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-395">識別 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-395">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-396">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-396">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-397">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-397">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-398">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-398">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" Usage="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29be0-399">當項目正在失去鍵盤焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="29be0-399">Occurs when an element is in the process of losing keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-400">這是附加的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-400">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="29be0-401">將附加的事件實作為路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-401">implements attached events as routed events.</span></span> <span data-ttu-id="29be0-402">附加的事件基本上都[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]參考可以處理不會定義事件的物件的事件的語言概念的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]展開時也能周遊路由事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-402">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="29be0-403">附加的事件並沒有直接處理語法在程式碼若要附加的程式碼中的路由事件處理常式，您會使用指定的新增 \* 處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="29be0-403">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="29be0-404">如需詳細資訊，請參閱 <<c0> [ 附加事件概觀](~/docs/framework/wpf/advanced/attached-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-404">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="29be0-405">如果<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>事件或<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>處理事件、 鍵盤焦點不會變更。</span><span class="sxs-lookup"><span data-stu-id="29be0-405">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="29be0-406">鍵盤焦點是指接收鍵盤輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-406">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="29be0-407">具有鍵盤焦點的項目具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="29be0-407">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="29be0-408">可以有鍵盤焦點設在整個桌面只能有一個項目。</span><span class="sxs-lookup"><span data-stu-id="29be0-408">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="29be0-409">邏輯焦點是指具有焦點的焦點範圍內的物件。</span><span class="sxs-lookup"><span data-stu-id="29be0-409">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="29be0-410">如需有關焦點、 鍵盤焦點和邏輯焦點的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)並[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="29be0-410">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="29be0-411">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="29be0-411">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="29be0-412">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="29be0-412">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="29be0-413">路由策略</span><span class="sxs-lookup"><span data-stu-id="29be0-413">Routing strategy</span></span>|<span data-ttu-id="29be0-414">通道</span><span class="sxs-lookup"><span data-stu-id="29be0-414">Tunneling</span></span>|  
|<span data-ttu-id="29be0-415">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="29be0-415">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="29be0-416">對應的事件反昇事件是<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="29be0-416">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.LostKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-417">識別 <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-417">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-418">註冊路由的事件，並將結果儲存為可註冊路由的事件的類別上的欄位時，會建立路由的事件識別項。</span><span class="sxs-lookup"><span data-stu-id="29be0-418">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="29be0-419">這些識別碼會包含識別的名稱、 擁有者類型、 處理常式的類型、 路由策略和公用程式方法新增擁有者的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-419">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="29be0-420">您經常使用這些識別碼做為參數，事件系統的方法，來識別特定的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-420">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryDevice">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyboardDevice PrimaryDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.KeyboardDevice PrimaryDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PrimaryDevice As KeyboardDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::KeyboardDevice ^ PrimaryDevice { System::Windows::Input::KeyboardDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryDevice : System.Windows.Input.KeyboardDevice" Usage="System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29be0-421">取得主要鍵盤輸入裝置。</span><span class="sxs-lookup"><span data-stu-id="29be0-421">Gets the primary keyboard input device.</span></span></summary>
        <value><span data-ttu-id="29be0-422">裝置。</span><span class="sxs-lookup"><span data-stu-id="29be0-422">The device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-423">這個屬性支援 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基礎結構，但不建議直接在程式碼中使用。</span><span class="sxs-lookup"><span data-stu-id="29be0-423">This property supports the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyboardDevice" />
      </Docs>
    </Member>
    <Member MemberName="RemoveGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-424">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-424">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-425">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-425">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-426">移除 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-426">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-427">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-427">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-428">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-428">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-429">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-429">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-430">移除 <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-430">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-431">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-431">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-432">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-432">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-433">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-433">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-434">移除 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-434">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-435">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-435">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-436">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-436">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-437">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-437">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-438">移除 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-438">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-439">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-439">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-440">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-440">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-441">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-441">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-442">移除 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-442">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-443">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-443">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-444">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-444">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-445">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-445">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-446">移除 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-446">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-447">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-447">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-448">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-448">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-449">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-449">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-450">移除 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-450">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-451">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-451">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-452">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-452">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-453">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-453">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-454">移除 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-454">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-455">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-455">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-456">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-456">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-457">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-457">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-458">移除 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-458">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-459">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-459">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="29be0-460">接聽這個事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="29be0-460">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="29be0-461">要移除的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-461">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="29be0-462">移除 <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 附加事件的處理常式。</span><span class="sxs-lookup"><span data-stu-id="29be0-462">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29be0-463">這個方法提供程式碼存取附加的屬性存取子<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件。</span><span class="sxs-lookup"><span data-stu-id="29be0-463">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>