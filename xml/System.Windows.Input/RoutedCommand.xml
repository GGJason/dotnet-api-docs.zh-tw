<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8d638afdf80183d167dc5b44e8e7d71caa6c94f" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53514018" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義命令，這個命令實作 <see cref="T:System.Windows.Input.ICommand" /> 和透過項目樹狀進行遞送。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>並<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>上的方法<xref:System.Windows.Input.RoutedCommand>不會包含命令的應用程式邏輯在一般情況下<xref:System.Windows.Input.ICommand>，但相反地，這些方法會引發周遊元素樹狀結構以尋找物件的事件<xref:System.Windows.Input.CommandBinding>.  事件處理常式附加至<xref:System.Windows.Input.CommandBinding>包含命令邏輯。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>方法會引發<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>事件。  <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法會引發<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件。  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
 \<*object* *property*="*predefinedCommandName*"/>  
  
-或-
  
 \<*物件**屬性*="*predefinedClassName*。*predefinedCommandName*"/ >  
  
-或-
  
 \<*物件**屬性*="{ *customClassName*。*customCommandName*}"/ >  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>XAML 值  
 *predefinedClassName*  
 其中一個預先定義的命令類別。  
  
 *predefinedCommandName*  
 其中一個預先定義的命令。  
  
 *customClassName*  
 自訂類別包含自訂的命令。 自訂類別，通常需要`xlmns`前置詞對應，請參閱[XAML 命名空間和 WPF XAML 命名空間對應](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。  
  
 *customCommandName*  
 自訂命令。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">為序列化宣告的名稱。</param>
        <param name="ownerType">註冊命令的類型。</param>
        <summary>使用指定的名稱和擁有者類別，初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ownerType" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">為序列化宣告的名稱。</param>
        <param name="ownerType">正要註冊命令的型別。</param>
        <param name="inputGestures">與這個命令關聯的預設輸入筆勢。</param>
        <summary>使用指定的名稱、擁有者型別和筆勢集合，初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 的長度為零 
-或- 
 <paramref name="ownerType" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">使用者定義資料型別。</param>
        <param name="target">命令目標。</param>
        <summary>判斷這個 <see cref="T:System.Windows.Input.RoutedCommand" /> 是否能在其目前狀態中執行。</summary>
        <returns>如果命令可以在目前命令目標上執行，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 判斷的實際邏輯<xref:System.Windows.Input.RoutedCommand>可以執行在目前命令目標未包含在<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法，而不是<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>引發<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件通道和事件反昇到項目樹狀目錄中尋找的物件<xref:System.Windows.Input.CommandBinding>。  如果<xref:System.Windows.Input.CommandBinding>該<xref:System.Windows.Input.RoutedCommand>找到，則<xref:System.Windows.Input.CanExecuteRoutedEventHandler>附加至<xref:System.Windows.Input.CommandBinding>呼叫。  這些處理常式提供程式設計的邏輯來判斷如果<xref:System.Windows.Input.RoutedCommand>可以或不執行。  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute>並<xref:System.Windows.Input.CommandManager.PreviewExecuted>上，會引發事件<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>上未設定<xref:System.Windows.Input.ICommandSource>，則<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>具有鍵盤焦點的項目上引發事件。  
  
   
  
## Examples  
 下例<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件處理常式的自訂實作從<xref:System.Windows.Input.ICommandSource>。  
  
 `this.Command` 在此範例中是<xref:System.Windows.Input.ICommandSource.Command%2A>屬性上的<xref:System.Windows.Input.ICommandSource>。  如果此命令不是`null`，此命令會轉換成<xref:System.Windows.Input.RoutedCommand>。  如果命令<xref:System.Windows.Input.RoutedCommand>，則<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>而<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果命令不是<xref:System.Windows.Input.RoutedCommand>，它會轉換為<xref:System.Windows.Input.ICommand>並<xref:System.Windows.Input.ICommand.CanExecute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法會傳回`true`，則啟用控制項; 否則控制項就是停用。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 也不是 <see cref="T:System.Windows.ContentElement" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於命令管理員偵測命令來源時。 這些變更通常會影響命令是否應在目前命令目標上執行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand>接聽<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，會引發<xref:System.Windows.Input.CommandManager>。 <xref:System.Windows.Input.CommandManager.RequerySuggested>符合條件時，就會引發事件，可能會變更，是否應該執行的命令，例如鍵盤焦點的變更。  此命令時收到<xref:System.Windows.Input.CommandManager.RequerySuggested>它會引發事件，<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。  一般而言，命令來源將會接聽此事件和查詢<xref:System.Windows.Input.RoutedCommand>藉由<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法。  大部分的命令來源將會停用本身如果命令無法執行，其命令繫結的一部分。  這個範例是當<xref:System.Windows.Controls.MenuItem>變成灰色，本身時，無法執行命令。  
  
 在某些情況下，<xref:System.Windows.Input.CommandManager>不會察覺有條件的變更會改變要執行命令的能力。  在這些情況下，您可以強制<xref:System.Windows.Input.CommandManager>引發要<xref:System.Windows.Input.CommandManager.RequerySuggested>藉由呼叫的事件<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>方法，這會進而導致<xref:System.Windows.Input.RoutedCommand>引發<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。  
  
   
  
## Examples  
 下例<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件處理常式的自訂實作從<xref:System.Windows.Input.ICommandSource>。  
  
 `this.Command` 在此範例中是<xref:System.Windows.Input.ICommandSource.Command%2A>屬性上的<xref:System.Windows.Input.ICommandSource>。  如果此命令不是`null`，此命令會轉換成<xref:System.Windows.Input.RoutedCommand>。  如果命令<xref:System.Windows.Input.RoutedCommand>，則<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>而<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果命令不是<xref:System.Windows.Input.RoutedCommand>，它會轉換為<xref:System.Windows.Input.ICommand>並<xref:System.Windows.Input.ICommand.CanExecute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法會傳回`true`，然後啟用控制項; 否則會停用控制項。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">要傳遞至處理常式的使用者定義參數。</param>
        <param name="target">要在該處開始尋找命令處理常式的項目。</param>
        <summary>在目前的命令目標上執行 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行的實際邏輯<xref:System.Windows.Input.RoutedCommand>未包含在<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法。  <xref:System.Windows.Input.RoutedCommand.Execute%2A> 會引發<xref:System.Windows.Input.CommandManager.PreviewExecuted>並<xref:System.Windows.Input.CommandManager.Executed>事件，通道和反昇到項目樹狀結構尋找的物件<xref:System.Windows.Input.CommandBinding>。  如果<xref:System.Windows.Input.CommandBinding>該<xref:System.Windows.Input.RoutedCommand>找到，則<xref:System.Windows.Input.ExecutedRoutedEventHandler>附加至<xref:System.Windows.Input.CommandBinding>呼叫。  這些處理常式提供程式設計邏輯執行<xref:System.Windows.Input.RoutedCommand>。  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted>並<xref:System.Windows.Input.CommandManager.Executed>上，會引發事件<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>上未設定<xref:System.Windows.Input.ICommandSource>，則<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>具有鍵盤焦點的項目上引發事件。  
  
   
  
## Examples  
 下列範例取自的自訂實作<xref:System.Windows.Input.ICommandSource>範例。  
  
 `this.Command` 在此範例中是 [命令] 屬性上<xref:System.Windows.Input.ICommandSource>。  如果命令不是 null，此命令會轉型為<xref:System.Windows.Input.RoutedCommand>。  如果它是<xref:System.Windows.Input.RoutedCommand>，則<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>而<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果此命令不是<xref:System.Windows.Input.RoutedCommand>，將它轉換成<xref:System.Windows.Input.ICommand>並<xref:System.Windows.Input.ICommand.Execute%2A>方法呼叫傳遞<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 也不是 <see cref="T:System.Windows.ContentElement" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個命令關聯之 <see cref="T:System.Windows.Input.InputGesture" /> 物件的集合。</summary>
        <value>輸入筆勢。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何加入新<xref:System.Windows.Input.MouseGesture>至<xref:System.Windows.Input.RoutedCommand>。  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得命令的名稱。</summary>
        <value>命令名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 參考時，就可以使用這個屬性<xref:System.Windows.Input.RoutedCommand>在[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得會以命令註冊的型別。</summary>
        <value>命令擁有者的型別。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">命令所用的資料。  如果命令不需要傳遞資料，則這個物件可設為 <see langword="null" />。</param>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />。</summary>
        <returns>如果這個命令可執行，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Input.RoutedCommand> 執行個體轉換成 <xref:System.Windows.Input.ICommand> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">命令所用的資料。  如果命令不需要傳遞資料，則這個物件可設為 <see langword="null" />。</param>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Input.RoutedCommand> 執行個體轉換成 <xref:System.Windows.Input.ICommand> 介面時，才能使用這個成員。  
  
   
  
## Examples  
 請參閱  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>