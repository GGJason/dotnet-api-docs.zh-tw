<Type Name="TraversalRequest" FullName="System.Windows.Input.TraversalRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3ae7c849b875b5a43e5d38b830ff097dbb8c435" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30656282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TraversalRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TraversalRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.TraversalRequest" />
  <TypeSignature Language="VB.NET" Value="Public Class TraversalRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraversalRequest" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示將焦點移至另一個控制項的要求。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別用做為輸入參數的<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType>方法。 <xref:System.Windows.UIElement.MoveFocus%2A>方法都有提供更實際實作的 WPF 架構層級覆寫 (<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>)，以及平行實作上<xref:System.Windows.ContentElement>和<xref:System.Windows.FrameworkContentElement>。 您通常會設定屬性<xref:System.Windows.Input.TraversalRequest>才能自訂焦的行為，當您要求，焦點會移至另一個項目。  
  
 這個類別也用於做為輸入參數的下列方法：  
  
-   <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>並實作該方法所使用的互通性 (<xref:System.Windows.Forms.Integration.WindowsFormsHost.TabInto%2A>)。  
  
-   <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A>。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Input.TraversalRequest>做為輸入執行個體<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>呼叫。  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraversalRequest (System.Windows.Input.FocusNavigationDirection focusNavigationDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.FocusNavigationDirection focusNavigationDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraversalRequest(System::Windows::Input::FocusNavigationDirection focusNavigationDirection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusNavigationDirection" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="focusNavigationDirection">焦點周遊的預計方向，以列舉型別 (Enumeration) 的值表示。</param>
        <summary>初始化 <see cref="T:System.Windows.Input.TraversalRequest" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立<xref:System.Windows.Input.TraversalRequest>做為輸入執行個體<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>呼叫。  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection" />
      </Docs>
    </Member>
    <Member MemberName="FocusNavigationDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Input.FocusNavigationDirection FocusNavigationDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.FocusNavigationDirection FocusNavigationDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusNavigationDirection As FocusNavigationDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::FocusNavigationDirection FocusNavigationDirection { System::Windows::Input::FocusNavigationDirection get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.FocusNavigationDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得周遊方向。</summary>
        <value>其中一個周遊方向的列舉型別值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性是唯讀的因為<xref:System.Windows.Input.FocusNavigationDirection>是必要的輸入的參數的<xref:System.Windows.Input.TraversalRequest>類別建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrapped">
      <MemberSignature Language="C#" Value="public bool Wrapped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrapped" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TraversalRequest.Wrapped" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrapped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrapped { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值指出焦點周遊是否已到達能夠擁有焦點之子項目的結尾。</summary>
        <value>
          如果這個周遊已到達能夠擁有焦點之子項目的結尾，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可設定焦點的項目是那些位置<xref:System.Windows.UIElement.Focusable%2A>屬性是`true`。  
  
 此參數主要用來通訊使用定位停駐點周遊是否應換行呼叫方法時<xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>， <xref:System.Windows.Forms.Integration.WindowsFormsHost.TabInto%2A>，或<xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A>。 如果您要將焦點至該物件會實作<xref:System.Windows.Interop.IKeyboardInputSink>，然後指定 true，表示<xref:System.Windows.Input.TraversalRequest.Wrapped%2A>，將會導致`true`值傳遞至<xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>實作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>