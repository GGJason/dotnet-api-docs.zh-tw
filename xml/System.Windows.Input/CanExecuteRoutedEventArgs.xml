<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b8dddd7cb69affee96be90bc72d1409afcef3d8" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39751763" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>為 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 和 <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> 路由事件提供資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，命令來源，這類<xref:System.Windows.Controls.MenuItem>，將會呼叫<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>來判斷命令可以或無法在目前命令目標上執行。  如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`false`從事件處理常式，則命令來源會停用。  例如，如果<xref:System.Windows.Controls.MenuItem>做為命令和命令的命令來源無法在目前命令目標上執行則<xref:System.Windows.Controls.MenuItem>gray 本身時。  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged>事件會通知命令來源時要執行命令的能力可能已變更。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>傳回`true`只有當命令目標是控制項。  首先，<xref:System.Windows.RoutedEventArgs.Source%2A>轉型成<xref:System.Windows.Controls.Control>。  如果<xref:System.Windows.RoutedEventArgs.Source%2A>是<xref:System.Windows.Controls.Control>，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設定為`true`; 否則它會設定為`false`。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出與這個事件相關聯的 <see cref="T:System.Windows.Input.RoutedCommand" /> 是否可以在命令目標上執行。</summary>
        <value>如果事件可以在命令目標上執行則為 <see langword="true" />，否則為 <see langword="false" />。  預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 許多命令來源，例如<xref:System.Windows.Controls.MenuItem>並<xref:System.Windows.Controls.Button>，已停用時<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>是`false`並啟用時<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>是`true`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>，只會傳回 true，如果在命令目標是控制項。  第一個<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料會轉換為<xref:System.Windows.Controls.Control>。  如果它是<xref:System.Windows.Controls.Control>，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`true`; 否則它會設定為`false`。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個事件相關聯的命令。</summary>
        <value>命令。 除非命令是自訂命令，否則這個命令通常是 <see cref="T:System.Windows.Input.RoutedCommand" />。 它沒有預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關命令的詳細資訊，請參閱 <<c0> [ 命令概觀](~/docs/framework/wpf/advanced/commanding-overview.md)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>處理多個命令。  如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>屬性等於<xref:System.Windows.Input.MediaCommands.Play%2A>命令和方法`IsPlaying`會傳回`false`，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`true`，則為<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`false`。  如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>屬性等於<xref:System.Windows.Input.MediaCommands.Stop%2A>命令和方法`IsPlaying`會傳回`true`，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`true`，則為<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設為`false`。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>決定叫用命令的輸入路由事件是否應該繼續路由處理項目樹狀。</summary>
        <value>如果路由事件應該繼續在項目樹狀目錄中傳送，則為 <see langword="true" />，否則為 <see langword="false" />。   預設值是 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得命令特有的資料。</summary>
        <value>命令資料。  預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 命令參數用來執行時傳遞給命令的特定資訊。  命令所定義的資料類型。  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> 可以是`null`。 不處理許多命令或預期命令參數。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Controls.Button>作為自訂命令的命令來源。  <xref:System.Windows.Input.ICommandSource.Command%2A>屬性<xref:System.Windows.Controls.Button>設定為 custom<xref:System.Windows.Input.RoutedCommand>呼叫`customComand`而<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>用來傳遞的值<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>屬性<xref:System.Windows.Controls.Slider>控制項。  這是藉由使用資料繫結來繫結的成就<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>至<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>屬性。  繫結運算式中的轉換子是自訂<xref:System.Windows.Data.IValueConverter>將<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>成<xref:System.Int32>之前繫結至<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>