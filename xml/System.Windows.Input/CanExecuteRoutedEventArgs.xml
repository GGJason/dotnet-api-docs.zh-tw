<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ee42842634492a0b412e4641ee5dcc557ee54b5c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648742" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1a1b5-101">為 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 和 <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> 路由事件提供資料。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1a1b5-101">Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a1b5-102">通常，命令來源，這類<xref:System.Windows.Controls.MenuItem>，會呼叫<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>來判斷命令是否可以或無法在目前命令目標上執行。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-102">Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.</span></span>  <span data-ttu-id="1a1b5-103">如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`false`從事件處理常式，命令來源會停用。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-103">If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.</span></span>  <span data-ttu-id="1a1b5-104">例如，如果<xref:System.Windows.Controls.MenuItem>做為命令和命令的命令來源無法在目前命令目標上執行則<xref:System.Windows.Controls.MenuItem>灰色外本身。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-104">For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.</span></span>  
  
 <span data-ttu-id="1a1b5-105"><xref:System.Windows.Input.ICommand.CanExecuteChanged>事件通知的命令來源時要執行的命令的能力可能已變更。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-105">The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a1b5-106">下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>傳回`true`只有當命令目標是控制項。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-106">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.</span></span>  <span data-ttu-id="1a1b5-107">首先，<xref:System.Windows.RoutedEventArgs.Source%2A>轉型成<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-107">First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="1a1b5-108">如果<xref:System.Windows.RoutedEventArgs.Source%2A>是<xref:System.Windows.Controls.Control>，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`true`，否則會設為`false`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-108">If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1a1b5-109">取得或設定值，這個值會指出與這個事件相關聯的 <see cref="T:System.Windows.Input.RoutedCommand" /> 是否可以在命令目標上執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-109">Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1a1b5-110">如果事件可以在命令目標上執行則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-110">
              <see langword="true" /> if the event can be executed on the command target; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1a1b5-111">預設值是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-111">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a1b5-112">許多命令來源，例如<xref:System.Windows.Controls.MenuItem>和<xref:System.Windows.Controls.Button>，停用當<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>是`false`和啟用<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-112">Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a1b5-113">下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>，只會傳回 true，如果命令目標控制項。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-113">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.</span></span>  <span data-ttu-id="1a1b5-114">第一個<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料會轉型為<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-114">First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="1a1b5-115">如果是<xref:System.Windows.Controls.Control>，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`true`，否則會設為`false`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-115">If it is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1a1b5-116">取得與這個事件相關聯的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-116">Gets the command associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1a1b5-117">命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-117">The command.</span>
          </span>
          <span data-ttu-id="1a1b5-118">除非命令是自訂命令，否則這個命令通常是 <see cref="T:System.Windows.Input.RoutedCommand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-118">Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          </span>
          <span data-ttu-id="1a1b5-119">它沒有預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-119">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a1b5-120">如需命令的詳細資訊，請參閱[指揮概觀](~/docs/framework/wpf/advanced/commanding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-120">For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a1b5-121">下列範例會建立<xref:System.Windows.Input.CanExecuteRoutedEventHandler>處理多個命令。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-121">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.</span></span>  <span data-ttu-id="1a1b5-122">如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>屬性等於<xref:System.Windows.Input.MediaCommands.Play%2A>命令和方法`IsPlaying`傳回`false`，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`true`，否則<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`false`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-122">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  <span data-ttu-id="1a1b5-123">如果<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>屬性等於<xref:System.Windows.Input.MediaCommands.Stop%2A>命令和方法`IsPlaying`傳回`true`，<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`true`，否則<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>設`false`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-123">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1a1b5-124">決定叫用命令的輸入路由事件是否應該繼續路由處理項目樹狀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-124">Determines whether the input routed event that invoked the command should continue to route through the element tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1a1b5-125">如果路由事件應該繼續在項目樹狀目錄中傳送，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-125">
              <see langword="true" /> if the routed event should continue to route through element tree; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1a1b5-126">預設值是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-126">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1a1b5-127">取得命令特有的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-127">Gets the command specific data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1a1b5-128">命令資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-128">The command data.</span>
          </span>
          <span data-ttu-id="1a1b5-129">預設值是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a1b5-129">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a1b5-130">命令參數用來執行時傳遞給命令的特定資訊。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-130">The command parameter is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="1a1b5-131">命令所定義的資料類型。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-131">The type of the data is defined by the command.</span></span>  
  
 <span data-ttu-id="1a1b5-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> 可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`.</span></span> <span data-ttu-id="1a1b5-133">許多命令不要處理或預期的命令參數。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-133">Many commands do not process or expect command parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a1b5-134">下列範例示範如何使用<xref:System.Windows.Controls.Button>自訂命令的命令來源。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-134">The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.</span></span>  <span data-ttu-id="1a1b5-135"><xref:System.Windows.Input.ICommandSource.Command%2A>屬性<xref:System.Windows.Controls.Button>設為 custom<xref:System.Windows.Input.RoutedCommand>呼叫`customComand`和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>用來將值傳遞<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>屬性<xref:System.Windows.Controls.Slider>控制項。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-135">The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customComand` and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.</span></span>  <span data-ttu-id="1a1b5-136">這是所要繫結中使用資料繫結的成就<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>至<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-136">This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.</span></span>  <span data-ttu-id="1a1b5-137">在繫結運算式轉換為自訂<xref:System.Windows.Data.IValueConverter>轉換<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>到<xref:System.Int32>繫結它之前<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="1a1b5-137">The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>