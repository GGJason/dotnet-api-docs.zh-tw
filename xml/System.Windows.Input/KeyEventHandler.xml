<Type Name="KeyEventHandler" FullName="System.Windows.Input.KeyEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0415dcef12ef37e806534b6e8e86129bbad885dc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37561779" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void KeyEventHandler(object sender, KeyEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed KeyEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub KeyEventHandler(sender As Object, e As KeyEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void KeyEventHandler(System::Object ^ sender, KeyEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type KeyEventHandler = delegate of obj * KeyEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">附加事件處理常式的物件。</param>
    <param name="e">事件資料。</param>
    <summary>代表將處理 <see cref="E:System.Windows.UIElement.KeyUp" /> 和 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件，以及相關的附加事件和預覽事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個委派會使用下列的附加事件使用：  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 這個委派也可搭配基底項目上的下列路由事件。 這些路由的事件轉送先前所列出的附加的事件，使其更容易存取中的一般項目模型[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 附加的事件和基底的項目路由事件共用其事件資料，而事件反昇和通道路由事件的版本也會共用事件資料。 傳送的事件路由，這可能會影響事件的處理的特性。 如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。  
  
   
  
## Examples  
 下列範例會檢查與事件相關聯的金鑰是否<xref:System.Windows.Input.Key.Return>索引鍵。  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="E:System.Windows.UIElement.TextInput" />
  </Docs>
</Type>