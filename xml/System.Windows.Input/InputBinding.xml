<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="41b30f4fa79ca9c58da7b0c7615e57d96af48a70" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32694294" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Input.InputGesture" /> 和命令之間的繫結。 命令可能是 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定使用者輸入叫用命令，藉由建立<xref:System.Windows.Input.InputBinding>。 當使用者執行指定的輸入，<xref:System.Windows.Input.ICommand>設為<xref:System.Windows.Input.InputBinding.Command%2A>執行屬性。  
  
 您可以指定<xref:System.Windows.Input.InputBinding>叫用命令所建立之繫結上的物件上定義<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性。 這可讓您定義自訂的命令，並將它與使用者輸入關聯。 如需詳細資訊，請參閱 < 範例 > 一節的第二個範例。  
  
 <xref:System.Windows.Input.InputBinding>可以藉由註冊定義上的特定物件或類別層級<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>與<xref:System.Windows.Input.CommandManager>。  
  
 <xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。 不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性的衍生類別繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。 兩個現有<xref:System.Windows.Input.InputBinding>-衍生的類別，可以在 XAML 中具現化，並可以在 XAML 中設定屬性<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。 中的一般屬性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]程式設計也就在 XAML，也需要花費一或多個<xref:System.Windows.Input.InputBinding>做為值的物件是<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>屬性。  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a>XAML 物件項目用法  
 \<*inputBindingDerivedClass…/*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 請參閱＜備註＞。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。 執行的按鍵動作時，會叫用 [開啟] 命令。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 下列範例顯示如何將繫結的自訂命令<xref:System.Windows.Input.InputBinding>物件。 這些範例會建立應用程式可讓使用者變更背景色彩，藉由執行下列動作之一：  
  
-   按一下按鈕。  
  
-   按 CTRL + C。  
  
-   以滑鼠右鍵按一下<xref:System.Windows.Controls.StackPanel>(外部<xref:System.Windows.Controls.ListBox>)。  
  
 第一個範例會建立名為類別`SimpleDelegateCommand`。 這個類別會接受委派，以便建立命令物件定義命令執行時，就會發生的動作。 `SimpleDelegateCommand` 也會定義索引鍵和滑鼠的項目指定的屬性輸入叫用的命令。 `GestureKey` 和`GestureModifier`指定鍵盤輸入。`MouseGesture`指定滑鼠輸入。  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 下列範例會建立並初始化`ColorChangeCommand`，也就是`SimpleDelegateCommand`。 此範例也會定義方法時叫用的命令，以及設定執行`GestureKey`， `GestureModifier`，和`MouseGesture`屬性。 應用程式會呼叫`InitializeCommand`程式開始時，例如內嵌的建構函式的方法<xref:System.Windows.Window>。  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 最後，下列範例會建立使用者介面。 此範例會將<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>至<xref:System.Windows.Controls.StackPanel>包含<xref:System.Windows.Controls.Button>和<xref:System.Windows.Controls.ListBox>。 當使用者選取中的項目<xref:System.Windows.Controls.ListBox>，他或她可以為選取的色彩變更背景的色彩。 在每個案例中，`CommandParameter`屬性繫結至選取的項目中<xref:System.Windows.Controls.ListBox>，而`Command`屬性繫結至`ColorChangeCommand`。 <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>， <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>，和<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>屬性繫結至對應的屬性`SimpleDelegateCommand`類別。  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.InputBinding" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>提供 <see cref="T:System.Windows.Input.InputBinding" /> 衍生類別的基底初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding> 不技術上來說是抽象類別，而預設建構函式是刻意保護的存取權。 這是進行的效果<xref:System.Windows.Input.InputBinding>XAML 的 「 抽象 」 類別。 中的現有屬性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]具有預期的型別物件的 XAML 用法<xref:System.Windows.Input.InputBinding>，不過您不能指定<xref:System.Windows.Input.InputBinding>在 XAML 中的執行個體。 相反地，您可以指定其中一個裝置特定<xref:System.Windows.Input.InputBinding>執行個體做為值，衍生類別<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果您實作自訂<see cref="T:System.Windows.Input.InputBinding" />支援 XAML 用法，請使用這個建構函式初始化基底。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">與 <c>gesture</c> 建立關聯的命令。</param>
        <param name="gesture">與 <c>command</c> 建立關聯的輸入筆勢。</param>
        <summary>使用指定的命令和輸入筆勢初始化 <see cref="T:System.Windows.Input.InputBinding" /> 類別的新執行個體 (Instance)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您是軟體開發人員使用現有的輸入繫結類別，您通常不會使用這個建構函式，即使您正在定義的自訂命令。 相反地，您會使用衍生的類別建構函式 (<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>)，或您將使用這個建構函式做為自訂類別的基底具現化。 雖然<xref:System.Windows.Input.InputBinding>類別支援不同的輸入的裝置原則，實際上您必須選擇將代表輸入繫結的裝置。 您只可以設定只有一個<xref:System.Windows.Input.InputBinding.Gesture%2A>是裝置特定的值上輸入的繫結和手勢。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式，將關聯<xref:System.Windows.Input.KeyGesture>與<xref:System.Windows.Input.RoutedCommand>。  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 或 <paramref name="gesture" /> 是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要複製的物件。</param>
        <summary>複製所指定物件之屬性的基底 (非動畫) 值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要複製的物件。</param>
        <summary>複製指定的物件目前的屬性值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與這個輸入繫結關聯的 <see cref="T:System.Windows.Input.ICommand" />。</summary>
        <value>關聯的命令。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding>類別不支援 XAML 用法，因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。 不過，衍生的類別可以公開的公用建構函式，因此，可以使用繼承自屬性<xref:System.Windows.Input.InputBinding>。 兩個現有<xref:System.Windows.Input.InputBinding>衍生的類別可以在 XAML 中具現化，可以設定屬性與 xaml<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
 <xref:System.Windows.Input.ICommand> 參考型別轉換子，可讓某些預先存在<xref:System.Windows.Input.ICommand>實作，其指定的字串形式的值。 此類型轉換行為設定這個屬性的屬性值格式。 您也可以繫結<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。 這可讓您定義自訂的命令，並將它與使用者輸入關聯。 如需詳細資訊，請參閱中的第二個範例<xref:System.Windows.Input.InputBinding>。  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
 <`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 請參閱＜備註＞。  
  
 `iCommandImplementation`  
 物件實作<xref:System.Windows.Input.ICommand>支援物件項目語法 （具有公用預設建構函式）。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>命令。 執行的按鍵動作時，會叫用 [開啟] 命令。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Input.InputBinding.Command" /> 值為 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定特定命令的命令特有資料。</summary>
        <value>命令特有資料。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>屬性用來執行時傳遞給命令的特定資訊。 命令所定義的資料類型。 許多命令不會預期命令參數。這些命令，將會忽略任何傳遞的命令參數。  
  
 如果輸入的繫結相關聯的命令是<xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>的輸入繫結會傳遞至<xref:System.Windows.Input.RoutedCommand>處理常式透過<xref:System.Windows.Input.ExecutedRoutedEventArgs>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>處理命令時，事件資料。  
  
 資料類型和用途命令參數的每個命令會以不同的方式定義，而且可以是`null`。 您可以繫結<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。 這可讓您定義自訂的命令，並將它與使用者輸入關聯。 如需詳細資訊，請參閱中的第二個範例<xref:System.Windows.Input.InputBinding>。  
  
 <xref:System.Windows.Input.InputBinding>類別不支援 XAML 用法，因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。 然而，衍生的類別可以公開的公用建構函式，因此，可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。 兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 請參閱＜備註＞。  
  
 `commandParameterString`  
 字串處理的特定命令。 字串是用於命令參數，因為它們可以輕鬆地在 XAML 中設定的一般型別。 必須是的字串格式及它的目的，請參閱特定命令的輸入繫結相關聯的文件。 許多命令不會預期參數。  
  
 `commandParameterObject`  
 特定的命令處理物件。 所有現有[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]命令會使用字串。 因此，此屬性項目語法才相關的自訂命令的案例。 為了支援此語法，`commandParameterObject`物件也必須支援物件項目語法 （必須有公用預設建構函式）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Input.InputBinding.Command" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定命令的目標項目。</summary>
        <value>命令的目標。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Windows Presentation Foundation 指揮系統，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommandSource>物件是時才適用<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。 如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上設定<xref:System.Windows.Input.ICommandSource>和對應的命令不是<xref:System.Windows.Input.RoutedCommand>，則會忽略命令目標。  
  
 當搭配<xref:System.Windows.Input.RoutedCommand>，命令目標會在其上的物件<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引發事件。 如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性未設定，具有鍵盤焦點的項目當做目標。  
  
 <xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。 不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。 兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 請參閱＜備註＞。  
  
 `bindingToTarget`  
 字串，會使用一種可傳回的物件參考現有的繫結語法具名項目。 請參閱＜備註＞。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Input.InputBinding" /> 的執行個體。</summary>
        <returns>新物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與這個輸入繫結關聯的 <see cref="T:System.Windows.Input.InputGesture" />。</summary>
        <value>關聯的筆勢。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 輸入的動作會是叫用命令的動作。 輸入軌跡中的範例[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]是<xref:System.Windows.Input.KeyGesture>和<xref:System.Windows.Input.MouseGesture>。 A<xref:System.Windows.Input.KeyGesture>結合<xref:System.Windows.Input.Key>和一組<xref:System.Windows.Input.ModifierKeys>。 A<xref:System.Windows.Input.MouseGesture>結合<xref:System.Windows.Input.MouseAction>和一組<xref:System.Windows.Input.ModifierKeys>。  
  
 <xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。 不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。 兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
 <<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/>  
  
 \-或-  
  
 <<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/>  
  
 \-或-  
  
 <`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 請參閱＜備註＞。  
  
 `inputGestureImplementation`  
 自訂的衍生類別<xref:System.Windows.Input.InputGesture>支援物件項目語法。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.RoutedCommand>。 當<xref:System.Windows.Input.KeyGesture>按下 ALT + L，<xref:System.Windows.Input.ApplicationCommands.Close%2A>叫用命令。  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要複製的物件。</param>
        <summary>使用基底 (非動畫) 屬性值，將執行個體設為所指定 <see cref="T:System.Windows.Freezable" /> 的凍結複製品。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要複製的物件。</param>
        <summary>將目前執行個體設為所指定 <see cref="T:System.Windows.Freezable" /> 的凍結複製品。 如果物件具有動畫相依性屬性，則會複製這些屬性的目前動畫值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>