<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f5c92-101">表示 <see cref="T:System.Windows.Input.InputGesture" /> 和命令之間的繫結。</span><span class="sxs-lookup"><span data-stu-id="f5c92-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="f5c92-102">命令可能是 <see cref="T:System.Windows.Input.RoutedCommand" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-103">您可以指定使用者輸入叫用命令，藉由建立<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="f5c92-104">當使用者執行指定的輸入，<xref:System.Windows.Input.ICommand>設為<xref:System.Windows.Input.InputBinding.Command%2A>執行屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="f5c92-105">您可以指定<xref:System.Windows.Input.InputBinding>叫用命令所建立之繫結上的物件上定義<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="f5c92-106">這可讓您定義自訂的命令，並將它與使用者輸入關聯。</span><span class="sxs-lookup"><span data-stu-id="f5c92-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="f5c92-107">如需詳細資訊，請參閱 < 範例 > 一節的第二個範例。</span><span class="sxs-lookup"><span data-stu-id="f5c92-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="f5c92-108"><xref:System.Windows.Input.InputBinding>可以藉由註冊定義上的特定物件或類別層級<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>與<xref:System.Windows.Input.CommandManager>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="f5c92-109"><xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="f5c92-110">不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性的衍生類別繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="f5c92-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="f5c92-111">兩個現有<xref:System.Windows.Input.InputBinding>-衍生的類別，可以在 XAML 中具現化，並可以在 XAML 中設定屬性<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-112">中的一般屬性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]程式設計也就在 XAML，也需要花費一或多個<xref:System.Windows.Input.InputBinding>做為值的物件是<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="f5c92-113">XAML 物件項目用法</span><span class="sxs-lookup"><span data-stu-id="f5c92-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="f5c92-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="f5c92-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f5c92-115">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f5c92-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="f5c92-116">在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-117">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5c92-118">下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="f5c92-119">執行的按鍵動作時，會叫用 [開啟] 命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="f5c92-120">下列範例顯示如何將繫結的自訂命令<xref:System.Windows.Input.InputBinding>物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="f5c92-121">這些範例會建立應用程式可讓使用者變更背景色彩，藉由執行下列動作之一：</span><span class="sxs-lookup"><span data-stu-id="f5c92-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="f5c92-122">按一下按鈕。</span><span class="sxs-lookup"><span data-stu-id="f5c92-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="f5c92-123">按 CTRL + C。</span><span class="sxs-lookup"><span data-stu-id="f5c92-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="f5c92-124">以滑鼠右鍵按一下<xref:System.Windows.Controls.StackPanel>(外部<xref:System.Windows.Controls.ListBox>)。</span><span class="sxs-lookup"><span data-stu-id="f5c92-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="f5c92-125">第一個範例會建立名為類別`SimpleDelegateCommand`。</span><span class="sxs-lookup"><span data-stu-id="f5c92-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="f5c92-126">這個類別會接受委派，以便建立命令物件定義命令執行時，就會發生的動作。</span><span class="sxs-lookup"><span data-stu-id="f5c92-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="f5c92-127">`SimpleDelegateCommand` 也會定義索引鍵和滑鼠的項目指定的屬性輸入叫用的命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="f5c92-128">`GestureKey` 和`GestureModifier`指定鍵盤輸入。`MouseGesture`指定滑鼠輸入。</span><span class="sxs-lookup"><span data-stu-id="f5c92-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="f5c92-129">下列範例會建立並初始化`ColorChangeCommand`，也就是`SimpleDelegateCommand`。</span><span class="sxs-lookup"><span data-stu-id="f5c92-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="f5c92-130">此範例也會定義方法時叫用的命令，以及設定執行`GestureKey`， `GestureModifier`，和`MouseGesture`屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="f5c92-131">應用程式會呼叫`InitializeCommand`程式開始時，例如內嵌的建構函式的方法<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="f5c92-132">最後，下列範例會建立使用者介面。</span><span class="sxs-lookup"><span data-stu-id="f5c92-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="f5c92-133">此範例會將<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>至<xref:System.Windows.Controls.StackPanel>包含<xref:System.Windows.Controls.Button>和<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="f5c92-134">當使用者選取中的項目<xref:System.Windows.Controls.ListBox>，他或她可以為選取的色彩變更背景的色彩。</span><span class="sxs-lookup"><span data-stu-id="f5c92-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="f5c92-135">在每個案例中，`CommandParameter`屬性繫結至選取的項目中<xref:System.Windows.Controls.ListBox>，而`Command`屬性繫結至`ColorChangeCommand`。</span><span class="sxs-lookup"><span data-stu-id="f5c92-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="f5c92-136"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>， <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>，和<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>屬性繫結至對應的屬性`SimpleDelegateCommand`類別。</span><span class="sxs-lookup"><span data-stu-id="f5c92-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5c92-137">初始化 <see cref="T:System.Windows.Input.InputBinding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f5c92-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5c92-138">提供 <see cref="T:System.Windows.Input.InputBinding" /> 衍生類別的基底初始化。</span><span class="sxs-lookup"><span data-stu-id="f5c92-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-139"><xref:System.Windows.Input.InputBinding> 不技術上來說是抽象類別，而預設建構函式是刻意保護的存取權。</span><span class="sxs-lookup"><span data-stu-id="f5c92-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="f5c92-140">這是進行的效果<xref:System.Windows.Input.InputBinding>XAML 的 「 抽象 」 類別。</span><span class="sxs-lookup"><span data-stu-id="f5c92-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="f5c92-141">中的現有屬性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]具有預期的型別物件的 XAML 用法<xref:System.Windows.Input.InputBinding>，不過您不能指定<xref:System.Windows.Input.InputBinding>在 XAML 中的執行個體。</span><span class="sxs-lookup"><span data-stu-id="f5c92-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="f5c92-142">相反地，您可以指定其中一個裝置特定<xref:System.Windows.Input.InputBinding>執行個體做為值，衍生類別<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="f5c92-143">如果您實作自訂<see cref="T:System.Windows.Input.InputBinding" />支援 XAML 用法，請使用這個建構函式初始化基底。</span><span class="sxs-lookup"><span data-stu-id="f5c92-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="f5c92-144">與 <c>gesture</c> 建立關聯的命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-144">The command to associate with <c>gesture</c>.</span></span></param>
        <param name="gesture"><span data-ttu-id="f5c92-145">與 <c>command</c> 建立關聯的輸入筆勢。</span><span class="sxs-lookup"><span data-stu-id="f5c92-145">The input gesture to associate with <c>command</c>.</span></span></param>
        <summary><span data-ttu-id="f5c92-146">使用指定的命令和輸入筆勢初始化 <see cref="T:System.Windows.Input.InputBinding" /> 類別的新執行個體 (Instance)。</span><span class="sxs-lookup"><span data-stu-id="f5c92-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-147">如果您是軟體開發人員使用現有的輸入繫結類別，您通常不會使用這個建構函式，即使您正在定義的自訂命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="f5c92-148">相反地，您會使用衍生的類別建構函式 (<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>)，或您將使用這個建構函式做為自訂類別的基底具現化。</span><span class="sxs-lookup"><span data-stu-id="f5c92-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="f5c92-149">雖然<xref:System.Windows.Input.InputBinding>類別支援不同的輸入的裝置原則，實際上您必須選擇將代表輸入繫結的裝置。</span><span class="sxs-lookup"><span data-stu-id="f5c92-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="f5c92-150">您只可以設定只有一個<xref:System.Windows.Input.InputBinding.Gesture%2A>是裝置特定的值上輸入的繫結和手勢。</span><span class="sxs-lookup"><span data-stu-id="f5c92-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5c92-151">下列範例示範如何使用這個建構函式，將關聯<xref:System.Windows.Input.KeyGesture>與<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f5c92-152"><paramref name="command" /> 或 <paramref name="gesture" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-152"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="f5c92-153">要複製的物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-153">The object to clone.</span></span></param>
        <summary><span data-ttu-id="f5c92-154">複製所指定物件之屬性的基底 (非動畫) 值。</span><span class="sxs-lookup"><span data-stu-id="f5c92-154">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="f5c92-155">要複製的物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-155">The object to clone.</span></span></param>
        <summary><span data-ttu-id="f5c92-156">複製指定的物件目前的屬性值。</span><span class="sxs-lookup"><span data-stu-id="f5c92-156">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-157">取得或設定與這個輸入繫結關聯的 <see cref="T:System.Windows.Input.ICommand" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="f5c92-158">關聯的命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-158">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-159"><xref:System.Windows.Input.InputBinding>類別不支援 XAML 用法，因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="f5c92-160">不過，衍生的類別可以公開的公用建構函式，因此，可以使用繼承自屬性<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="f5c92-161">兩個現有<xref:System.Windows.Input.InputBinding>衍生的類別可以在 XAML 中具現化，可以設定屬性與 xaml<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="f5c92-162"><xref:System.Windows.Input.ICommand> 參考型別轉換子，可讓某些預先存在<xref:System.Windows.Input.ICommand>實作，其指定的字串形式的值。</span><span class="sxs-lookup"><span data-stu-id="f5c92-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="f5c92-163">此類型轉換行為設定這個屬性的屬性值格式。</span><span class="sxs-lookup"><span data-stu-id="f5c92-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="f5c92-164">您也可以繫結<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。</span><span class="sxs-lookup"><span data-stu-id="f5c92-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="f5c92-165">這可讓您定義自訂的命令，並將它與使用者輸入關聯。</span><span class="sxs-lookup"><span data-stu-id="f5c92-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="f5c92-166">如需詳細資訊，請參閱中的第二個範例<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f5c92-167">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="f5c92-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="f5c92-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="f5c92-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f5c92-169">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="f5c92-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f5c92-170">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f5c92-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="f5c92-171">在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-172">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="f5c92-173">物件實作<xref:System.Windows.Input.ICommand>支援物件項目語法 （具有公用預設建構函式）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5c92-174">下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="f5c92-175">執行的按鍵動作時，會叫用 [開啟] 命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5c92-176"><see cref="P:System.Windows.Input.InputBinding.Command" /> 值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-177">取得或設定特定命令的命令特有資料。</span><span class="sxs-lookup"><span data-stu-id="f5c92-177">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="f5c92-178">命令特有資料。</span><span class="sxs-lookup"><span data-stu-id="f5c92-178">The command-specific data.</span></span> <span data-ttu-id="f5c92-179">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-179">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A>屬性用來執行時傳遞給命令的特定資訊。</span><span class="sxs-lookup"><span data-stu-id="f5c92-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="f5c92-181">命令所定義的資料類型。</span><span class="sxs-lookup"><span data-stu-id="f5c92-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="f5c92-182">許多命令不會預期命令參數。這些命令，將會忽略任何傳遞的命令參數。</span><span class="sxs-lookup"><span data-stu-id="f5c92-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="f5c92-183">如果輸入的繫結相關聯的命令是<xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>的輸入繫結會傳遞至<xref:System.Windows.Input.RoutedCommand>處理常式透過<xref:System.Windows.Input.ExecutedRoutedEventArgs>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>處理命令時，事件資料。</span><span class="sxs-lookup"><span data-stu-id="f5c92-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="f5c92-184">資料類型和用途命令參數的每個命令會以不同的方式定義，而且可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="f5c92-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="f5c92-185">您可以繫結<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。</span><span class="sxs-lookup"><span data-stu-id="f5c92-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="f5c92-186">這可讓您定義自訂的命令，並將它與使用者輸入關聯。</span><span class="sxs-lookup"><span data-stu-id="f5c92-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="f5c92-187">如需詳細資訊，請參閱中的第二個範例<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="f5c92-188"><xref:System.Windows.Input.InputBinding>類別不支援 XAML 用法，因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="f5c92-189">然而，衍生的類別可以公開的公用建構函式，因此，可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="f5c92-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="f5c92-190">兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f5c92-191">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="f5c92-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f5c92-192">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="f5c92-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f5c92-193">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f5c92-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="f5c92-194">在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-195">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="f5c92-196">字串處理的特定命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="f5c92-197">字串是用於命令參數，因為它們可以輕鬆地在 XAML 中設定的一般型別。</span><span class="sxs-lookup"><span data-stu-id="f5c92-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="f5c92-198">必須是的字串格式及它的目的，請參閱特定命令的輸入繫結相關聯的文件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="f5c92-199">許多命令不會預期參數。</span><span class="sxs-lookup"><span data-stu-id="f5c92-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="f5c92-200">特定的命令處理物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="f5c92-201">所有現有[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]命令會使用字串。</span><span class="sxs-lookup"><span data-stu-id="f5c92-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="f5c92-202">因此，此屬性項目語法才相關的自訂命令的案例。</span><span class="sxs-lookup"><span data-stu-id="f5c92-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="f5c92-203">為了支援此語法，`commandParameterObject`物件也必須支援物件項目語法 （必須有公用預設建構函式）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-204">識別 <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-205">識別 <see cref="P:System.Windows.Input.InputBinding.Command" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-206">取得或設定命令的目標項目。</span><span class="sxs-lookup"><span data-stu-id="f5c92-206">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="f5c92-207">命令的目標。</span><span class="sxs-lookup"><span data-stu-id="f5c92-207">The target of the command.</span></span> <span data-ttu-id="f5c92-208">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-208">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-209">在 Windows Presentation Foundation 指揮系統，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommandSource>物件是時才適用<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="f5c92-210">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上設定<xref:System.Windows.Input.ICommandSource>和對應的命令不是<xref:System.Windows.Input.RoutedCommand>，則會忽略命令目標。</span><span class="sxs-lookup"><span data-stu-id="f5c92-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="f5c92-211">當搭配<xref:System.Windows.Input.RoutedCommand>，命令目標會在其上的物件<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引發事件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="f5c92-212">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性未設定，具有鍵盤焦點的項目當做目標。</span><span class="sxs-lookup"><span data-stu-id="f5c92-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="f5c92-213"><xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="f5c92-214">不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="f5c92-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="f5c92-215">兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f5c92-216">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="f5c92-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f5c92-217">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f5c92-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="f5c92-218">在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-219">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="f5c92-220">字串，會使用一種可傳回的物件參考現有的繫結語法具名項目。</span><span class="sxs-lookup"><span data-stu-id="f5c92-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="f5c92-221">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-222">識別 <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f5c92-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5c92-223">建立 <see cref="T:System.Windows.Input.InputBinding" /> 的執行個體。</span><span class="sxs-lookup"><span data-stu-id="f5c92-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="f5c92-224">新物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-224">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5c92-225">取得或設定與這個輸入繫結關聯的 <see cref="T:System.Windows.Input.InputGesture" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="f5c92-226">關聯的筆勢。</span><span class="sxs-lookup"><span data-stu-id="f5c92-226">The associated gesture.</span></span> <span data-ttu-id="f5c92-227">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5c92-227">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5c92-228">輸入的動作會是叫用命令的動作。</span><span class="sxs-lookup"><span data-stu-id="f5c92-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="f5c92-229">輸入軌跡中的範例[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]是<xref:System.Windows.Input.KeyGesture>和<xref:System.Windows.Input.MouseGesture>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="f5c92-230">A<xref:System.Windows.Input.KeyGesture>結合<xref:System.Windows.Input.Key>和一組<xref:System.Windows.Input.ModifierKeys>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="f5c92-231">A<xref:System.Windows.Input.MouseGesture>結合<xref:System.Windows.Input.MouseAction>和一組<xref:System.Windows.Input.ModifierKeys>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="f5c92-232"><xref:System.Windows.Input.InputBinding>類別本身不支援 XAML 用法，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。</span><span class="sxs-lookup"><span data-stu-id="f5c92-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="f5c92-233">不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與 XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="f5c92-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="f5c92-234">兩個現有<xref:System.Windows.Input.InputBinding>可以在 XAML 中具現化，並可以在 XAML 中設定屬性的衍生的類別都<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f5c92-235">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="f5c92-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="f5c92-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="f5c92-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
 <span data-ttu-id="f5c92-237">\-或-</span><span class="sxs-lookup"><span data-stu-id="f5c92-237">\- or -</span></span>  
  
 <span data-ttu-id="f5c92-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="f5c92-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
 <span data-ttu-id="f5c92-239">\-或-</span><span class="sxs-lookup"><span data-stu-id="f5c92-239">\- or -</span></span>  
  
 <span data-ttu-id="f5c92-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="f5c92-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f5c92-241">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="f5c92-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f5c92-242">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f5c92-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="f5c92-243">在衍生的類別的<xref:System.Windows.Input.InputBinding>，支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="f5c92-244">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="f5c92-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="f5c92-245">自訂的衍生類別<xref:System.Windows.Input.InputGesture>支援物件項目語法。</span><span class="sxs-lookup"><span data-stu-id="f5c92-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5c92-246">下列範例示範如何使用<xref:System.Windows.Input.KeyBinding>繫結<xref:System.Windows.Input.KeyGesture>至<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="f5c92-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="f5c92-247">當<xref:System.Windows.Input.KeyGesture>按下 ALT + L，<xref:System.Windows.Input.ApplicationCommands.Close%2A>叫用命令。</span><span class="sxs-lookup"><span data-stu-id="f5c92-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="f5c92-248">要複製的物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-248">The object to clone.</span></span></param>
        <summary><span data-ttu-id="f5c92-249">使用基底 (非動畫) 屬性值，將執行個體設為所指定 <see cref="T:System.Windows.Freezable" /> 的凍結複製品。</span><span class="sxs-lookup"><span data-stu-id="f5c92-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="f5c92-250">要複製的物件。</span><span class="sxs-lookup"><span data-stu-id="f5c92-250">The object to clone.</span></span></param>
        <summary><span data-ttu-id="f5c92-251">將目前執行個體設為所指定 <see cref="T:System.Windows.Freezable" /> 的凍結複製品。</span><span class="sxs-lookup"><span data-stu-id="f5c92-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="f5c92-252">如果物件具有動畫相依性屬性，則會複製這些屬性的目前動畫值。</span><span class="sxs-lookup"><span data-stu-id="f5c92-252">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>