<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5f660970c55af6a8e8be700e1df5ac2c266d1596" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52254544" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlType&#xA;Implements IEquatable(Of XamlType)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlType : IEquatable&lt;System::Xaml::XamlType ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlType = class&#xA;    interface IEquatable&lt;XamlType&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="90974-101">報告在 .NET Framework XAML 服務實作的整體 XAML 系統中，XAML 型別的相關資訊。</span>
      <span class="sxs-lookup">
        <span data-stu-id="90974-101">Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-102">中的許多 Api<xref:System.Xaml.XamlType>類別提供 XAML 型別，其中它們報告的概念是類似於特定的 XAML 規格 [MS-XAML] 區段的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-102">Many APIs in the <xref:System.Xaml.XamlType> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</span></span>  
  
 <span data-ttu-id="90974-103"><xref:System.Xaml.XamlType> 是廣泛使用.NET Framework XAML 服務 API 中的 XAML 型別相關的報告資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-103"><xref:System.Xaml.XamlType> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</span></span> <span data-ttu-id="90974-104"><xref:System.Xaml.XamlType> 報告的資訊，您可能需要了解 XAML 型別，若要使用的執行個體，或從 XAML 節點資料流或類似的 XAML 表示中存取其成員。</span><span class="sxs-lookup"><span data-stu-id="90974-104"><xref:System.Xaml.XamlType> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</span></span> <span data-ttu-id="90974-105">其報告是類似於如何<xref:System.Type>在 CLR 類型系統，以及反映類別例如<xref:System.Reflection.MemberInfo>，提供 CLR 型別和其使用方式的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-105">Its reporting is similar to how the <xref:System.Type> in the CLR type system, together with reflection classes such as <xref:System.Reflection.MemberInfo>, provide information about a CLR type and its usage.</span></span>  
  
 <span data-ttu-id="90974-106">若要擴充的 XAML 類型系統，您可以從衍生<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="90974-106">To extend the XAML type system, you can derive from <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="90974-107">若要有效地讓執行，您可能也需要實作<xref:System.Xaml.Schema.XamlTypeInvoker>。</span><span class="sxs-lookup"><span data-stu-id="90974-107">To do so effectively, you might also need to implement a <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="90974-108"><xref:System.Xaml.Schema.XamlTypeInvoker>使通用的 XAML 類型系統，才能支援您指定的引動過程行為一部分的型別系統使用。</span><span class="sxs-lookup"><span data-stu-id="90974-108">The <xref:System.Xaml.Schema.XamlTypeInvoker> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</span></span> <span data-ttu-id="90974-109">特定的自訂<xref:System.Xaml.Schema.XamlTypeInvoker>可用來減少 CLR 型別系統中，所使用的預設值的相依性<xref:System.Xaml.XamlType>行為。</span><span class="sxs-lookup"><span data-stu-id="90974-109">The specific custom <xref:System.Xaml.Schema.XamlTypeInvoker> provides a way to reduce the dependencies on the CLR type system, which are used by the default <xref:System.Xaml.XamlType> behavior.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90974-110">初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-110">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType">
          <span data-ttu-id="90974-111">要建構之 XAML 型別的基礎 CLR <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-111">The underlying CLR <see cref="T:System.Type" /> for the XAML type to construct.</span>
          </span>
        </param>
        <param name="schemaContext">
          <span data-ttu-id="90974-112">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-112">XAML schema context for XAML readers or XAML writers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-113">根據基礎 CLR 型別資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-113">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the underlying CLR type information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90974-114">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-114">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (typeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlType(System::String ^ typeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (typeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="90974-115">要建立之型別的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-115">The name of the type to create.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="90974-116">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-116">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span>
          </span>
          <span data-ttu-id="90974-117">可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-117">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span>
          </span>
        </param>
        <param name="schemaContext">
          <span data-ttu-id="90974-118">XAML 讀取器及 XAML 寫入器的 XAML 結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-118">XAML schema context for XAML readers and XAML writers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-119">根據型別的字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-119">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on a string name for the type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-120">這是受保護的建構函式。</span><span class="sxs-lookup"><span data-stu-id="90974-120">This is a protected constructor.</span></span> <span data-ttu-id="90974-121">目前的公用衍生的類別有可用於建構這個特定的路徑。</span><span class="sxs-lookup"><span data-stu-id="90974-121">No current public derived classes exist that use this particular path for construction.</span></span> <span data-ttu-id="90974-122">為現有消費者<xref:System.Xaml.XamlType>，您必須使用其他建構函式簽章 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>， <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>，或<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 初始化<xref:System.Xaml.XamlType>物件。</span><span class="sxs-lookup"><span data-stu-id="90974-122">As a consumer of the existing <xref:System.Xaml.XamlType>, you must use the other constructor signatures (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, or <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) to initialize a <xref:System.Xaml.XamlType> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90974-123">一個或多個 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-123">One or more of <paramref name="typeName" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext, invoker As XamlTypeInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlTypeInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlTypeInvoker -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType">
          <span data-ttu-id="90974-124">要建構之 XAML 型別的基礎型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-124">The underlying type for the XAML type to construct.</span>
          </span>
        </param>
        <param name="schemaContext">
          <span data-ttu-id="90974-125">XAML 讀取器的 XAML 結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-125">XAML schema context for the XAML reader.</span>
          </span>
        </param>
        <param name="invoker">
          <span data-ttu-id="90974-126">
            <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlType" /> 的執行階段反映呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-126">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-127">根據基礎型別資訊和 <see cref="T:System.Xaml.XamlType" /> 實作，初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-127">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90974-128">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-128">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (unknownTypeNamespace As String, unknownTypeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(System::String ^ unknownTypeNamespace, System::String ^ unknownTypeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (unknownTypeNamespace, unknownTypeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace">
          <span data-ttu-id="90974-129">型別的 XAML 命名空間 (字串形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-129">The XAML namespace for the type, as a string.</span>
          </span>
        </param>
        <param name="unknownTypeName">
          <span data-ttu-id="90974-130">型別在所提供 <paramref name="unknownTypeNamespace" /> XAML 命名空間中的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-130">The name of the type in the provided <paramref name="unknownTypeNamespace" /> XAML namespace.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="90974-131">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-131">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span>
          </span>
          <span data-ttu-id="90974-132">可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-132">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span>
          </span>
        </param>
        <param name="schemaContext">
          <span data-ttu-id="90974-133">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-133">XAML schema context for XAML readers or XAML writers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-134">根據型別的 XAML 命名空間和字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-134">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the XAML namespace and a string name for the type.</span>
          </span>
          <span data-ttu-id="90974-135">這個建構函式是專門針對已知在支援型別系統和 XAML 結構描述內容中沒有支援的型別使用方式，進行分析及 XAML 節點記錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-135">This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-136">使用這個建構函式只適用於 「 不明 」 的類型對應到基礎的型別系統的 XAML 型別所在無法使用。</span><span class="sxs-lookup"><span data-stu-id="90974-136">Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</span></span> <span data-ttu-id="90974-137">這個建構函式可能不會產生結果所在<xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType>是`true`。</span><span class="sxs-lookup"><span data-stu-id="90974-137">This constructor might not produce a result where <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> is `true`.</span></span> <span data-ttu-id="90974-138">預設 reflector 邏輯相反地，報告的基礎類型<xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="90974-138">Instead, the default reflector logic reports the underlying type as <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90974-139">不過，此行為可以變更因為<xref:System.Xaml.XamlType.LookupIsUnknown%2A>覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-139">However, this behavior can change because of the <xref:System.Xaml.XamlType.LookupIsUnknown%2A> override.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90974-140">一個或多個 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-140">One or more of <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" />, or <paramref name="schemaContext" /> are <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedContentTypes As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ AllowedContentTypes { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedContentTypes : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-141">取得型別的唯讀集合，這些型別可做為這個 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-141">Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-142">可能內容型別的唯讀集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-142">A read-only collection of possible content types.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-143">可指派的類型特定的內容類型 （例如，指派給基底類型所允許的內容類型） 不會考慮多個類型，其目的為<xref:System.Xaml.XamlType.AllowedContentTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-143">Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="90974-144">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-144">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ BaseType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-145">取得這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-145">Gets the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span>
          </span>
          <span data-ttu-id="90974-146">此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-146">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-147">這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-147">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-148">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupBaseType%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-148">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupBaseType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-149">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupBaseType%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-149">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupBaseType%2A> on this type.</span></span> <span data-ttu-id="90974-150">根據預設，<xref:System.Xaml.XamlType.BaseType%2A>傳回內部的常數，表示<xref:System.Object>如果<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-150">By default, <xref:System.Xaml.XamlType.BaseType%2A> returns an internal constant that represents an <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-152">覆寫有可能 (是否惡意或其他) 變更 XAML 型別相關的報告的類型資訊，使它不再符合預期的方式基礎 CLR 型別的型別系統資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-152">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="90974-153">針對指派作業和存取的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-153">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanAssignTo(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="abstract member CanAssignTo : System.Xaml.XamlType -&gt; bool&#xA;override this.CanAssignTo : System.Xaml.XamlType -&gt; bool" Usage="xamlType.CanAssignTo xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">
          <span data-ttu-id="90974-154">要根據目前 <see cref="T:System.Xaml.XamlType" /> 檢查的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-154">The type to check against the current <see cref="T:System.Xaml.XamlType" /> .</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-155">傳回值，這個值表示在此 <see cref="T:System.Xaml.XamlType" /> 的執行個體的可指派型別清單中，是否有指定的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-155">Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" /> has the specified <see cref="T:System.Xaml.XamlType" /> in its list of assignable types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-156">如果 <paramref name="xamlType" /> 在可指派型別清單中則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-156">
              <see langword="true" /> if <paramref name="xamlType" /> is in the assignable types list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-157">雖然可指派型別並沒有參考類型的所有功能，則您可以使用它進行指派。</span><span class="sxs-lookup"><span data-stu-id="90974-157">Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</span></span> <span data-ttu-id="90974-158">比方說，您可以使用指派來進行型別相符項目屬性的值。</span><span class="sxs-lookup"><span data-stu-id="90974-158">For example, you can use assignment to make type matches for the values of a property.</span></span> <span data-ttu-id="90974-159">CLR 型別系統中，XAML 中的指派類型的概念是向上轉型的概念類似。</span><span class="sxs-lookup"><span data-stu-id="90974-159">The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</span></span> <span data-ttu-id="90974-160">比方說，在 CLR 型別系統中，每個類型都有<xref:System.Object>其可指派類型 清單中。</span><span class="sxs-lookup"><span data-stu-id="90974-160">For example, under a CLR type system, every type has an <xref:System.Object> in its assignable type list.</span></span>  
  
 <span data-ttu-id="90974-161">如果兩個的其中一個<xref:System.Xaml.XamlType>所使用的執行個體比較有<xref:System.Xaml.XamlType.IsUnknown%2A>等於`true`，這個方法有特殊未知的模式，會傳回`true`如果兩個<xref:System.Xaml.XamlType>執行個體是否相等。</span><span class="sxs-lookup"><span data-stu-id="90974-161">If one of the two <xref:System.Xaml.XamlType> instances that are used for comparison has <xref:System.Xaml.XamlType.IsUnknown%2A> equal to `true`, this method has a special Unknown mode that returns `true` if the two <xref:System.Xaml.XamlType> instances are equivalent.</span></span>  
  
 <span data-ttu-id="90974-162">預設實作會使用 CLR<xref:System.Type>從<xref:System.Xaml.XamlType.UnderlyingType%2A>這個<xref:System.Xaml.XamlType>並輸入<xref:System.Xaml.XamlType>，並呼叫<xref:System.Type.IsAssignableFrom%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-162">The default implementation uses the CLR <xref:System.Type> from <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType> and the input <xref:System.Xaml.XamlType>, and calls <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="90974-163">如果您想要不同的可指派型別判定，覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-163">Override this method if you want a different determination of assignable types.</span></span>  
  
 <span data-ttu-id="90974-164">將 null 傳遞`xamlType`不會擲回例外狀況，而且一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="90974-164">Passing a null `xamlType` does not throw an exception and always returns `false`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-166">覆寫有可能 (是否惡意或其他) 若要變更之 XAML 型別的可指派性，讓它不再符合預期的方式與基礎 CLR 型別的型別轉換行為。</span><span class="sxs-lookup"><span data-stu-id="90974-166">The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</span></span> <span data-ttu-id="90974-167">針對指派作業和存取的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-167">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstructionRequiresArguments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConstructionRequiresArguments { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ConstructionRequiresArguments : bool" Usage="System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-168">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" />、初始設定文字或其他 XAML 技術的泛型條件約束)，才能建構型別的有效執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-168">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-169">如果建構執行個體時需要一些引數值則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-169">
              <see langword="true" /> if construction of an instance requires some argument value; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-170">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-170">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-171">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-171">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentProperty As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlMember ^ ContentProperty { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentProperty : System.Xaml.XamlMember" Usage="System.Xaml.XamlType.ContentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-172">取得這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-172">Gets the <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-173">這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-173">
              <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="90974-174">如果沒有內容屬性，則可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-174">May be <see langword="null" /> if no content property exists.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-175">當使用繫結的 CLR 型別系統備份，XAML 內容屬性可指定或類型上套用<xref:System.Windows.Markup.ContentPropertyAttribute>型別定義。</span><span class="sxs-lookup"><span data-stu-id="90974-175">When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <xref:System.Windows.Markup.ContentPropertyAttribute> to the type definition.</span></span>  
  
 <span data-ttu-id="90974-176">這個屬性與`[content property]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-176">This property aligns to the `[content property]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-177">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupContentProperty%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-177">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-178">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupContentProperty%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-178">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentWrappers As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ ContentWrappers { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentWrappers : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.ContentWrappers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-179">取得型別，這些型別會在內容屬性並非嚴格型別相符 (例如強型別 <see langword="Collection&lt;T&gt;" /> 中的字串) 時，用於包裝該內容屬性的內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-179">Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <see langword="Collection&lt;T&gt;" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-180">可能內容包裝函式的唯讀集合，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-180">A read-only collection of possible content wrapper types; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-181">如果不有任何的包裝函式，以負責放寬相符的型別，這個屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-181">If there are no wrappers to account for type match loosening, this property is `null`.</span></span>  
  
 <span data-ttu-id="90974-182">評估為的型別<xref:System.Xaml.XamlType.CanAssignTo%2A>特定的內容類型不會被視為多個類型，其目的為<xref:System.Xaml.XamlType.ContentWrappers%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-182">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.ContentWrappers%2A>.</span></span>  
  
 <span data-ttu-id="90974-183">中的 CLR 繫結<xref:System.Xaml>並<xref:System.Xaml.XamlType>，可以做為類型上指定的 XAML 內容包裝函式型別<xref:System.Windows.Markup.ContentWrapperAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-183">In the CLR binding for <xref:System.Xaml> and <xref:System.Xaml.XamlType>, the XAML content wrapper type can be specified on a type as a <xref:System.Windows.Markup.ContentWrapperAttribute>.</span></span>  
  
 <span data-ttu-id="90974-184">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupContentWrappers%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-184">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentWrappers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-185">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupContentWrappers%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-185">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentWrappers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlType.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-186">取得表示此型別之延後載入轉換行為的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-186">Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that represents the deferred loading conversion behavior for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-187">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Xaml.XamlDeferringLoader" />，這個條件約束表示此型別的延後載入行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-187">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint that represents the deferred loading behavior for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-188">在 WPF 中的 XAML 範本行為是延後的載入行為的範例。</span><span class="sxs-lookup"><span data-stu-id="90974-188">XAML template behavior in WPF is an example of deferred loading behavior.</span></span>  
  
 <span data-ttu-id="90974-189">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-189">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-190">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-190">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90974-191">指出目前的物件和另一個物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-191">Indicates whether the current object is equal to another object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="90974-192">要與這個物件比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-192">The object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-193">指出目前的物件和另一個物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-193">Indicates whether the current object is equal to another object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-194">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="obj" />，否則即為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-194">
              <see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlType ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlType -&gt; bool" Usage="xamlType.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="90974-195">要與此物件進行比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-195">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-196">指出目前的物件是否等於另一個相同類型的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-196">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-197">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-197">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="member this.GetAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">
          <span data-ttu-id="90974-198">要尋找別名化成員的指示詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-198">The directive for which to find the aliased member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-199">傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-199">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-200">如果找到則為別名化成員，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-200">The aliased member, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-201">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-201">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-202">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-202">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAttachableMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllAttachableMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-203">傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-203">Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-204">集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-204">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-205">每個<xref:System.Xaml.XamlMember>傳回集合中應包含支援的值，<xref:System.Xaml.XamlMember>是可附加的成員。</span><span class="sxs-lookup"><span data-stu-id="90974-205">Each <xref:System.Xaml.XamlMember> in the returned collection should contain values that support the concept that the <xref:System.Xaml.XamlMember> is an attachable member.</span></span> <span data-ttu-id="90974-206">比方說，應該傳回成員`true`for <xref:System.Xaml.XamlMember.IsAttachable%2A>，類型<xref:System.Xaml.XamlMember.TargetType%2A>，依此類推。</span><span class="sxs-lookup"><span data-stu-id="90974-206">For example, members should return `true` for <xref:System.Xaml.XamlMember.IsAttachable%2A>, a type for <xref:System.Xaml.XamlMember.TargetType%2A>, and so on.</span></span>  
  
 <span data-ttu-id="90974-207">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-207">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-208">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-208">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-209">傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-209">Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-210">集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-210">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-211">呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupAllMembers%2A>會覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-211">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="90974-212">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-212">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-213">傳回代表此 <see cref="T:System.Xaml.XamlType" /> 之指定具名可附加成員的 <see cref="T:System.Xaml.XamlMember" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-213">Returns a <see cref="T:System.Xaml.XamlMember" /> representing a specific named attachable member of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-214">代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-214">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-215">呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupAttachableMember%2A>會覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-215">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAttachableMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-217">覆寫有可能 (是否惡意或其他) 若要變更報告的 XAML 型別的成員，讓它們不會再與預期的方式對齊<xref:System.ComponentModel.TypeDescriptor>`Get*`基礎 CLR 型別資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-217">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="90974-218">針對成員報告任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-218">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-219">傳回這個物件的雜湊程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-219">Returns the hash code for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-220">整數雜湊程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-220">An integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="90974-221">要取得之成員的名稱 (字串形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-221">The name of the member to get (as a string).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-222">從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-222">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-223">如果找到成員，則為該成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-223">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if such a member was found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-224">值`name`應為不合格。</span><span class="sxs-lookup"><span data-stu-id="90974-224">The value for `name` is expected to be unqualified.</span></span> <span data-ttu-id="90974-225">表示附加的成員的類型限定名稱應該提交到<xref:System.Xaml.XamlType.GetAttachableMember%2A>改。</span><span class="sxs-lookup"><span data-stu-id="90974-225">Type-qualified names that indicate an attached member should be submitted to <xref:System.Xaml.XamlType.GetAttachableMember%2A> instead.</span></span> <span data-ttu-id="90974-226">做為前置詞名稱不應該使用; 的成員前置詞是環境的使用方式和 XAML 類型系統不知道這樣的使用方式的內容和前置詞對應的方式。</span><span class="sxs-lookup"><span data-stu-id="90974-226">Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</span></span>  
  
 <span data-ttu-id="90974-227">呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupMember%2A>會覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-227">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-228"><xref:System.Xaml.XamlType.LookupMember%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-228"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-229">覆寫有可能 (是否惡意或其他) 若要變更報告的 XAML 型別的成員，讓它們不會再與預期的方式對齊<xref:System.ComponentModel.TypeDescriptor>`Get*`基礎 CLR 型別資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-229">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="90974-230">針對成員報告任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-230">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ GetPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="member this.GetPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.GetPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">
          <span data-ttu-id="90974-231">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-231">The count (arity) of the particular syntax or constructor mode that you want information about.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-232">如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-232">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-233">
            <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-233">A list of <see cref="T:System.Xaml.XamlType" /> values, where each <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span>
          </span>
          <span data-ttu-id="90974-234">指定這些型別時，順序必須與您為標記延伸提供標記輸入時的順序相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-234">You must specify the types in the same order when you supply markup input for the markup extension.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-235">此 API 僅適用於此<xref:System.Xaml.XamlType>代表標記延伸 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="90974-235">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="90974-236">輸入`parameterCount`不是用來要求特定的位置參數的型別。</span><span class="sxs-lookup"><span data-stu-id="90974-236">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="90974-237">這是指定套組 arity 的標記延伸使用方式。</span><span class="sxs-lookup"><span data-stu-id="90974-237">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="90974-238">標記延伸使用方式通常有多個 「 簽章 」，並使用不同的參數 arity （計數） 的位置參數來區分。</span><span class="sxs-lookup"><span data-stu-id="90974-238">Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="90974-239">不過，您可以設定結構描述內容允許重複的 arities，並且使用位置參數的類型差異化。</span><span class="sxs-lookup"><span data-stu-id="90974-239">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="90974-240">如需詳細資訊，請參閱<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-240">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="90974-241">針對特定套組 arity （計數），參數的位置和類型而有所不同。</span><span class="sxs-lookup"><span data-stu-id="90974-241">For a specific arity (count), the parameter positions and types can vary.</span></span> <span data-ttu-id="90974-242">若要取得特定套組 arity 的標記延伸使用方式的位置類型，您先呼叫<xref:System.Xaml.XamlType.GetPositionalParameters%2A>指定引數數目計數。</span><span class="sxs-lookup"><span data-stu-id="90974-242">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> specifying the arity count.</span></span> <span data-ttu-id="90974-243">然後從傳回的集合，該位置取得項目。</span><span class="sxs-lookup"><span data-stu-id="90974-243">Then get the item at that position from the returned collection.</span></span>  
  
 <span data-ttu-id="90974-244">呼叫此方法可以叫用<xref:System.Xaml.XamlType.LookupPositionalParameters%2A>會覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-244">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlType.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-245">傳回字串識別項清單，這些字串識別項會識別型別所在的 XAML 命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-245">Returns a list of string identifiers for XAML namespaces that the type is included in.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-246">字串值的清單，其中每個字串都是 XAML 命名空間的 URI 識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-246">A list of string values, where each string is the URI identifier for a XAML namespace.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-247">一般 XAML 命名空間識別項是 URI 形式的字串。</span><span class="sxs-lookup"><span data-stu-id="90974-247">Typical XAML namespace identifiers are strings in URI form.</span></span>  
  
 <span data-ttu-id="90974-248">預設實作會檢查下列命令，在順序中： 在建構中提供的 XAML 命名空間 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>只有簽章); 和命名空間所提供的結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="90974-248">The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> signature only); and the namespaces that are available from the schema context.</span></span> <span data-ttu-id="90974-249">若為每個`null`，新的清單，會產生包含單一的空字串。</span><span class="sxs-lookup"><span data-stu-id="90974-249">If these are each `null`, a new list is generated that contains a single empty string.</span></span> <span data-ttu-id="90974-250">您可以覆寫此方法以變更查閱方法。</span><span class="sxs-lookup"><span data-stu-id="90974-250">You can override this method to change the lookup methodology.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlTypeInvoker ^ Invoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.XamlType.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-251">取得與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-251">Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-252">與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-252">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-253">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，則呼叫<xref:System.Xaml.XamlType.Invoker%2A>可以叫用其中一個<xref:System.Xaml.XamlType.LookupInvoker%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="90974-253">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calling <xref:System.Xaml.XamlType.Invoker%2A> can invoke either <xref:System.Xaml.XamlType.LookupInvoker%2A> or a specific override of that method.</span></span> <span data-ttu-id="90974-254">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupInvoker%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-254">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupInvoker%2A> on this type.</span></span>  
  
 <span data-ttu-id="90974-255">如果<xref:System.Xaml.XamlType.LookupInvoker%2A>覆寫會傳回`null`，則預設實作會傳回`null`因為缺乏<xref:System.Xaml.XamlType.UnderlyingType%2A>這個<xref:System.Xaml.XamlType>，然後<xref:System.Xaml.XamlType.Invoker%2A>傳回<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="90974-255">If a <xref:System.Xaml.XamlType.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because of lack of <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType>, then <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlType.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-256">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-256">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-257">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-257">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-258">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsAmbient%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-258">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsAmbient%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-259">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsAmbient%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-259">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsAmbient%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Xaml.XamlType.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-260">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-260">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-261">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示陣列，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-261">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-262">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupCollectionKind%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-262">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-263">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupCollectionKind%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-263">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollection : bool" Usage="System.Xaml.XamlType.IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-264">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-264">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-265">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示集合，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-265">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a collection; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-266">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupCollectionKind%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-266">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-267">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupCollectionKind%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-267">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructible : bool" Usage="System.Xaml.XamlType.IsConstructible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-268">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-268">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-269">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-269">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-270">這個屬性與`[is default constructible]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-270">This property aligns to the `[is default constructible]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-271">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsConstructible%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-271">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsConstructible%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-272">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsConstructible%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-272">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsConstructible%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDictionary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDictionary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDictionary : bool" Usage="System.Xaml.XamlType.IsDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-273">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-273">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a dictionary, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-274">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示字典，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-274">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a dictionary; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-275">這個屬性與`[is dictionary]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-275">This property aligns to the `[is dictionary]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-276">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupCollectionKind%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-276">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-277">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupCollectionKind%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-277">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsGeneric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsGeneric { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGeneric : bool" Usage="System.Xaml.XamlType.IsGeneric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-278">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表泛型型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-278">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-279">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-279">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-280">這個屬性是會檢查是否有 null 值的協助程式屬性<xref:System.Xaml.XamlType.TypeArguments%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-280">This property is a helper property that checks for a null value of <xref:System.Xaml.XamlType.TypeArguments%2A>.</span></span> <span data-ttu-id="90974-281">沒有任何特定`Lookup`方法的相關<xref:System.Xaml.XamlType.IsGeneric%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-281">There is no specific `Lookup` method related to <xref:System.Xaml.XamlType.IsGeneric%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarkupExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarkupExtension { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarkupExtension : bool" Usage="System.Xaml.XamlType.IsMarkupExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-282">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-282">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-283">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-283">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-284">XAML 規格而言，此類型必須是指派給`x:MarkupExtension`來傳回`true`如<xref:System.Xaml.XamlType.IsMarkupExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-284">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="90974-285">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-285">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-286">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-286">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameScope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameScope { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameScope : bool" Usage="System.Xaml.XamlType.IsNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-287">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-287">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-288">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-288">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-289">XAML 名稱範圍會強制執行或多個屬性所使用的名稱唯一性`x:Name`  /  `[name property]`。</span><span class="sxs-lookup"><span data-stu-id="90974-289">A XAML namescope enforces the name uniqueness of the property or properties used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="90974-290">如果<xref:System.Xaml.XamlType.IsNameScope%2A>是`true`，應該存在，且應該評估從擁有 XAML 名稱範圍這種觀點來看一些機制來強制執行唯一性。</span><span class="sxs-lookup"><span data-stu-id="90974-290">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="90974-291">直到偵測到另一個 XAML 名稱範圍擁有類型的 XAML 名稱範圍然後延伸類型的內容。</span><span class="sxs-lookup"><span data-stu-id="90974-291">The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</span></span>  
  
 <span data-ttu-id="90974-292">這個屬性與`[is name scope]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-292">This property aligns to the `[is name scope]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-293">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsNameScope%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-293">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNameScope%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlType.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-294">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlType.Name" /> 以進行初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-294">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlType.Name" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-295">如果此 <see cref="T:System.Xaml.XamlType" /> 使用有效的 <see langword="true" /> 字串進行初始化則為 <see langword="xamlName" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-295">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="System.Xaml.XamlType.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-296">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-296">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-297">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-297">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-298">這個屬性與`[is nullable]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-298">This property aligns to the `[is nullable]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-299">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsNullable%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-299">If you are not using the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNullable%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Xaml.XamlType.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-300">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-300">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-301">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-301">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-302">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsPublic%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-302">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsPublic%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-304">覆寫有可能 (是否惡意或其他) 變更 XAML 類型中報告的存取權的資訊，使它不再符合預期的方式在其基礎的 CLR 類型的型別系統和存取資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-304">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</span></span> <span data-ttu-id="90974-305">針對指派作業和存取的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-305">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlType.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-306">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-306">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-307">如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-307">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an unresolvable type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-308">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsUnknown%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-308">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsUnknown%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 <span data-ttu-id="90974-309">適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，則<xref:System.Xaml.XamlType>具有`true`如<xref:System.Xaml.XamlType.IsUnknown%2A>無法寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="90974-309">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlType> that has `true` for <xref:System.Xaml.XamlType.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="90974-310">中的預設實作下<xref:System.Xaml>，則<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlType>報告`true`如<xref:System.Xaml.XamlType.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-310">Under the default implementations in <xref:System.Xaml> , the <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlType> reports `true` for <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span> <span data-ttu-id="90974-311">您不應該傳遞<xref:System.Xaml.XamlType>具有<xref:System.Xaml.XamlType.IsUnknown%2A>作為`true`除非您準備處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或您可以透過其他方式調整<xref:System.Xaml.XamlObjectWriter>行為或 XAML 節點資料流之前寫入的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="90974-311">You should not pass a <xref:System.Xaml.XamlType> that has <xref:System.Xaml.XamlType.IsUnknown%2A> as `true` unless you are prepared to handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior or the XAML node stream prior to writing the object graph.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUsableDuringInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUsableDuringInitialization { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUsableDuringInitialization : bool" Usage="System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-312">取得值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-312">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-313">如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-313">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="90974-314">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-314">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-315">由上而下是近似 XAML 處理器行為，建立物件圖形時的比喻。</span><span class="sxs-lookup"><span data-stu-id="90974-315">Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</span></span> <span data-ttu-id="90974-316">建置由上而下，為型別會具現化，附加至父代，，然後設定其屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-316">When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</span></span> <span data-ttu-id="90974-317">由上而下建構可避免多次叫用屬性變更處理常式。</span><span class="sxs-lookup"><span data-stu-id="90974-317">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="90974-318">這類處理 ripples 向上物件圖形和因此，排除多個處理常式呼叫，並提供的物件圖形的啟動逾時的效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="90974-318">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="90974-319">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-319">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-320">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-320">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhitespaceSignificantCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWhitespaceSignificantCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWhitespaceSignificantCollection : bool" Usage="System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-321">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-321">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-322">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示空白有效集合，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-322">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-323">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-323">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-324">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-324">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXData : bool" Usage="System.Xaml.XamlType.IsXData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-325">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-325">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-326">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-326">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-327">這個屬性與`[is xdata]`[MS-XAML] 規格中的資訊項目。</span><span class="sxs-lookup"><span data-stu-id="90974-327">This property aligns to the `[is xdata]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="90974-328">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsXData%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-328">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsXData%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-329">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsXData%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-329">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsXData%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ ItemType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ItemType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-330">取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-330">Gets a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-331">集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-331">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-332">這個屬性才適用，如果這個<xref:System.Xaml.XamlType>表示集合 (<xref:System.Xaml.XamlType.IsCollection%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="90974-332">This property is only relevant if this <xref:System.Xaml.XamlType> represents a collection (<xref:System.Xaml.XamlType.IsCollection%2A> is `true`).</span></span> <span data-ttu-id="90974-333">`Items`屬性是任何屬性會保留在該類型的集合或陣列中的項目。</span><span class="sxs-lookup"><span data-stu-id="90974-333">The `Items` property is whatever property holds items in that type of collection or array.</span></span>  
  
 <span data-ttu-id="90974-334">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupItemType%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-334">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupItemType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-335">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupItemType%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-335">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupItemType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ KeyType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-336">取得值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-336">Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-337">字典用法索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-337">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-338">這個屬性才適用，如果這個<xref:System.Xaml.XamlType>表示的字典 (<xref:System.Xaml.XamlType.IsDictionary%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="90974-338">This property is only relevant if this <xref:System.Xaml.XamlType> represents a dictionary (<xref:System.Xaml.XamlType.IsDictionary%2A> is `true`).</span></span>  
  
 <span data-ttu-id="90974-339">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupKeyType%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-339">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupKeyType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-340">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupKeyType%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-340">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupKeyType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="abstract member LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember&#xA;override this.LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">
          <span data-ttu-id="90974-341">要尋找別名化成員的指示詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-341">The directive for which to find the aliased member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-342">傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-342">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-343">如果找到則為別名化成員，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-343">The aliased member, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-344">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.GetAliasedProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-344">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.</span></span>  
  
 <span data-ttu-id="90974-345">預設的實作可能會傳回結果，如下列 XAML 指示詞： `Key`;`Name`;`Uid`; 和`xml:lang`。</span><span class="sxs-lookup"><span data-stu-id="90974-345">The default implementation can return results for the following XAML directives: `Key`; `Name`; `Uid`; and `xml:lang`.</span></span> <span data-ttu-id="90974-346">值，這些相依於基礎反映，並仍可能會傳回`null`如果不找到任何別名的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-346">Values for these depend on underlying reflection and might still return `null` if no aliased property is found.</span></span>  
  
 <span data-ttu-id="90974-347">如果您不會依賴預設內部的 CLR 反映，並使用中繼資料或其他技術進行報告的 XAML 類型系統資訊或類型的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-347">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllAttachableMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-348">傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-348">Returns an enumerable set that contains all attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-349">包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值的可列舉集合，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-349">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-350">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-350">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.</span></span>  
  
 <span data-ttu-id="90974-351">雖然<xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>傳回的泛型集合，這`Lookup`方法會傳回一般的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="90974-351">Although <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="90974-352">預設實作會使用內部的 CLR 反映。</span><span class="sxs-lookup"><span data-stu-id="90974-352">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="90974-353">當<xref:System.Xaml.XamlType.UnderlyingType%2A>已`null`，可以使用的預設實作<xref:System.Xaml.XamlType.BaseType%2A>、 如果有的話。</span><span class="sxs-lookup"><span data-stu-id="90974-353">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="90974-354">此行為會呼叫<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>嘗試尋找有效的基底型別和傳回遞迴`null`如果沒有有效的基底型別。</span><span class="sxs-lookup"><span data-stu-id="90974-354">This behavior calls <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="90974-355">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-355">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="90974-356">因為缺少系統或反映支援的類型無法判斷資訊的情況下，應該保留 null 傳回。</span><span class="sxs-lookup"><span data-stu-id="90974-356">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="90974-357">如果型別是否有效，並反映或其他技術可供使用，但類型沒有可附加成員，您應改為傳回空<xref:System.Collections.Generic.IEnumerable%601>設定。</span><span class="sxs-lookup"><span data-stu-id="90974-357">If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-358">傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-358">Returns an enumerable set that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-359">可舉列的集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-359">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-360">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.GetAllMembers%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-360">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllMembers%2A>.</span></span>  
  
 <span data-ttu-id="90974-361">雖然<xref:System.Xaml.XamlType.GetAllMembers%2A>傳回的泛型集合，這`Lookup`方法會傳回一般的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="90974-361">Although <xref:System.Xaml.XamlType.GetAllMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="90974-362">預設實作會使用內部的 CLR 反映。</span><span class="sxs-lookup"><span data-stu-id="90974-362">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="90974-363">案例所在<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，可以使用的預設實作<xref:System.Xaml.XamlType.BaseType%2A>、 如果有的話。</span><span class="sxs-lookup"><span data-stu-id="90974-363">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="90974-364">此行為會呼叫<xref:System.Xaml.XamlType.LookupAllMembers%2A>嘗試尋找有效的基底型別，並傳回遞迴`null`如果沒有有效的基底型別。</span><span class="sxs-lookup"><span data-stu-id="90974-364">This behavior calls <xref:System.Xaml.XamlType.LookupAllMembers%2A> recursively to attempt to find a valid base type, and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="90974-365">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-365">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="90974-366">因為缺少系統或反映支援的類型無法判斷資訊的情況下，應該保留 null 傳回。</span><span class="sxs-lookup"><span data-stu-id="90974-366">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="90974-367">如果類型是有效的反映或其他技術可;如果類型沒有成員，您應改為傳回空<xref:System.Collections.Generic.IEnumerable%601>設定。</span><span class="sxs-lookup"><span data-stu-id="90974-367">If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 <span data-ttu-id="90974-368">傳回值<xref:System.Xaml.XamlType.LookupAllMembers%2A>和<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>應該是互斥的。</span><span class="sxs-lookup"><span data-stu-id="90974-368">Return values for <xref:System.Xaml.XamlType.LookupAllMembers%2A> and <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> should be mutually exclusive.</span></span> <span data-ttu-id="90974-369">如果您有支援型別系統屬性，其中可支援的標準執行個體的使用方式，以及可附加的使用方式的情況下，該成員應該報告為兩個不同<xref:System.Xaml.XamlMember>值，並不會出現在可附加的清單，而在另一個的一個值標準的成員 清單中。</span><span class="sxs-lookup"><span data-stu-id="90974-369">If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <xref:System.Xaml.XamlMember> values, with one value appearing in the attachable list and another in the standard members list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllowedContentTypes () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupAllowedContentTypes();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupAllowedContentTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-370">傳回型別的清單，這些型別可做為此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-370">Returns a list of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-371">可能內容型別的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-371">A list of possible content types.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-372">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.AllowedContentTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-372">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="90974-373">評估為的型別<xref:System.Xaml.XamlType.CanAssignTo%2A>特定的內容類型不會被視為多個類型，其目的為<xref:System.Xaml.XamlType.AllowedContentTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-373">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="90974-374">可用的其他屬性的預設實作。 <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>， <xref:System.Xaml.XamlType.ContentProperty%2A>，或<xref:System.Xaml.XamlType.ItemType%2A>) 以取得結果。</span><span class="sxs-lookup"><span data-stu-id="90974-374">The default implementation can use other properties of <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, or <xref:System.Xaml.XamlType.ItemType%2A>) to obtain a result.</span></span> <span data-ttu-id="90974-375">`Lookup`會為上述的屬性清單也可在這項決定叫用覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-375">The `Lookup` overrides for the preceding property list can also be invoked in this determination.</span></span>  
  
 <span data-ttu-id="90974-376">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-376">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member LookupAttachableMember : string -&gt; System.Xaml.XamlMember&#xA;override this.LookupAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="90974-377">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-377">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-378">從這個 <see cref="T:System.Xaml.XamlType" /> 傳回 <see cref="T:System.Xaml.XamlMember" /> 以代表特定的具名可附加成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-378">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named attachable from this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-379">代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-379">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-380">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.GetAttachableMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-380">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAttachableMember%2A>.</span></span>  
  
 <span data-ttu-id="90974-381">預設實作會使用內部的 CLR 反映。</span><span class="sxs-lookup"><span data-stu-id="90974-381">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="90974-382">當<xref:System.Xaml.XamlType.UnderlyingType%2A>已`null`，可以使用的預設實作<xref:System.Xaml.XamlType.BaseType%2A>、 如果有的話。</span><span class="sxs-lookup"><span data-stu-id="90974-382">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="90974-383">此行為會呼叫<xref:System.Xaml.XamlType.LookupAttachableMember%2A>嘗試尋找有效的基底型別和傳回遞迴`null`如果沒有有效的基底型別。</span><span class="sxs-lookup"><span data-stu-id="90974-383">This behavior calls <xref:System.Xaml.XamlType.LookupAttachableMember%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="90974-384">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-384">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-386">覆寫有可能 (是否惡意或其他) 若要變更報告的 XAML 型別的成員，讓它們不會再與預期的方式對齊<xref:System.ComponentModel.TypeDescriptor>`Get*`基礎 CLR 型別資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-386">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="90974-387">針對成員報告任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-387">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupBaseType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupBaseType();" />
      <MemberSignature Language="F#" Value="abstract member LookupBaseType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupBaseType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupBaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-388">傳回這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-388">Returns the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span>
          </span>
          <span data-ttu-id="90974-389">此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-389">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-390">這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-390">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-391">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.BaseType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-391">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.BaseType%2A>.</span></span>  
  
 <span data-ttu-id="90974-392">預設的實作可能會傳回內部的常數，表示<xref:System.Object>如果<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-392">The default implementation might return an internal constant that represents the <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
 <span data-ttu-id="90974-393">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-393">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-395">覆寫有可能 (是否惡意或其他) 變更 XAML 型別相關的報告的類型資訊，使它不再符合預期的方式基礎 CLR 型別的型別系統資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-395">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="90974-396">針對指派作業和存取的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-396">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCollectionKind () As XamlCollectionKind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlCollectionKind LookupCollectionKind();" />
      <MemberSignature Language="F#" Value="abstract member LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind&#xA;override this.LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind" Usage="xamlType.LookupCollectionKind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-397">傳回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值，這個值宣告此 <see cref="T:System.Xaml.XamlType" /> 使用的特定集合型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-397">Returns a value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration that declares which specific collection type this <see cref="T:System.Xaml.XamlType" /> uses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-398">
            <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-398">A value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-399">內部的私用方法叫用此方法 (沒有公開`CollectionKind`或是`GetCollectionKind`API 存在於<xref:System.Xaml.XamlType>)。</span><span class="sxs-lookup"><span data-stu-id="90974-399">This method is invoked by an internal private method (no public `CollectionKind` or `GetCollectionKind` API exists on <xref:System.Xaml.XamlType>).</span></span>  
  
 <span data-ttu-id="90974-400">預設實作會使用內部的 CLR 反映。</span><span class="sxs-lookup"><span data-stu-id="90974-400">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="90974-401">案例所在<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，可以使用的預設實作<xref:System.Xaml.XamlType.BaseType%2A>、 如果有的話。</span><span class="sxs-lookup"><span data-stu-id="90974-401">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="90974-402">此行為會間接呼叫<xref:System.Xaml.XamlType.LookupCollectionKind%2A>遞迴地嘗試找不到有效的基底類型; 它會傳回<xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>如果沒有有效的基底型別。</span><span class="sxs-lookup"><span data-stu-id="90974-402">This behavior indirectly calls <xref:System.Xaml.XamlType.LookupCollectionKind%2A> recursively to attempt to find a valid base type; it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> if no valid base type exists.</span></span> <span data-ttu-id="90974-403">預設實作一般情況下，會嘗試尋找`Add`所反映之基礎類型的方法。</span><span class="sxs-lookup"><span data-stu-id="90974-403">In general, the default implementation attempts to find the `Add` method of the underlying type by reflection.</span></span> <span data-ttu-id="90974-404">如果找不到，<xref:System.Reflection.MethodInfo>的`Add`方法是足夠的資訊來判斷哪些<xref:System.Xaml.Schema.XamlCollectionKind>應該傳回值。</span><span class="sxs-lookup"><span data-stu-id="90974-404">If found, the <xref:System.Reflection.MethodInfo> of the `Add` method is enough information to determine which <xref:System.Xaml.Schema.XamlCollectionKind> value should be returned.</span></span> <span data-ttu-id="90974-405">否則它會傳回 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="90974-405">Otherwise, it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="90974-406">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-406">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupConstructionRequiresArguments () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupConstructionRequiresArguments();" />
      <MemberSignature Language="F#" Value="abstract member LookupConstructionRequiresArguments : unit -&gt; bool&#xA;override this.LookupConstructionRequiresArguments : unit -&gt; bool" Usage="xamlType.LookupConstructionRequiresArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-407">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" /> 的泛型條件約束、初始設定文字或其他 XAML 技術)，才能建構型別的有效執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-407">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-408">如果建構執行個體時需要一些引數值，則為 <see langword="true" />，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-408">
              <see langword="true" /> if construction of an instance requires some argument value; otherwise, false.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-409">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-409">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span>  
  
 <span data-ttu-id="90974-410">預設實作會傳回`false`類型視為實值型別在 CLR 型別系統。</span><span class="sxs-lookup"><span data-stu-id="90974-410">The default implementation returns `false` for types considered value types in the CLR type system.</span></span> <span data-ttu-id="90974-411">適用於其他實值型別，CLR 反映比<xref:System.Reflection.ConstructorInfo>用來判斷是否已存在的預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="90974-411">For other than value types, CLR reflection <xref:System.Reflection.ConstructorInfo> is used to determine whether a default constructor exists.</span></span>  
  
 <span data-ttu-id="90974-412">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-412">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentProperty () As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupContentProperty();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentProperty : unit -&gt; System.Xaml.XamlMember&#xA;override this.LookupContentProperty : unit -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupContentProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-413">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-413">Returns <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-414">這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-414">
              <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="90974-415">可以是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-415">May be <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-416">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.ContentProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-416">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ContentProperty%2A>.</span></span>  
  
 <span data-ttu-id="90974-417">預設實作會檢查<xref:System.Windows.Markup.ContentPropertyAttribute>的型別定義。</span><span class="sxs-lookup"><span data-stu-id="90974-417">The default implementation checks for <xref:System.Windows.Markup.ContentPropertyAttribute> on the type definition.</span></span> <span data-ttu-id="90974-418">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-418">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-419">如果這些檢查不會探索的內容類型，則預設實作會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-419">If these checks do not discover a content type, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="90974-420">如果您不會依賴預設內部的 CLR 反映，而使用中繼資料或其他技術報告的 XAML 類型系統資訊或型別的結構描述資訊，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="90974-420">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentWrappers () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupContentWrappers();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupContentWrappers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-421">取得 <see cref="T:System.Xaml.XamlType" /> 值的清單，這些值表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-421">Gets a list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-422">
            <see cref="T:System.Xaml.XamlType" /> 值的清單，表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-422">A list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-423">內容的包裝函式是類別，表示內容的集合型別時使用該集合中的類型並不是連續類型系統。</span><span class="sxs-lookup"><span data-stu-id="90974-423">A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</span></span> <span data-ttu-id="90974-424">內容的包裝函式的集合項目類型會以某種方式超出限制<xref:System.Object>或中性物件相等。</span><span class="sxs-lookup"><span data-stu-id="90974-424">The types of collection items for the content wrapper are expected to be limited in some manner beyond <xref:System.Object> or a neutral object equivalent.</span></span> <span data-ttu-id="90974-425">不過，這項限制只會強制執行的設計或目的使用該類型的屬性，而不是由型別系統。</span><span class="sxs-lookup"><span data-stu-id="90974-425">However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</span></span> <span data-ttu-id="90974-426">類型可以有一個以上的內容包裝函式。</span><span class="sxs-lookup"><span data-stu-id="90974-426">More than one content wrapper can exist on a type.</span></span>  
  
 <span data-ttu-id="90974-427">如需範例類別和從 WPF XAML 實作的案例，請參閱<xref:System.Windows.Documents.InlineCollection>。</span><span class="sxs-lookup"><span data-stu-id="90974-427">For an example class and scenario from the WPF XAML implementation, see <xref:System.Windows.Documents.InlineCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlType.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-428">在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-428">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-429">
            <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-429">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-430">覆寫此方法以提供內部反映替代的方法，若要取得 CLR 屬性的值。</span><span class="sxs-lookup"><span data-stu-id="90974-430">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="90974-431">沒有覆寫時，在內部的反映程式會使用一般 CLR 反映邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-431">In absence of an override, the internal reflector uses typical CLR reflection logic.</span></span>  
  
 <span data-ttu-id="90974-432">預設實作會傳回 `null`。</span><span class="sxs-lookup"><span data-stu-id="90974-432">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlType.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-433">傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-433">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML-declared objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-434">
            <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-434">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-435">呼叫者取得的值時，可以叫用這個方法<xref:System.Xaml.XamlType.DeferringLoader%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-435">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.DeferringLoader%2A>.</span></span> <span data-ttu-id="90974-436">覆寫這個方法，如果您想<xref:System.Xaml.XamlType.DeferringLoader%2A>傳回不同的值不會啟用預設內部反映，而且也提供自訂<xref:System.Xaml.Schema.XamlTypeInvoker>資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-436">Override this method if you want <xref:System.Xaml.XamlType.DeferringLoader%2A> to return a different value than is enabled by default internal reflection and are also providing custom <xref:System.Xaml.Schema.XamlTypeInvoker> information.</span></span>  
  
 <span data-ttu-id="90974-437">預設實作會傳回根據讀取物件<xref:System.Windows.Markup.XamlDeferLoadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-437">The default implementation returns an object on the basis of reading <xref:System.Windows.Markup.XamlDeferLoadAttribute>.</span></span> <span data-ttu-id="90974-438">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-438">It can also  check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-439">如果值是無法使用，則這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-439">If a value is unavailable, this method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlTypeInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="xamlType.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-440">傳回與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-440">Returns a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-441">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 資訊，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-441">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> information for this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-442">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.Invoker%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-442">This method can be invoked by calls to <xref:System.Xaml.XamlType.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="90974-443">預設實作不需要<xref:System.Xaml.XamlType>使用其中一種傳遞初始的建構函式會建構<xref:System.Xaml.Schema.XamlTypeInvoker>。</span><span class="sxs-lookup"><span data-stu-id="90974-443">The default implementation does not require that a <xref:System.Xaml.XamlType> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="90974-444">不過，<xref:System.Xaml.XamlType.UnderlyingType%2A>值必須存在<xref:System.Xaml.XamlType>; 否則預設實作會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-444">However, an <xref:System.Xaml.XamlType.UnderlyingType%2A> value must exist for the <xref:System.Xaml.XamlType>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="90974-445">如果您也可以建立從衍生的類別覆寫此方法<xref:System.Xaml.Schema.XamlTypeInvoker>，而且想要傳回衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-445">Override this method if you also create a derived class from <xref:System.Xaml.Schema.XamlTypeInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="90974-446">如果您傳回`null`，<xref:System.Xaml.XamlType.Invoker%2A>傳回<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>向呼叫端。</span><span class="sxs-lookup"><span data-stu-id="90974-446">If you return `null`, <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlType.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-447">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-447">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-448">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-448">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-449">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsAmbient%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-449">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsAmbient%2A>.</span></span>  
  
 <span data-ttu-id="90974-450">預設實作會使用 CLR 反映上<xref:System.Xaml.XamlType.UnderlyingType%2A>會檢查基底型別。</span><span class="sxs-lookup"><span data-stu-id="90974-450">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A> and can check the base types.</span></span> <span data-ttu-id="90974-451">此實作會檢查<xref:System.Windows.Markup.AmbientAttribute>其會套用至類別層級的相關型別定義，並傳回`true`在此情況下。</span><span class="sxs-lookup"><span data-stu-id="90974-451">This implementation checks for the <xref:System.Windows.Markup.AmbientAttribute> that is applied to the relevant type's definition at the class level and returns `true` in this case.</span></span> <span data-ttu-id="90974-452">所有其他情況下傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="90974-452">All other cases return `false`.</span></span>  
  
 <span data-ttu-id="90974-453">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsAmbient%2A>傳回不同的值，不會啟用預設內部反映。</span><span class="sxs-lookup"><span data-stu-id="90974-453">Override this method if you want <xref:System.Xaml.XamlType.IsAmbient%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsConstructible () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsConstructible();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsConstructible : unit -&gt; bool&#xA;override this.LookupIsConstructible : unit -&gt; bool" Usage="xamlType.LookupIsConstructible " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-454">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-454">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-455">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-455">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-456">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsConstructible%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-456">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsConstructible%2A>.</span></span>  
  
 <span data-ttu-id="90974-457">預設實作會使用 CLR 反映上<xref:System.Xaml.XamlType.UnderlyingType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-457">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="90974-458">類型必須是具體、 非巢狀，並已關閉。</span><span class="sxs-lookup"><span data-stu-id="90974-458">The type must be concrete, non-nested, and closed.</span></span> <span data-ttu-id="90974-459">預設實作會檢查型別是實值類型和傳回<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-459">The default implementation checks whether the type is a value type and the return of <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span> <span data-ttu-id="90974-460">Null <xref:System.Xaml.XamlType.UnderlyingType%2A>，這個方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="90974-460">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, this method returns `true`.</span></span>  
  
 <span data-ttu-id="90974-461">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsConstructible%2A>傳回不同的值，不會啟用預設內部反映。</span><span class="sxs-lookup"><span data-stu-id="90974-461">Override this method if you want <xref:System.Xaml.XamlType.IsConstructible%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsMarkupExtension () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsMarkupExtension();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsMarkupExtension : unit -&gt; bool&#xA;override this.LookupIsMarkupExtension : unit -&gt; bool" Usage="xamlType.LookupIsMarkupExtension " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-462">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-462">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-463">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-463">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-464">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsMarkupExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-464">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="90974-465">預設實作只包含此呼叫：</span><span class="sxs-lookup"><span data-stu-id="90974-465">The default implementation consists only of this call:</span></span>  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 <span data-ttu-id="90974-466">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsMarkupExtension%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-466">Override this method if you want <xref:System.Xaml.XamlType.IsMarkupExtension%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="90974-467">XAML 規格而言，此類型必須是指派給`x:MarkupExtension`來傳回`true`如<xref:System.Xaml.XamlType.IsMarkupExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-467">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNameScope () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNameScope();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNameScope : unit -&gt; bool&#xA;override this.LookupIsNameScope : unit -&gt; bool" Usage="xamlType.LookupIsNameScope " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-468">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-468">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-469">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-469">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-470">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsNameScope%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-470">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNameScope%2A>.</span></span>  
  
 <span data-ttu-id="90974-471">預設實作會製作<xref:System.Xaml.XamlType.CanAssignTo%2A>間接呼叫針對型別<xref:System.Windows.Markup.INameScope>。</span><span class="sxs-lookup"><span data-stu-id="90974-471">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="90974-472"><xref:System.Windows.Markup.INameScope> 是 WindowsBase.dll 組件中定義的介面。</span><span class="sxs-lookup"><span data-stu-id="90974-472"><xref:System.Windows.Markup.INameScope> is an interface that is defined in the assembly WindowsBase.dll.</span></span> <span data-ttu-id="90974-473">XAML 名稱範圍識別這項技術會使用這兩者的 XAML 的 WPF 和 Windows Workflow Foundation 實作。</span><span class="sxs-lookup"><span data-stu-id="90974-473">This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.</span></span>  
  
 <span data-ttu-id="90974-474">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsNameScope%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-474">Override this method if you want <xref:System.Xaml.XamlType.IsNameScope%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="90974-475">XAML 名稱範圍會強制執行或多個屬性所使用的名稱唯一性`x:Name`  /  `[name property]`。</span><span class="sxs-lookup"><span data-stu-id="90974-475">A XAML namescope enforces the name uniqueness of the property or properties that are used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="90974-476">如果<xref:System.Xaml.XamlType.IsNameScope%2A>是`true`，則應該存在，且應該評估從擁有 XAML 名稱範圍這種觀點來看一些機制來強制執行唯一性。</span><span class="sxs-lookup"><span data-stu-id="90974-476">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="90974-477">XAML 名稱範圍然後會延伸至類型的內容，直到遇到另一個 XAML 名稱範圍擁有者型別之前。</span><span class="sxs-lookup"><span data-stu-id="90974-477">The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNullable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNullable();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNullable : unit -&gt; bool&#xA;override this.LookupIsNullable : unit -&gt; bool" Usage="xamlType.LookupIsNullable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-478">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-478">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-479">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-479">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-480">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsNullable%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-480">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNullable%2A>.</span></span>  
  
 <span data-ttu-id="90974-481">預設實作會判定概念為基礎 CLR 核心程式庫可為 null，根據檢查<xref:System.Xaml.XamlType.UnderlyingType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-481">The default implementation makes a determination based on the CLR core library nullable concept, checked against <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="90974-482">Null <xref:System.Xaml.XamlType.UnderlyingType%2A>，它會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="90974-482">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="90974-483">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsNullable%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-483">Override this method if you want <xref:System.Xaml.XamlType.IsNullable%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsPublic : unit -&gt; bool&#xA;override this.LookupIsPublic : unit -&gt; bool" Usage="xamlType.LookupIsPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-484">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-484">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-485">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-485">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-486">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsPublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-486">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsPublic%2A>.</span></span>  
  
 <span data-ttu-id="90974-487">預設實作會使用針對非 null 的 CLR 反映<xref:System.Xaml.XamlType.UnderlyingType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-487">The default implementation uses CLR reflection against a non-null <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="90974-488">Null <xref:System.Xaml.XamlType.UnderlyingType%2A>，它會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="90974-488">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="90974-489">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsPublic%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-489">Override this method if you want <xref:System.Xaml.XamlType.IsPublic%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-491">覆寫有可能 (是否惡意或其他) 變更 XAML 類型中報告的存取權的資訊，使它不再符合預期的方式在其基礎的 CLR 類型的型別系統或存取資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-491">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</span></span> <span data-ttu-id="90974-492">針對指派作業和存取的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-492">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlType.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-493">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-493">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-494">如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-494">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nonresolvable type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-495">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-495">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="90974-496">預設實作都可以使用 CLR 反映。</span><span class="sxs-lookup"><span data-stu-id="90974-496">The default implementation can use CLR reflection.</span></span> <span data-ttu-id="90974-497">Null <xref:System.Xaml.XamlType.UnderlyingType%2A>，它會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="90974-497">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="90974-498">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsUnknown%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-498">Override this method if you want <xref:System.Xaml.XamlType.IsUnknown%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWhitespaceSignificantCollection () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWhitespaceSignificantCollection();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWhitespaceSignificantCollection : unit -&gt; bool&#xA;override this.LookupIsWhitespaceSignificantCollection : unit -&gt; bool" Usage="xamlType.LookupIsWhitespaceSignificantCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-499">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-499">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-500">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白字元有效集合則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-500">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-501">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-501">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</span></span>  
  
 <span data-ttu-id="90974-502">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-502">The default implementation returns a value based on reading <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</span></span> <span data-ttu-id="90974-503">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-503">It can also check the <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-504">如果值不是可用的它會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="90974-504">If a value is not available, it returns `false`.</span></span>  
  
 <span data-ttu-id="90974-505">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-505">Override this method if you want <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsXData () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsXData();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsXData : unit -&gt; bool&#xA;override this.LookupIsXData : unit -&gt; bool" Usage="xamlType.LookupIsXData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-506">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-506">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-507">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-507">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-508">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsXData%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-508">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsXData%2A>.</span></span>  
  
 <span data-ttu-id="90974-509">預設實作會製作<xref:System.Xaml.XamlType.CanAssignTo%2A>間接呼叫針對型別<xref:System.Xml.Serialization.IXmlSerializable>。</span><span class="sxs-lookup"><span data-stu-id="90974-509">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="90974-510">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsXData%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-510">Override this method if you want <xref:System.Xaml.XamlType.IsXData%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupItemType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupItemType();" />
      <MemberSignature Language="F#" Value="abstract member LookupItemType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupItemType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupItemType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-511">傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-511">Returns a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-512">集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-512">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-513">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.ItemType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-513">This method can be invoked by calls to <xref:System.Xaml.XamlType.ItemType%2A>.</span></span>  
  
 <span data-ttu-id="90974-514">預設實作都可以使用 CLR 反映概念，例如檢查`Add`方法所<xref:System.Reflection.MethodInfo>並使用<xref:System.Reflection.ParameterInfo>; 檢查<xref:System.Xaml.XamlType.IsArray%2A>; 並檢查<xref:System.Xaml.XamlType.BaseType%2A>及試用那里相同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-514">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; checking <xref:System.Xaml.XamlType.IsArray%2A>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="90974-515">如果您想要覆寫此方法<xref:System.Xaml.XamlType.ItemType%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-515">Override this method if you want <xref:System.Xaml.XamlType.ItemType%2A> to use different logic.</span></span> <span data-ttu-id="90974-516">情況<xref:System.Xaml.XamlType.LookupCollectionKind%2A>會傳回<xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>應該會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-516">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupKeyType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupKeyType();" />
      <MemberSignature Language="F#" Value="abstract member LookupKeyType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupKeyType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupKeyType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-517">傳回值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-517">Returns a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-518">字典用法之索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-518">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, or <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary,</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-519">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.KeyType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-519">This method can be invoked by calls to <xref:System.Xaml.XamlType.KeyType%2A>.</span></span>  
  
 <span data-ttu-id="90974-520">預設實作都可以使用 CLR 反映概念，例如檢查`Add`方法所<xref:System.Reflection.MethodInfo>並使用<xref:System.Reflection.ParameterInfo>; 並檢查<xref:System.Xaml.XamlType.BaseType%2A>及試用那里相同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-520">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="90974-521">如果您想要覆寫此方法<xref:System.Xaml.XamlType.KeyType%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-521">Override this method if you want <xref:System.Xaml.XamlType.KeyType%2A> to use different logic.</span></span> <span data-ttu-id="90974-522">情況<xref:System.Xaml.XamlType.LookupCollectionKind%2A>不會傳回<xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType>應該會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-522">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> does not return <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionReturnType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupMarkupExtensionReturnType();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupMarkupExtensionReturnType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-523">傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-523">Returns a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-524">標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-524">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-525">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-525">This method can be invoked by calls to <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</span></span>  
  
 <span data-ttu-id="90974-526">預設實作會傳回<xref:System.Xaml.XamlType>根據讀取<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-526">The default implementation returns a <xref:System.Xaml.XamlType> on the basis of reading <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</span></span> <span data-ttu-id="90974-527">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-527">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-528">如果值不是可用的它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-528">If a value is not available, it returns `null`.</span></span>  
  
 <span data-ttu-id="90974-529">如果您想要覆寫此方法<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-529">Override this method if you want <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMember (name As String, skipReadOnlyCheck As Boolean) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupMember(System::String ^ name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="F#" Value="abstract member LookupMember : string * bool -&gt; System.Xaml.XamlMember&#xA;override this.LookupMember : string * bool -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupMember (name, skipReadOnlyCheck)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="90974-530">要取得之成員的名稱 (字串形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-530">The name of the member to get (as a string).</span>
          </span>
        </param>
        <param name="skipReadOnlyCheck">
          <span data-ttu-id="90974-531">
            <see langword="true" /> 表示即使成員的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 是 <see langword="true" /> 值，還是傳回該成員。<see langword="false" /> 表示不傳回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-531">
              <see langword="true" /> to return a member even if that member has a <see langword="true" /> value for <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; <see langword="false" /> to not return a <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> member.</span>
          </span>
          <span data-ttu-id="90974-532">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-532">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-533">從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-533">Returns the <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-534">如果找到成員，則為成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-534">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if a member was found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-535">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.GetMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-535">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetMember%2A>.</span></span>  
  
 <span data-ttu-id="90974-536">預設實作會傳回<xref:System.Xaml.XamlType>內部的 CLR 反映和評估針對結構描述內容為基礎。</span><span class="sxs-lookup"><span data-stu-id="90974-536">The default implementation returns a <xref:System.Xaml.XamlType> based on internal CLR reflection and evaluation against the schema context.</span></span>  
  
 <span data-ttu-id="90974-537">如果您想要覆寫此方法<xref:System.Xaml.XamlType.GetMember%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-537">Override this method if you want <xref:System.Xaml.XamlType.GetMember%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90974-538"><xref:System.Xaml.XamlType.LookupMember%2A> 是虛擬的且因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="90974-538"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="90974-539">覆寫有可能 (是否惡意或其他) 若要變更報告的 XAML 型別的成員，讓它們不會再與預期的方式對齊<xref:System.ComponentModel.TypeDescriptor>`Get*`基礎 CLR 型別資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-539">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="90974-540">針對成員報告任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="90974-540">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="abstract member LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">
          <span data-ttu-id="90974-541">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-541">The count (arity) of the particular syntax or constructor mode that you want information about.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-542">如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-542">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-543">
            <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-543">A list of <see cref="T:System.Xaml.XamlType" /> values where each such <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span>
          </span>
          <span data-ttu-id="90974-544">為標記延伸提供標記輸入時，您必須以相同順序指定這些型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-544">You must specify those types in the same order when supplying markup input for the markup extension.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-545">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.GetPositionalParameters%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-545">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</span></span>  
  
 <span data-ttu-id="90974-546">預設實作會使用根據尋找建構函式，並檢查套組 arity 的內部的反映資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-546">The default implementation uses internal reflection information based on finding constructors and checking the arity.</span></span> <span data-ttu-id="90974-547">如果您想要覆寫此方法<xref:System.Xaml.XamlType.GetPositionalParameters%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-547">Override this method if you want <xref:System.Xaml.XamlType.GetPositionalParameters%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="90974-548">此 API 僅適用於此<xref:System.Xaml.XamlType>代表標記延伸 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="90974-548">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="90974-549">輸入`parameterCount`不是用來要求特定的位置參數的型別。</span><span class="sxs-lookup"><span data-stu-id="90974-549">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="90974-550">這是指定套組 arity 的標記延伸使用方式。</span><span class="sxs-lookup"><span data-stu-id="90974-550">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="90974-551">標記延伸使用方式通常有多個簽章，並使用不同的參數 arity （計數） 的位置參數來區分。</span><span class="sxs-lookup"><span data-stu-id="90974-551">Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="90974-552">不過，您可以設定結構描述內容允許重複的 arities，並且使用位置參數的類型差異化。</span><span class="sxs-lookup"><span data-stu-id="90974-552">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="90974-553">如需詳細資訊，請參閱<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-553">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="90974-554">針對特定的引數數目計數的參數位置和類型而有所不同。</span><span class="sxs-lookup"><span data-stu-id="90974-554">For a specific arity count, the parameter positions and types can vary.</span></span> <span data-ttu-id="90974-555">若要取得特定套組 arity 的標記延伸使用方式的位置類型，您先呼叫<xref:System.Xaml.XamlType.GetPositionalParameters%2A>引數數目計數。</span><span class="sxs-lookup"><span data-stu-id="90974-555">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> with the arity count.</span></span> <span data-ttu-id="90974-556">然後從傳回的集合，該位置取得項目。</span><span class="sxs-lookup"><span data-stu-id="90974-556">Then get the item at that position from the returned collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetMarkupExtensionHandler () As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ LookupSetMarkupExtensionHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;&#xA;override this.LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="xamlType.LookupSetMarkupExtensionHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-557">傳回用於標記延伸設定作業的處理常式回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-557">Returns a handler callback to use for the set operations of markup extensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-558">用於標記延伸設定作業的處理常式回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-558">A handler callback to use for the set operations of markup extensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-559">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-559">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</span></span> <span data-ttu-id="90974-560">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-560">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-561">如果值是無法使用，它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-561">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetTypeConverterHandler () As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ LookupSetTypeConverterHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;&#xA;override this.LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="xamlType.LookupSetTypeConverterHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-562">傳回用於型別轉換子設定案例的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-562">Returns a handler to use for type converter setting cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-563">用於型別轉換子設定案例的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-563">A handler to use for type converter setting cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-564">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.XamlSetTypeConverterAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-564">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</span></span> <span data-ttu-id="90974-565">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-565">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-566">如果值是無法使用，它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-566">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTrimSurroundingWhitespace () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupTrimSurroundingWhitespace();" />
      <MemberSignature Language="F#" Value="abstract member LookupTrimSurroundingWhitespace : unit -&gt; bool&#xA;override this.LookupTrimSurroundingWhitespace : unit -&gt; bool" Usage="xamlType.LookupTrimSurroundingWhitespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-567">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否應使用修剪前後空白字元的模式進行序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-567">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> should be serialized using a mode that  trims surrounding whitespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-568">如果此 <see cref="T:System.Xaml.XamlType" /> 應以修剪前後空白字元的模式進行序列化則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-568">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> should be serialized in a mode that trims surrounding whitespace; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-569">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-569">This method can be invoked by calls to <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</span></span>  
  
 <span data-ttu-id="90974-570">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-570">The default implementation returns a value based on reading <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</span></span> <span data-ttu-id="90974-571">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-571">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-572">如果值是無法使用，它會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="90974-572">If a value is unavailable, it returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlType.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-573">傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-573">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.ComponentModel.TypeConverter" /> constraint, which represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-574">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為)，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-574">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-575">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.TypeConverter%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-575">This method can be invoked by calls to <xref:System.Xaml.XamlType.TypeConverter%2A>.</span></span>  
  
 <span data-ttu-id="90974-576">預設實作會傳回值，根據讀取<xref:System.ComponentModel.TypeConverterAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-576">The default implementation returns a value based on reading <xref:System.ComponentModel.TypeConverterAttribute>.</span></span> <span data-ttu-id="90974-577">預設實作也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-577">The default implementation can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-578">它也包含特殊的列舉型別，一般的實值型別和泛型的預設轉換邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-578">It also includes special logic for default conversion of enumerations, common value types, and generics.</span></span> <span data-ttu-id="90974-579">如果值是無法使用，它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-579">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="90974-580">如果您想要覆寫此方法<xref:System.Xaml.XamlType.TypeConverter%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-580">Override this method if you want <xref:System.Xaml.XamlType.TypeConverter%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ LookupUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingType : unit -&gt; Type&#xA;override this.LookupUnderlyingType : unit -&gt; Type" Usage="xamlType.LookupUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-581">傳回做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-581">Returns the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-582">做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-582">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-583">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.UnderlyingType%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-583">This method can be invoked by calls to <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span>  
  
 <span data-ttu-id="90974-584">預設實作會傳回內部欄位。</span><span class="sxs-lookup"><span data-stu-id="90974-584">The default implementation returns an internal field.</span></span> <span data-ttu-id="90974-585">通常在建構時初始化該欄位，其值為基礎的建構函式呼叫和您所提供的資訊。</span><span class="sxs-lookup"><span data-stu-id="90974-585">That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</span></span>  
  
 <span data-ttu-id="90974-586">如果您想要覆寫此方法<xref:System.Xaml.XamlType.UnderlyingType%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-586">Override this method if you want <xref:System.Xaml.XamlType.UnderlyingType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUsableDuringInitialization () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupUsableDuringInitialization();" />
      <MemberSignature Language="F#" Value="abstract member LookupUsableDuringInitialization : unit -&gt; bool&#xA;override this.LookupUsableDuringInitialization : unit -&gt; bool" Usage="xamlType.LookupUsableDuringInitialization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-587">傳回值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-587">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-588">如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-588">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-589">由上而下是近似 XAML 處理器行為，建立物件圖形時的比喻。</span><span class="sxs-lookup"><span data-stu-id="90974-589">Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</span></span> <span data-ttu-id="90974-590">建置由上而下，為型別會具現化，附加至父代，並設定其屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-590">When built top-down, a type is instantiated, attached to the parent, and has its properties set.</span></span> <span data-ttu-id="90974-591">由上而下建構可避免多次叫用屬性變更處理常式。</span><span class="sxs-lookup"><span data-stu-id="90974-591">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="90974-592">這類處理 ripples 向上物件圖形和因此，排除多個處理常式呼叫，並提供的物件圖形的啟動逾時的效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="90974-592">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="90974-593">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-593">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</span></span>  
  
 <span data-ttu-id="90974-594">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.UsableDuringInitializationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-594">The default implementation returns a value based on reading <xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</span></span> <span data-ttu-id="90974-595">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-595">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-596">如果值是無法使用，它會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="90974-596">If a value is unavailable, it returns `false`.</span></span>  
  
 <span data-ttu-id="90974-597">如果您想要覆寫此方法<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-597">Override this method if you want <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlType.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-598">傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-598">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, which represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-599">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-599">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-600">可以叫用這個方法，藉由呼叫<xref:System.Xaml.XamlType.ValueSerializer%2A>。</span><span class="sxs-lookup"><span data-stu-id="90974-600">This method can be invoked by calls to <xref:System.Xaml.XamlType.ValueSerializer%2A>.</span></span>  
  
 <span data-ttu-id="90974-601">預設實作會傳回值，根據讀取<xref:System.Windows.Markup.ValueSerializerAttribute>。</span><span class="sxs-lookup"><span data-stu-id="90974-601">The default implementation returns a value based on reading <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span> <span data-ttu-id="90974-602">它也可以檢查<xref:System.Xaml.XamlType.BaseType%2A>如果屬性不立即的基礎型別上找到的屬性。</span><span class="sxs-lookup"><span data-stu-id="90974-602">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="90974-603">它也包含特殊邏輯的列舉型別、 常見的實值類型或泛型的預設序列化。</span><span class="sxs-lookup"><span data-stu-id="90974-603">It also includes special logic for default serialization of enumerations, common value types, or generics.</span></span> <span data-ttu-id="90974-604">如果值是無法使用，它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="90974-604">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="90974-605">如果您想要覆寫此方法<xref:System.Xaml.XamlType.ValueSerializer%2A>使用不同的邏輯。</span><span class="sxs-lookup"><span data-stu-id="90974-605">Override this method if you want <xref:System.Xaml.XamlType.ValueSerializer%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionReturnType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ MarkupExtensionReturnType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionReturnType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-606">取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-606">Gets a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-607">標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-607">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-608">這個屬性才適用，如果這個<xref:System.Xaml.XamlType>代表標記延伸 (`x:MarkupExtension`可指派型別清單中)。</span><span class="sxs-lookup"><span data-stu-id="90974-608">This property is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (`x:MarkupExtension` is in the assignable types list).</span></span>  
  
 <span data-ttu-id="90974-609">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-609">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-610">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-610">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-611">取得這個 <see cref="T:System.Xaml.XamlType" /> 表示之型別的字串名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-611">Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-612">這個 XAML 型別的字串名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-612">The string name of this XAML type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-613">這個屬性通常會取得結構描述建構的名稱 (每<xref:System.Xaml.XamlType.%23ctor%2A>簽章)，或名稱<xref:System.Type>，如果它使用適當的建構函式的 CLR 型別系統所建構。</span><span class="sxs-lookup"><span data-stu-id="90974-613">This property typically gets the schema-constructed name (per the <xref:System.Xaml.XamlType.%23ctor%2A> signature), or the name of the <xref:System.Type>, if it is constructed by using the pertinent constructor of the CLR type system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="xamlType1 = xamlType2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <span data-ttu-id="90974-614">
            <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-614">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span>
          </span>
        </param>
        <param name="xamlType2">
          <span data-ttu-id="90974-615">
            <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-615">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-616">判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有相同的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-616">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-617">如果 <see langword="true" /> 的值與 <paramref name="xamlType1" /> 的值相同，則為 <paramref name="xamlType2" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-617">
              <see langword="true" /> if the value of <paramref name="xamlType1" /> is the same as the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="System.Xaml.XamlType.op_Inequality (xamlType1, xamlType2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <span data-ttu-id="90974-618">
            <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-618">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span>
          </span>
        </param>
        <param name="xamlType2">
          <span data-ttu-id="90974-619">
            <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-619">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90974-620">判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有不同的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-620">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have different values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-621">如果 <see langword="true" /> 的值與 <paramref name="xamlType1" /> 的值不同，則為 <paramref name="xamlType2" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-621">
              <see langword="true" /> if the value of <paramref name="xamlType1" /> is different from the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-622">取得單一 XAML 命名空間，這是此 <see cref="T:System.Xaml.XamlType" /> 的主要 XAML 命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-622">Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-623">這個 XAML 型別之主要 XAML 命名空間的識別項 (字串形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-623">The identifier, as a string, of the primary XAML namespace for this XAML type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-624">此實作會提供相同的值，與呼叫<xref:System.Xaml.XamlType.GetXamlNamespaces%2A>，然後從傳回的可列舉集合中取得的第一個值的字串。</span><span class="sxs-lookup"><span data-stu-id="90974-624">This implementation provides the same value as calling <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> and then getting the first value string from the returned enumerable set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlType.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-625">取得處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-625">Gets the active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-626">用於處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-626">The active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-627"><xref:System.Xaml.XamlSchemaContext> 在建構時是必要的參數的項目<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="90974-627"><xref:System.Xaml.XamlSchemaContext> is a required parameter entry when constructing a <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90974-628">傳回這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-628">Returns a string representation of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90974-629">這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-629">A string representation of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-630"><xref:System.Xaml.XamlType>實作<xref:System.Object.ToString%2A>會傳回<xref:System.Xaml.XamlType.Name%2A>屬性<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="90974-630">The <xref:System.Xaml.XamlType> implementation of <xref:System.Object.ToString%2A> returns the <xref:System.Xaml.XamlType.Name%2A> property of the <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrimSurroundingWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimSurroundingWhitespace { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.TrimSurroundingWhitespace : bool" Usage="System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-631">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否有序列化的空白字元處理行為會修剪其內容中的前後空白字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-631">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-632">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修剪的型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-632">
              <see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a type that uses whitespace trimming; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-633">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-633">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-634">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-634">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeArguments : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.TypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-635">當這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型時，取得型別引數的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-635">Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" /> represents a generic.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-636">型別引數型別的清單，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-636">A list of type argument types; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a generic.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-637">有特定案例<xref:System.Xaml.XamlType>其中呼叫<xref:System.Xaml.XamlType.TypeArguments%2A>參數傳回的清單，其中類型是仍處於開啟狀態。</span><span class="sxs-lookup"><span data-stu-id="90974-637">There are certain scenarios for a <xref:System.Xaml.XamlType> where calling the <xref:System.Xaml.XamlType.TypeArguments%2A> parameter returns a list where the types are still open.</span></span> <span data-ttu-id="90974-638">在此情況下，一或多個傳回<xref:System.Xaml.XamlType>值將會擁有預留位置值<xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>，例如`T`，以代表泛型是仍處於開啟狀態。</span><span class="sxs-lookup"><span data-stu-id="90974-638">In this case, one or more of the returned <xref:System.Xaml.XamlType> values will have placeholder values for <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>, such as `T`, to represent that the generic is still open.</span></span> <span data-ttu-id="90974-639">如果您收到，就會發生這種情況下<xref:System.Xaml.XamlType>呼叫<xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>，而不是從 XAML 讀取器實作。</span><span class="sxs-lookup"><span data-stu-id="90974-639">This scenario can occur if you get a <xref:System.Xaml.XamlType> from a call to <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, instead of from a XAML reader implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlType.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-640">取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-640">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-641">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-641">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-642">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupTypeConverter%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-642">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupTypeConverter%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-643">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupTypeConverter%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-643">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupTypeConverter%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingType : Type" Usage="System.Xaml.XamlType.UnderlyingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-644">取得做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-644">Gets the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-645">做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-645">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlType.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90974-646">取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-646">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90974-647">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90974-647">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90974-648">如果您未使用的預設內部 CLR 反映技巧<xref:System.Xaml.XamlType>，呼叫這個屬性可以叫用<xref:System.Xaml.XamlType.LookupValueSerializer%2A>覆寫上<xref:System.Xaml.XamlType>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="90974-648">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupValueSerializer%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="90974-649">如需傳回值和其他行為的詳細資訊，請參閱文件<xref:System.Xaml.XamlType.LookupValueSerializer%2A>這個型別上。</span><span class="sxs-lookup"><span data-stu-id="90974-649">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupValueSerializer%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>