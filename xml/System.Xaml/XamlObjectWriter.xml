<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88e6ca45083f7c3b687072f89d33f2067088da08" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390855" /></Metadata><TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <TypeSignature Language="F#" Value="type XamlObjectWriter = class&#xA;    inherit XamlWriter&#xA;    interface IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a104e-101">從來源 XAML 節點資料流建立物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-101">Creates an object graph from a source XAML node stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-102">`Write`方法<xref:System.Xaml.XamlObjectWriter>實作模式以便<xref:System.Xaml.XamlObjectWriter>會使用<xref:System.Xaml.XamlWriter>藉由定義<xref:System.Xaml.XamlWriter.WriteNode%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-102">The `Write` methods of <xref:System.Xaml.XamlObjectWriter> implement a pattern so that the <xref:System.Xaml.XamlObjectWriter> uses the <xref:System.Xaml.XamlWriter> that is defined by the <xref:System.Xaml.XamlWriter.WriteNode%2A> method.</span></span> <span data-ttu-id="a104e-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> 邏輯交換器之間`Write`方法，取決於哪一個節點型別是讀取器中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="a104e-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> logic switches between the `Write` methods, depending on which node type is at the current position in the reader.</span></span>  
  
## <a name="scope"></a><span data-ttu-id="a104e-104">範圍</span><span class="sxs-lookup"><span data-stu-id="a104e-104">Scope</span></span>  
 <span data-ttu-id="a104e-105">A<xref:System.Xaml.XamlObjectWriter>有的範圍; 概念、<xref:System.Xaml.XamlObjectWriter>維護概念及其輸出物件圖形中的參考點。</span><span class="sxs-lookup"><span data-stu-id="a104e-105">A <xref:System.Xaml.XamlObjectWriter> has a concept of scope; that is, the <xref:System.Xaml.XamlObjectWriter> maintains a conceptual point of reference in its output object graph.</span></span> <span data-ttu-id="a104e-106">針對特定的範圍中，某些作業可能會有效或無效，或產生無作業結果。</span><span class="sxs-lookup"><span data-stu-id="a104e-106">For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</span></span> <span data-ttu-id="a104e-107">例如，如果您呼叫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>已初始化的物件上存在的執行個體，請撰寫指示詞，預設實作會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a104e-107">For example, if you call <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</span></span>  
  
 <span data-ttu-id="a104e-108">可能的技巧，來追蹤在自訂的範圍<xref:System.Xaml.XamlObjectWriter>對齊的堆疊或框架類別節點動作。</span><span class="sxs-lookup"><span data-stu-id="a104e-108">A possible technique for tracking scope in a custom <xref:System.Xaml.XamlObjectWriter> is to align the node actions with a stack or frame class.</span></span> <span data-ttu-id="a104e-109">框架的堆疊可以追蹤的 push 和 pop 的每個層級的物件模型的深度，進入或離開時<xref:System.Xaml.XamlObjectWriter>寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-109">The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <xref:System.Xaml.XamlObjectWriter> writes the object graph.</span></span>  
  
## <a name="callbacks"></a><span data-ttu-id="a104e-110">回呼</span><span class="sxs-lookup"><span data-stu-id="a104e-110">Callbacks</span></span>  
 <span data-ttu-id="a104e-111">若要支援中階和進階<xref:System.Xaml.XamlObjectWriter>案例中，寫入物件圖形的機制提供回呼進入點發生時<xref:System.Xaml.XamlObjectWriter>認可或即將認可特定動作。</span><span class="sxs-lookup"><span data-stu-id="a104e-111">To support intermediate and advanced <xref:System.Xaml.XamlObjectWriter> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <xref:System.Xaml.XamlObjectWriter> commits or is about to commit certain actions.</span></span> <span data-ttu-id="a104e-112">某些回呼中設定已啟用，而且不是特定的物件型別或成員正在寫入;不過，回呼資訊通常是在內容中使用，或者是在事件會透過回呼傳送的資料。</span><span class="sxs-lookup"><span data-stu-id="a104e-112">Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</span></span> <span data-ttu-id="a104e-113">以下是一份相關的回呼：</span><span class="sxs-lookup"><span data-stu-id="a104e-113">The following is a list of relevant callbacks:</span></span>  
  
-   <span data-ttu-id="a104e-114">所宣告的回呼<xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A>時的範圍會移至新的物件，並在叫用<xref:System.ComponentModel.ISupportInitialize.BeginInit%2A>針對每個建立物件的物件存留期階段。</span><span class="sxs-lookup"><span data-stu-id="a104e-114">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="a104e-115">所宣告的回呼<xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A>時的範圍會移至新的物件，並在叫用<xref:System.ComponentModel.ISupportInitialize.EndInit%2A>針對每個建立物件的物件存留期階段。</span><span class="sxs-lookup"><span data-stu-id="a104e-115">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="a104e-116">所宣告的回呼<xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A>範圍中的物件，會啟動，並發生時叫用時的第一個<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>呼叫該物件的範圍是所做的但尚未認可。</span><span class="sxs-lookup"><span data-stu-id="a104e-116">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> is invoked when the scope starts in an object, and occurs when the first <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="a104e-117">所宣告的回呼<xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A>當範圍在物件中，會啟動，且發生時叫用時<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>呼叫該物件的範圍是所做的但尚未認可。</span><span class="sxs-lookup"><span data-stu-id="a104e-117">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> is invoked when the scope starts in an object, and happens when the <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="a104e-118">所宣告的回呼<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>時叫用<xref:System.Xaml.XamlObjectWriter.OnSetValue%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-118">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is invoked when <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> is called.</span></span>  
  
## <a name="writing-dictionary-keys"></a><span data-ttu-id="a104e-119">手寫字典索引鍵</span><span class="sxs-lookup"><span data-stu-id="a104e-119">Writing Dictionary Keys</span></span>  
 <span data-ttu-id="a104e-120">預設實作<xref:System.Xaml.XamlObjectWriter>支援型別轉換的條件約束<xref:System.Collections.Generic.Dictionary%602>之前字典的內容會加入至物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-120">The default implementation of <xref:System.Xaml.XamlObjectWriter> supports type conversion on the constraints of a <xref:System.Collections.Generic.Dictionary%602> before the dictionary contents are added to the object graph.</span></span> <span data-ttu-id="a104e-121">如此一來，在泛型字典可以當成索引鍵在執行階段物件，而且符合的相關泛型`Add`和索引子行為。</span><span class="sxs-lookup"><span data-stu-id="a104e-121">In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic `Add` and indexer behavior.</span></span> <span data-ttu-id="a104e-122">不過，做為實作基底<xref:System.Xaml.XamlObjectWriter>，這項功能只存在於物件圖形建立基底<xref:System.Collections.Generic.Dictionary%602>類別，不能用於衍生類別的<xref:System.Collections.Generic.Dictionary%602>。</span><span class="sxs-lookup"><span data-stu-id="a104e-122">However, as implemented for the base <xref:System.Xaml.XamlObjectWriter>, this capability exists only for object graph creation from the base <xref:System.Collections.Generic.Dictionary%602> class and not for derived classes of <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
## <a name="checks-for-disposed"></a><span data-ttu-id="a104e-123">檢查有無處置</span><span class="sxs-lookup"><span data-stu-id="a104e-123">Checks for Disposed</span></span>  
 <span data-ttu-id="a104e-124">XAML 寫入器可能用來延後的作業，或針對 XAML 寫入器執行個體已經處置在過渡時期進行呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-124">XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</span></span> <span data-ttu-id="a104e-125">各種 Api<xref:System.Xaml.XamlObjectWriter>可能會擲回<xref:System.ObjectDisposedException>在這些情況下。</span><span class="sxs-lookup"><span data-stu-id="a104e-125">Various APIs of <xref:System.Xaml.XamlObjectWriter> might throw <xref:System.ObjectDisposedException> in these cases.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a104e-126">初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="a104e-126">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext"><span data-ttu-id="a104e-127">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="a104e-127">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span></span></param>
        <summary><span data-ttu-id="a104e-128">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="a104e-128">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using  the XAML schema context that is used by a <see cref="T:System.Xaml.XamlReader" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a104e-129"><paramref name="schemaContext" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-129"><paramref name="schemaContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext * System.Xaml.XamlObjectWriterSettings -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter (schemaContext, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext"><span data-ttu-id="a104e-130">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="a104e-130">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span></span></param>
        <param name="settings"><span data-ttu-id="a104e-131">指定 <see cref="T:System.Xaml.XamlObjectWriter" /> 行為和輸出之特定選項的設定物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-131">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" /> behavior and output.</span></span></param>
        <summary><span data-ttu-id="a104e-132">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的內容和其設定，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="a104e-132">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using the context that is used by a <see cref="T:System.Xaml.XamlReader" /> and its settings.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a104e-133"><paramref name="schemaContext" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-133"><paramref name="schemaContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlObjectWriter.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a104e-134">重設所有可能的框架並清除物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-134">Resets all possible frames and clears the object graph.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="xamlObjectWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="a104e-135"><see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-135"><see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a104e-136">釋放 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="a104e-136">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlObjectWriter" />, and optionally, releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterBeginInit : obj -&gt; unit&#xA;override this.OnAfterBeginInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterBeginInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a104e-137">要報告的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-137">The object to report on.</span></span> <span data-ttu-id="a104e-138">叫用處理常式時，會將物件封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="a104e-138">The object is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="a104e-139">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-139">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterEndInit : obj -&gt; unit&#xA;override this.OnAfterEndInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterEndInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a104e-140">要報告的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-140">The object to report on.</span></span> <span data-ttu-id="a104e-141">叫用處理常式時，值會封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="a104e-141">The value  is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="a104e-142">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-142">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterProperties : obj -&gt; unit&#xA;override this.OnAfterProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a104e-143">要報告的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-143">The object to report on.</span></span> <span data-ttu-id="a104e-144">會在叫用處理常式將其封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="a104e-144">This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="a104e-145">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-145">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeProperties : obj -&gt; unit&#xA;override this.OnBeforeProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnBeforeProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a104e-146">在叫用處理常式時要透過 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 傳遞的值。</span><span class="sxs-lookup"><span data-stu-id="a104e-146">The value to pass through <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="a104e-147">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-147">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool&#xA;override this.OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool" Usage="xamlObjectWriter.OnSetValue (eventSender, member, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender"><span data-ttu-id="a104e-148">要向處理常式報告做為來源的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-148">The object to report as the source to the handler.</span></span></param>
        <param name="member"><span data-ttu-id="a104e-149">要設定之屬性的名稱，這個名稱會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</span><span class="sxs-lookup"><span data-stu-id="a104e-149">The name of the property to set, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span></span></param>
        <param name="value"><span data-ttu-id="a104e-150">要提供給由 <paramref name="property" /> 命名之屬性的值。</span><span class="sxs-lookup"><span data-stu-id="a104e-150">The value to provide for the property that is named by <paramref name="property" />.</span></span> <span data-ttu-id="a104e-151">這個值會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</span><span class="sxs-lookup"><span data-stu-id="a104e-151">The value is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="a104e-152">叫用與這個寫入器之 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 參考方法 (只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件資料中的 <paramref name="handled" /> 不是 <see langword="true" /> 即可)。</span><span class="sxs-lookup"><span data-stu-id="a104e-152">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this writer, as long as <paramref name="handled" /> in <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> event data is not <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="a104e-153">任何相關聯處理常式所設定的布林值，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-153">A Boolean value that is set by any associated handler; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-154">如果`SetValue`這個 XAML 寫入器的作業有關聯的處理常式 (<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>中宣告<xref:System.Xaml.XamlObjectWriterSettings>)，這個方法建立新<xref:System.Windows.Markup.XamlSetValueEventArgs>並將它們傳遞至處理常式。</span><span class="sxs-lookup"><span data-stu-id="a104e-154">If the `SetValue` operation for this XAML writer has an associated handler (a <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is declared in <xref:System.Xaml.XamlObjectWriterSettings>), this method creates new <xref:System.Windows.Markup.XamlSetValueEventArgs> and passes them to the handler.</span></span> <span data-ttu-id="a104e-155">傳回的值由讀取設定<xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A>事件資料會傳遞的值。</span><span class="sxs-lookup"><span data-stu-id="a104e-155">The return value is set by reading the <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> value that is passed through the event data.</span></span> <span data-ttu-id="a104e-156">如果處理常式不存在，而且這個方法會叫用，則呼叫會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="a104e-156">If no handler exists and this method is invoked, the call returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a104e-157">取得最後一個寫入的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-157">Gets the last object that was written.</span></span> <span data-ttu-id="a104e-158">通常只有在節點資料流位在結尾且物件圖形完成時才會加以呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-158">Typically only called when the node stream is at its end and the object graph is complete.</span></span></summary>
        <value><span data-ttu-id="a104e-159">最後一個寫入的物件，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-159">The last object written, or <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-160">最常見的使用方式的<xref:System.Xaml.XamlObjectWriter.Result%2A>是已知節點資料流為在其結尾，且物件圖形完成時，才呼叫它。</span><span class="sxs-lookup"><span data-stu-id="a104e-160">The most typical usage of <xref:System.Xaml.XamlObjectWriter.Result%2A> is to call it only when the node stream is known to be at its end, and the object graph is complete.</span></span> <span data-ttu-id="a104e-161">否則，物件圖形可能會不完整，，並不適用於大部分的平台案例。</span><span class="sxs-lookup"><span data-stu-id="a104e-161">Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</span></span>  
  
 <span data-ttu-id="a104e-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> 如果在呼叫之後立即呼叫通常只包含非 null 值<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>，而且目前的範圍位於其中的物件會提供值的成員。</span><span class="sxs-lookup"><span data-stu-id="a104e-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> typically only contains a non-null value if it is called immediately after a call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, and if the current scope is in the member where the object provides a value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootNameScope : System.Windows.Markup.INameScope" Usage="System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a104e-163">取得 <see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護 XAML 物件寫入器之絕對節點根的 XAML 名稱範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-163">Gets the <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</span></span></summary>
        <value><span data-ttu-id="a104e-164"><see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護物件寫入器目前根的 XAML 名稱範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-164">The <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the current root of the object writer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-165">這個屬性的值可能來自物件寫入器內容。</span><span class="sxs-lookup"><span data-stu-id="a104e-165">The value of this property may come from the object writer context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a104e-166">取得作用中 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="a104e-166">Gets the active XAML schema context.</span></span></summary>
        <value><span data-ttu-id="a104e-167">XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="a104e-167">The XAML schema context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-168">XAML 結構描述內容是最實用的物件撰寫案例所需的資訊來源。</span><span class="sxs-lookup"><span data-stu-id="a104e-168">XAML schema context is a necessary information source for most practical object-writing scenarios.</span></span> <span data-ttu-id="a104e-169">XAML 結構描述內容會影響備份類型的型別對應，並保留支援型別所在的組件的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="a104e-169">The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</span></span> <span data-ttu-id="a104e-170">預設 XAML 結構描述內容為基礎 CLR 型別對應規則。</span><span class="sxs-lookup"><span data-stu-id="a104e-170">The default XAML schema context is based on CLR type-mapping rules.</span></span> <span data-ttu-id="a104e-171">架構通常會提供自己的 XAML 結構描述內容，以確保組件載入機制相符架構的程式設計 amd 應用程式模型。</span><span class="sxs-lookup"><span data-stu-id="a104e-171">Frameworks typically provide their own XAML schema context in order to assure that the assembly-loading mechanisms match the framework's programming amd application models.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberSignature Language="F#" Value="abstract member SetLineInfo : int * int -&gt; unit&#xA;override this.SetLineInfo : int * int -&gt; unit" Usage="xamlObjectWriter.SetLineInfo (lineNumber, linePosition)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="a104e-172">來自讀取器的行號。</span><span class="sxs-lookup"><span data-stu-id="a104e-172">The line number from the reader.</span></span></param>
        <param name="linePosition"><span data-ttu-id="a104e-173">來自讀取器的行位置。</span><span class="sxs-lookup"><span data-stu-id="a104e-173">The line position from the reader.</span></span></param>
        <summary><span data-ttu-id="a104e-174">實作 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，並提供例外狀況的行資訊。</span><span class="sxs-lookup"><span data-stu-id="a104e-174">Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> and provides line information for exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-175">此服務方法的目的不是直接從您的程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-175">This service method is not intended to be called directly from your code.</span></span> <span data-ttu-id="a104e-176">不過，如果您要建立從衍生的類別<xref:System.Xaml.XamlObjectWriter>並預期要報告的內容位置的行號是無法使用或不實用，這個方法可能會被呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-176">However, if you are creating a derived class from <xref:System.Xaml.XamlObjectWriter> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldProvideLineInfo : bool" Usage="System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a104e-177">取得值，這個值會報告行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法)。</span><span class="sxs-lookup"><span data-stu-id="a104e-177">Gets a value that reports whether a line information service should provide values and therefore, should also call the <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> method when it is relevant.</span></span></summary>
        <value><span data-ttu-id="a104e-178">如果寫入器會使用行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-178"><see langword="true" /> if line information is used by the writer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-179">這個實作一律會傳回 `true`。</span><span class="sxs-lookup"><span data-stu-id="a104e-179">This implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberSignature Language="F#" Value="override this.WriteEndMember : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a104e-180">關閉目前成員範圍，並且可能在關閉成員範圍期間寫入其值。</span><span class="sxs-lookup"><span data-stu-id="a104e-180">Closes the current member scope, and may write the value of the member scope while it closes.</span></span> <span data-ttu-id="a104e-181">新的範圍會成為成員的父物件範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-181">The new scope becomes the parent object scope of the member.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="a104e-182">無法從在這次呼叫和前一次 <see langword="StartMember" /> 之間遇到的值節點建立成員值。</span><span class="sxs-lookup"><span data-stu-id="a104e-182">Failed to create member value from a value node that is encountered between this call and a previous <see langword="StartMember" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberSignature Language="F#" Value="override this.WriteEndObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a104e-183">關閉寫入器中的目前物件範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-183">Closes the current object scope in the writer.</span></span> <span data-ttu-id="a104e-184">新的物件範圍會成為父成員範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-184">The new object scope becomes the parent member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-185">如果這個`EndObject`位置範圍關閉的根物件，新的物件範圍會成為根範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-185">If this `EndObject` position scope is closing the root object, the new object scope becomes the root scope.</span></span>  
  
 <span data-ttu-id="a104e-186">若要呼叫<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>可能尚未建立物件因為該物件成員可能需要的初始化路徑，例如初始設定文字或初始化參數。</span><span class="sxs-lookup"><span data-stu-id="a104e-186">The call to <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</span></span> <span data-ttu-id="a104e-187">在這些情況下，呼叫<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>實際寫入的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-187">For these cases, the call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> actually writes the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberSignature Language="F#" Value="override this.WriteGetObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a104e-188">當指定之物件為父屬性的預設值或隱含值時，將概念 <see langword="StartObject" /> 寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-188">Writes the conceptual <see langword="StartObject" /> into the object graph when the specified object is a default or implicit value of the parent property.</span></span> <span data-ttu-id="a104e-189">隱含值來自從 XAML 結構描述內容及支援型別資訊取得的資訊，而非指定為在輸入 XAML 節點集中的物件值。</span><span class="sxs-lookup"><span data-stu-id="a104e-189">The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-190">撰寫之間的差異<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>和寫入與<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>產生的物件圖形中可以看到。</span><span class="sxs-lookup"><span data-stu-id="a104e-190">The difference between writing with <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> and writing with <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> can be seen in the resulting object graph.</span></span> <span data-ttu-id="a104e-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 不會建構類型的執行個體，因為<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>API 有任何的資訊來通知功能建構的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> does not construct an instance of a type because the <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API has no information to inform the object graph of what to construct.</span></span> <span data-ttu-id="a104e-192">初始化 parent 屬性; 時，相反地，建立物件因此<xref:System.Xaml.XamlObjectWriter>不需要建構它。</span><span class="sxs-lookup"><span data-stu-id="a104e-192">Instead, the object was created when the parent property was initialized; so a <xref:System.Xaml.XamlObjectWriter> does not need to construct it.</span></span> <span data-ttu-id="a104e-193">相反地，<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>指定應建構該類型的執行個體，而插入的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="a104e-193">In contrast, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> specifies that an instance of that type should be constructed and inserted into the object graph.</span></span>  
  
 <span data-ttu-id="a104e-194">如果您將 XAML 節點資料流視為一系列的框架<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>平衡傳輸至<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-194">If you think of the XAML node stream as a series of frames, a <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> is balanced to a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call.</span></span> <span data-ttu-id="a104e-195">因此，數目<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>加上<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>呼叫的數目應該相等<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>呼叫做為 XAML 節點資料流的完整物件撰寫評估的一部分。</span><span class="sxs-lookup"><span data-stu-id="a104e-195">Therefore, the number of <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> plus <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> calls should equal the number of <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> calls as part of a complete object-writing evaluation of the XAML node stream.</span></span>  
  
 <span data-ttu-id="a104e-196">概念`StartObject`放置隱含的物件，物件圖形中為必要，因為雖然本身的物件值是隱含的預設值，該物件可能仍有需要可寫入基礎 XAML 節點資料流的成員。</span><span class="sxs-lookup"><span data-stu-id="a104e-196">The conceptual `StartObject` position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</span></span> <span data-ttu-id="a104e-197">典型的案例，這種情況是當<xref:System.Xaml.XamlObjectWriter>寫入成員節點的集合屬性，以及集合初始設定是隱含建立擁有集合屬性的物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-197">A typical scenario where this occurs is when <xref:System.Xaml.XamlObjectWriter> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="override this.WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlObjectWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration"><span data-ttu-id="a104e-198">要寫入的命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="a104e-198">The namespace declaration to write.</span></span></param>
        <summary><span data-ttu-id="a104e-199">定義會套用至下一個物件範圍或成員範圍的命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="a104e-199">Defines a namespace declaration that applies to the next object scope or member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a104e-200">如果目前的範圍是根範圍，物件範圍或成員範圍可寫入的命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="a104e-200">A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</span></span> <span data-ttu-id="a104e-201">不過， <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> lze volat pouze 之前呼叫下列其中之一： <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>，或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="a104e-201">However, <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> can only be called immediately before a call to one of the following: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>.</span></span> <span data-ttu-id="a104e-202">連續<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>案例是以相同的節點中寫入多個命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="a104e-202">The consecutive <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> case is for writing multiple namespace declarations to the same node.</span></span> <span data-ttu-id="a104e-203">最後，請<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>必須呼叫。</span><span class="sxs-lookup"><span data-stu-id="a104e-203">Eventually, either <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> must be called.</span></span>  
  
 <span data-ttu-id="a104e-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 不會使用`Start` / `End`比喻。</span><span class="sxs-lookup"><span data-stu-id="a104e-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> does not use a `Start`/`End` metaphor.</span></span> <span data-ttu-id="a104e-205">雖然 XAML 命名空間具有 CLR 中代表意義的成員，成員已知，且不需要表示為一種特殊型別的<xref:System.Xaml.XamlMember>擴充性。</span><span class="sxs-lookup"><span data-stu-id="a104e-205">Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <xref:System.Xaml.XamlMember> for extensibility.</span></span> <span data-ttu-id="a104e-206">若要存取的值<xref:System.Xaml.NamespaceDeclaration>，您存取其<xref:System.Xaml.NamespaceDeclaration.Namespace%2A>和<xref:System.Xaml.NamespaceDeclaration.Prefix%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="a104e-206">To access the values of a <xref:System.Xaml.NamespaceDeclaration>, you access its <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> and <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> properties.</span></span>  
  
 <span data-ttu-id="a104e-207">命名空間宣告可能<xref:System.String.Empty?displayProperty=nameWithType>前置詞的值。</span><span class="sxs-lookup"><span data-stu-id="a104e-207">A namespace declaration may have a <xref:System.String.Empty?displayProperty=nameWithType> value for the prefix.</span></span> <span data-ttu-id="a104e-208">A<xref:System.String.Empty?displayProperty=nameWithType>前置詞表示的預設 XAML 命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="a104e-208">A <xref:System.String.Empty?displayProperty=nameWithType> prefix represents a declaration of the default XAML namespace.</span></span> <span data-ttu-id="a104e-209">請勿嘗試使用 null 來代表預設前置詞; 此 API 中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a104e-209">Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</span></span> <span data-ttu-id="a104e-210">如需詳細資訊，請參閱<xref:System.Xaml.NamespaceDeclaration>。</span><span class="sxs-lookup"><span data-stu-id="a104e-210">For more information, see <xref:System.Xaml.NamespaceDeclaration>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a104e-211"><paramref name="namespaceDeclaration" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-211">The <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a104e-212"><paramref name="namespaceDeclaration" /> 的元件為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-212">A component of <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException"><span data-ttu-id="a104e-213">嘗試在無效的範圍中寫入 XAML 命名空間節點。</span><span class="sxs-lookup"><span data-stu-id="a104e-213">Tried to write a XAML namespace node in an invalid scope.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberSignature Language="F#" Value="override this.WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlObjectWriter.WriteStartMember property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="a104e-214">要寫入的 XAML 屬性。</span><span class="sxs-lookup"><span data-stu-id="a104e-214">The XAML property to write.</span></span> <span data-ttu-id="a104e-215">您通常會從 XAML 讀取器透過 XAML 節點資料流媒介取得這個值。</span><span class="sxs-lookup"><span data-stu-id="a104e-215">Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</span></span></param>
        <summary><span data-ttu-id="a104e-216">將新的成員節點寫入至目前物件範圍，而這個範圍會成為新的成員範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-216">Writes a new member node into the current object scope, and the scope becomes a new member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="a104e-217">監看<xref:System.Xaml.XamlDuplicateMemberException>，就會出現兩次會在輸入 XAML 中設定相同的 XAML 屬性時。</span><span class="sxs-lookup"><span data-stu-id="a104e-217">Watch for a <xref:System.Xaml.XamlDuplicateMemberException>, which occurs when the same XAML property is set twice in the XAML input.</span></span> <span data-ttu-id="a104e-218">在簡單的情況下，例如當相同的屬性設定在屬性語法和屬性項目語法，您可以輕鬆地看到這個輸入標記中的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a104e-218">In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</span></span> <span data-ttu-id="a104e-219">不過，多個難以察覺的情況下，可能會發生更難以找出。</span><span class="sxs-lookup"><span data-stu-id="a104e-219">However, more subtle cases can occur that are more difficult to spot.</span></span> <span data-ttu-id="a104e-220">例如，如果您將 XAML 內容屬性，如果涉及 XAML 的環境屬性，而且如果屬性可讓可附加的使用量和執行個體使用量可能會發生這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a104e-220">For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</span></span> <span data-ttu-id="a104e-221">開發的偵錯的階段，在中，您通常可以藉由檢視連接讀取的標記和物件圖形寫入中繼 XAML 節點表示，以尋找這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a104e-221">In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="a104e-222"><paramref name="property" /> 的 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 已設定為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-222"><paramref name="property" /> has <see cref="P:System.Xaml.XamlMember.IsUnknown" /> set to <see langword="true" />.</span></span>  
  
<span data-ttu-id="a104e-223">-或-</span><span class="sxs-lookup"><span data-stu-id="a104e-223">-or-</span></span> 
 <span data-ttu-id="a104e-224">傳遞 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" />，表示不支援內容之物件內容所包含的 XAML 節點資料流。</span><span class="sxs-lookup"><span data-stu-id="a104e-224"><see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> passed, which indicates that the XAML node stream contained content for an object that does not support content.</span></span>  
  
<span data-ttu-id="a104e-225">-或-</span><span class="sxs-lookup"><span data-stu-id="a104e-225">-or-</span></span> 
<span data-ttu-id="a104e-226">嘗試在無效的範圍中寫入開始成員。</span><span class="sxs-lookup"><span data-stu-id="a104e-226">Attempted to write a start member in an invalid scope.</span></span></exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException"><span data-ttu-id="a104e-227"><paramref name="property" /> 會指定已經在父代物件範圍中明確設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="a104e-227"><paramref name="property" /> specifies a property that is already explicitly set in the parent object scope.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a104e-228"><paramref name="property" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-228"><paramref name="property" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="override this.WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlObjectWriter.WriteStartObject xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType"><span data-ttu-id="a104e-229">要寫入的型別。</span><span class="sxs-lookup"><span data-stu-id="a104e-229">The type to write.</span></span> <span data-ttu-id="a104e-230">您通常是從 XAML 讀取器取得這個值。</span><span class="sxs-lookup"><span data-stu-id="a104e-230">Typically you obtain this value from a XAML reader.</span></span></param>
        <summary><span data-ttu-id="a104e-231">將物件節點寫入至目前範圍，並將這個範圍設為新的物件範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-231">Writes an object node into the current scope, and sets the scope to a new object scope.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="a104e-232">正在處理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 型別，而且無法建立物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-232">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" /> type and cannot create an object.</span></span>  
  
<span data-ttu-id="a104e-233">-或-</span><span class="sxs-lookup"><span data-stu-id="a104e-233">-or-</span></span> 
<span data-ttu-id="a104e-234">嘗試在無效的範圍中寫入一個開始物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-234">Attempted to write a start object in an invalid scope.</span></span></exception>
        <exception cref="T:System.Xaml.XamlParseException"><span data-ttu-id="a104e-235">嘗試於已經在設定中提供根物件時寫入根物件。</span><span class="sxs-lookup"><span data-stu-id="a104e-235">Attempted to write a root object when the root object was already provided in the settings.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a104e-236"><paramref name="xamlType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a104e-236"><paramref name="xamlType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="a104e-237">如果目前的範圍內的集合、 字典或陣列中，新的執行個體應該將集合、 字典或陣列使用<see langword="Add" />相關類型的方法。</span><span class="sxs-lookup"><span data-stu-id="a104e-237">If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <see langword="Add" /> method of the relevant type.</span></span> <span data-ttu-id="a104e-238">否則，成員應該指派給新的執行個體。</span><span class="sxs-lookup"><span data-stu-id="a104e-238">Otherwise, the member should be assigned to the new instance.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteValue : obj -&gt; unit" Usage="xamlObjectWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a104e-239">要寫入的值。</span><span class="sxs-lookup"><span data-stu-id="a104e-239">The value to write.</span></span></param>
        <summary><span data-ttu-id="a104e-240">將值寫入至目前成員範圍。</span><span class="sxs-lookup"><span data-stu-id="a104e-240">Writes a value to the current member scope.</span></span> <span data-ttu-id="a104e-241">如果目前範圍在集合、字典或陣列物件內，則應將此值加入至集合、字典或陣列。</span><span class="sxs-lookup"><span data-stu-id="a104e-241">If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="a104e-242">嘗試在無效的範圍中寫入值。</span><span class="sxs-lookup"><span data-stu-id="a104e-242">Attempted to write a value in an invalid scope.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>