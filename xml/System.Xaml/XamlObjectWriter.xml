<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlObjectWriter.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Creates an object graph from a source XAML node stream.</source>
          <target state="translated">從來源 XAML 節點資料流建立物件圖形。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The <ph id="ph1">`Write`</ph> methods of <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> implement a pattern so that the <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph> that is defined by the <ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph>方法<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>實作模式，讓<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>使用<ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph>所定義的<ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> logic switches between the <ph id="ph2">`Write`</ph> methods, depending on which node type is at the current position in the reader.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> 邏輯交換器之間<ph id="ph2">`Write`</ph>方法，根據哪個節點型別是讀取器中目前的位置。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Scope</source>
          <target state="translated">範圍</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> has a concept of scope; that is, the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> maintains a conceptual point of reference in its output object graph.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>範圍; 的概念、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>維護概念的其輸出的物件圖形中的參考點。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</source>
          <target state="translated">針對特定範圍，某些作業可能會有效或無效，或產生無作業的結果。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</source>
          <target state="translated">例如，如果您呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>物件上的初始化已存在做為執行個體，請撰寫指示詞的預設實作會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A possible technique for tracking scope in a custom <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> is to align the node actions with a stack or frame class.</source>
          <target state="translated">追蹤中自訂的範圍可能技巧<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>是對齊堆疊或框架的類別使用的節點動作。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes the object graph.</source>
          <target state="translated">框架的堆疊可以追蹤的 push 和 pop 每個層級的物件模型的深度，進入或離開時<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>寫入物件圖形。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Callbacks</source>
          <target state="translated">回呼</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>To support intermediate and advanced <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> commits or is about to commit certain actions.</source>
          <target state="translated">若要支援中繼和進階<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>案例中，撰寫物件圖形的機制提供回呼發生的進入點時<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>認可或即將認可某些動作。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</source>
          <target state="translated">某些回呼會在設定中啟用和並非所特有物件類型或成員正在寫入;不過，回呼資訊通常是在內容中使用，或者是在事件會透過回呼傳送的資料。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The following is a list of relevant callbacks:</source>
          <target state="translated">下列是一份相關回呼：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">由宣告回呼<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph>時範圍會移入新的物件，並在叫用<ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph>階段建立的每個物件的物件存留期。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">由宣告回呼<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph>時範圍會移入新的物件，並在叫用<ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph>階段建立的每個物件的物件存留期。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and occurs when the first <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">由宣告回呼<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph>範圍物件，一開始，而發生時叫用時第一個<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>呼叫該物件範圍時進行，但尚未認可。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and happens when the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">由宣告回呼<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph>範圍物件，一開始，而發生時叫用時<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>呼叫該物件範圍時進行，但尚未認可。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is invoked when <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph> is called.</source>
          <target state="translated">由宣告回呼<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph>時叫用<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Writing Dictionary Keys</source>
          <target state="translated">手寫字典索引鍵</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> supports type conversion on the constraints of a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before the dictionary contents are added to the object graph.</source>
          <target state="translated">預設實作<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>支援類型轉換的條件約束<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>之前字典內容加入物件圖形。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic <ph id="ph1">`Add`</ph> and indexer behavior.</source>
          <target state="translated">如此一來，在泛型字典可以在執行階段物件索引鍵，而且符合相關的一般<ph id="ph1">`Add`</ph>和索引子的行為。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>However, as implemented for the base <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, this capability exists only for object graph creation from the base <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and not for derived classes of <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">不過，做為基底實作<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，這項功能只存在於物件圖形建立基底<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>類別，衍生的類別不能用於<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Checks for Disposed</source>
          <target state="translated">檢查有無處置</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</source>
          <target state="translated">XAML 寫入器可能會用來延後的作業，或針對在過渡期中已處置的 XAML 寫入器執行個體進行呼叫的位置。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Various APIs of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> might throw <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> in these cases.</source>
          <target state="translated">各種 Api<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>可能會擲回<ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph>在這些情況下。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using  the XAML schema context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 所使用的 XAML 結構描述內容，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A settings object that specifies certain options for <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> behavior and output.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 行為和輸出之特定選項的設定物件。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using the context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and its settings.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 所使用的內容和其設定，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Clear">
          <source>Resets all possible frames and clears the object graph.</source>
          <target state="translated">重設所有可能的框架並清除物件圖形。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 資源，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">要報告的物件。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">叫用處理常式時，會將物件封裝至 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">叫用與這個 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> 之 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> 相關聯的任何 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">要報告的物件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The value  is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">叫用處理常式時，值會封裝至 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">叫用與這個 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> 之 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> 相關聯的任何 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">要報告的物件。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>This is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">會在叫用處理常式將其封裝至 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">叫用與這個 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> 之 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> 相關聯的任何 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 參考方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>The value to pass through <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">在叫用處理常式時要透過 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> 傳遞的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">叫用與這個 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> 之 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> 相關聯的任何 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 參考方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The object to report as the source to the handler.</source>
          <target state="translated">要向處理常式報告做為來源的物件。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The name of the property to set, which is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">要設定之屬性的名稱，這個名稱會在 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> 中傳遞至處理常式。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value to provide for the property that is named by <bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要提供給由 <bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept> 命名之屬性的值。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">這個值會在 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> 中傳遞至處理常式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this writer, as long as <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> in <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> event data is not <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">叫用與這個寫入器之 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> 相關聯的任何 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> 參考方法 (只要 <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> 事件資料中的 <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> 不是 <ph id="ph5">&lt;see langword="true" /&gt;</ph> 即可)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>A Boolean value that is set by any associated handler; otherwise, <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">任何相關聯處理常式所設定的布林值，否則為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If the <ph id="ph1">`SetValue`</ph> operation for this XAML writer has an associated handler (a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is declared in <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>), this method creates new <ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> and passes them to the handler.</source>
          <target state="translated">如果<ph id="ph1">`SetValue`</ph>此 XAML 寫入器的作業有關聯的處理常式 (<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph>中宣告<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>)，這個方法建立新<ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph>並將其傳遞至處理常式。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The return value is set by reading the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph> value that is passed through the event data.</source>
          <target state="translated">傳回的值由讀取設定<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph>事件資料會傳遞的值。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If no handler exists and this method is invoked, the call returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果處理常式不存在，而且這個方法會叫用，則呼叫會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Gets the last object that was written.</source>
          <target state="translated">取得最後一個寫入的物件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Typically only called when the node stream is at its end and the object graph is complete.</source>
          <target state="translated">通常只有在節點資料流位在結尾且物件圖形完成時才會加以呼叫。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The last object written, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">最後一個寫入的物件，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The most typical usage of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> is to call it only when the node stream is known to be at its end, and the object graph is complete.</source>
          <target state="translated">最常見的使用方式的<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph>是只有在節點資料流是否已知為其結尾，且已完成的物件圖形呼叫它。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</source>
          <target state="translated">否則，物件圖形可能會不完整，並不是適用於大部分平台案例。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> typically only contains a non-null value if it is called immediately after a call to <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, and if the current scope is in the member where the object provides a value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> 如果呼叫之後立即呼叫通常只包含非 null 值<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>，而且如果目前的範圍是處於其中的物件會提供值的成員。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> 服務，這個服務會維護 XAML 物件寫入器之絕對節點根的 XAML 名稱範圍。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the current root of the object writer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> 服務，這個服務會維護物件寫入器目前根的 XAML 名稱範圍。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The value of this property may come from the object writer context.</source>
          <target state="translated">這個屬性的值可能來自物件寫入器內容。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Gets the active XAML schema context.</source>
          <target state="translated">取得作用中 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context.</source>
          <target state="translated">XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>XAML schema context is a necessary information source for most practical object-writing scenarios.</source>
          <target state="translated">XAML 結構描述內容是最實用的物件撰寫案例所需的資訊來源。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</source>
          <target state="translated">XAML 結構描述內容影響的備份類型的型別查閱，並保留其中備份類型，存在於組件的相關資訊。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The default XAML schema context is based on CLR type-mapping rules.</source>
          <target state="translated">預設 XAML 結構描述內容為基礎 CLR 型別對應規則。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Frameworks typically provide their own XAML schema context in order to assure that that the assembly-loading mechanisms match the framework's programming amd application models.</source>
          <target state="translated">通常，架構會提供自己的 XAML 結構描述內容以確保組件載入機制符合架構的程式設計 amd 應用程式模型。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line number from the reader.</source>
          <target state="translated">來自讀取器的行號。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line position from the reader.</source>
          <target state="translated">來自讀取器的行位置。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> and provides line information for exceptions.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph>，並提供例外狀況的行資訊。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>This service method is not intended to be called directly from your code.</source>
          <target state="translated">此服務方法不是直接從您的程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>However, if you are creating a derived class from <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</source>
          <target state="translated">不過，如果您要建立衍生的類別從<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>並預期要報告的內容位置的行號會無法使用或不實用，這個方法可能會呼叫。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>Gets a value that reports whether a line information service should provide values and therefore, should also call the <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> method when it is relevant.</source>
          <target state="translated">取得值，這個值會報告行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> 方法)。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if line information is used by the writer; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果寫入器會使用行資訊，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>This implementation always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">這個實作永遠會傳回 <ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Closes the current member scope, and may write the value of the member scope while it closes.</source>
          <target state="translated">關閉目前成員範圍，並且可能在關閉成員範圍期間寫入其值。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>The new scope becomes the parent object scope of the member.</source>
          <target state="translated">新的範圍會成為成員的父物件範圍。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Failed to create member value from a value node that is encountered between this call and a previous <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph>.</source>
          <target state="translated">無法從在這次呼叫和前一次 <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph> 之間遇到的值節點建立成員值。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>Closes the current object scope in the writer.</source>
          <target state="translated">關閉寫入器中的目前物件範圍。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The new object scope becomes the parent member scope.</source>
          <target state="translated">新的物件範圍會成為父成員範圍。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>If this <ph id="ph1">`EndObject`</ph> position scope is closing the root object, the new object scope becomes the root scope.</source>
          <target state="translated">如果這個<ph id="ph1">`EndObject`</ph>位置範圍關閉的根物件，新的物件範圍會成為根範圍。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</source>
          <target state="translated">若要呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>可能尚未建立物件由於該物件成員可能是必要的初始化路徑，例如初始文字或初始化參數。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>For these cases, the call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> actually writes the object.</source>
          <target state="translated">這些情況下，呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>實際寫入的物件。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Writes the conceptual <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> into the object graph when the specified object is a default or implicit value of the parent property.</source>
          <target state="translated">當指定之物件為父屬性的預設值或隱含值時，將概念 <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> 寫入物件圖形。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</source>
          <target state="translated">隱含值來自從 XAML 結構描述內容及支援型別資訊取得的資訊，而非指定為在輸入 XAML 節點集中的物件值。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The difference between writing with <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> and writing with <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> can be seen in the resulting object graph.</source>
          <target state="translated">與寫入之間的差異<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>和寫入與<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>結果物件圖形中可以看到。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> does not construct an instance of a type because the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API has no information to inform the object graph of what to construct.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> 將不會建構類型的執行個體因為<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>應用程式開發介面有任何資訊來通知所要建構的物件圖形。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Instead, the object was created when the parent property was initialized; so a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> does not need to construct it.</source>
          <target state="translated">初始化 parent 屬性; 時，相反地，建立物件因此<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>不必建構它。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> specifies that an instance of that type should be constructed and inserted into the object graph.</source>
          <target state="translated">相反地，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>指定應該建構該類型的執行個體，並插入的物件圖形。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>If you think of the XAML node stream as a series of frames, a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> is balanced to a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call.</source>
          <target state="translated">如果您將一系列的框架，視為 XAML 節點資料流<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>平衡轉送到<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Therefore, the number of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> plus <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> calls should equal the number of <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> calls as part of a complete object-writing evaluation of the XAML node stream.</source>
          <target state="translated">因此，數目<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>加上<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>呼叫應該會等於數目<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>呼叫做為 XAML 節點資料流的完整物件寫入評估的一部分。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The conceptual <ph id="ph1">`StartObject`</ph> position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</source>
          <target state="translated">將概念<ph id="ph1">`StartObject`</ph>位置物件圖形中的隱含物件是必要的因為雖然本身的物件值的隱含預設值，該物件仍可能需要寫入可根據 XAML 節點資料流的成員。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>A typical scenario where this occurs is when <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</source>
          <target state="translated">典型的案例，這種情況是當<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>寫入成員節點的集合屬性，以及集合初始設定是隱含建立擁有集合屬性的物件。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The namespace declaration to write.</source>
          <target state="translated">要寫入的命名空間宣告。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Defines a namespace declaration that applies to the next object scope or member scope.</source>
          <target state="translated">定義會套用至下一個物件範圍或成員範圍的命名空間宣告。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</source>
          <target state="translated">如果目前的範圍是根範圍、 物件範圍或成員範圍可以寫入命名空間宣告。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> can only be called immediately before a call to one of the following: <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>只能呼叫之前呼叫下列其中之一： <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>，或<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The consecutive <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> case is for writing multiple namespace declarations to the same node.</source>
          <target state="translated">連續<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>案例是撰寫多個命名空間宣告相同的節點。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Eventually, either <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> must be called.</source>
          <target state="translated">最後，請<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>必須呼叫。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> does not use a <ph id="ph2">`Start`</ph><ph id="ph3">/</ph><ph id="ph4">`End`</ph> metaphor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> 不會使用<ph id="ph2">`Start`</ph> <ph id="ph3">/</ph> <ph id="ph4">`End`</ph>比喻。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> for extensibility.</source>
          <target state="translated">雖然 XAML 命名空間中的 CLR 表示意義成員，成員為已知，而且不需要表示為一種特殊型別的<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>擴充性。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>To access the values of a <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>, you access its <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph> properties.</source>
          <target state="translated">若要存取的值<ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>，您存取其<ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration may have a <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> value for the prefix.</source>
          <target state="translated">命名空間宣告可能<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>前置詞的值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> prefix represents a declaration of the default XAML namespace.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>前置詞表示的預設 XAML 命名空間宣告。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</source>
          <target state="translated">請勿嘗試使用 null 來代表預設前置詞。 這個 API 中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A component of <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> 的元件為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Tried to write a XAML namespace node in an invalid scope.</source>
          <target state="translated">嘗試在無效的範圍中寫入 XAML 命名空間節點。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>The XAML property to write.</source>
          <target state="translated">要寫入的 XAML 屬性。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</source>
          <target state="translated">您通常會從 XAML 讀取器透過 XAML 節點資料流媒介取得這個值。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Writes a new member node into the current object scope, and the scope becomes a new member scope.</source>
          <target state="translated">將新的成員節點寫入至目前物件範圍，而這個範圍會成為新的成員範圍。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Watch for a <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>, which occurs when the same XAML property is set twice in the XAML input.</source>
          <target state="translated">監看<ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>，它發生於兩次輸入 XAML 中設定相同的 XAML 屬性。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</source>
          <target state="translated">在簡單的情況下，例如當相同的屬性設定的屬性語法和屬性項目語法，您可以輕鬆地查看此輸入標記中的例外狀況。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>However, more subtle cases can occur that are more difficult to spot.</source>
          <target state="translated">不過，多個難以察覺的情況下，可能會發生更難以找出。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</source>
          <target state="translated">例如，如果您將 XAML 內容屬性，如果涉及 XAML 環境的屬性，且如果屬性可讓可附加的使用量和執行個體使用，可能會發生這個例外狀況。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</source>
          <target state="translated">在偵錯開發階段，您通常可以找到此例外狀況檢視讀取的標記和物件圖形寫入連接 XAML 中繼節點表示。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> has <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> 已設定為 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph> passed, which indicates that the XAML node stream contained content for an object that does not support content.</source>
          <target state="translated">傳遞 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph>，表示不支援內容之物件內容所包含的 XAML 節點資料流。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Attempted to write a start member in an invalid scope.</source>
          <target state="translated">嘗試在無效的範圍中寫入開始成員。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> specifies a property that is already explicitly set in the parent object scope.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> 會指定已經在父代物件範圍中明確設定的屬性。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>The type to write.</source>
          <target state="translated">要寫入的型別。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Typically you obtain this value from a XAML reader.</source>
          <target state="translated">您通常是從 XAML 讀取器取得這個值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Writes an object node into the current scope, and sets the scope to a new object scope.</source>
          <target state="translated">將物件節點寫入至目前範圍，並將這個範圍設為新的物件範圍。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Processing an <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph> type and cannot create an object.</source>
          <target state="translated">正在處理 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph> 型別，而且無法建立物件。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a start object in an invalid scope.</source>
          <target state="translated">嘗試在無效的範圍中寫入一個開始物件。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a root object when the root object was already provided in the settings.</source>
          <target state="translated">嘗試於已經在設定中提供根物件時寫入根物件。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method of the relevant type.</source>
          <target state="translated">如果目前的範圍內的集合、 字典或陣列，新的執行個體應該加入至集合、 字典或陣列使用<ph id="ph1">&lt;see langword="Add" /&gt;</ph>相關類型的方法。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Otherwise, the member should be assigned to the new instance.</source>
          <target state="translated">否則，成員應該指派到的新執行個體。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>The value to write.</source>
          <target state="translated">要寫入的值。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Writes a value to the current member scope.</source>
          <target state="translated">將值寫入至目前成員範圍。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</source>
          <target state="translated">如果目前範圍在集合、字典或陣列物件內，則應將此值加入至集合、字典或陣列。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Attempted to write a value in an invalid scope.</source>
          <target state="translated">嘗試在無效的範圍中寫入值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>