<Type Name="IDestinationTypeProvider" FullName="System.Xaml.IDestinationTypeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c0902f060cf70a990455e9cd7000558331b3fac" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36444926" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDestinationTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDestinationTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IDestinationTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDestinationTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDestinationTypeProvider" />
  <TypeSignature Language="F#" Value="type IDestinationTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>表示服務，這個服務可以傳回目的型別的 CLR 型別系統識別項。 當屬性設定作業的目的型別是透過反映或其他機制間接報告時，目的型別就顯得很重要。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的型別<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>使用目前的 XAML 結構描述內容解決從 XAML 節點資料流目前位置。  
  
 如果您使用 XAML 類型系統，由.NET Framework XAML 服務及存取服務內容，在這些情況中下, 實作<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>傳回<xref:System.Xaml.XamlType.UnderlyingType%2A>根據可用的 XAML 類型系統資訊和 CLR 為基礎的 XAML 結構描述內容。  
  
 此服務是相關的情況下，其中純 CLR 反映或其他機制可能會提供足夠的資訊關於目的地類型。 以下是一些案例相關的清單<xref:System.Xaml.IDestinationTypeProvider>:  
  
-   CLR 型別系統 CLR 如何定義和使用類型，因為報告間接的型別，而且您想為 true 的目的地類型。 比方說，.NET Framework XAML 服務中的 Api 使用此服務在內部時，它們會處理事件成員。 事件會報告為純 CLR 反映<xref:System.Delegate>。  
  
-   您想要確保類型轉換器的用法的目的型別符合預期的類型可能會產生型別轉換子。 這個案例是有用的目的型別參數化或一般。  
  
-   值轉換器是從巢狀方式置於另一個值轉換器的使用方式呼叫。 在此情況下，<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>回溯巢狀，並傳回要設定，而不是傳回任何中介的值轉換器的輸出類型的實際屬性的目的型別。  
  
 類型轉換器和標記延伸可以查詢<xref:System.Xaml.IDestinationTypeProvider>XAML 物件寫入器叫用的值轉換行為時，會將 XAML 物件寫入器所提供的服務內容上以服務。 如需詳細資訊，請參閱[類型轉換器和 XAML 的標記延伸](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)和[適用於類型轉換器和標記延伸](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
  </Docs>
  <Members>
    <Member MemberName="GetDestinationType">
      <MemberSignature Language="C#" Value="public Type GetDestinationType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDestinationType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IDestinationTypeProvider.GetDestinationType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDestinationType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDestinationType();" />
      <MemberSignature Language="F#" Value="abstract member GetDestinationType : unit -&gt; Type" Usage="iDestinationTypeProvider.GetDestinationType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 CLR <see cref="T:System.Type" />，這個項目識別相關型別轉換器或標記延伸的目的型別。</summary>
        <returns>目的型別的 CLR <see cref="T:System.Type" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法沒有任何輸入的參數。 要傳回的項目 (以及是否要傳回的任何項目以外`null`) 由 XAML 節點資料流中目前的節點位置。  
  
## <a name="service-implementers"></a>服務實作器  
 如果您實作此服務，<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>方法應傳回預期要檢查其最明確的轉換或輸出類型的標記延伸或類型轉換器的類型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>