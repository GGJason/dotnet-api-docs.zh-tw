<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlReader.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2c5d677ab741eb848cf99fa1f0d969968ff9639.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2c5d677ab741eb848cf99fa1f0d969968ff9639</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlReader">
          <source>Provides base definitions for classes that consume XAML input and produce XAML node streams.</source>
          <target state="translated">針對會使用 XAML 輸入來產生 XAML 節點資料流的類別，提供基底定義。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an abstract class and does not provide implementations or definitions that have a working result for all members.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 是抽象類別，並不提供實作或工作結果的所有成員的定義。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Members that do have an implementation in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> are noted in the remarks for that member.</source>
          <target state="translated">中沒有實作的成員<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>述該成員的 「 備註 」。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> has several abstract members that must be implemented, and several virtual members.</source>
          <target state="translated">具體來說，<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>具有數個必須實作的抽象成員及數個虛擬的成員。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Of the virtual members, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> each provide a default implementation that is appropriate for most cases.</source>
          <target state="translated">虛擬成員、<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>每個提供適用於大部分情況下的預設實作。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> override.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>預設實作會依賴其他實作的 XAML 讀取器的預期的行為，特別是，它們是依賴<ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>覆寫。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> is also a virtual member that has a working default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> 也是虛擬的成員具有工作的預設實作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</source>
          <target state="translated">下列兩個類別是.NET Framework XAML 服務和 System.Xaml 組件中的最相關且實用衍生的類別：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>, which reads an object graph, such as the active object graph of an application at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>它會讀取物件圖形，例如在執行階段應用程式的使用中的物件圖形。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, which reads XAML in the form of a XML text file by using a general <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that loads the file as an intermediary helper class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>使用一般讀取的 XML 文字檔形式的 XAML<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>可載入為媒介的 helper 類別檔案。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Other XAML readers from other frameworks include <ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>.</source>
          <target state="translated">從其他架構的其他 XAML 讀取器包含<ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph>和<ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> differs from <ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> design principles because <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> does not have a <ph id="ph5">`Create`</ph> method to return underlying default XAML reader implementations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 不同於<ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph>和<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>設計原則，因為<ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph>沒有<ph id="ph5">`Create`</ph>傳回基礎的預設 XAML 讀取器實作的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</source>
          <target state="translated">您必須改為執行個體化特定衍生的 XAML 讀取器類別，藉由呼叫其建構函式或其他類別的特定協助程式 Api。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Subtree Readers</source>
          <target state="translated">樹狀子目錄的讀取器</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>For the most part, you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API in the context of specific XAML reader classes that derive from <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">大部分的情況下，您呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>衍生自特定的 XAML 讀取器類別的內容中的應用程式開發介面<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, in one particular case, you access <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API on a practical XAML reader instance that is not public and not derived from <ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> or <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
          <target state="translated">不過，在一個特定的情況下，您存取<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>上實際的 XAML 讀取器執行個體不是公用的和未衍生自 API<ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>或<ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This case is when you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>, which returns a <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> instance.</source>
          <target state="translated">這個案例是當您呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>，它會傳回<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>執行個體。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>In the default implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> that is returned by this API is an internal class.</source>
          <target state="translated">在預設實作中，<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>也就是此 API 傳回的是內部的類別。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> obtained for subtree reading has valid actions for APIs such as <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, and those actions are based on the parent reader class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>取得樹狀子目錄讀取有有效的應用程式開發介面的動作例如<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>，而這些動作以父系的讀取器類別為基礎。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This design enables the internal class to track the frame level where the subtree was entered.</source>
          <target state="translated">此設計可讓內部的類別，來追蹤先前樹狀子目錄的畫面格層級。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The acting subtree <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or <ph id="ph2">`null`</ph> at the current node.</source>
          <target state="translated">動作的樹狀子目錄<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>可確保，如果目前的節點位置移動子樹狀結構的界限之外，特定的樹狀子目錄的讀取器會回報檔案結尾或<ph id="ph2">`null`</ph>在目前的節點。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Notes about subtree reader usage are included on certain <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> APIs.</source>
          <target state="translated">包含特定的樹狀子目錄的讀取器使用方式的相關注意事項<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>應用程式開發介面。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.#ctor">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Close">
          <source>Closes the XAML node stream.</source>
          <target state="translated">關閉 XAML 節點資料流。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Close">
          <source>In the base implementation, calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> with the <ph id="ph3">`isDisposing`</ph> parameter as <ph id="ph4">`true`</ph>.</source>
          <target state="translated">在基底實作中，呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph>呼叫<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph>與<ph id="ph3">`isDisposing`</ph>參數做為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 資源，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>You must call the base class to get <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</source>
          <target state="translated">您必須先呼叫基底類別取得<ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph> <ph id="ph2"> = </ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source>Gets whether <ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called.</source>
          <target state="translated">取得是否已呼叫 <ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已呼叫 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsEof">
          <source>When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</source>
          <target state="translated">在衍生類別中實作時取得值，這個值會報告讀取器位置是否在檔案結尾。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果位置是在 XAML 節點資料流的概念檔案結尾則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>, with behavior that correctly reflects the bounds of the entered subtree.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>，輸入子樹狀結構的範圍會正確反映的行為。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Member">
          <source>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>.</source>
          <target state="translated">在衍生類別中實作時，如果讀取器位置在 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph> 上，則取得讀取器位置上的目前成員。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>The current member; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the reader position is not on a member.</source>
          <target state="translated">目前的成員，如果讀取器位置不在成員上，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>，行為限制。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Namespace">
          <source>When implemented in a derived class, gets the XAML namespace information from the current node.</source>
          <target state="translated">在衍生類別中實作時，從目前節點取得 XAML 命名空間資訊。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The XAML namespace information, if it is available; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">XAML 命名空間資訊 (如果有的話)，否則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The intended design of this API is to return a non-null result only if the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> of the current node is <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">此 API 的預定的設計是要傳回非 null 的結果才<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>目前節點是<ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</source>
          <target state="translated">屬性不會報告 XAML 命名空間的物件或成員的一般範圍意義上，適用於 XAML 結構描述內容下的解譯。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</source>
          <target state="translated">您的應用程式必須提供方法來快取資訊的作用的 XAML 命名空間，因為它會周遊 XAML 節點，如果您需要該如何 XAML 結構描述內容至寫入器報告它以外的方式的資訊。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph> for notes on the reference implementation.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph>的附註的參考實作。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.NodeType">
          <source>When implemented in a derived class, gets the type of the current node.</source>
          <target state="translated">在衍生類別中實作時，會取得目前節點的型別。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> 列舉的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>，行為限制。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source>When implemented in a derived class, provides the next XAML node from the source, if a node is available.</source>
          <target state="translated">在衍生類別中實作時，會從來源提供下一個 XAML 節點 (如果有節點的話)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a node is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果有節點則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>，行為限制。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> that is based on the current <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, where the returned <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> is used to iterate through a subtree of the XAML node structure.</source>
          <target state="translated">傳回以目前 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 為基礎的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>，而傳回的 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 可用來逐一查看 XAML 節點結構的子樹狀結構。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>A new XAML reader instance for the subtree.</source>
          <target state="translated">子樹狀結構的新 XAML 讀取器執行個體。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>This method has a default implementation and returns a valid <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">此方法的預設實作，並且傳回有效<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The returned <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an internal class that restricts certain <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> actions.</source>
          <target state="translated">傳回<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>是內部的類別，以限制特定<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>動作。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or <ph id="ph1">`null`</ph> at the current node when the subtree is exited.</source>
          <target state="translated">限制將乃讀取只維度的子樹狀結構的 XAML 節點集，較大的來源，並傳回檔案結尾的一致或<ph id="ph1">`null`</ph>目前節點子樹狀結構結束時。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Generally, you should check the current node from the initial <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> to determine whether you need a subtree reader.</source>
          <target state="translated">一般而言，您應該檢查目前節點的初始<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>來判斷是否需要樹狀子目錄的讀取器。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</source>
          <target state="translated">如何檢查這可能是實作而定;不過，避免建立多個樹狀子目錄讀取器的每個樹狀子目錄。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In addition, avoid invoking a subtree reader for certain node cases (for example, for <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>) that cannot contain a subtree of nodes.</source>
          <target state="translated">此外，避免叫用特定節點的情況下的樹狀子目錄讀取器 (例如，對於<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>)，不能包含子樹狀結構的節點。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>After you obtain a subtree reader, you must call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> on it to obtain a current node (or call <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> to obtain a next node).</source>
          <target state="translated">取得樹狀子目錄的讀取器之後，您必須呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>上，以取得目前節點 (或呼叫<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>取得下一個節點)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>You do not automatically obtain an initial node position from the subtree reader when you create it.</source>
          <target state="translated">您自動取得初始節點位置的樹狀子目錄的讀取器從您在建立時。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The reader you obtain by calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> from this default implementation is an internal class.</source>
          <target state="translated">您藉由呼叫取得讀取器<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>從這個預設實作是內部的類別。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The internal class bases its behavior on the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation that is being used when <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is called.</source>
          <target state="translated">內部類別，根據其行為<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>正在實作時使用<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The purpose of the internal class is to wrap the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and general traversal behavior.</source>
          <target state="translated">內部類別的目的是要包裝<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和一般周遊行為。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The traversal stays within the intended subtree by keeping track of <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph><ph id="ph2">/</ph><ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph> pairs or <ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph><ph id="ph5">/</ph><ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph> pairs.</source>
          <target state="translated">周遊保持在預期的樹狀子目錄內追蹤<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> <ph id="ph2">/</ph> <ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph>組或<ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph> <ph id="ph5">/</ph> <ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph>組。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>It also correctly returns <ph id="ph1">`false`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph> when the reader is at the end of the subtree, as defined by its entry point.</source>
          <target state="translated">它也會正確傳回<ph id="ph1">`false`</ph>如<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和<ph id="ph3">`true`</ph>如<ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>當讀取器結尾的樹狀子目錄、 其進入點所定義。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In general, you assume that any <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API you call from a subtree reader has the same implementation as the overall <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> except for the traversal bounding behavior.</source>
          <target state="translated">一般情況下，您會假設任何<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>您樹狀子目錄的讀取器從呼叫的應用程式開發介面有相同的實作，以了解整體<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>週框行為周遊除外。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is virtual.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>是虛擬的。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Therefore, a specific <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can provide behavior that differs from the <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> internal wrapper behavior; and a <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can even disable subtree reader functionality by returning <ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph> or other exceptions.</source>
          <target state="translated">因此，特定<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>實作可提供不同的行為<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>內部包裝函式的行為; 和<ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph>實作可以即使停用子樹狀目錄讀取器功能藉由傳回<ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph>或其他例外狀況。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</source>
          <target state="translated">在衍生類別中實作時取得物件，這個物件會為資訊集提供 XAML 結構描述內容資訊。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>An object that provides XAML schema context information for the information set.</source>
          <target state="translated">為資訊集提供 XAML 結構描述內容資訊的物件。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Skip">
          <source>Skips the current node and advances the reader position to the next node.</source>
          <target state="translated">略過目前節點，並使讀取器位置前進至下一個節點。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Once skipped, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> is called by the default <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation.</source>
          <target state="translated">一次略過<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>預設呼叫<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>You typically do not call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> in sequence.</source>
          <target state="translated">您通常不會呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>序列中。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>In the default <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation, different actions are taken depending on which <ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> the reader position is currently on.</source>
          <target state="translated">在預設<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>實作中，依據採取不同的動作<ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>是目前的讀取器位置。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>If the reader position is currently on a <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>, that member or object is skipped.</source>
          <target state="translated">如果讀取器位置是目前<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph>或<ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>，成員或物件已略過。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For other <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> values, no action is taken other than calling <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> from the current position.</source>
          <target state="translated">適用於其他<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>值、 呼叫以外，沒有採取任何動作<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>從目前的位置。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>，行為限制。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>The node tree behavior of <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> is based on the XML equivalent <ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">節點樹狀目錄中的行為<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>XML 對等項目根據<ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Based on the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> behavior equivalence, <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> skips the node and its subtree, not just the single entry node.</source>
          <target state="translated">根據<ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>行為等價<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>節點和它的子樹狀目錄中，而不只是單一項目節點，會略過。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Type">
          <source>When implemented in a derived class, gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node.</source>
          <target state="translated">在衍生類別中實作時，會取得目前節點的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node; or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on an object.</source>
          <target state="translated">目前節點的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，如果目前讀取器位置不在物件上，則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">樹狀子目錄的讀取器可以呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>，行為限制。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或參閱<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Value">
          <source>When implemented in a derived class, gets the value of the current node.</source>
          <target state="translated">在衍生類別中實作時，會取得目前節點的值。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Value">
          <source>The value of the current node; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on a <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> node type.</source>
          <target state="translated">目前節點的值，如果目前讀取器位置不在 <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> 節點型別上，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>