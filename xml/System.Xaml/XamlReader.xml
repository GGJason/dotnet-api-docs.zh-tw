<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="849d2e0c9bee513161cca5e65badec4967daf83c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51864277" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c2ea3-101">針對會使用 XAML 輸入來產生 XAML 節點資料流的類別，提供基底定義。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-101">Provides base definitions for classes that consume XAML input and produce XAML node streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-102"><xref:System.Xaml.XamlReader> 是抽象類別，並不提供實作或工作結果的所有成員的定義。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-102"><xref:System.Xaml.XamlReader> is an abstract class and does not provide implementations or definitions that have a working result for all members.</span></span> <span data-ttu-id="c2ea3-103">在沒有實作的成員<xref:System.Xaml.XamlReader>述該成員的 「 備註 」。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-103">Members that do have an implementation in <xref:System.Xaml.XamlReader> are noted in the remarks for that member.</span></span> <span data-ttu-id="c2ea3-104">具體來說，<xref:System.Xaml.XamlReader>具有數個必須實作的抽象成員及數個虛擬的成員。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-104">Specifically, <xref:System.Xaml.XamlReader> has several abstract members that must be implemented, and several virtual members.</span></span>  
  
 <span data-ttu-id="c2ea3-105">虛擬成員、<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>每個提供適用於大部分的情況下的預設實作。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-105">Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases.</span></span> <span data-ttu-id="c2ea3-106">不過，<xref:System.Xaml.XamlReader.ReadSubtree%2A>並<xref:System.Xaml.XamlReader.Skip%2A>的預設實作依賴其他實作的 XAML 讀取器的預期的行為，特別是，它們都依賴<xref:System.Xaml.XamlReader.Read%2A>覆寫。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-106">However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override.</span></span> <span data-ttu-id="c2ea3-107"><xref:System.Xaml.XamlReader.Dispose%2A> 也是虛擬的成員具有工作的預設實作。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-107"><xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.</span></span>  
  
 <span data-ttu-id="c2ea3-108">下列兩個類別是.NET Framework XAML 服務和 System.Xaml 組件中的最相關和實用衍生的類別：</span><span class="sxs-lookup"><span data-stu-id="c2ea3-108">The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</span></span>  
  
-   <span data-ttu-id="c2ea3-109"><xref:System.Xaml.XamlObjectReader>它會讀取物件圖形，例如在執行階段應用程式的作用中的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-109"><xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.</span></span>  
  
-   <span data-ttu-id="c2ea3-110"><xref:System.Xaml.XamlXmlReader>它會使用一般在讀取的 XML 文字檔形式的 XAML<xref:System.Xml.XmlReader>可載入的檔案做為媒介的協助程式類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-110"><xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.</span></span>  
  
 <span data-ttu-id="c2ea3-111">其他架構的其他 XAML 讀取器包含<xref:System.Windows.Baml2006.Baml2006Reader>和<xref:System.Activities.Debugger.XamlDebuggerXmlReader>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-111">Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</span></span>  
  
 <span data-ttu-id="c2ea3-112"><xref:System.Xaml.XamlReader> 不同於[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]並<xref:System.Xml.XmlReader>設計原則，因為<xref:System.Xaml.XamlReader>沒有`Create`傳回基礎的預設 XAML 讀取器實作的方法。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-112"><xref:System.Xaml.XamlReader> differs from [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because <xref:System.Xaml.XamlReader> does not have a `Create` method to return underlying default XAML reader implementations.</span></span> <span data-ttu-id="c2ea3-113">相反地，您就必須透過呼叫其建構函式或其他類別的特定協助程式 Api 初始化特定衍生的 XAML 讀取器類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-113">You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</span></span>  
  
## <a name="subtree-readers"></a><span data-ttu-id="c2ea3-114">樹狀子目錄的讀取器</span><span class="sxs-lookup"><span data-stu-id="c2ea3-114">Subtree Readers</span></span>  
 <span data-ttu-id="c2ea3-115">大部分的情況下，您呼叫<xref:System.Xaml.XamlReader>衍生自特定的 XAML 讀取器類別的內容中的 API <xref:System.Xaml.XamlReader>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-115">For the most part, you call <xref:System.Xaml.XamlReader> API in the context of specific XAML reader classes that derive from <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="c2ea3-116">不過，在一個特定的情況下，您存取<xref:System.Xaml.XamlReader>API，在實際的 XAML 讀取器執行個體不是公用的和未衍生自<xref:System.Xaml.XamlObjectReader>或<xref:System.Xaml.XamlXmlReader>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-116">However, in one particular case, you access <xref:System.Xaml.XamlReader> API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>.</span></span> <span data-ttu-id="c2ea3-117">此案例是當您呼叫<xref:System.Xaml.XamlReader.ReadSubtree%2A>，以傳回<xref:System.Xaml.XamlReader>執行個體。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-117">This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a <xref:System.Xaml.XamlReader> instance.</span></span> <span data-ttu-id="c2ea3-118">在預設實作中，<xref:System.Xaml.XamlReader>也就是此 API 傳回的是內部的類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-118">In the default implementation, the <xref:System.Xaml.XamlReader> that is returned by this API is an internal class.</span></span>  
  
 <span data-ttu-id="c2ea3-119"><xref:System.Xaml.XamlReader>取得的樹狀子目錄讀取具有有效的動作，api，例如<xref:System.Xaml.XamlReader.Read%2A>和<xref:System.Xaml.XamlReader.NodeType%2A>，而且這些動作為基礎的父代的讀取器類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-119">The <xref:System.Xaml.XamlReader> obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class.</span></span> <span data-ttu-id="c2ea3-120">此設計可讓內部的類別，來追蹤地方輸入子樹狀結構的框架層級。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-120">This design enables the internal class to track the frame level where the subtree was entered.</span></span> <span data-ttu-id="c2ea3-121">目前的樹狀子目錄<xref:System.Xaml.XamlReader>可確保如果目前節點的位置移動子樹狀結構界限外，特定子樹狀目錄讀取器會報告檔案結尾或`null`在目前的節點。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-121">The acting subtree <xref:System.Xaml.XamlReader> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.</span></span>  
  
 <span data-ttu-id="c2ea3-122">樹狀子目錄的讀取器使用方式的相關資訊也包含於特定<xref:System.Xaml.XamlReader>Api。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-122">Notes about subtree reader usage are included on certain <xref:System.Xaml.XamlReader> APIs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3"><span data-ttu-id="c2ea3-123">認識 XAML 節點資料流結構和概念</span><span class="sxs-lookup"><span data-stu-id="c2ea3-123">Understanding XAML Node Stream Structures and Concepts</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-124">初始化 <see cref="T:System.Xaml.XamlReader" /> 類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-124">Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-125">關閉 XAML 節點資料流。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-125">Closes the XAML node stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-126">在基底實作中，呼叫<xref:System.Xaml.XamlReader.Close%2A>呼叫<xref:System.Xaml.XamlReader.Dispose%2A>具有`isDisposing`做為參數`true`。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-126">In the base implementation, calling <xref:System.Xaml.XamlReader.Close%2A> calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="c2ea3-127"><see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-127"><see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c2ea3-128">釋放 <see cref="T:System.Xaml.XamlReader" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-128">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" />, and optionally, releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-129">您必須呼叫基底類別，以取得<xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-129">You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-130">取得是否已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-130">Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</span></span></summary>
        <value><span data-ttu-id="c2ea3-131">如果已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-131"><see langword="true" /> if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-132">在衍生類別中實作時取得值，這個值會報告讀取器位置是否在檔案結尾。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-132">When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</span></span></summary>
        <value><span data-ttu-id="c2ea3-133">如果位置是在 XAML 節點資料流的概念檔案結尾則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-133"><see langword="true" /> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-134">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.IsEof%2A>，與輸入的子樹狀結構的界限會正確反映的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-134">Subtree readers can call <xref:System.Xaml.XamlReader.IsEof%2A>, with behavior that correctly reflects the bounds of the entered subtree.</span></span> <span data-ttu-id="c2ea3-135">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-135">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-136">在衍生類別中實作時，如果讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-136">When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</span></span></summary>
        <value><span data-ttu-id="c2ea3-137">目前的成員，如果讀取器位置不在成員上，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-137">The current member; or <see langword="null" />, if the reader position is not on a member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-138">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.Member%2A>，但有限制的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-138">Subtree readers can call <xref:System.Xaml.XamlReader.Member%2A>, with behavior restrictions.</span></span> <span data-ttu-id="c2ea3-139">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-139">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-140">在衍生類別中實作時，從目前節點取得 XAML 命名空間資訊。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-140">When implemented in a derived class, gets the XAML namespace information from the current node.</span></span></summary>
        <value><span data-ttu-id="c2ea3-141">XAML 命名空間資訊 (如果有的話)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-141">The XAML namespace information, if it is available; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-142">此 API 的預定的設計是要傳回非 null 的結果才<xref:System.Xaml.XamlReader.NodeType%2A>目前節點是<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-142">The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>.</span></span> <span data-ttu-id="c2ea3-143">屬性不會報告套用至物件或成員的一般範圍而言，XAML 命名空間下的 XAML 結構描述內容的解譯。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-143">The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</span></span> <span data-ttu-id="c2ea3-144">您的應用程式必須提供方法來快取資訊以供您處理 XAML 命名空間，因為它會周遊 XAML 節點，如果您需要該資訊以外的 XAML 結構描述內容報告的方式，它的寫入器的方式。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-144">Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</span></span> <span data-ttu-id="c2ea3-145">請參閱<xref:System.Xaml.XamlXmlReader.Namespace%2A>的附註的參考實作。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-145">See <xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-146">在衍生類別中實作時，會取得目前節點的型別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-146">When implemented in a derived class, gets the type of the current node.</span></span></summary>
        <value><span data-ttu-id="c2ea3-147"><see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-147">A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-148">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.NodeType%2A>，但有限制的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-148">Subtree readers can call <xref:System.Xaml.XamlReader.NodeType%2A>, with behavior restrictions.</span></span> <span data-ttu-id="c2ea3-149">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-149">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-150">在衍生類別中實作時，會從來源提供下一個 XAML 節點 (如果有節點的話)。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-150">When implemented in a derived class, provides the next XAML node from the source, if a node is available.</span></span></summary>
        <returns><span data-ttu-id="c2ea3-151">如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-151"><see langword="true" /> if a node is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-152">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.Read%2A>，但有限制的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-152">Subtree readers can call <xref:System.Xaml.XamlReader.Read%2A>, with behavior restrictions.</span></span> <span data-ttu-id="c2ea3-153">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-153">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-154">傳回以目前 <see cref="T:System.Xaml.XamlReader" /> 為基礎的 <see cref="T:System.Xaml.XamlReader" />，而傳回的 <see cref="T:System.Xaml.XamlReader" /> 可用來逐一查看 XAML 節點結構的子樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-154">Returns a <see cref="T:System.Xaml.XamlReader" /> that is based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</span></span></summary>
        <returns><span data-ttu-id="c2ea3-155">子樹狀結構的新 XAML 讀取器執行個體。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-155">A new XAML reader instance for the subtree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-156">此方法的預設實作，並且會傳回有效<xref:System.Xaml.XamlReader>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-156">This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="c2ea3-157">傳回<xref:System.Xaml.XamlReader>是內部類別，可限制特定<xref:System.Xaml.XamlReader>動作。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-157">The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions.</span></span> <span data-ttu-id="c2ea3-158">限制是一致的目的是讀取只維度子樹狀結構的較大的來源 XAML 節點集，並傳回檔案結尾或`null`在目前節點子樹狀結構結束時。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-158">The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.</span></span>  
  
 <span data-ttu-id="c2ea3-159">一般而言，您應該檢查目前的節點，從初始<xref:System.Xaml.XamlReader.Read%2A>來判斷是否需要子樹狀目錄的讀取器。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-159">Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader.</span></span> <span data-ttu-id="c2ea3-160">您對此所做的檢查可能會實作而定;不過，請避免建立多個樹狀子目錄讀取器的每個樹狀子目錄。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-160">How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</span></span> <span data-ttu-id="c2ea3-161">此外，避免 叫用特定節點的情況下的子樹狀目錄讀取器 (例如，對於<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>)，不能包含子樹狀結構的節點。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-161">In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) that cannot contain a subtree of nodes.</span></span>  
  
 <span data-ttu-id="c2ea3-162">取得子樹狀目錄的讀取器之後，您必須呼叫<xref:System.Xaml.XamlReader.Read%2A>上，以取得目前的節點 (或呼叫<xref:System.Xaml.XamlReader.Skip%2A>來取得下一個節點)。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-162">After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node).</span></span> <span data-ttu-id="c2ea3-163">您自動取得初始節點位置樹狀子目錄的讀取器從您在建立時。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-163">You do not automatically obtain an initial node position from the subtree reader when you create it.</span></span>  
  
 <span data-ttu-id="c2ea3-164">您藉由呼叫取得讀取器<xref:System.Xaml.XamlReader.ReadSubtree%2A>從這個預設實作是內部的類別。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-164">The reader you obtain by calling <xref:System.Xaml.XamlReader.ReadSubtree%2A> from this default implementation is an internal class.</span></span> <span data-ttu-id="c2ea3-165">內部類別，根據其行為<xref:System.Xaml.XamlReader>正在實作時使用<xref:System.Xaml.XamlReader.ReadSubtree%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-165">The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when <xref:System.Xaml.XamlReader.ReadSubtree%2A> is called.</span></span> <span data-ttu-id="c2ea3-166">內部類別的目的是要包裝<xref:System.Xaml.XamlReader.Read%2A>和一般的周遊行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-166">The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior.</span></span> <span data-ttu-id="c2ea3-167">透過追蹤周遊會保持在預定的樹狀子目錄內<xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember>配對或<xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject>組。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-167">The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType.StartMember>/<xref:System.Xaml.XamlNodeType.EndMember> pairs or <xref:System.Xaml.XamlNodeType.StartObject>/<xref:System.Xaml.XamlNodeType.EndObject> pairs.</span></span> <span data-ttu-id="c2ea3-168">它也可正確地傳回`false`for<xref:System.Xaml.XamlReader.Read%2A>並`true`的<xref:System.Xaml.XamlReader.IsEof%2A>當讀取器結尾的子樹狀結構，它的進入點所定義。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-168">It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point.</span></span> <span data-ttu-id="c2ea3-169">一般情況下，您會假設任何<xref:System.Xaml.XamlReader>您從子樹狀目錄的讀取器呼叫的 API 有相同的實作，做為整體<xref:System.Xaml.XamlReader>除了周遊週框的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-169">In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.</span></span>  
  
 <span data-ttu-id="c2ea3-170">不過，<xref:System.Xaml.XamlReader.ReadSubtree%2A>是虛擬的。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-170">However, <xref:System.Xaml.XamlReader.ReadSubtree%2A> is virtual.</span></span> <span data-ttu-id="c2ea3-171">因此，特定<xref:System.Xaml.XamlReader>實作可提供不同的行為<xref:System.Xaml.XamlReader>內部包裝函式的行為; 而<xref:System.Xaml.XamlReader>實作可以即使停用子樹狀目錄讀取器功能藉由傳回<xref:System.NotImplementedException>或其他例外狀況。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-171">Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-172">在衍生類別中實作時取得物件，這個物件會為資訊集提供 XAML 結構描述內容資訊。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-172">When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</span></span></summary>
        <value><span data-ttu-id="c2ea3-173">為資訊集提供 XAML 結構描述內容資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-173">An object that provides XAML schema context information for the information set.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-174">略過目前節點，並使讀取器位置前進至下一個節點。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-174">Skips the current node and advances the reader position to the next node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-175">一次略過<xref:System.Xaml.XamlReader.Read%2A>預設會呼叫<xref:System.Xaml.XamlReader.Skip%2A>實作。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-175">Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default <xref:System.Xaml.XamlReader.Skip%2A> implementation.</span></span> <span data-ttu-id="c2ea3-176">您通常不會呼叫<xref:System.Xaml.XamlReader.Skip%2A>和<xref:System.Xaml.XamlReader.Read%2A>序列中。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-176">You typically do not call <xref:System.Xaml.XamlReader.Skip%2A> and <xref:System.Xaml.XamlReader.Read%2A> in sequence.</span></span>  
  
 <span data-ttu-id="c2ea3-177">在預設<xref:System.Xaml.XamlReader.Skip%2A>實作中，不同的動作會依據<xref:System.Xaml.XamlReader.NodeType%2A>讀取器位置是目前。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-177">In the default <xref:System.Xaml.XamlReader.Skip%2A> implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on.</span></span> <span data-ttu-id="c2ea3-178">如果讀取器位置是目前<xref:System.Xaml.XamlNodeType.StartMember>或<xref:System.Xaml.XamlNodeType.StartObject>、 成員或物件會略過。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-178">If the reader position is currently on a <xref:System.Xaml.XamlNodeType.StartMember> or <xref:System.Xaml.XamlNodeType.StartObject>, that member or object is skipped.</span></span> <span data-ttu-id="c2ea3-179">如需其他<xref:System.Xaml.XamlReader.NodeType%2A>值，呼叫以外，不採取任何動作<xref:System.Xaml.XamlReader.Read%2A>從目前的位置。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-179">For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.</span></span>  
  
 <span data-ttu-id="c2ea3-180">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.Skip%2A>，但有限制的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-180">Subtree readers can call <xref:System.Xaml.XamlReader.Skip%2A>, with behavior restrictions.</span></span> <span data-ttu-id="c2ea3-181">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-181">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 <span data-ttu-id="c2ea3-182">節點樹狀目錄中的行為<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>為基礎的 XML 對等項目<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-182">The node tree behavior of <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c2ea3-183">根據<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>行為等價<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>會略過的節點和它的子樹狀目錄中，而不只是單一項目節點。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-183">Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> behavior equivalence, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> skips the node and its subtree, not just the single entry node.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2ea3-184">釋放 <see cref="T:System.Xaml.XamlReader" /> 類別目前的執行個體所使用的全部資源。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-184">Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-185">在衍生類別中實作時，會取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-185">When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</span></span></summary>
        <value><span data-ttu-id="c2ea3-186">目前節點的 <see cref="T:System.Xaml.XamlType" />，如果目前讀取器位置不在物件上，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-186">The <see cref="T:System.Xaml.XamlType" /> of the current node; or <see langword="null" />, if the current reader position is not on an object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2ea3-187">樹狀子目錄的讀取器可以呼叫<xref:System.Xaml.XamlReader.Type%2A>，但有限制的行為。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-187">Subtree readers can call <xref:System.Xaml.XamlReader.Type%2A>, with behavior restrictions.</span></span> <span data-ttu-id="c2ea3-188">如需詳細資訊，請參閱中的 「 子樹狀目錄讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-188">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2ea3-189">在衍生類別中實作時，會取得目前節點的值。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-189">When implemented in a derived class, gets the value of the current node.</span></span></summary>
        <value><span data-ttu-id="c2ea3-190">目前節點的值，如果目前讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c2ea3-190">The value of the current node; or <see langword="null" />, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>