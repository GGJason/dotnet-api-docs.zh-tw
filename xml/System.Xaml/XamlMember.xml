<Type Name="XamlMember" FullName="System.Xaml.XamlMember">
  <TypeSignature Language="C#" Value="public class XamlMember : IEquatable&lt;System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMember extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlMember" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMember&#xA;Implements IEquatable(Of XamlMember)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMember : IEquatable&lt;System::Xaml::XamlMember ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlMember&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9219a-101">提供 XAML 型別系統識別項給 XAML 型別的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-101">Provides the XAML type system identifier for members of XAML types.</span></span> <span data-ttu-id="9219a-102">這個識別項會由 XAML 讀取器和 XAML 寫入器在處理成員節點期間 (當 XAML 讀取器位於 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 時) 使用，同時也會用於一般 XAML 型別系統邏輯。</span><span class="sxs-lookup"><span data-stu-id="9219a-102">The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />) and also for general XAML type system logic.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-103"><xref:System.Xaml.XamlMember> 可以使用三個方法，傳回 XAML 成員的相關資訊： 標準 common language runtime (CLR) 反映;呼叫內部參考僅限反映技術 Api 該使用最佳化的位元旗標。虛擬呼叫覆寫或`Lookup*`API 所提供的可能<xref:System.Xaml.XamlMember>子類別。</span><span class="sxs-lookup"><span data-stu-id="9219a-103"><xref:System.Xaml.XamlMember> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the `Lookup*` API that is provided by possible <xref:System.Xaml.XamlMember> subclasses.</span></span> <span data-ttu-id="9219a-104">對於大部分的.NET Framework XAML 服務 Api 使用和<xref:System.Xaml.XamlMember>API，您使用的預設 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-104">For most uses of .NET Framework XAML Services APIs and the <xref:System.Xaml.XamlMember> API, you use the default XAML schema context.</span></span> <span data-ttu-id="9219a-105">.NET Framework XAML 服務的預設 XAML 結構描述內容會使用 CLR 型別系統支援。</span><span class="sxs-lookup"><span data-stu-id="9219a-105">The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</span></span> <span data-ttu-id="9219a-106">這可讓處理任何類型或成員定義在中，或其他可、 CLR 和其反映技術的 XAML 讀取器和 XAML 寫入器。</span><span class="sxs-lookup"><span data-stu-id="9219a-106">This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</span></span>  
  
## <a name="lookup-apis-and-xamlmember-derived-classes"></a><span data-ttu-id="9219a-107">查閱 \* Api 和 XamlMember 衍生類別</span><span class="sxs-lookup"><span data-stu-id="9219a-107">Lookup\* APIs and XamlMember Derived Classes</span></span>  
 <span data-ttu-id="9219a-108"><xref:System.Xaml.XamlMember> 定義數個衍生類別的虛擬成員可能會覆寫。</span><span class="sxs-lookup"><span data-stu-id="9219a-108"><xref:System.Xaml.XamlMember> defines several virtual members that derived classes might override.</span></span> <span data-ttu-id="9219a-109">這些成員具有一律開頭為字串的名稱`Lookup`。</span><span class="sxs-lookup"><span data-stu-id="9219a-109">These members have names that always start with the string `Lookup`.</span></span> <span data-ttu-id="9219a-110">API 的其餘部分名稱參考的虛擬方法影響的屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-110">The remainder of the API name then references the property that the virtual method influences.</span></span> <span data-ttu-id="9219a-111">例如，<xref:System.Xaml.XamlMember>衍生的類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>影響哪些基底定義的屬性<xref:System.Xaml.XamlMember.TargetType%2A>傳回衍生類別中。</span><span class="sxs-lookup"><span data-stu-id="9219a-111">For example, a <xref:System.Xaml.XamlMember> derived class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to influence what the base-defined property <xref:System.Xaml.XamlMember.TargetType%2A> returns in a derived class.</span></span> <span data-ttu-id="9219a-112">您可以預測中這類屬性的傳回值<xref:System.Xaml.XamlMember>或現有的衍生類別所閱讀相關的文件`Lookup*`方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-112">You can predict return values for such properties in <xref:System.Xaml.XamlMember> or existing derived classes by reading the documentation for the relevant `Lookup*` methods.</span></span>  
  
 <span data-ttu-id="9219a-113">目的`Lookup*`方法是提供 XAML 類型系統擴充功能的技術，其中包含<xref:System.Xaml.XamlMember>基底類別。</span><span class="sxs-lookup"><span data-stu-id="9219a-113">The purpose of the `Lookup*` methods is to provide a XAML type system extension technique that incorporates the <xref:System.Xaml.XamlMember> base class.</span></span> <span data-ttu-id="9219a-114">由衍生自<xref:System.Xaml.XamlMember>和覆寫`Lookup`虛擬成員，您可以定義 XAML 結構描述的是 XAML 成員的概念中，XAML 類型系統而不必受限於支援類型系統或技術的細節。</span><span class="sxs-lookup"><span data-stu-id="9219a-114">By deriving from <xref:System.Xaml.XamlMember> and overriding the `Lookup` virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</span></span> <span data-ttu-id="9219a-115">您可以也使用提供的 XAML 結構描述內容在此配置下，仍會傳回您想要的結果。</span><span class="sxs-lookup"><span data-stu-id="9219a-115">You can also use a provided XAML schema context under this scheme and still return the results you want.</span></span>  
  
 <span data-ttu-id="9219a-116">例如，請考慮<xref:System.Xaml.XamlMember>屬性<xref:System.Xaml.XamlMember.IsWritePublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-116">As an example, consider the <xref:System.Xaml.XamlMember> property <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="9219a-117">這個屬性就會通知呼叫端，該作業，例如使用<xref:System.Xaml.XamlWriter>序列化可以寫入此成員值的目標物件上。</span><span class="sxs-lookup"><span data-stu-id="9219a-117">This property informs callers that operations such as using a <xref:System.Xaml.XamlWriter> for serialization can write a value for this member on a target object.</span></span> <span data-ttu-id="9219a-118">在預設實作中，該成員是否可寫入的決定使用針對支援 CLR 反映技術<xref:System.Type>及其成員 ( <xref:System.Reflection.MemberInfo>)。</span><span class="sxs-lookup"><span data-stu-id="9219a-118">In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <xref:System.Type> and its members (the <xref:System.Reflection.MemberInfo>).</span></span> <span data-ttu-id="9219a-119">因此，根據預設，XAML 類型系統取決於 CLR 型別系統。</span><span class="sxs-lookup"><span data-stu-id="9219a-119">Therefore, by default, the XAML type system depends on the CLR type system.</span></span> <span data-ttu-id="9219a-120">不過，您可以移除此依存性，您 XAML 類型系統報告的<xref:System.Xaml.XamlMember.IsWritePublic%2A>藉由覆寫應用程式開發介面<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-120">However, you can remove this dependency for your XAML type system reporting of <xref:System.Xaml.XamlMember.IsWritePublic%2A> by overriding the API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</span></span> <span data-ttu-id="9219a-121">在您的覆寫中，您可以使用例如屬於您的技術，最適合用於固定的 XAML 詞彙，或是各種其他策略來判斷是否為 XAML 成員是在可寫入的主要的查閱資料表的中繼資料的其他決定您XAML 詞彙。</span><span class="sxs-lookup"><span data-stu-id="9219a-121">Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</span></span>  
  
## <a name="constructing-xamlmember-without-xaml-schema-context"></a><span data-ttu-id="9219a-122">建構 XamlMember 沒有 XAML 結構描述內容</span><span class="sxs-lookup"><span data-stu-id="9219a-122">Constructing XamlMember Without XAML Schema Context</span></span>  
 <span data-ttu-id="9219a-123">大部分的建構函式的<xref:System.Xaml.XamlMember>需要<xref:System.Xaml.XamlSchemaContext>做為其初始設定的一部分。</span><span class="sxs-lookup"><span data-stu-id="9219a-123">Most constructors of <xref:System.Xaml.XamlMember> require a <xref:System.Xaml.XamlSchemaContext> as part of their initialization.</span></span> <span data-ttu-id="9219a-124"><xref:System.Xaml.XamlSchemaContext>也是必要的許多內部<xref:System.Xaml.XamlSchemaContext>作業，例如取得轉寄從支援類型的資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-124">The <xref:System.Xaml.XamlSchemaContext> is also necessary for many internal <xref:System.Xaml.XamlSchemaContext> operations, such as obtaining information that is being forwarded from the backing type.</span></span> <span data-ttu-id="9219a-125">當您正在使用<xref:System.Xaml.XamlMember>API，您通常會有<xref:System.Xaml.XamlSchemaContext>的是可以從周圍建構例如<xref:System.Xaml.XamlWriter>。</span><span class="sxs-lookup"><span data-stu-id="9219a-125">When you are working with the <xref:System.Xaml.XamlMember> API, you typically have a <xref:System.Xaml.XamlSchemaContext> that is available from a surrounding construct such as a <xref:System.Xaml.XamlWriter>.</span></span> <span data-ttu-id="9219a-126">在此情況下，您可以傳遞<xref:System.Xaml.XamlSchemaContext>透過參考所有 XAML 類型系統呼叫需要 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-126">In this case, you can pass the <xref:System.Xaml.XamlSchemaContext> reference through to all XAML type system calls that require a XAML schema context.</span></span>  
  
 <span data-ttu-id="9219a-127">一個特定建構函式， <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>，不需要<xref:System.Xaml.XamlSchemaContext>。</span><span class="sxs-lookup"><span data-stu-id="9219a-127">One specific constructor, <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, does not require a <xref:System.Xaml.XamlSchemaContext>.</span></span> <span data-ttu-id="9219a-128">不過， <xref:System.Xaml.XamlMember> ，建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-128">However, a <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-129">適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="9219a-129">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="9219a-130">使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlMember>報表`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-130">Using the .NET Framework XAML services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-131">您不應該建構<xref:System.Xaml.XamlMember>的值`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-131">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="9219a-132">例如，一或多個下列可能的實作，則為 true:</span><span class="sxs-lookup"><span data-stu-id="9219a-132">For example, one or more of the  following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="9219a-133">稍後可 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-133">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="9219a-134">您使用的成員啟動程式模式。</span><span class="sxs-lookup"><span data-stu-id="9219a-134">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="9219a-135">刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>自訂 XAML 寫入器。</span><span class="sxs-lookup"><span data-stu-id="9219a-135">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlType" />
    <altmember cref="T:System.Xaml.XamlDirective" />
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9219a-136">初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-136">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="9219a-137">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-137">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-138">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-138">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="9219a-139">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-139">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-140">如果成員表示的事件 （事件處理常式連接點屬性），請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-140">Use this constructor if the member represents an event (event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="9219a-141">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-141">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-142">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-142">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="9219a-143">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-143">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-144">如果成員表示的屬性 （並不特別的事件處理常式連接），請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-144">Use this constructor if the member represents a property (and specifically is not an event handler connection).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="9219a-145">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-145">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-146">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-146">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="9219a-147"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段反映呼叫。</span><span class="sxs-lookup"><span data-stu-id="9219a-147">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="9219a-148">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-148">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-149">如果成員表示一個事件 （或事件處理常式連接點屬性），請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-149">Use this constructor if the member represents an event (or an event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="9219a-150">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-150">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-151">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-151">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="9219a-152"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="9219a-152">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="9219a-153">使用反映 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-153">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-154">使用這個建構函式，而且不是事件處理常式連接才成員表示的屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-154">Use this constructor only if the member represents a property and if it is not an event handler connection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="9219a-155">可附加事件的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="9219a-155">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="9219a-156">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-156">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-157">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-157">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="9219a-158">針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-158">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-159">如果成員表示可附加的事件成員，請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-159">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Xaml.XamlType declaringType, bool isAttachable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, declaringType As XamlType, isAttachable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ name, System::Xaml::XamlType ^ declaringType, bool isAttachable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declaringType" Type="System.Xaml.XamlType" />
        <Parameter Name="isAttachable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9219a-160">成員的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="9219a-160">The string name of the member.</span></span></param>
        <param name="declaringType"><span data-ttu-id="9219a-161">進行宣告的型別的 <see cref="T:System.Xaml.XamlType" /> 資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-161">The <see cref="T:System.Xaml.XamlType" /> information for the declaring type.</span></span></param>
        <param name="isAttachable">
          <span data-ttu-id="9219a-162"><see langword="true" /> 表示成員為可附加成員，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-162"><see langword="true" /> to indicate that the member is attachable; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9219a-163">使用字串名稱並宣告 <see cref="T:System.Xaml.XamlMember" /> 資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-163">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using a string name and declaring <see cref="T:System.Xaml.XamlType" /> information.</span></span> <span data-ttu-id="9219a-164">使用此簽章建構的 <see cref="T:System.Xaml.XamlMember" /> 具有諸多限制。</span><span class="sxs-lookup"><span data-stu-id="9219a-164">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with this signature has significant limitations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-165">A <xref:System.Xaml.XamlMember> ，建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-165">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-166">適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="9219a-166">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="9219a-167">使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlMember>報表`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-167">Using the .NET Framework XAML Services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-168">您不應該建構<xref:System.Xaml.XamlMember>與<xref:System.Xaml.XamlMember.IsUnknown%2A>`true`除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-168">You should not construct a <xref:System.Xaml.XamlMember> with <xref:System.Xaml.XamlMember.IsUnknown%2A>`true` unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="9219a-169">例如，一或多個下列可能的實作，則為 true:</span><span class="sxs-lookup"><span data-stu-id="9219a-169">For example, one or more of the following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="9219a-170">稍後可 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-170">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="9219a-171">您使用的成員啟動程式模式。</span><span class="sxs-lookup"><span data-stu-id="9219a-171">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="9219a-172">刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>自訂 XAML 寫入器。</span><span class="sxs-lookup"><span data-stu-id="9219a-172">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9219a-173"><paramref name="name" /> 或 <paramref name="declaringType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-173"><paramref name="name" /> or <paramref name="declaringType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="9219a-174">可附加屬性的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="9219a-174">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="9219a-175">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-175">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="9219a-176">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-176">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-177">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-177">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="9219a-178">針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-178">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-179">如果成員表示的可附加屬性，請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-179">Use this constructor if the member represents an attachable property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="9219a-180">可附加事件的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="9219a-180">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="9219a-181">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-181">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-182">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-182">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="9219a-183"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="9219a-183">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="9219a-184">針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-184">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-185">如果成員表示可附加的事件成員，請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-185">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="9219a-186">可附加屬性的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="9219a-186">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="9219a-187">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-187">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="9219a-188">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-188">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="9219a-189">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-189">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="9219a-190"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="9219a-190">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="9219a-191">針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9219a-191">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-192">如果成員表示的可附加屬性的成員，請使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="9219a-192">Use this constructor if the member represents an attachable property member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ DeclaringType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-193">取得型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-193">Gets the <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="9219a-194">型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-194">The <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-195">此值通常在初始化期間設定，且通常不`null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-195">This value is typically set during initialization and is usually not `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9219a-196"><xref:System.Xaml.XamlMember.DeclaringType%2A> 資訊可以傳入建構函式進行初始化。</span><span class="sxs-lookup"><span data-stu-id="9219a-196"><xref:System.Xaml.XamlMember.DeclaringType%2A> information can be passed in by constructors for initialization.</span></span> <span data-ttu-id="9219a-197">藉由直接呼叫基底建構函式，初始化<xref:System.Xaml.XamlMember>衍生的類別可以省略部分程式在基底類別中進行值檢查。</span><span class="sxs-lookup"><span data-stu-id="9219a-197">By calling directly into base constructors, initialization for <xref:System.Xaml.XamlMember> derived classes can omit some of the value-checks that are made in the base class.</span></span> <span data-ttu-id="9219a-198">因此，衍生的初始化可以變更報告的型別成員關聯性的資訊是 XAML 成員，使它不再符合預期的方式為基礎的 CLR 宣告的型別系統資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-198">Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</span></span> <span data-ttu-id="9219a-199">宣告型別資訊的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-199">For any security-critical checks of declaring type information, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-200">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</span><span class="sxs-lookup"><span data-stu-id="9219a-200">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="9219a-201"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</span><span class="sxs-lookup"><span data-stu-id="9219a-201">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-202">呼叫<xref:System.Xaml.XamlMember.DeferringLoader%2A>叫用<xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-202">Calling <xref:System.Xaml.XamlMember.DeferringLoader%2A> invokes <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-203">在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-203">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependsOn">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; DependsOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; DependsOn" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DependsOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependsOn As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ DependsOn { System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-204">取得 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</span><span class="sxs-lookup"><span data-stu-id="9219a-204">Gets a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="9219a-205">這些物件會報告因與此 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-205">These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="9219a-206"><see cref="T:System.Xaml.XamlMember" /> 物件的清單。</span><span class="sxs-lookup"><span data-stu-id="9219a-206">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-207">呼叫<xref:System.Xaml.XamlMember.DependsOn%2A>叫用<xref:System.Xaml.XamlMember.LookupDependsOn%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-207">Calling <xref:System.Xaml.XamlMember.DependsOn%2A> invokes <xref:System.Xaml.XamlMember.LookupDependsOn%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-208">在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-208">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="9219a-209">`DependsOn`模式可以套用至刻意有所出入一般的 XAML 規則的物件模型案例。</span><span class="sxs-lookup"><span data-stu-id="9219a-209">The `DependsOn` pattern can be applied to object model cases that deliberately contradict a general XAML rule.</span></span> <span data-ttu-id="9219a-210">一般的 XAML 規則是類型的成員，不會傳遞做為初始文字 （或在 XAML 2009 中的 factory 方法） 必須能夠依任何順序指定。</span><span class="sxs-lookup"><span data-stu-id="9219a-210">The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</span></span> <span data-ttu-id="9219a-211">藉由套用`DependsOn`模式給成員，您可以指示 XAML 寫入器永遠會處理此成員之前參考的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-211">By applying a `DependsOn` pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</span></span> <span data-ttu-id="9219a-212">您可以套用在目前成員的值需要內容或之後，才可設定其他成員的其他資訊的位置的情況下此模式。</span><span class="sxs-lookup"><span data-stu-id="9219a-212">You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</span></span>  
  
 <span data-ttu-id="9219a-213">`DependsOn`模式應該套用明智並保留屬性情況下，它可以做架構的用途。</span><span class="sxs-lookup"><span data-stu-id="9219a-213">The `DependsOn` pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</span></span> <span data-ttu-id="9219a-214">慢 XAML 處理可能需要大量的相依性。</span><span class="sxs-lookup"><span data-stu-id="9219a-214">Large numbers of dependencies have the potential to slow down XAML processing.</span></span> <span data-ttu-id="9219a-215">此外，很可能會產生循環相依性，在此情況下，XAML 處理行為是未定義。</span><span class="sxs-lookup"><span data-stu-id="9219a-215">Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</span></span>  
  
 <span data-ttu-id="9219a-216">範例`DependsOn`從 WPF 的情況包括某些屬性上<xref:System.Windows.Controls.ControlTemplate>和<xref:System.Windows.DataTemplate>上<xref:System.Windows.Trigger>，然後在<xref:System.Windows.Setter>。</span><span class="sxs-lookup"><span data-stu-id="9219a-216">Example `DependsOn` scenarios from WPF include certain properties on <xref:System.Windows.Controls.ControlTemplate> and <xref:System.Windows.DataTemplate>, on <xref:System.Windows.Trigger>, and on <xref:System.Windows.Setter>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.DependsOnAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9219a-217">指出目前的物件和另一個物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="9219a-217">Indicates whether the current object is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="9219a-218">要與這個物件比較的物件。</span><span class="sxs-lookup"><span data-stu-id="9219a-218">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="9219a-219">指出目前的物件和另一個物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="9219a-219">Indicates whether the current object is equal to another object.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-220">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="obj" />，否則即為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-220"><see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlMember other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlMember other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlMember ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="9219a-221">要與此物件進行比較的物件。</span><span class="sxs-lookup"><span data-stu-id="9219a-221">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="9219a-222">指出目前的物件是否等於另一個相同類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9219a-222">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-223">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-223"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-224">傳回這個物件的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="9219a-224">Returns the hash code for this object.</span></span></summary>
        <returns><span data-ttu-id="9219a-225">整數雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="9219a-225">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-226">傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</span><span class="sxs-lookup"><span data-stu-id="9219a-226">Returns a list of XAML namespaces where this XAML member can exist.</span></span></summary>
        <returns><span data-ttu-id="9219a-227">XAML 命名空間識別項的清單 (字串形式)。</span><span class="sxs-lookup"><span data-stu-id="9219a-227">A list of XAML namespace identifiers as strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-228">預設實作會傳回<xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType>呼叫結果<xref:System.Xaml.XamlMember.DeclaringType%2A>與此相關聯<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="9219a-228">The default implementation returns the <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType> call result from the <xref:System.Xaml.XamlMember.DeclaringType%2A> that is associated with this <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlMemberInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlMemberInvoker ^ Invoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-229">取得與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-229">Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="9219a-230">與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-230">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-231">`Invoker`模式是進階的 XAML 類型系統擴充功能技術。</span><span class="sxs-lookup"><span data-stu-id="9219a-231">The `Invoker` pattern is an advanced XAML type system extension technique.</span></span> <span data-ttu-id="9219a-232">`Invoker`模式提供插入不同的結構描述型別對應的行為，同時仍然使用.NET Framework XAML 服務 XAML 類型系統定義的方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-232">The `Invoker` pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</span></span>  
  
 <span data-ttu-id="9219a-233">如果<xref:System.Xaml.XamlMember.LookupInvoker%2A>覆寫會傳回`null`，或如果預設實作會傳回`null`因為其欠缺<xref:System.Xaml.XamlMember.UnderlyingMember%2A>這個<xref:System.Xaml.XamlMember>、<xref:System.Xaml.XamlMember.Invoker%2A>屬性會傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9219a-233">If a <xref:System.Xaml.XamlMember.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because it lacks the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> for this <xref:System.Xaml.XamlMember>, the <xref:System.Xaml.XamlMember.Invoker%2A> property returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9219a-234"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 是預設值。</span><span class="sxs-lookup"><span data-stu-id="9219a-234"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> is the default.</span></span> <span data-ttu-id="9219a-235">這適用於大部分的操作，使用.NET Framework XAML 服務和預設 XAML 結構描述內容，並在其中任何特定覆寫`Invoker`XAML 類型系統實體的建構函式傳遞模式。</span><span class="sxs-lookup"><span data-stu-id="9219a-235">This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override `Invoker` patterns are passed for construction of XAML type system entities.</span></span>  
  
 <span data-ttu-id="9219a-236">呼叫<xref:System.Xaml.XamlMember.Invoker%2A>叫用<xref:System.Xaml.XamlMember.LookupInvoker%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-236">Calling <xref:System.Xaml.XamlMember.Invoker%2A> invokes <xref:System.Xaml.XamlMember.LookupInvoker%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-237">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-237">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-238">如果這個 <see cref="T:System.Xaml.XamlMember" /> 報告為環境屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-238"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-239">呼叫<xref:System.Xaml.XamlMember.IsAmbient%2A>叫用<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-239">Calling <xref:System.Xaml.XamlMember.IsAmbient%2A> invokes <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-240">在其中初始的內部反映邏輯具有已設定資訊的實作，會發生此問題。</span><span class="sxs-lookup"><span data-stu-id="9219a-240">This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="9219a-241">檢查環境的內容通常以確定物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。</span><span class="sxs-lookup"><span data-stu-id="9219a-241">Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="9219a-242">.NET Framework XAML 服務 Api 和預設 XAML 結構描述內容會填入這個屬性與為基礎的值<xref:System.Windows.Markup.AmbientAttribute>。</span><span class="sxs-lookup"><span data-stu-id="9219a-242">The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <xref:System.Windows.Markup.AmbientAttribute>.</span></span> <span data-ttu-id="9219a-243">預設實作<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>使用這個現有<xref:System.Windows.Markup.AmbientAttribute>技術，並傳回`true`如果<xref:System.Windows.Markup.AmbientAttribute>存在於宣告的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-243">The default implementation of <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> uses this existing <xref:System.Windows.Markup.AmbientAttribute> technique, and it returns `true` if <xref:System.Windows.Markup.AmbientAttribute> exists on a member declaration.</span></span>  
  
 <span data-ttu-id="9219a-244"><xref:System.Windows.Markup.AmbientAttribute> 找到的數個 WPF 類型，包括成員上<xref:System.Windows.Application>， <xref:System.Windows.Setter>，和<xref:System.Windows.Style>。</span><span class="sxs-lookup"><span data-stu-id="9219a-244"><xref:System.Windows.Markup.AmbientAttribute> is found on members of several WPF types, which include <xref:System.Windows.Application>, <xref:System.Windows.Setter>, and <xref:System.Windows.Style>.</span></span> <span data-ttu-id="9219a-245">它也可以找到上<xref:System.Windows.ResourceDictionary>connotes，任何成員，會使用型別<xref:System.Windows.ResourceDictionary>為其型別應該視為環境即使未特別屬性成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-245">It is also found on the <xref:System.Windows.ResourceDictionary> type, which connotes that any member that uses <xref:System.Windows.ResourceDictionary> as its type should be considered ambient even if the member is not specifically attributed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsAttachable">
      <MemberSignature Language="C#" Value="public bool IsAttachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAttachable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAttachable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAttachable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-246">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為可附加的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-246">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is an attachable member.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-247">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是可附加的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-247"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is an attachable member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-248"><xref:System.Xaml.XamlMember.IsAttachable%2A>值會初始化為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="9219a-248">The <xref:System.Xaml.XamlMember.IsAttachable%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsDirective" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirective As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-249">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為 XAML 指示詞。</span><span class="sxs-lookup"><span data-stu-id="9219a-249">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-250">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指示詞，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-250"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-251"><xref:System.Xaml.XamlMember.IsDirective%2A>值會初始化為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="9219a-251">The <xref:System.Xaml.XamlMember.IsDirective%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="9219a-252">基底<xref:System.Xaml.XamlMember>建構函式初始化以便<xref:System.Xaml.XamlMember.IsDirective%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="9219a-252">The base <xref:System.Xaml.XamlMember> constructors initialize so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `false`.</span></span> <span data-ttu-id="9219a-253">不過，<xref:System.Xaml.XamlDirective>類別 (<xref:System.Xaml.XamlMember>衍生的類別) 會初始化以便<xref:System.Xaml.XamlMember.IsDirective%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="9219a-253">However, the <xref:System.Xaml.XamlDirective> class (a <xref:System.Xaml.XamlMember> derived class) initializes so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `true`.</span></span>  
  
 <span data-ttu-id="9219a-254">如果您想要報告<xref:System.Xaml.XamlMember.IsDirective%2A>為`true`的 XAML 成員的自訂 XAML 結構描述類別的呼叫端，確定您衍生自<xref:System.Xaml.XamlDirective>因為這是為了允許該行為的唯一方式。</span><span class="sxs-lookup"><span data-stu-id="9219a-254">If you want to report <xref:System.Xaml.XamlMember.IsDirective%2A> as `true` to callers of a custom XAML schema class for XAML members, make sure you derive from <xref:System.Xaml.XamlDirective> because that is the only way to enable that behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEvent">
      <MemberSignature Language="C#" Value="public bool IsEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEvent" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsEvent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEvent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-255">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-255">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents an event member.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-256">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-256"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-257">呼叫<xref:System.Xaml.XamlMember.IsEvent%2A>叫用<xref:System.Xaml.XamlMember.LookupIsEvent%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-257">Calling <xref:System.Xaml.XamlMember.IsEvent%2A> invokes <xref:System.Xaml.XamlMember.LookupIsEvent%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-258">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否是使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlMember.Name" /> 進行初始化。</span><span class="sxs-lookup"><span data-stu-id="9219a-258">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlMember.Name" />.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-259">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是使用有效的 <see langword="true" /> 字串進行初始化，則為 <see langword="xamlName" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-259"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-260">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯讀成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-260">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-261">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯讀成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-261"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-262">呼叫<xref:System.Xaml.XamlMember.IsReadOnly%2A>叫用<xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-262">Calling <xref:System.Xaml.XamlMember.IsReadOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadPublic">
      <MemberSignature Language="C#" Value="public bool IsReadPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-263">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="get" /> 存取子的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-263">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public <see langword="get" /> accessor.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-264">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="get" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-264"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-265"><xref:System.Xaml.XamlMember.IsReadPublic%2A>是否值檢查<xref:System.Xaml.XamlMember.DeclaringType%2A>是公用的。</span><span class="sxs-lookup"><span data-stu-id="9219a-265">The <xref:System.Xaml.XamlMember.IsReadPublic%2A> value checks whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public.</span></span> <span data-ttu-id="9219a-266">如果<xref:System.Xaml.XamlMember.DeclaringType%2A>為非公用，`get`存取子不是實際的方式，可呼叫和<xref:System.Xaml.XamlMember.IsReadPublic%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9219a-266">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `get` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsReadPublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="9219a-267">呼叫<xref:System.Xaml.XamlMember.IsReadPublic%2A>叫用<xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-267">Calling <xref:System.Xaml.XamlMember.IsReadPublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9219a-268"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虛擬的因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="9219a-268">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="9219a-269">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-269">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="9219a-270">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-270">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-271">取得值，這個值表示用於型別和成員解析的支援系統是否無法解析成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-271">Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-272">如果無法解析成員則為 <see langword="true" />，如果可以解析成員則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-272"><see langword="true" /> if the member is not resolvable; <see langword="false" /> if the member is resolvable.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-273">A <xref:System.Xaml.XamlMember> ，建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-273">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-274">適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>、<xref:System.Xaml.XamlMember>與`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>無法寫入物件圖形。</span><span class="sxs-lookup"><span data-stu-id="9219a-274">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlMember> with `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="9219a-275">在.NET Framework XAML 服務 Api 中的預設實作<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlMember>報表`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-275">Under the default implementations in .NET Framework XAML Services APIs, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="9219a-276">您不應該建構<xref:System.Xaml.XamlMember>的值`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-276">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span>  
  
 <span data-ttu-id="9219a-277">呼叫<xref:System.Xaml.XamlMember.IsUnknown%2A>叫用<xref:System.Xaml.XamlMember.LookupIsUnknown%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-277">Calling <xref:System.Xaml.XamlMember.IsUnknown%2A> invokes <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteOnly">
      <MemberSignature Language="C#" Value="public bool IsWriteOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-278">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯寫成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-278">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-279">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-279"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-280">呼叫<xref:System.Xaml.XamlMember.IsWriteOnly%2A>叫用<xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-280">Calling <xref:System.Xaml.XamlMember.IsWriteOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritePublic">
      <MemberSignature Language="C#" Value="public bool IsWritePublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWritePublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWritePublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWritePublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-281">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="set" /> 存取子的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-281">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a callable public <see langword="set" /> accessor.</span></span></summary>
        <value>
          <span data-ttu-id="9219a-282">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="set" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-282"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="set" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-283"><xref:System.Xaml.XamlMember.IsWritePublic%2A>值會考慮是否<xref:System.Xaml.XamlMember.DeclaringType%2A>是公用判斷的一部分。</span><span class="sxs-lookup"><span data-stu-id="9219a-283">The <xref:System.Xaml.XamlMember.IsWritePublic%2A> value considers whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public as part of the determination.</span></span> <span data-ttu-id="9219a-284">如果<xref:System.Xaml.XamlMember.DeclaringType%2A>為非公用，`set`存取子不是實際的方式，可呼叫和<xref:System.Xaml.XamlMember.IsWritePublic%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9219a-284">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `set` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsWritePublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="9219a-285">呼叫<xref:System.Xaml.XamlMember.IsWritePublic%2A>叫用<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-285">Calling <xref:System.Xaml.XamlMember.IsWritePublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9219a-286"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虛擬的因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="9219a-286">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="9219a-287">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-287">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="9219a-288">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-288">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-289">在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-289">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="9219a-290"><see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-290">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-291">覆寫這個方法以提供的替代方法，若要取得 CLR 屬性值與內部的反映。</span><span class="sxs-lookup"><span data-stu-id="9219a-291">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="9219a-292">沒有覆寫時，在內部反映程式會使用一般的 CLR 反映邏輯，例如呼叫<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-292">In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</span></span>  
  
 <span data-ttu-id="9219a-293">預設實作會傳回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-293">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-294">傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</span><span class="sxs-lookup"><span data-stu-id="9219a-294">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <returns><span data-ttu-id="9219a-295"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</span><span class="sxs-lookup"><span data-stu-id="9219a-295">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-296">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.DeferringLoader%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-296">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DeferringLoader%2A> property.</span></span> <span data-ttu-id="9219a-297">如果您想要覆寫此方法<xref:System.Xaml.XamlMember.DeferringLoader%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-297">Override this method if you want <xref:System.Xaml.XamlMember.DeferringLoader%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="9219a-298">預設實作會傳回物件以讀取<xref:System.Windows.Markup.XamlDeferLoadAttribute>或使用<xref:System.Xaml.XamlDeferringLoader>從宣告的型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-298">The default implementation returns an object either by reading <xref:System.Windows.Markup.XamlDeferLoadAttribute> or using a <xref:System.Xaml.XamlDeferringLoader> from the declaring type.</span></span> <span data-ttu-id="9219a-299">如果是使用 無任何物件，這個方法可能會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-299">If neither object is available, this method might return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DeferringLoader" />
      </Docs>
    </Member>
    <Member MemberName="LookupDependsOn">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; LookupDependsOn ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; LookupDependsOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDependsOn" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDependsOn () As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ LookupDependsOn();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-300">傳回 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</span><span class="sxs-lookup"><span data-stu-id="9219a-300">Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="9219a-301">這個清單中的項目會報告因與這個 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-301">Items in the list report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-302"><see cref="T:System.Xaml.XamlMember" /> 物件的清單。</span><span class="sxs-lookup"><span data-stu-id="9219a-302">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-303">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.DependsOn%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-303">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DependsOn%2A> property.</span></span> <span data-ttu-id="9219a-304">如果您想要覆寫此方法<xref:System.Xaml.XamlMember.DependsOn%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-304">Override this method if you want <xref:System.Xaml.XamlMember.DependsOn%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="9219a-305">WPF XAML 讀取器和寫入器實作的屬性與這個案例<xref:System.Windows.Markup.DependsOnAttribute>。</span><span class="sxs-lookup"><span data-stu-id="9219a-305">The WPF XAML reader and writer implementations attribute this case with <xref:System.Windows.Markup.DependsOnAttribute>.</span></span> <span data-ttu-id="9219a-306">預設實作會使用這個現有<xref:System.Windows.Markup.DependsOnAttribute>技術。</span><span class="sxs-lookup"><span data-stu-id="9219a-306">The default implementation uses this existing <xref:System.Windows.Markup.DependsOnAttribute> technique.</span></span>  
  
 <span data-ttu-id="9219a-307">覆寫這個方法，如果您不使用<xref:System.Windows.Markup.DependsOnAttribute>這個用途，而且想要取代該技術，指出屬性處理順序，使用您自己的技術。</span><span class="sxs-lookup"><span data-stu-id="9219a-307">Override this method if you are not using <xref:System.Windows.Markup.DependsOnAttribute> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</span></span> <span data-ttu-id="9219a-308">如果您不想支援屬性的處理順序，您可以使用的預設實作，因為它會不傳回任何結果，哪個較合適。</span><span class="sxs-lookup"><span data-stu-id="9219a-308">If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</span></span>  
  
 <span data-ttu-id="9219a-309">清單是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9219a-309">The list is read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DependsOn" />
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlMemberInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlMemberInvoker ^ LookupInvoker();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-310">傳回與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-310">Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-311">這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-311">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-312">這個方法會叫用呼叫<xref:System.Xaml.XamlMember.Invoker%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-312">This method is invoked by calls to <xref:System.Xaml.XamlMember.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="9219a-313">預設實作不需要<xref:System.Xaml.XamlMember>使用其中一種傳遞初始的建構函式會建構<xref:System.Xaml.Schema.XamlMemberInvoker>。</span><span class="sxs-lookup"><span data-stu-id="9219a-313">The default implementation does not require that a <xref:System.Xaml.XamlMember> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="9219a-314">不過，<xref:System.Xaml.XamlMember.UnderlyingMember%2A>值必須存在<xref:System.Xaml.XamlMember>; 否則預設實作會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-314">However, an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> value must exist for the <xref:System.Xaml.XamlMember>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="9219a-315">覆寫這個方法，如果您也是衍生自<xref:System.Xaml.Schema.XamlMemberInvoker>，而且想要傳回衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="9219a-315">Override this method if you also derive from <xref:System.Xaml.Schema.XamlMemberInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="9219a-316">如果您傳回`null`，<xref:System.Xaml.XamlMember.Invoker%2A>傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>給呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9219a-316">If you return `null`, <xref:System.Xaml.XamlMember.Invoker%2A> returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Invoker" />
        <altmember cref="T:System.Xaml.Schema.XamlMemberInvoker" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-317">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-317">Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-318"><see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為環境屬性，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-318"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an ambient property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-319">這個方法會叫用由內部呼叫，以檢查環境的 XAML 內容資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-319">This method is invoked by internal calls that check for ambient XAML property information.</span></span> <span data-ttu-id="9219a-320">環境屬性行為會佔用公用 API 的行為，XAML 讀取器和 XAML 寫入器。</span><span class="sxs-lookup"><span data-stu-id="9219a-320">Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</span></span> <span data-ttu-id="9219a-321">參考的內部呼叫<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>通常是先確認物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。</span><span class="sxs-lookup"><span data-stu-id="9219a-321">The internal calls that reference <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="9219a-322">預設的.NET Framework XAML 服務實作會使用 CLR 屬性設定來透過支援類型，取得從反映的這項資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-322">The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</span></span> <span data-ttu-id="9219a-323">具體來說，預設實作會檢查是否有<xref:System.Windows.Markup.AmbientAttribute>並傳回`true`如<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>如果<xref:System.Windows.Markup.AmbientAttribute>存在於成員定義。</span><span class="sxs-lookup"><span data-stu-id="9219a-323">Specifically, the default implementation checks for <xref:System.Windows.Markup.AmbientAttribute> and returns `true` for <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> if <xref:System.Windows.Markup.AmbientAttribute> exists on a member definition.</span></span>  
  
 <span data-ttu-id="9219a-324">覆寫這個方法，如果您不使用<xref:System.Windows.Markup.AmbientAttribute>這個用途，而且想要取代該技術，指出環境的 XAML 屬性，使用您自己的技術。</span><span class="sxs-lookup"><span data-stu-id="9219a-324">Override this method if you are not using <xref:System.Windows.Markup.AmbientAttribute> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</span></span>  
  
 <span data-ttu-id="9219a-325">從屬性附帶的 WPF 範例應用程式開發介面<xref:System.Windows.Markup.AmbientAttribute>是<xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType>和<xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9219a-325">Example APIs from WPF that attribute with <xref:System.Windows.Markup.AmbientAttribute> are <xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType> and <xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsEvent">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsEvent () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsEvent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-326">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件。</span><span class="sxs-lookup"><span data-stu-id="9219a-326">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an event.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-327"><see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-327"><see langword="true" /> to report that this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-328">這個預設實作會檢查是否<xref:System.Xaml.XamlMember.UnderlyingMember%2A>的型別<xref:System.Reflection.EventInfo>，如果是，會傳回與`true`。</span><span class="sxs-lookup"><span data-stu-id="9219a-328">The default implementation checks whether <xref:System.Xaml.XamlMember.UnderlyingMember%2A> is of type <xref:System.Reflection.EventInfo>, and if it is, returns `true`.</span></span>  
  
 <span data-ttu-id="9219a-329">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.IsEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-329">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsEvent%2A>.</span></span> <span data-ttu-id="9219a-330">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-330">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsEvent" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-331">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示所需的唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-331">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-332"><see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為所需的唯讀屬性，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-332"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an intended read-only property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-333">預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在，但公用`set`存取子不存在，由內部反映所決定。</span><span class="sxs-lookup"><span data-stu-id="9219a-333">The default implementation returns `true` if <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists, but a public `set` accessor does not exist for it, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="9219a-334">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.IsReadOnly%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-334">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</span></span> <span data-ttu-id="9219a-335">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-335">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadPublic();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-336">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="get" /> 存取子的屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-336">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-337">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示具有公用 <see langword="true" /> 存取子的屬性，則為 <see langword="get" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-337"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-338">預設實作會傳回內部反映或否定結果<xref:System.Xaml.XamlMember.IsWriteOnly%2A>、 依序處理。</span><span class="sxs-lookup"><span data-stu-id="9219a-338">The default implementation returns results based either on internal reflection or the negation of <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="9219a-339"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 傳回成員本身是否為公用。它會傳回`true`nonpublic，宣告類型上的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-339"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> returns whether the member itself is public; it returns `true` for a public member on a nonpublic declaring type.</span></span> <span data-ttu-id="9219a-340">使用<xref:System.Xaml.XamlMember.IsReadPublic%2A>相反地，如果您也想要考慮的宣告類型的可見性。</span><span class="sxs-lookup"><span data-stu-id="9219a-340">Use <xref:System.Xaml.XamlMember.IsReadPublic%2A> instead, if you also want to consider the visibility of the declaring type.</span></span>  
  
 <span data-ttu-id="9219a-341">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.IsReadPublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-341">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</span></span> <span data-ttu-id="9219a-342">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-342">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9219a-343"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虛擬的因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="9219a-343">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="9219a-344">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-344">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="9219a-345">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-345">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadPublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-346">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-346">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-347">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示無法解析的成員則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-347"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a non-resolvable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-348">呼叫者取得的值時，可能會叫用這個方法<xref:System.Xaml.XamlMember.IsUnknown%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-348">This method may be invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span> <span data-ttu-id="9219a-349">預設實作會傳回結果，會根據其中一個內部反映或檢查`null`值<xref:System.Xaml.XamlMember.UnderlyingMember%2A>、 依序處理。</span><span class="sxs-lookup"><span data-stu-id="9219a-349">The default implementation returns results that are based on either internal reflection or checking for a `null` value of <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="9219a-350">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-350">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsUnknown" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWriteOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWriteOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWriteOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWriteOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWriteOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-351">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子但沒有公用 <see langword="get" /> 存取子的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-351">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor but not a public <see langword="get" /> accessor.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-352">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-352"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-353">預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在具有公用`set`存取子和 nonpublic`get`存取子，由內部反映所決定。</span><span class="sxs-lookup"><span data-stu-id="9219a-353">The default implementation returns `true` if an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists that has a public `set` accessor and a nonpublic `get` accessor, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="9219a-354">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.IsWriteOnly%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-354">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</span></span> <span data-ttu-id="9219a-355">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-355">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWriteOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWritePublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWritePublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWritePublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWritePublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWritePublic();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-356">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子的成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-356">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-357">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可寫入的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-357"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a writable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-358">預設實作會傳回結果基礎內部反映或否定<xref:System.Xaml.XamlMember.IsReadOnly%2A>、 依序處理。</span><span class="sxs-lookup"><span data-stu-id="9219a-358">The default implementation returns results based  either internal reflection or the negation of <xref:System.Xaml.XamlMember.IsReadOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="9219a-359">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.IsWritePublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-359">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="9219a-360">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-360">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9219a-361"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虛擬的因此，可以覆寫。</span><span class="sxs-lookup"><span data-stu-id="9219a-361">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="9219a-362">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-362">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="9219a-363">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-363">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWritePublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; LookupMarkupExtensionBracketCharacters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; LookupMarkupExtensionBracketCharacters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionBracketCharacters () As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ LookupMarkupExtensionBracketCharacters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-364">傳回標記延伸的左右括弧字元。</span><span class="sxs-lookup"><span data-stu-id="9219a-364">Returns the opening and closing bracket characters for a markup extension.</span></span></summary>
        <returns><span data-ttu-id="9219a-365">包含左右括弧字元的集合。</span><span class="sxs-lookup"><span data-stu-id="9219a-365">A collection containing the opening and closing bracket characters.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTargetType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTargetType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTargetType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupTargetType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-366">傳回 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-366">Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <returns><span data-ttu-id="9219a-367"><see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-367">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-368">預設實作會區分可附加和非可附加成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-368">The default implementation distinguishes between attachable and non-attachable members.</span></span> <span data-ttu-id="9219a-369">對於非可附加成員，<xref:System.Xaml.XamlMember.LookupTargetType%2A>一律會傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-369">For non-attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> always returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="9219a-370">可附加成員<xref:System.Xaml.XamlMember.LookupTargetType%2A>傳回結果，根據檢查<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存取子參數類型和解譯類型根據 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-370">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result based on examining the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> accessor parameter type and interprets that type based on XAML schema context.</span></span>  
  
 <span data-ttu-id="9219a-371">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.TargetType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-371">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TargetType%2A>.</span></span> <span data-ttu-id="9219a-372">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-372">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TargetType" />
      </Docs>
    </Member>
    <Member MemberName="LookupType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-373">傳回成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-373">Returns the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <returns><span data-ttu-id="9219a-374">成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-374">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-375">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.Type%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-375">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="9219a-376">如果您想要覆寫此方法<xref:System.Xaml.XamlMember.Type%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-376">Override this method if you want <xref:System.Xaml.XamlMember.Type%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="9219a-377">預設實作會使用不同的程式碼路徑與概念的意義傳回<xref:System.Xaml.XamlType>，根據這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件。</span><span class="sxs-lookup"><span data-stu-id="9219a-377">The default implementation uses different code paths and conceptual meanings for the returned <xref:System.Xaml.XamlType> that is based on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event.</span></span>  
  
-   <span data-ttu-id="9219a-378">屬性，傳回<xref:System.Xaml.XamlType>設定的屬性或屬性所傳回的型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-378">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="9219a-379">對於事件，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。</span><span class="sxs-lookup"><span data-stu-id="9219a-379">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="9219a-380">一種方法，如<xref:System.Xaml.XamlType>的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-380">For a method, <xref:System.Xaml.XamlType> is the return type.</span></span>  
  
 <span data-ttu-id="9219a-381">在每個案例中，XAML 結構描述內容用於評估的基礎系統類型的 XAML 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-381">In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</span></span>  
  
 <span data-ttu-id="9219a-382">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.Type%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-382">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="9219a-383">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-383">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Type" />
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-384">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的型別轉換器實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-384">Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-385">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-385">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-386">預設實作會使用下列邏輯並處理順序：</span><span class="sxs-lookup"><span data-stu-id="9219a-386">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="9219a-387">如果屬性設定存在成員層級 (<xref:System.ComponentModel.TypeConverterAttribute>)，用於呼叫的屬性資訊<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>對 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-387">If attributing exists at the member level (<xref:System.ComponentModel.TypeConverterAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="9219a-388">如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回與類型相關聯的類型轉換器。</span><span class="sxs-lookup"><span data-stu-id="9219a-388">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a type converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="9219a-389">如果成員是事件，則會傳回特定事件的型別轉換子。</span><span class="sxs-lookup"><span data-stu-id="9219a-389">If the member is an event, an event-specific type converter is returned.</span></span>  
  
 <span data-ttu-id="9219a-390">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.TypeConverter%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-390">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TypeConverter%2A>.</span></span> <span data-ttu-id="9219a-391">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-391">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingGetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingGetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingGetter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-392">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="get" /> 存取子。</span><span class="sxs-lookup"><span data-stu-id="9219a-392">Returns a <see langword="get" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-393">相關聯 <see langword="get" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-393">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="get" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-394">預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>屬性做為<xref:System.Reflection.PropertyInfo>並傳回值<xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType>(參數設為`true`)，這表示傳回的方法可以是公用。</span><span class="sxs-lookup"><span data-stu-id="9219a-394">The default implementation interprets the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> property as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="9219a-395">這種行為可能會導致`null`特定案例。</span><span class="sxs-lookup"><span data-stu-id="9219a-395">This behavior can result in `null` for certain cases.</span></span> <span data-ttu-id="9219a-396">包括沒有相關聯的存取子存在，或該成員不是屬性。</span><span class="sxs-lookup"><span data-stu-id="9219a-396">including cases where no associated accessor exists or the member is not a property.</span></span>  
  
 <span data-ttu-id="9219a-397">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>屬性相關聯之<xref:System.Xaml.Schema.XamlMemberInvoker>。</span><span class="sxs-lookup"><span data-stu-id="9219a-397">This method is invoked when a caller gets a value from the <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> property on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="9219a-398">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-398">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="9219a-399">請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。</span><span class="sxs-lookup"><span data-stu-id="9219a-399">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingMember">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MemberInfo LookupUnderlyingMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingMember () As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MemberInfo ^ LookupUnderlyingMember();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-400">傳回與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-400">Returns a CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-401">與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 物件，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-401">A CLR type system <see cref="T:System.Reflection.MemberInfo" /> object that is associated with this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-402">預設實作會傳回建構為基礎的基礎成員資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-402">The default implementation returns the underlying member information, which is based on construction.</span></span> <span data-ttu-id="9219a-403">如果<xref:System.Reflection.MemberInfo>不提供足夠的資訊來設定基礎成員的簽章與建構物件，這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-403">If the <xref:System.Reflection.MemberInfo> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns `null`.</span></span>  
  
 <span data-ttu-id="9219a-404">如果在建構期間設定為基礎的成員，您應該不需要呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-404">If an underlying member was set during construction, you should not need to call this method.</span></span>  
  
 <span data-ttu-id="9219a-405">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.UnderlyingMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-405">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</span></span> <span data-ttu-id="9219a-406">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-406">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="9219a-407">請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。</span><span class="sxs-lookup"><span data-stu-id="9219a-407">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.UnderlyingMember" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingSetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingSetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingSetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingSetter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-408">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="set" /> 存取子。</span><span class="sxs-lookup"><span data-stu-id="9219a-408">Returns a <see langword="set" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-409">相關聯 <see langword="set" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-409">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="set" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-410">預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>為<xref:System.Reflection.PropertyInfo>並傳回值<xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType>(參數設為`true`)，這表示傳回的方法可以是公用。</span><span class="sxs-lookup"><span data-stu-id="9219a-410">The default implementation interprets <xref:System.Xaml.XamlMember.UnderlyingMember%2A> as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="9219a-411">這會導致`null`某些情況下，包括沒有這類存取子，或不是屬性之成員的狀況。</span><span class="sxs-lookup"><span data-stu-id="9219a-411">This can result in `null` for certain cases, including cases where there is no such accessor, or the member is not a property.</span></span>  
  
 <span data-ttu-id="9219a-412">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>相關聯之<xref:System.Xaml.Schema.XamlMemberInvoker>。覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-412">This method is invoked when a caller gets a value from <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="9219a-413">請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。</span><span class="sxs-lookup"><span data-stu-id="9219a-413">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-414">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的值序列化程式實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-414">Returns a value serializer implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-415">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 執行個體，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-415">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-416">預設實作會使用下列邏輯並處理順序：</span><span class="sxs-lookup"><span data-stu-id="9219a-416">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="9219a-417">如果屬性設定存在成員層級 (<xref:System.Windows.Markup.ValueSerializerAttribute>)，用於呼叫的屬性資訊<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>對 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-417">If attributing exists at the member level (<xref:System.Windows.Markup.ValueSerializerAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="9219a-418">如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回與類型相關聯的值轉換器。</span><span class="sxs-lookup"><span data-stu-id="9219a-418">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a value converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="9219a-419">如果上述條件不會套用，`null`傳回。</span><span class="sxs-lookup"><span data-stu-id="9219a-419">If the previous conditions do not apply, `null` is returned.</span></span>  
  
 <span data-ttu-id="9219a-420">這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.ValueSerializer%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-420">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span> <span data-ttu-id="9219a-421">覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</span><span class="sxs-lookup"><span data-stu-id="9219a-421">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.ValueSerializer" />
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; MarkupExtensionBracketCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; MarkupExtensionBracketCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionBracketCharacters As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ MarkupExtensionBracketCharacters { System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-422">定義標記延伸的左右括弧字元。</span><span class="sxs-lookup"><span data-stu-id="9219a-422">Defines the opening and closing bracket characters for a markup extension.</span></span></summary>
        <value><span data-ttu-id="9219a-423">包含左右括弧字元的集合。</span><span class="sxs-lookup"><span data-stu-id="9219a-423">A collection containing the opening and closing bracket characters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-424">取得宣告此 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</span><span class="sxs-lookup"><span data-stu-id="9219a-424">Gets the <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="9219a-425">宣告這個 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</span><span class="sxs-lookup"><span data-stu-id="9219a-425">The <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-426">這個值一律是在建構期間設定。</span><span class="sxs-lookup"><span data-stu-id="9219a-426">This value is always set during construction.</span></span> <span data-ttu-id="9219a-427">建構函式實作的<xref:System.Xaml.XamlMember>通常擲回例外狀況如果未指定初始的名稱; 因此，不想要這個屬性`null`或空字串，如果您使用預設.NET Framework XAML 服務實作。</span><span class="sxs-lookup"><span data-stu-id="9219a-427">The constructors that are implemented by <xref:System.Xaml.XamlMember> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be `null` or an empty string, if you are using default .NET Framework XAML Services implementations.</span></span>  
  
 <span data-ttu-id="9219a-428">[XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)而且命名規則的 CLR 型別和成員不精確的交集。</span><span class="sxs-lookup"><span data-stu-id="9219a-428">[XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md) and naming rules for CLR type and members are not an exact intersect.</span></span> <span data-ttu-id="9219a-429">它是宣告是合法的在 CLR 成員名稱，但卻無效下 XAML 命名。</span><span class="sxs-lookup"><span data-stu-id="9219a-429">It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</span></span> <span data-ttu-id="9219a-430">您應該儘可能避免這種情況。</span><span class="sxs-lookup"><span data-stu-id="9219a-430">You should avoid this situation if possible.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="9219a-431"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-431">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="9219a-432"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-432">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9219a-433">判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="9219a-433">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-434">如果 <see langword="true" /> 的值與 <paramref name="xamlMember1" /> 的值相同，則為 <paramref name="xamlMember2" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-434"><see langword="true" /> if the value of <paramref name="xamlMember1" /> is the same as the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="9219a-435"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-435">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="9219a-436"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-436">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9219a-437">判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="9219a-437">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have different values.</span></span></summary>
        <returns>
          <span data-ttu-id="9219a-438">如果 <paramref name="xamlMember1" /> 的值與 <paramref name="xamlMember2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-438"><see langword="true" /> if the value of <paramref name="xamlMember1" /> differs from the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-439">取得單一 XAML 命名空間 URI，這個 URI 識別此 <see cref="T:System.Xaml.XamlMember" /> 的主要 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="9219a-439">Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="9219a-440">這個 <see cref="T:System.Xaml.XamlMember" /> 之主要 XAML 命名空間的識別項 (字串形式)。</span><span class="sxs-lookup"><span data-stu-id="9219a-440">The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />, as a string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-441"><xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A>屬性會提供相同的值與呼叫<xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>然後從傳回的清單中取得的第一個值的字串。</span><span class="sxs-lookup"><span data-stu-id="9219a-441">The <xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A> property provides the same value as calling <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> and then getting the first value string from the returned list.</span></span> <span data-ttu-id="9219a-442">撰寫回到文字或 XAML 命名空間資訊會保留其他表示相互轉換的成員時，應該使用慣用的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="9219a-442">The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.SerializationVisibility" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::DesignerSerializationVisibility SerializationVisibility { System::ComponentModel::DesignerSerializationVisibility get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-443">取得 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，這個值表示視覺化設計工具應該如何處理成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-443">Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> value, which indicates how a visual designer should process the member.</span></span></summary>
        <value><span data-ttu-id="9219a-444"><see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列舉的值。</span><span class="sxs-lookup"><span data-stu-id="9219a-444">A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration.</span></span> <span data-ttu-id="9219a-445">預設值為 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-445">The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-446">取得 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-446">Gets the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <value><span data-ttu-id="9219a-447"><see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-447">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-448">傳回的值是不同的可附加和非可附加成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-448">The returned value is different for attachable and non-attachable members.</span></span> <span data-ttu-id="9219a-449">對於非可附加成員，<xref:System.Xaml.XamlMember.TargetType%2A>傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-449">For non-attachable members, <xref:System.Xaml.XamlMember.TargetType%2A> returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="9219a-450">可附加成員<xref:System.Xaml.XamlMember.LookupTargetType%2A>傳回結果，取決於此邏輯：</span><span class="sxs-lookup"><span data-stu-id="9219a-450">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result that is based on this logic:</span></span>  
  
-   <span data-ttu-id="9219a-451">如果反映無法解決備份 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`)，這個方法會傳回代表一般物件類型的內部常數。</span><span class="sxs-lookup"><span data-stu-id="9219a-451">If reflection cannot resolve a backing (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), this method returns an internal constant that represents a generic object type.</span></span>  
  
-   <span data-ttu-id="9219a-452">如果之前的條件不適用，<xref:System.Xaml.XamlMember.LookupTargetType%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="9219a-452">If the previous condition does not apply, <xref:System.Xaml.XamlMember.LookupTargetType%2A> is called.</span></span> <span data-ttu-id="9219a-453">預設實作會傳回<xref:System.Xaml.XamlType>檢查實作的方法，根據`get`和`set`存取子。</span><span class="sxs-lookup"><span data-stu-id="9219a-453">The default implementation returns a <xref:System.Xaml.XamlType> that is based on examining the methods that implement the `get` and `set` accessors.</span></span> <span data-ttu-id="9219a-454">類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>来使用不同的行為，例如其他中繼資料表單，可能會報告目標類型的可附加成員。</span><span class="sxs-lookup"><span data-stu-id="9219a-454">A class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to use a different behavior such as other metadata forms that might report target types for attachable members.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9219a-455">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9219a-455">Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="9219a-456">這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9219a-456">A string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-457">這個實作會傳回<xref:System.Xaml.XamlMember.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-457">This implementation returns <xref:System.Xaml.XamlMember.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-458">取得成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-458">Gets the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <value><span data-ttu-id="9219a-459">成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-459">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-460">呼叫<xref:System.Xaml.XamlMember.Type%2A>叫用<xref:System.Xaml.XamlMember.LookupType%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-460">Calling <xref:System.Xaml.XamlMember.Type%2A> invokes <xref:System.Xaml.XamlMember.LookupType%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-461">會發生這種情況時的初始內部反映邏輯已設定資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-461">This occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="9219a-462">此預設行為 (沒有<xref:System.Xaml.XamlMember.LookupType%2A>覆寫)，傳回<xref:System.Xaml.XamlType>可以具有不同的概念意義。</span><span class="sxs-lookup"><span data-stu-id="9219a-462">In the default behavior (no <xref:System.Xaml.XamlMember.LookupType%2A> override), the returned <xref:System.Xaml.XamlType> can have different conceptual meanings.</span></span> <span data-ttu-id="9219a-463">適用於哪一個的意義取決於是否這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件，如下列清單所示：</span><span class="sxs-lookup"><span data-stu-id="9219a-463">Which meaning applies depends on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event, as the following list shows:</span></span>  
  
-   <span data-ttu-id="9219a-464">屬性，傳回<xref:System.Xaml.XamlType>設定的屬性或屬性所傳回的型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-464">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="9219a-465">對於事件，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。</span><span class="sxs-lookup"><span data-stu-id="9219a-465">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="9219a-466">一種方法，如<xref:System.Xaml.XamlType>是可能是該方法的傳回型別`null`。</span><span class="sxs-lookup"><span data-stu-id="9219a-466">For a method, <xref:System.Xaml.XamlType> is the return type of that method, which may be `null`.</span></span>  
  
 <span data-ttu-id="9219a-467">在每個案例中，XAML 結構描述內容用於評估的支援類型的 XAML 型別。</span><span class="sxs-lookup"><span data-stu-id="9219a-467">In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-468">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件可用於建構 XAML 宣告物件的型別轉換。</span><span class="sxs-lookup"><span data-stu-id="9219a-468">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which can be used for type conversion construction of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="9219a-469"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.ComponentModel.TypeConverter" /> 條件約束。</span><span class="sxs-lookup"><span data-stu-id="9219a-469">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> value, with a <see cref="T:System.ComponentModel.TypeConverter" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-470">呼叫<xref:System.Xaml.XamlMember.TypeConverter%2A>叫用<xref:System.Xaml.XamlMember.LookupTypeConverter%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-470">Calling <xref:System.Xaml.XamlMember.TypeConverter%2A> invokes <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-471">初始內部反映邏輯已設定資訊時，就會發生這種行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-471">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="9219a-472">實作會傳回非 null 屬性值<xref:System.Xaml.XamlMember.TypeConverter%2A>不一定可運作的<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="9219a-472">Implementations that return a non-null property value for <xref:System.Xaml.XamlMember.TypeConverter%2A> are not necessarily a working <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="9219a-473">下列是可能的非 null 傳回值的一份<xref:System.Xaml.XamlMember.TypeConverter%2A>和這些值所代表的意義：</span><span class="sxs-lookup"><span data-stu-id="9219a-473">The following is a list of possible non-null return values for <xref:System.Xaml.XamlMember.TypeConverter%2A> and what these values represent:</span></span>  
  
-   <span data-ttu-id="9219a-474">傳回值會報告該成員為或更廣泛地目標型別轉換子的屬性型別轉換子。</span><span class="sxs-lookup"><span data-stu-id="9219a-474">The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</span></span> <span data-ttu-id="9219a-475">這種行為通常是何種大部分的 XAML 類型系統和 XAML 處理器尋找才能具現化類型轉換器，並叫用其方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-475">This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</span></span>  
  
-   <span data-ttu-id="9219a-476">傳回值會報告內建值轉換器。</span><span class="sxs-lookup"><span data-stu-id="9219a-476">The return value reports a built-in value converter.</span></span> <span data-ttu-id="9219a-477">這些轉換存在特定 XAML 寫入器所執行的內部作業。</span><span class="sxs-lookup"><span data-stu-id="9219a-477">These converters exist for certain internal operations that are performed by a XAML writer.</span></span> <span data-ttu-id="9219a-478">特別是，這些內建的值轉換器會將原始屬性字串值轉換成 XAML 語言層級基本類型。</span><span class="sxs-lookup"><span data-stu-id="9219a-478">In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</span></span> <span data-ttu-id="9219a-479">如需.NET Framework XAML 服務實作，這些內建型別轉換通常轉送給系統組件中定義的類型轉換器。</span><span class="sxs-lookup"><span data-stu-id="9219a-479">For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</span></span> <span data-ttu-id="9219a-480">比方說，轉換為<xref:System.Int32>值沒有內建的轉送轉換，因此<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>值參考<xref:System.ComponentModel.Int32Converter>。</span><span class="sxs-lookup"><span data-stu-id="9219a-480">For example, a conversion for an <xref:System.Int32> value has built-in forwarded conversion, and therefore, the <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> value references <xref:System.ComponentModel.Int32Converter>.</span></span>  
  
-   <span data-ttu-id="9219a-481">傳回值會報告未受限制的物件模型; 特殊的案例也就是說，<xref:System.Xaml.XamlMember>具有<xref:System.Xaml.XamlMember.Type%2A>值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="9219a-481">The return value reports the special case of an unconstrained object model; that is, the <xref:System.Xaml.XamlMember> has a <xref:System.Xaml.XamlMember.Type%2A> value of <xref:System.Object>.</span></span> <span data-ttu-id="9219a-482">在此情況下，<xref:System.Xaml.Schema.XamlValueConverter%601>報告<xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType>是 {`Object}`。</span><span class="sxs-lookup"><span data-stu-id="9219a-482">In this case, the <xref:System.Xaml.Schema.XamlValueConverter%601> reports that the <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType> is {`Object}`.</span></span> <span data-ttu-id="9219a-483">不過，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>是`null`因為沒有實際的類型或執行個體是可用來執行這項轉換。</span><span class="sxs-lookup"><span data-stu-id="9219a-483">However, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> is `null` because no actual type or instance is available to perform this conversion.</span></span> <span data-ttu-id="9219a-484">相反地，無法判斷物件模型的行為，直到執行階段，當特定技術的執行階段會判定其物件圖形的處理。</span><span class="sxs-lookup"><span data-stu-id="9219a-484">Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</span></span>  
  
 <span data-ttu-id="9219a-485">如果您可以存取工作<xref:System.ComponentModel.TypeConverter>從<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>，您可以叫用其轉換方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-485">If you can access a working <xref:System.ComponentModel.TypeConverter> from <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, you can invoke its conversion methods.</span></span> <span data-ttu-id="9219a-486">不過，許多轉換方法都倚賴服務內容。</span><span class="sxs-lookup"><span data-stu-id="9219a-486">However, many conversion methods rely on service context.</span></span> <span data-ttu-id="9219a-487">如果您沒有可用的類型轉換器撰寫物件的物件圖形的其一般角色必須要有相同的服務內容，轉換器方法可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9219a-487">If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo UnderlyingMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo UnderlyingMember" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.UnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingMember As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberInfo ^ UnderlyingMember { System::Reflection::MemberInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-488">針對以 <see cref="T:System.Reflection.MemberInfo" />、<see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.MethodInfo" /> 所建構的成員，取得可用的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-488">Gets the CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is available for a member that is constructed by <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, or <see cref="T:System.Reflection.EventInfo" />.</span></span></summary>
        <value><span data-ttu-id="9219a-489">從初始建構函式參數轉型的 CLR 型別系統 <see cref="T:System.Reflection.MemberInfo" /> 資訊。</span><span class="sxs-lookup"><span data-stu-id="9219a-489">CLR type system <see cref="T:System.Reflection.MemberInfo" /> information, as cast from the initial constructor parameters.</span></span> <span data-ttu-id="9219a-490">以 <see cref="T:System.Xaml.XamlMember" /> 簽章建構的 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9219a-490">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> signature returns <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-491">呼叫<xref:System.Xaml.XamlMember.UnderlyingMember%2A>叫用<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-491">Calling <xref:System.Xaml.XamlMember.UnderlyingMember%2A> invokes <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9219a-492">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於對 XAML 宣告的物件進行值序列化。</span><span class="sxs-lookup"><span data-stu-id="9219a-492">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for value serialization of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="9219a-493"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 條件約束。</span><span class="sxs-lookup"><span data-stu-id="9219a-493">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9219a-494">呼叫<xref:System.Xaml.XamlMember.ValueSerializer%2A>叫用<xref:System.Xaml.XamlMember.LookupValueSerializer%2A>或特定覆寫該方法。</span><span class="sxs-lookup"><span data-stu-id="9219a-494">Calling <xref:System.Xaml.XamlMember.ValueSerializer%2A> invokes <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> or a specific override of that method.</span></span> <span data-ttu-id="9219a-495">初始內部反映邏輯已設定資訊時，就會發生這種行為。</span><span class="sxs-lookup"><span data-stu-id="9219a-495">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="9219a-496">並非所有的情況下，傳回非 null 屬性的值<xref:System.Xaml.XamlMember.ValueSerializer%2A>一定都可運作的<xref:System.Windows.Markup.ValueSerializer>。</span><span class="sxs-lookup"><span data-stu-id="9219a-496">Not all cases that return a non-null property value for <xref:System.Xaml.XamlMember.ValueSerializer%2A> are necessarily a working <xref:System.Windows.Markup.ValueSerializer>.</span></span> <span data-ttu-id="9219a-497">請參閱<xref:System.Xaml.XamlMember.TypeConverter%2A>; 考量同樣適用於<xref:System.Xaml.XamlMember.ValueSerializer%2A>。</span><span class="sxs-lookup"><span data-stu-id="9219a-497">See <xref:System.Xaml.XamlMember.TypeConverter%2A>; the same considerations apply to <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>