<Type Name="XamlMember" FullName="System.Xaml.XamlMember">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eca9de4ba3e7db5769488f672b1fa19608582f9b" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014804" /></Metadata><TypeSignature Language="C#" Value="public class XamlMember : IEquatable&lt;System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMember extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlMember" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMember&#xA;Implements IEquatable(Of XamlMember)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMember : IEquatable&lt;System::Xaml::XamlMember ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlMember = class&#xA;    interface IEquatable&lt;XamlMember&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlMember&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供 XAML 型別成員的 XAML 型別系統識別項。 識別項會由 XAML 讀取器和 XAML 寫入器在處理成員節點期間 (當 XAML 讀取器定位於上<see cref="F:System.Xaml.XamlNodeType.StartMember" />) 以及一般 XAML 型別系統邏輯。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember> 可以使用三個方法，傳回 XAML 成員的相關資訊： 標準 common language runtime (CLR) 反映;參考僅限反映技術，呼叫內部 Api 的使用最佳化的位元旗標;或虛擬呼叫覆寫`Lookup*`儘可能提供的 API<xref:System.Xaml.XamlMember>子類別。 用於大部分的用途，.NET Framework XAML 服務 api 和<xref:System.Xaml.XamlMember>API，您會使用預設 XAML 結構描述內容。 .NET Framework XAML 服務的預設 XAML 結構描述內容會使用 CLR 型別系統支援。 這可讓 XAML 讀取器和 XAML 寫入器來處理任何類型或成員定義中，或其他可、 CLR 和其反映技術。  
  
## <a name="lookup-apis-and-xamlmember-derived-classes"></a>查閱 * Api 和 XamlMember 衍生的類別  
 <xref:System.Xaml.XamlMember> 定義數個虛擬的衍生類別的成員可能會覆寫。 這些成員具有永遠以字串為開頭的名稱`Lookup`。 API 的其餘部分的名稱然後參考虛擬方法影響的屬性。 例如，<xref:System.Xaml.XamlMember>衍生的類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>影響哪些基底定義的屬性<xref:System.Xaml.XamlMember.TargetType%2A>傳回衍生類別中。 您可以預測中這類屬性的傳回值<xref:System.Xaml.XamlMember>或現有的衍生類別，請閱讀相關的文件`Lookup*`方法。  
  
 目的`Lookup*`方法是提供 XAML 類型系統擴充技術，其中包含<xref:System.Xaml.XamlMember>基底類別。 藉由衍生自<xref:System.Xaml.XamlMember>，並覆寫`Lookup`虛擬成員，您可以定義的 XAML 結構描述的 XAML 成員的概念，XAML 類型系統中而不必受限於支援型別系統或技術的細節。 您可以也使用提供的 XAML 結構描述內容在此配置下，並仍會傳回您想要的結果。  
  
 例如，請考慮<xref:System.Xaml.XamlMember>屬性<xref:System.Xaml.XamlMember.IsWritePublic%2A>。 這個屬性就會通知呼叫端，該作業，例如使用<xref:System.Xaml.XamlWriter>序列化可以寫入此成員值的目標物件上。 在預設實作中，該成員是否可寫入的判定由使用反映技術的支援 CLR<xref:System.Type>和其成員 ( <xref:System.Reflection.MemberInfo>)。 因此，根據預設，XAML 類型系統取決於 CLR 型別系統。 不過，您可以移除此相依性，您 XAML 類型系統報告<xref:System.Xaml.XamlMember.IsWritePublic%2A>藉由覆寫 API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>。 在您的覆寫中，您可以使用其他的決定，例如您的技術，主要的查閱資料表中的可寫入的 XAML 成員是否適合用於固定的 XAML 詞彙或各種其他策略來判斷特定的中繼資料程式XAML 的詞彙。  
  
## <a name="constructing-xamlmember-without-xaml-schema-context"></a>建構 XamlMember 沒有 XAML 結構描述內容  
 大部分的建構函式的<xref:System.Xaml.XamlMember>需要<xref:System.Xaml.XamlSchemaContext>做為其初始化的一部分。 <xref:System.Xaml.XamlSchemaContext>也是必要的許多內部<xref:System.Xaml.XamlSchemaContext>作業，例如取得轉寄從支援類型的資訊。 當您正在使用<xref:System.Xaml.XamlMember>API，您通常必須<xref:System.Xaml.XamlSchemaContext>就可以從周圍建構這類<xref:System.Xaml.XamlWriter>。 在此情況下，您可以傳遞<xref:System.Xaml.XamlSchemaContext>參考透過 XAML 類型系統的所有呼叫需要 XAML 結構描述內容。  
  
 一個特定建構函式， <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>，不需要<xref:System.Xaml.XamlSchemaContext>。 不過，<xref:System.Xaml.XamlMember>建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章會傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。 使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時的相關<xref:System.Xaml.XamlMember>報告`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 您不應該建構<xref:System.Xaml.XamlMember>，其值為`true`for<xref:System.Xaml.XamlMember.IsUnknown%2A>除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或您可以透過其他方式調整<xref:System.Xaml.XamlObjectWriter>行為。 比方說，一或多個項目可能是實作的您，則為 true:  
  
-   稍後可 XAML 結構描述內容。  
  
-   您使用的成員啟動程式模式。  
  
-   刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>中自訂 XAML 寫入器。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlType" />
    <altmember cref="T:System.Xaml.XamlDirective" />
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">認識 XAML 節點資料流結構和概念</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="eventInfo">CLR 型別系統<see cref="T:System.Reflection.EventInfo" />表示事件成員。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別使用 CLR 型別系統<see cref="T:System.Reflection.EventInfo" />和<see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示的事件 （事件處理常式連接點屬性），請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">CLR 型別系統<see cref="T:System.Reflection.PropertyInfo" />表示屬性成員。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別使用 CLR 型別系統<see cref="T:System.Reflection.PropertyInfo" />和<see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示的屬性 （而不是特別的事件處理常式連接），請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="eventInfo">CLR 型別系統<see cref="T:System.Reflection.EventInfo" />表示事件成員。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />實作，可處理執行階段反映呼叫針對<see cref="T:System.Xaml.XamlMember" />。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別使用 CLR 型別系統<see cref="T:System.Reflection.EventInfo" />並<see cref="T:System.Xaml.XamlSchemaContext" />，其中包括<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示事件 （或事件處理常式連接點屬性），請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">CLR 型別系統<see cref="T:System.Reflection.PropertyInfo" />表示屬性成員。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />實作，可處理執行階段叫用呼叫針對<see cref="T:System.Xaml.XamlMember" />。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別使用反映<see cref="T:System.Reflection.PropertyInfo" />並<see cref="T:System.Xaml.XamlSchemaContext" />，其中包括<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 成員表示的屬性時，才，而且如果它不是事件處理常式連線，請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachableEventName">可附加事件的字串名稱。</param>
        <param name="adder">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />處理常式<see langword="Add" />方法的可附加成員之支援實作。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別的<see cref="T:System.Xaml.XamlMember" />表示可附加事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示可附加事件成員，請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Xaml.XamlType declaringType, bool isAttachable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, declaringType As XamlType, isAttachable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ name, System::Xaml::XamlType ^ declaringType, bool isAttachable);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Xaml.XamlType * bool -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (name, declaringType, isAttachable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declaringType" Type="System.Xaml.XamlType" />
        <Parameter Name="isAttachable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">成員的字串名稱。</param>
        <param name="declaringType"><see cref="T:System.Xaml.XamlType" />宣告類型的資訊。</param>
        <param name="isAttachable"><see langword="true" /> 若要表示成員為可附加的;否則， <see langword="false" />。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別使用的字串名稱，以及宣告<see cref="T:System.Xaml.XamlType" />資訊。 使用此簽章建構的 <see cref="T:System.Xaml.XamlMember" /> 具有諸多限制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Xaml.XamlMember>建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章會傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。 使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時的相關<xref:System.Xaml.XamlMember>報告`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 您不應該建構<xref:System.Xaml.XamlMember>具有<xref:System.Xaml.XamlMember.IsUnknown%2A>`true`除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或您可以透過其他方式調整<xref:System.Xaml.XamlObjectWriter>行為。 比方說，一或多個項目可能是實作的您，則為 true:  
  
-   稍後可 XAML 結構描述內容。  
  
-   您使用的成員啟動程式模式。  
  
-   刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>中自訂 XAML 寫入器。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 或 <paramref name="declaringType" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName">可附加屬性的字串名稱。</param>
        <param name="getter">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />針對<see langword="get" />存取子的可附加成員之支援實作。</param>
        <param name="setter">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />針對<see langword="set" />存取子的可附加成員之支援實作。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別的<see cref="T:System.Xaml.XamlMember" />表示可附加屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示可附加屬性，請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachableEventName">可附加事件的字串名稱。</param>
        <param name="adder">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />處理常式<see langword="Add" />方法的可附加成員之支援實作。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />實作，可處理執行階段叫用呼叫針對<see cref="T:System.Xaml.XamlMember" />。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別<see cref="T:System.Xaml.XamlMember" />，表示可附加事件，包括<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示可附加事件成員，請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName">可附加屬性的字串名稱。</param>
        <param name="getter">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />針對<see langword="get" />存取子的可附加成員之支援實作。</param>
        <param name="setter">CLR 型別系統<see cref="T:System.Reflection.MethodInfo" />針對<see langword="set" />存取子的可附加成員之支援實作。</param>
        <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />限定成員的內容。</param>
        <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />實作，可處理執行階段叫用呼叫針對<see cref="T:System.Xaml.XamlMember" />。</param>
        <summary>初始化的新執行個體<see cref="T:System.Xaml.XamlMember" />類別<see cref="T:System.Xaml.XamlMember" />表示可附加屬性，包括<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成員表示可附加的屬性成員，請使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ DeclaringType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.XamlType" />宣告與此相關聯之成員的型別為<see cref="T:System.Xaml.XamlMember" />。</summary>
        <value><see cref="T:System.Xaml.XamlType" />宣告與此相關聯之成員的型別為<see cref="T:System.Xaml.XamlMember" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值通常在初始化期間設定，而且通常不`null`。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.DeclaringType%2A> 資訊可以傳入建構函式進行初始化。 藉由直接呼叫基底建構函式，初始化<xref:System.Xaml.XamlMember>衍生的類別可以省略某些基底類別中進行值檢查。 因此，衍生的初始化可以變更報告的型別成員關聯性資訊的 XAML 成員，使它不再符合預期的方式為基礎的 CLR 宣告的型別系統資訊。 針對宣告型別資訊的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlMember.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />物件用於延後載入 XAML 宣告的物件。</summary>
        <value>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />與<see cref="T:System.Xaml.XamlDeferringLoader" />泛型條件約束。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.DeferringLoader%2A>叫用<xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>或特定覆寫該方法。 在其中初始的內部反映邏輯有尚未設定資訊的情況下，就會發生這種行為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependsOn">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; DependsOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; DependsOn" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DependsOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependsOn As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ DependsOn { System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependsOn : System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="System.Xaml.XamlMember.DependsOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這些物件會報告相對於這個初始設定順序的相依性關聯性的所在的成員<see cref="T:System.Xaml.XamlMember" />。</summary>
        <value><see cref="T:System.Xaml.XamlMember" /> 物件的清單。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.DependsOn%2A>叫用<xref:System.Xaml.XamlMember.LookupDependsOn%2A>或特定覆寫該方法。 在其中初始的內部反映邏輯有尚未設定資訊的情況下，就會發生這種行為。  
  
 `DependsOn`模式可以套用至刻意相互抵觸一般的 XAML 規則的物件模型案例。 一般的 XAML 規則是，不會傳遞以初始化文字 （或 factory 方法，在 XAML 2009） 類型的成員必須能夠依任何順序指定。 藉由套用`DependsOn`模式來為成員，您可以指示 XAML 寫入器永遠會處理此成員之前參考的成員。 您可以套用在目前成員的值需要內容或其他成員設定後才可用的其他資訊的位置的情況下，此模式。  
  
 `DependsOn`應該明智套用模式，並保留屬性情況下，它可以做架構的目的。 大量相依性可能 XAML 處理變慢。 此外，就可以產生循環的相依性，在此情況下，XAML 處理行為是未定義。  
  
 範例`DependsOn`從 WPF 的案例包括上的某些屬性<xref:System.Windows.Controls.ControlTemplate>並<xref:System.Windows.DataTemplate>上<xref:System.Windows.Trigger>，然後在<xref:System.Windows.Setter>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.DependsOnAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指出目前的物件是否等於另一個物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlMember.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與這個物件比較的物件。</param>
        <summary>指出目前的物件是否等於另一個物件。</summary>
        <returns>若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="obj" />，否則即為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlMember other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlMember other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlMember ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlMember -&gt; bool" Usage="xamlMember.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="other">要與此物件進行比較的物件。</param>
        <summary>指出目前的物件是否等於另一個相同類型的物件。</summary>
        <returns>若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlMember.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個物件的雜湊程式碼。</summary>
        <returns>整數雜湊程式碼中。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlMember.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 XAML 成員可以存在的位置的 XAML 命名空間的清單。</summary>
        <returns>字串形式的 XAML 命名空間識別項清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回<xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType>呼叫的結果<xref:System.Xaml.XamlMember.DeclaringType%2A>與此相關聯<xref:System.Xaml.XamlMember>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlMemberInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlMemberInvoker ^ Invoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlMemberInvoker" Usage="System.Xaml.XamlMember.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />相關聯，以此方式實作<see cref="T:System.Xaml.XamlMember" />。</summary>
        <value><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />相關聯，以此方式實作<see cref="T:System.Xaml.XamlMember" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Invoker`模式是一個進階的 XAML 類型系統擴充功能的方法。 `Invoker`模式可讓您插入不同的結構描述型別對應的行為，同時仍然使用.NET Framework XAML 服務 XAML 類型系統定義的辦法。  
  
 如果<xref:System.Xaml.XamlMember.LookupInvoker%2A>覆寫會傳回`null`，則預設實作會傳回`null`因為其欠缺<xref:System.Xaml.XamlMember.UnderlyingMember%2A>這個<xref:System.Xaml.XamlMember>，則<xref:System.Xaml.XamlMember.Invoker%2A>屬性會傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>。  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 預設值。 這適用於大部分的作業，使用.NET Framework XAML 服務和預設 XAML 結構描述內容，並在其中任何特定覆寫`Invoker`模式會傳遞 XAML 類型系統實體的建構函式。  
  
 呼叫<xref:System.Xaml.XamlMember.Invoker%2A>叫用<xref:System.Xaml.XamlMember.LookupInvoker%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlMember.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />報告為環境屬性。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />報告為環境屬性; 否則即為<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.IsAmbient%2A>叫用<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>或特定覆寫該方法。 實作其中初始的內部反映邏輯有尚未設定資訊中，就會發生這種行為。  
  
 檢查為環境屬性通常是 XAML 處理邏輯，以確定物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的一部分。 .NET Framework XAML 服務 Api 與預設 XAML 結構描述內容會填入此值，根據使用的屬性<xref:System.Windows.Markup.AmbientAttribute>。 預設實作<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>使用這個現有<xref:System.Windows.Markup.AmbientAttribute>技術，且會傳回`true`如果<xref:System.Windows.Markup.AmbientAttribute>存在於上宣告的成員。  
  
 <xref:System.Windows.Markup.AmbientAttribute> 許多 WPF 類型，其中包含的成員上找到<xref:System.Windows.Application>， <xref:System.Windows.Setter>，和<xref:System.Windows.Style>。 它也會在找到<xref:System.Windows.ResourceDictionary>connotes，任何成員，會使用型別<xref:System.Windows.ResourceDictionary>因為其類型應該要視為環境即使不特別屬性成員。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsAttachable">
      <MemberSignature Language="C#" Value="public bool IsAttachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAttachable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAttachable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAttachable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttachable : bool" Usage="System.Xaml.XamlMember.IsAttachable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />是可附加的成員。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />是可附加的成員，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember.IsAttachable%2A>初始化的值為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsDirective" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirective As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirective : bool" Usage="System.Xaml.XamlMember.IsDirective" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />是 XAML 指示詞。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />是 XAML 指示詞，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember.IsDirective%2A>初始化的值為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>。 基底<xref:System.Xaml.XamlMember>建構函式初始化，讓<xref:System.Xaml.XamlMember.IsDirective%2A>是`false`。 不過，<xref:System.Xaml.XamlDirective>類別 (<xref:System.Xaml.XamlMember>衍生類別) 初始化以便<xref:System.Xaml.XamlMember.IsDirective%2A>是`true`。  
  
 如果您想要報告<xref:System.Xaml.XamlMember.IsDirective%2A>作為`true`要自訂的 XAML 結構描述類別的 XAML 成員的呼叫端，請確定您衍生自<xref:System.Xaml.XamlDirective>，因為這是為了允許該行為的唯一方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEvent">
      <MemberSignature Language="C#" Value="public bool IsEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEvent" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsEvent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEvent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEvent : bool" Usage="System.Xaml.XamlMember.IsEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />表示事件成員。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />代表的事件，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.IsEvent%2A>叫用<xref:System.Xaml.XamlMember.LookupIsEvent%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlMember.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否這<see cref="T:System.Xaml.XamlMember" />初始化的有效<see langword="xamlName" />字串做為其<see cref="P:System.Xaml.XamlMember.Name" />。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />初始化的有效<see langword="xamlName" />字串; 否則<see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/11e4cada-41d2-494d-9531-0d3df4dfcbe3">XamlName</related>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Xaml.XamlMember.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />表示唯讀成員。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示唯讀成員，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.IsReadOnly%2A>叫用<xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadPublic">
      <MemberSignature Language="C#" Value="public bool IsReadPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadPublic : bool" Usage="System.Xaml.XamlMember.IsReadPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否這<see cref="T:System.Xaml.XamlMember" />表示具有可呼叫的公用成員<see langword="get" />存取子。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示可呼叫之公用<see langword="get" />存取子，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember.IsReadPublic%2A>是否值檢查<xref:System.Xaml.XamlMember.DeclaringType%2A>是公用的。 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>是非公用的`get`存取子不能呼叫實用的方式，以及<xref:System.Xaml.XamlMember.IsReadPublic%2A>傳回`false`。  
  
 呼叫<xref:System.Xaml.XamlMember.IsReadPublic%2A>叫用<xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>或特定覆寫該方法。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>虛擬方法，因此，可以覆寫。 覆寫有可能變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不再符合預期的方式為基礎的 CLR 宣告的型別系統的存取資訊。 針對存取層級的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlMember.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否在成員不是解析用於型別和成員解析的支援系統。</summary>
        <value><see langword="true" /> 如果在成員不是可解析;<see langword="false" />如果成員是可解析。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Xaml.XamlMember>建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章會傳回`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，則<xref:System.Xaml.XamlMember>具有`true`的<xref:System.Xaml.XamlMember.IsUnknown%2A>無法寫入物件圖形。 在.NET Framework XAML 服務 Api 中的預設實作<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時的相關<xref:System.Xaml.XamlMember>報表`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>。  
  
 您不應該建構<xref:System.Xaml.XamlMember>，其值為`true`for<xref:System.Xaml.XamlMember.IsUnknown%2A>除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或您可以透過其他方式調整<xref:System.Xaml.XamlObjectWriter>行為。  
  
 呼叫<xref:System.Xaml.XamlMember.IsUnknown%2A>叫用<xref:System.Xaml.XamlMember.LookupIsUnknown%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteOnly">
      <MemberSignature Language="C#" Value="public bool IsWriteOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteOnly : bool" Usage="System.Xaml.XamlMember.IsWriteOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否此<see cref="T:System.Xaml.XamlMember" />表示唯寫的成員。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示唯寫的成員，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.IsWriteOnly%2A>叫用<xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritePublic">
      <MemberSignature Language="C#" Value="public bool IsWritePublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWritePublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWritePublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWritePublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWritePublic : bool" Usage="System.Xaml.XamlMember.IsWritePublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否這<see cref="T:System.Xaml.XamlMember" />表示具有可呼叫的公用成員<see langword="set" />存取子。</summary>
        <value><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示可呼叫之公用<see langword="set" />存取子，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember.IsWritePublic%2A>值會考慮是否<xref:System.Xaml.XamlMember.DeclaringType%2A>是公開做為決定的一部分。 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>是非公用的`set`存取子不能呼叫實用的方式，以及<xref:System.Xaml.XamlMember.IsWritePublic%2A>傳回`false`。  
  
 呼叫<xref:System.Xaml.XamlMember.IsWritePublic%2A>叫用<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>或特定覆寫該方法。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>虛擬方法，因此，可以覆寫。 覆寫有可能變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不再符合預期的方式為基礎的 CLR 宣告的型別系統的存取資訊。 針對存取層級的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlMember.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中實作時，會傳回<see cref="T:System.Reflection.ICustomAttributeProvider" />實作。</summary>
        <returns><see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 覆寫此方法以提供內部反映替代的方法，若要取得 CLR 屬性的值。 沒有覆寫時，在內部的反映程式會使用一般的 CLR 反映邏輯，例如呼叫<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>。  
  
 預設實作會傳回 `null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlMember.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />物件用於延後載入 XAML 宣告的物件。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />具有<see cref="T:System.Xaml.XamlDeferringLoader" />泛型條件約束。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.DeferringLoader%2A>屬性。 覆寫這個方法，如果您想<xref:System.Xaml.XamlMember.DeferringLoader%2A>的值，會啟用預設內部反映，從傳回不同的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。  
  
 預設實作會傳回物件，請閱讀<xref:System.Windows.Markup.XamlDeferLoadAttribute>或使用<xref:System.Xaml.XamlDeferringLoader>從宣告的型別。 如果兩個方法都是可用的這個方法可能會傳回`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DeferringLoader" />
      </Docs>
    </Member>
    <Member MemberName="LookupDependsOn">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; LookupDependsOn ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; LookupDependsOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDependsOn" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDependsOn () As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ LookupDependsOn();" />
      <MemberSignature Language="F#" Value="abstract member LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="xamlMember.LookupDependsOn " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回一份<see cref="T:System.Xaml.XamlMember" />物件。 在清單中的項目報告相對於這個初始設定順序的相依性關聯性的所在的成員<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns><see cref="T:System.Xaml.XamlMember" /> 物件的清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.DependsOn%2A>屬性。 覆寫這個方法，如果您想<xref:System.Xaml.XamlMember.DependsOn%2A>的值，會啟用預設內部反映，從傳回不同的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。  
  
 WPF XAML 讀取器和寫入器實作的屬性與此情況下<xref:System.Windows.Markup.DependsOnAttribute>。 預設實作會使用這個現有<xref:System.Windows.Markup.DependsOnAttribute>技巧。  
  
 覆寫這個方法，如果您不使用<xref:System.Windows.Markup.DependsOnAttribute>這個用途，而且想要取代該技術用於表示屬性處理順序，使用您自己的技巧。 如果您不打算支援的屬性處理順序，您可以使用的預設實作，因為它會不傳回任何結果，哪個較合適。  
  
 清單是唯讀的。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DependsOn" />
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlMemberInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlMemberInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker" Usage="xamlMember.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />與此相關聯<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />資訊<see cref="T:System.Xaml.XamlMember" />; 或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用呼叫<xref:System.Xaml.XamlMember.Invoker%2A>。  
  
 預設實作不需要<xref:System.Xaml.XamlMember>使用其中一種傳遞初始的建構函式會建構<xref:System.Xaml.Schema.XamlMemberInvoker>。 不過，<xref:System.Xaml.XamlMember.UnderlyingMember%2A>值必須存在<xref:System.Xaml.XamlMember>; 否則預設實作會傳回`null`。  
  
 覆寫這個方法，如果您也衍生自<xref:System.Xaml.Schema.XamlMemberInvoker>，而且想要傳回衍生的類別。 如果您傳回`null`，<xref:System.Xaml.XamlMember.Invoker%2A>傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>向呼叫端。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Invoker" />
        <altmember cref="T:System.Xaml.Schema.XamlMemberInvoker" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlMember.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />報告為環境屬性。</summary>
        <returns><see langword="true" /> 報告這個<see cref="T:System.Xaml.XamlMember" />為環境屬性; 否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 檢查環境的 XAML 屬性資訊的內部呼叫這個方法會叫用。 在 XAML 讀取器和 XAML 寫入器的公用 API 行為會佔用環境屬性的行為。 參考的內部呼叫<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>通常是 XAML 處理邏輯，以確定物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的一部分。 預設的.NET Framework XAML 服務實作會使用反映取得此資訊，透過支援型別屬性的 CLR。 具體來說，預設實作會檢查<xref:System.Windows.Markup.AmbientAttribute>，並傳回`true`for<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>如果<xref:System.Windows.Markup.AmbientAttribute>存在於成員定義。  
  
 覆寫這個方法，如果您不使用<xref:System.Windows.Markup.AmbientAttribute>這個用途，而且想要取代該技術用於表示環境的 XAML 屬性使用您自己的技巧。  
  
 範例 Api 從屬性的 WPF<xref:System.Windows.Markup.AmbientAttribute>都<xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType>和<xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsEvent">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsEvent () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsEvent();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsEvent : unit -&gt; bool&#xA;override this.LookupIsEvent : unit -&gt; bool" Usage="xamlMember.LookupIsEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />代表的事件。</summary>
        <returns><see langword="true" /> 報告這個<see cref="T:System.Xaml.XamlMember" />代表的事件，否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作檢查是否<xref:System.Xaml.XamlMember.UnderlyingMember%2A>屬於型別<xref:System.Reflection.EventInfo>，如果是，傳回`true`。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.IsEvent%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用中繼資料可解譯判斷 XAML 型別系統表示每個案例為基礎。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsEvent" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadOnly : unit -&gt; bool&#xA;override this.LookupIsReadOnly : unit -&gt; bool" Usage="xamlMember.LookupIsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />代表所需的唯讀屬性。</summary>
        <returns><see langword="true" /> 報告這個<see cref="T:System.Xaml.XamlMember" />做為所需的唯讀屬性; 否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在，但是公用`set`存取子不存在，由內部的反映。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.IsReadOnly%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用中繼資料可解譯判斷 XAML 型別系統表示每個案例為基礎。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadPublic : unit -&gt; bool&#xA;override this.LookupIsReadPublic : unit -&gt; bool" Usage="xamlMember.LookupIsReadPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />表示具有公用的屬性<see langword="get" />存取子。</summary>
        <returns><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示具有公用的屬性<see langword="get" />存取子，否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回內部反映或否定結果<xref:System.Xaml.XamlMember.IsWriteOnly%2A>、 依序處理。  
  
 <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 傳回成員本身是否為公用;它會傳回`true`公用成員上宣告類型的非公用。 使用<xref:System.Xaml.XamlMember.IsReadPublic%2A>相反地，如果您也要考慮的可見性的宣告型別。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.IsReadPublic%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>虛擬方法，因此，可以覆寫。 覆寫有可能變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不再符合預期的方式為基礎的 CLR 宣告的型別系統的存取資訊。 針對存取層級的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadPublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlMember.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />表示不能解析用於型別和成員解析的支援系統的成員。</summary>
        <returns><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示無法解析的成員，否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫者取得的值時，可能會叫用這個方法<xref:System.Xaml.XamlMember.IsUnknown%2A>。 預設實作會傳回根據其中一個內部的反映或檢查結果`null`的值<xref:System.Xaml.XamlMember.UnderlyingMember%2A>、 依序處理。  
  
 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsUnknown" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWriteOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWriteOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWriteOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWriteOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWriteOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWriteOnly : unit -&gt; bool&#xA;override this.LookupIsWriteOnly : unit -&gt; bool" Usage="xamlMember.LookupIsWriteOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />表示具有公用成員<see langword="set" />存取子但沒有公用<see langword="get" />存取子。</summary>
        <returns><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示唯寫的成員，否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在，具有公用`set`存取子和非公用`get`存取子，由內部的反映。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.IsWriteOnly%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWriteOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWritePublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWritePublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWritePublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWritePublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWritePublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWritePublic : unit -&gt; bool&#xA;override this.LookupIsWritePublic : unit -&gt; bool" Usage="xamlMember.LookupIsWritePublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回是否這<see cref="T:System.Xaml.XamlMember" />表示具有公用成員<see langword="set" />存取子。</summary>
        <returns><see langword="true" /> 如果這個<see cref="T:System.Xaml.XamlMember" />表示可寫入的成員，否則<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回結果基礎內部反映或否定<xref:System.Xaml.XamlMember.IsReadOnly%2A>、 依序處理。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.IsWritePublic%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>虛擬方法，因此，可以覆寫。 覆寫有可能變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不再符合預期的方式為基礎的 CLR 宣告的型別系統的存取資訊。 針對存取層級的任何安全性關鍵的檢查，請改為使用基礎 CLR 型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWritePublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; LookupMarkupExtensionBracketCharacters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; LookupMarkupExtensionBracketCharacters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionBracketCharacters () As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ LookupMarkupExtensionBracketCharacters();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;&#xA;override this.LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="xamlMember.LookupMarkupExtensionBracketCharacters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回標記延伸的左右括弧字元。</summary>
        <returns>包含左右括弧字元的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTargetType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTargetType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTargetType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupTargetType();" />
      <MemberSignature Language="F#" Value="abstract member LookupTargetType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupTargetType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupTargetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see cref="T:System.Xaml.XamlType" />型別的其中<see cref="T:System.Xaml.XamlMember" />可以存在。</summary>
        <returns>型別其中<see cref="T:System.Xaml.XamlMember" />可以存在。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會區分可附加和非可附加成員。 非可附加成員<xref:System.Xaml.XamlMember.LookupTargetType%2A>一律會傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>。 可附加成員<xref:System.Xaml.XamlMember.LookupTargetType%2A>會傳回根據檢查結果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存取子的參數類型及解譯類型基礎 XAML 結構描述內容。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.TargetType%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TargetType" />
      </Docs>
    </Member>
    <Member MemberName="LookupType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupType();" />
      <MemberSignature Language="F#" Value="abstract member LookupType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see cref="T:System.Xaml.XamlType" />正由成員的類型。</summary>
        <returns><see cref="T:System.Xaml.XamlType" />正由成員的類型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.Type%2A>。 覆寫這個方法，如果您想<xref:System.Xaml.XamlMember.Type%2A>的值，會啟用預設內部反映，從傳回不同的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。  
  
 預設實作會傳回使用不同的程式碼路徑和概念的意義<xref:System.Xaml.XamlType>，根據這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件。  
  
-   屬性，傳回<xref:System.Xaml.XamlType>是可設定屬性或屬性所傳回的型別。  
  
-   事件，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。  
  
-   對於方法而言<xref:System.Xaml.XamlType>是傳回的型別。  
  
 在每個案例中，XAML 結構描述內容用於評估的基礎系統類型的 XAML 型別。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.Type%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Type" />
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlMember.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回與此相關聯的型別轉換子實作<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />執行個體，其<see cref="T:System.ComponentModel.TypeConverter" />條件約束; 或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會使用下列邏輯和處理順序：  
  
-   如果屬性存在於成員層級 (<xref:System.ComponentModel.TypeConverterAttribute>)，屬性資訊使用於呼叫<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>針對 XAML 結構描述內容。  
  
-   如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回型別轉換子與類型相關聯。  
  
-   如果成員是事件，則會傳回特定事件的型別轉換子。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.TypeConverter%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingGetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingGetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingGetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingGetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see langword="get" />存取子，這與相關聯<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns><see cref="T:System.Reflection.MethodInfo" />相關聯<see langword="get" />存取子; 或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>屬性設為<xref:System.Reflection.PropertyInfo>，並傳回的值<xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType>(參數設定為`true`)，這表示傳回的方法可以為非公用。 此行為可能會導致`null`某些情況下。 包括沒有相關聯的存取子存在，或在成員不是屬性的情況。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>相關聯之屬性<xref:System.Xaml.Schema.XamlMemberInvoker>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。 請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingMember">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MemberInfo LookupUnderlyingMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingMember () As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MemberInfo ^ LookupUnderlyingMember();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo&#xA;override this.LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo" Usage="xamlMember.LookupUnderlyingMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 CLR 型別系統<see cref="T:System.Reflection.MemberInfo" />與此相關聯<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns>CLR 型別系統<see cref="T:System.Reflection.MemberInfo" />與此相關聯的物件<see cref="T:System.Xaml.XamlMember" />; 或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回建構為基礎的基礎成員資訊。 如果<xref:System.Reflection.MemberInfo>物件以不會提供足夠的資訊來設定基礎成員的簽章建構的則這個方法會傳回`null`。  
  
 如果在建構期間設為基礎的成員，您應該不需要呼叫這個方法。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.UnderlyingMember%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。 請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.UnderlyingMember" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingSetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingSetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingSetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingSetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingSetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回<see langword="set" />存取子，這與相關聯<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns><see cref="T:System.Reflection.MethodInfo" />相關聯<see langword="set" />存取子; 或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>作為<xref:System.Reflection.PropertyInfo>，並傳回的值<xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType>(參數設定為`true`)，這表示傳回的方法可以為非公用。 這會導致`null`某些情況下，包括沒有這類存取子，或在成員不是屬性的情況。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>相關聯之<xref:System.Xaml.Schema.XamlMemberInvoker>。覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。 請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlMember.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回與此相關聯的值序列化程式實作<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />執行個體，其<see cref="T:System.Windows.Markup.ValueSerializer" />條件約束，或<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會使用下列邏輯和處理順序：  
  
-   如果屬性存在於成員層級 (<xref:System.Windows.Markup.ValueSerializerAttribute>)，屬性資訊使用於呼叫<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>針對 XAML 結構描述內容。  
  
-   如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回值轉換器與類型相關聯。  
  
-   如果先前的條件不適用，請重新輸入，`null`會傳回。  
  
 這個方法會叫用時呼叫者取得值，以從<xref:System.Xaml.XamlMember.ValueSerializer%2A>。 覆寫這個方法，如果您要針對整個報表的統一結果<xref:System.Xaml.XamlMember>衍生類別，或如果您有專用的可用來判斷這每一案例為基礎的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.ValueSerializer" />
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; MarkupExtensionBracketCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; MarkupExtensionBracketCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionBracketCharacters As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ MarkupExtensionBracketCharacters { System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionBracketCharacters : System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定義標記延伸的左右括弧字元。</summary>
        <value>包含左右括弧字元的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlMember.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see langword="xamlName" />名稱字串，其中宣告此<see cref="T:System.Xaml.XamlMember" />。</summary>
        <value><see langword="xamlName" />名稱字串，其中宣告此<see cref="T:System.Xaml.XamlMember" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值一律是在建構期間設定。 所實作的建構函式<xref:System.Xaml.XamlMember>通常會擲回例外狀況如果未指定初始的名稱; 因此，不希望這個屬性成為`null`或空字串，如果您使用預設.NET Framework XAML 服務實作。  
  
 [XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)和 CLR 型別和成員的命名規則不是確切的交集。 它是可以宣告是合法的在 CLR 成員名稱，但卻無效下 XAML 命名。 您應該盡可能避免這種情況。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/11e4cada-41d2-494d-9531-0d3df4dfcbe3">XamlName</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="xamlMember1 = xamlMember2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
        <param name="xamlMember2"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
        <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有相同的值。</summary>
        <returns>如果 <see langword="true" /> 的值與 <paramref name="xamlMember1" /> 的值相同，則為 <paramref name="xamlMember2" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="System.Xaml.XamlMember.op_Inequality (xamlMember1, xamlMember2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
        <param name="xamlMember2"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
        <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有不同的值。</summary>
        <returns><see langword="true" /> 如果值<paramref name="xamlMember1" />的值與不同<paramref name="xamlMember2" />; 否則<see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得單一 XAML 命名空間 URI，這個識別主要 XAML 命名空間<see cref="T:System.Xaml.XamlMember" />。</summary>
        <value>這個的主要 XAML 命名空間的識別項<see cref="T:System.Xaml.XamlMember" />，做為字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A>屬性會提供相同的值，與呼叫<xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>，然後取得傳回的清單中的第一個值的字串。 撰寫後的文字或保留 XAML 命名空間資訊的其他表示相互轉換的成員時，應該使用慣用的 XAML 命名空間。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.SerializationVisibility" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::DesignerSerializationVisibility SerializationVisibility { System::ComponentModel::DesignerSerializationVisibility get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializationVisibility : System.ComponentModel.DesignerSerializationVisibility" Usage="System.Xaml.XamlMember.SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.ComponentModel.DesignerSerializationVisibility" />值，表示視覺化設計工具應該如何處理該成員。</summary>
        <value>值為<see cref="T:System.ComponentModel.DesignerSerializationVisibility" />列舉型別。 預設為 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.XamlType" />型別的其中<see cref="T:System.Xaml.XamlMember" />可以存在。</summary>
        <value>型別其中<see cref="T:System.Xaml.XamlMember" />可以存在。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的值是不同的可附加和非可附加成員項目。 非可附加成員<xref:System.Xaml.XamlMember.TargetType%2A>傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>。 針對可附加成員，<xref:System.Xaml.XamlMember.LookupTargetType%2A>傳回結果為基礎的此邏輯：  
  
-   如果反映無法解析備份 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`)，這個方法會傳回代表泛型的物件類型的內部常數。  
  
-   如果之前的條件不適用，<xref:System.Xaml.XamlMember.LookupTargetType%2A>呼叫。 預設實作會傳回<xref:System.Xaml.XamlType>上檢查的方法實作`get`和`set`存取子。 類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>使用不同的行為，例如其他中繼資料表單可能會針對可附加成員報告的目標類型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlMember.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回的字串表示，這個<see cref="T:System.Xaml.XamlMember" />。</summary>
        <returns>這個字串表示法<see cref="T:System.Xaml.XamlMember" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個實作會傳回<xref:System.Xaml.XamlMember.Name%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.XamlType" />正由成員的類型。</summary>
        <value><see cref="T:System.Xaml.XamlType" />正由成員的類型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.Type%2A>叫用<xref:System.Xaml.XamlMember.LookupType%2A>或特定覆寫該方法。 會發生這種情況時的初始內部反映邏輯尚未設定的資訊。  
  
 預設行為 (沒有<xref:System.Xaml.XamlMember.LookupType%2A>覆寫)，傳回<xref:System.Xaml.XamlType>可以具有不同概念的意義。 適用於哪一個的意義取決於是否這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件，如下列清單所示：  
  
-   屬性，傳回<xref:System.Xaml.XamlType>是可設定屬性或屬性所傳回的型別。  
  
-   事件，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。  
  
-   對於方法而言<xref:System.Xaml.XamlType>是傳回的型別，該方法，它可能是`null`。  
  
 在每個案例中，XAML 結構描述內容用於評估的支援類型的 XAML 型別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlMember.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />物件，可讓您以型別轉換建構 XAML 宣告的物件。</summary>
        <value>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />值，與<see cref="T:System.ComponentModel.TypeConverter" />泛型條件約束。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.TypeConverter%2A>叫用<xref:System.Xaml.XamlMember.LookupTypeConverter%2A>或特定覆寫該方法。 初始的內部反映邏輯尚未設定資訊時，就會發生這種行為。  
  
 實作會傳回非 null 屬性值<xref:System.Xaml.XamlMember.TypeConverter%2A>不一定可運作的<xref:System.ComponentModel.TypeConverter>。 以下是可能的非 null 傳回值的一份<xref:System.Xaml.XamlMember.TypeConverter%2A>和這些值代表什麼意義：  
  
-   傳回值會報告專為該成員或更廣泛的目標型別轉換子的屬性化型別轉換子。 此行為通常是何種大多數的 XAML 類型系統和 XAML 處理器尋找以具現化型別轉換子，並叫用其方法。  
  
-   傳回值會報告內建值轉換器。 這些轉換子存在特定 XAML 寫入器所執行的內部作業。 特別是，這些內建的值轉換器會將未經處理的屬性字串值轉換成 XAML 語言層級的基本項目。 如需.NET Framework XAML 服務實作中，這些內建型別轉換經常轉送給系統組件中定義的型別轉換子。 比方說，針對轉換<xref:System.Int32>值有內建轉送轉換，因此<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>值參考<xref:System.ComponentModel.Int32Converter>。  
  
-   傳回值會回報未受限制的物件模型; 的特殊案例亦即<xref:System.Xaml.XamlMember>已經<xref:System.Xaml.XamlMember.Type%2A>的值<xref:System.Object>。 在此情況下，<xref:System.Xaml.Schema.XamlValueConverter%601>回報<xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType>是 {`Object}`。 不過，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>是`null`原因沒有實際的類型或執行個體來執行這項轉換。 相反地，無法判斷物件模型的行為，到執行階段，當特定技術的執行階段判斷其物件圖形處理。  
  
 如果您可以存取可運作<xref:System.ComponentModel.TypeConverter>從<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>，您可以叫用其轉換方法。 不過，許多轉換方法會依賴服務內容。 如果您沒有可用的類型轉換器，預期寫入物件圖形的物件其一般角色相同的服務內容，轉換器方法可以擲回例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo UnderlyingMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo UnderlyingMember" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.UnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingMember As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberInfo ^ UnderlyingMember { System::Reflection::MemberInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingMember : System.Reflection.MemberInfo" Usage="System.Xaml.XamlMember.UnderlyingMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 CLR 型別系統<see cref="T:System.Reflection.MemberInfo" />可用的成員，來建構<see cref="T:System.Reflection.PropertyInfo" />， <see cref="T:System.Reflection.MethodInfo" />，或<see cref="T:System.Reflection.EventInfo" />。</summary>
        <value>CLR 型別系統<see cref="T:System.Reflection.MemberInfo" />資訊，請從初始建構函式參數轉型。 A<see cref="T:System.Xaml.XamlMember" />建構<see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />簽章傳回<see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.UnderlyingMember%2A>叫用<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>或特定覆寫該方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlMember.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />物件，用於 XAML 宣告的物件值序列化。</summary>
        <value>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />與<see cref="T:System.Windows.Markup.ValueSerializer" />泛型條件約束。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Xaml.XamlMember.ValueSerializer%2A>叫用<xref:System.Xaml.XamlMember.LookupValueSerializer%2A>或特定覆寫該方法。 初始的內部反映邏輯尚未設定資訊時，就會發生這種行為。  
  
 並非所有的情況下，傳回非 null 屬性值<xref:System.Xaml.XamlMember.ValueSerializer%2A>一定會運作<xref:System.Windows.Markup.ValueSerializer>。 請參閱<xref:System.Xaml.XamlMember.TypeConverter%2A>; 若要套用相同的考量<xref:System.Xaml.XamlMember.ValueSerializer%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>