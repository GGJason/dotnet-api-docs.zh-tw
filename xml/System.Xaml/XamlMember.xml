<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlMember.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5284b342cd8ec18017e3ac4ac33597d46dbc3c75f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284b342cd8ec18017e3ac4ac33597d46dbc3c75f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
          <target state="translated">提供 XAML 型別系統識別項給 XAML 型別的成員。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>) and also for general XAML type system logic.</source>
          <target state="translated">這個識別項會由 XAML 讀取器和 XAML 寫入器在處理成員節點期間 (當 XAML 讀取器位於 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph> 時) 使用，同時也會用於一般 XAML 型別系統邏輯。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph2">`Lookup*`</ph> API that is provided by possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclasses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 可以使用三個方法，傳回 XAML 成員的相關資訊： 標準 common language runtime (CLR) 反映;呼叫內部參考僅限反映技術 Api 該使用最佳化的位元旗標。虛擬呼叫覆寫或<ph id="ph2">`Lookup*`</ph>API 所提供的可能<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>子類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For most uses of .NET Framework XAML Services APIs and the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you use the default XAML schema context.</source>
          <target state="translated">對於大部分的.NET Framework XAML 服務 Api 使用和<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>API，您使用的預設 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
          <target state="translated">.NET Framework XAML 服務的預設 XAML 結構描述內容會使用 CLR 型別系統支援。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
          <target state="translated">這可讓處理任何類型或成員定義在中，或其他可、 CLR 和其反映技術的 XAML 讀取器和 XAML 寫入器。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Lookup* APIs and XamlMember Derived Classes</source>
          <target state="translated">查閱 * Api 和 XamlMember 衍生類別</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> defines several virtual members that derived classes might override.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 定義數個衍生類別的虛擬成員可能會覆寫。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
          <target state="translated">這些成員具有一律開頭為字串的名稱<ph id="ph1">`Lookup`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
          <target state="translated">API 的其餘部分名稱參考的虛擬方法影響的屬性。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class might override <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to influence what the base-defined property <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns in a derived class.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別可能會覆寫<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>影響哪些基底定義的屬性<ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>傳回衍生類別中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can predict return values for such properties in <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> or existing derived classes by reading the documentation for the relevant <ph id="ph2">`Lookup*`</ph> methods.</source>
          <target state="translated">您可以預測中這類屬性的傳回值<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>或現有的衍生類別所閱讀相關的文件<ph id="ph2">`Lookup*`</ph>方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> base class.</source>
          <target state="translated">目的<ph id="ph1">`Lookup*`</ph>方法是提供 XAML 類型系統擴充功能的技術，其中包含<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>基底類別。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>By deriving from <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and overriding the <ph id="ph2">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
          <target state="translated">由衍生自<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>和覆寫<ph id="ph2">`Lookup`</ph>虛擬成員，您可以定義 XAML 結構描述的是 XAML 成員的概念中，XAML 類型系統而不必受限於支援類型系統或技術的細節。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
          <target state="translated">您可以也使用提供的 XAML 結構描述內容在此配置下，仍會傳回您想要的結果。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>As an example, consider the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> property <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">例如，請考慮<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>屬性<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This property informs callers that operations such as using a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> for serialization can write a value for this member on a target object.</source>
          <target state="translated">這個屬性就會通知呼叫端，該作業，例如使用<ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>序列化可以寫入此成員值的目標物件上。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> and its members (the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated">在預設實作中，該成員是否可寫入的決定使用針對支援 CLR 反映技術<ph id="ph1">&lt;xref:System.Type&gt;</ph>及其成員 ( <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
          <target state="translated">因此，根據預設，XAML 類型系統取決於 CLR 型別系統。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, you can remove this dependency for your XAML type system reporting of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> by overriding the API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">不過，您可以移除此依存性，您 XAML 類型系統報告的<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>藉由覆寫應用程式開發介面<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
          <target state="translated">在您的覆寫中，您可以使用例如屬於您的技術，最適合用於固定的 XAML 詞彙，或是各種其他策略來判斷是否為 XAML 成員是在可寫入的主要的查閱資料表的中繼資料的其他決定您XAML 詞彙。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Constructing XamlMember Without XAML Schema Context</source>
          <target state="translated">建構 XamlMember 沒有 XAML 結構描述內容</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Most constructors of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> as part of their initialization.</source>
          <target state="translated">大部分的建構函式的<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>需要<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>做為其初始設定的一部分。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is also necessary for many internal <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> operations, such as obtaining information that is being forwarded from the backing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>也是必要的許多內部<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>作業，例如取得轉寄從支援類型的資訊。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>When you are working with the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you typically have a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> that is available from a surrounding construct such as a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
          <target state="translated">當您正在使用<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>API，您通常會有<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>的是可以從周圍建構例如<ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In this case, you can pass the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> reference through to all XAML type system calls that require a XAML schema context.</source>
          <target state="translated">在此情況下，您可以傳遞<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>透過參考所有 XAML 類型系統呼叫需要 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>One specific constructor, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, does not require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</source>
          <target state="translated">一個特定建構函式， <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>，不需要<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">不過， <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> ，建構<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>簽章傳回<ph id="ph3">`true`</ph>如<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">適用於牽涉到的載入路徑<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，這類成員無法寫入物件圖形。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Using the .NET Framework XAML services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">使用.NET Framework XAML 服務實作中，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>呼叫會擲回<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>時相關<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>報表<ph id="ph4">`true`</ph>如<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">您不應該建構<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>的值<ph id="ph2">`true`</ph>如<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>除非您的實作可以處理的例外狀況，從<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或者有其他方式來調整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行為。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, one or more of the  following might be true of your implementation:</source>
          <target state="translated">例如，一或多個下列可能的實作，則為 true:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The XAML schema context is available later.</source>
          <target state="translated">稍後可 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You use a member invoker pattern.</source>
          <target state="translated">您使用的成員啟動程式模式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">刻意覆寫<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>自訂 XAML 寫入器。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">表示事件成員的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">使用 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
          <target state="translated">如果成員表示的事件 （事件處理常式連接點屬性），請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">表示屬性成員的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">使用 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
          <target state="translated">如果成員表示的屬性 （並不特別的事件處理常式連接），請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">表示事件成員的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 實作，可處理對 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的執行階段反映呼叫。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">使用 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> (包含 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 資訊)，初始化 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
          <target state="translated">如果成員表示一個事件 （或事件處理常式連接點屬性），請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">表示屬性成員的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 實作，可處理對 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的執行階段叫用呼叫。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using reflection <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">使用反映 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> (包含 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 資訊)，初始化 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
          <target state="translated">使用這個建構函式，而且不是事件處理常式連接才成員表示的屬性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable event.</source>
          <target state="translated">可附加事件的字串名稱。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的處理常式 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event.</source>
          <target state="translated">針對表示可附加事件的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">如果成員表示可附加的事件成員，請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The string name of the member.</source>
          <target state="translated">成員的字串名稱。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information for the declaring type.</source>
          <target state="translated">進行宣告的型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 資訊。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the member is attachable; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示成員為可附加成員，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using a string name and declaring <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information.</source>
          <target state="translated">使用字串名稱並宣告 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 資訊，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with this signature has significant limitations.</source>
          <target state="translated">使用此簽章建構的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 具有諸多限制。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> ，建構<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>簽章傳回<ph id="ph3">`true`</ph>如<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">適用於牽涉到的載入路徑<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，這類成員無法寫入物件圖形。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Using the .NET Framework XAML Services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">使用.NET Framework XAML 服務實作中，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>呼叫會擲回<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>時相關<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>報表<ph id="ph4">`true`</ph>如<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">您不應該建構<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>與<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph>除非您的實作可以處理的例外狀況，從<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或者有其他方式來調整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行為。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For example, one or more of the following might be true of your implementation:</source>
          <target state="translated">例如，一或多個下列可能的實作，則為 true:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The XAML schema context is available later.</source>
          <target state="translated">稍後可 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You use a member invoker pattern.</source>
          <target state="translated">您使用的成員啟動程式模式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">刻意覆寫<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>自訂 XAML 寫入器。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> or <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable property.</source>
          <target state="translated">可附加屬性的字串名稱。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 存取子的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property.</source>
          <target state="translated">針對表示可附加屬性的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable property.</source>
          <target state="translated">如果成員表示的可附加屬性，請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable event.</source>
          <target state="translated">可附加事件的字串名稱。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的處理常式 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 實作，可處理對 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的執行階段叫用呼叫。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">針對表示可附加事件的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> (包含 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 資訊)，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">如果成員表示可附加的事件成員，請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable property.</source>
          <target state="translated">可附加屬性的字串名稱。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 存取子的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成員之支援實作的 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用來限定成員的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 內容。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 實作，可處理對 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的執行階段叫用呼叫。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">針對表示可附加屬性的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> (包含 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 資訊)，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable property member.</source>
          <target state="translated">如果成員表示的可附加屬性的成員，請使用這個建構函式。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">取得型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，這個型別宣告與此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的成員。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，這個型別宣告與此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的成員。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此值通常在初始化期間設定，且通常不<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> information can be passed in by constructors for initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 資訊可以傳入建構函式進行初始化。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>By calling directly into base constructors, initialization for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived classes can omit some of the value-checks that are made in the base class.</source>
          <target state="translated">藉由直接呼叫基底建構函式，初始化<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別可以省略部分程式在基底類別中進行值檢查。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
          <target state="translated">因此，衍生的初始化可以變更報告的型別成員關聯性的資訊是 XAML 成員，使它不再符合預期的方式為基礎的 CLR 宣告的型別系統資訊。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
          <target state="translated">宣告型別資訊的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 物件，這個物件用於延後載入 XAML 宣告的物件。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，對泛型具有 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> 條件約束。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件的清單。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>These report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">這些物件會報告因與此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 有相對初始設定順序而存在相依關聯性的成員。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件的清單。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>模式可以套用至刻意有所出入一般的 XAML 規則的物件模型案例。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
          <target state="translated">一般的 XAML 規則是類型的成員，不會傳遞做為初始文字 （或在 XAML 2009 中的 factory 方法） 必須能夠依任何順序指定。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
          <target state="translated">藉由套用<ph id="ph1">`DependsOn`</ph>模式給成員，您可以指示 XAML 寫入器永遠會處理此成員之前參考的成員。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
          <target state="translated">您可以套用在目前成員的值需要內容或之後，才可設定其他成員的其他資訊的位置的情況下此模式。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>模式應該套用明智並保留屬性情況下，它可以做架構的用途。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
          <target state="translated">慢 XAML 處理可能需要大量的相依性。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
          <target state="translated">此外，很可能會產生循環相依性，在此情況下，XAML 處理行為是未定義。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, on <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, and on <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
          <target state="translated">範例<ph id="ph1">`DependsOn`</ph>從 WPF 的情況包括某些屬性上<ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>上<ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>，然後在<ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指出目前的物件和另一個物件是否相等。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">要與這個物件比較的物件。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指出目前的物件和另一個物件是否相等。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若目前的物件等於 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 參數，則為 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>，否則即為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>An object to compare with this object.</source>
          <target state="translated">要與此物件進行比較的物件。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">指出目前的物件是否等於另一個相同類型的物件。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若目前的物件等於 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 參數，則為 <ph id="ph2">&lt;paramref name="other" /&gt;</ph>，否則即為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">傳回這個物件的雜湊程式碼。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">整數雜湊程式碼。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>A list of XAML namespace identifiers as strings.</source>
          <target state="translated">XAML 命名空間識別項的清單 (字串形式)。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>The default implementation returns the <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> call result from the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> that is associated with this <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">預設實作會傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph>呼叫結果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>與此相關聯<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">取得與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 相關聯的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 相關聯的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>模式是進階的 XAML 類型系統擴充功能技術。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>模式提供插入不同的結構描述型別對應的行為，同時仍然使用.NET Framework XAML 服務 XAML 類型系統定義的方法。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because it lacks the <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, the <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> property returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph>覆寫會傳回<ph id="ph2">`null`</ph>，或如果預設實作會傳回<ph id="ph3">`null`</ph>因為其欠缺<ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>這個<ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>、<ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>屬性會傳回<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> is the default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> 是預設值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
          <target state="translated">這適用於大部分的操作，使用.NET Framework XAML 服務和預設 XAML 結構描述內容，並在其中任何特定覆寫<ph id="ph1">`Invoker`</ph>XAML 類型系統實體的建構函式傳遞模式。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否報告為環境屬性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 報告為環境屬性，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中初始的內部反映邏輯具有已設定資訊的實作，會發生此問題。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">檢查環境的內容通常以確定物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 服務 Api 和預設 XAML 結構描述內容會填入這個屬性與為基礎的值<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> uses this existing <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique, and it returns <ph id="ph3">`true`</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member declaration.</source>
          <target state="translated">預設實作<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>使用這個現有<ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>技術，並傳回<ph id="ph3">`true`</ph>如果<ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>存在於宣告的成員。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is found on members of several WPF types, which include <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 找到的數個 WPF 類型，包括成員上<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>It is also found on the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, which connotes that any member that uses <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its type should be considered ambient even if the member is not specifically attributed.</source>
          <target state="translated">它也可以找到上<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>connotes，任何成員，會使用型別<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>為其型別應該視為環境即使未特別屬性成員。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否為可附加的成員。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是可附加的成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>值會初始化為基礎的建構函式用來建構<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否為 XAML 指示詞。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是 XAML 指示詞，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>值會初始化為基礎的建構函式用來建構<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The base <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructors initialize so that <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">基底<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>建構函式初始化以便<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class (a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class) initializes so that <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph>類別 (<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別) 會初始化以便<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>是<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>If you want to report <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> as <ph id="ph2">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> because that is the only way to enable that behavior.</source>
          <target state="translated">如果您想要報告<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>為<ph id="ph2">`true`</ph>的 XAML 成員的自訂 XAML 結構描述類別的呼叫端，確定您衍生自<ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph>因為這是為了允許該行為的唯一方式。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event member.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示事件成員。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示事件，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否是使用有效的 <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 字串做為其 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph> 進行初始化。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是使用有效的 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 字串進行初始化，則為 <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示唯讀成員。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示唯讀成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member with a callable public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示具有可呼叫之公用 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 存取子的成員。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可呼叫的公用 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 存取子則為 <ph id="ph3">&lt;see langword="get" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> value checks whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>是否值檢查<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是公用的。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`get`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>為非公用，<ph id="ph2">`get`</ph>存取子不是實際的方式，可呼叫和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>傳回<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>方法是虛擬的因此，可以覆寫。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">取得值，這個值表示用於型別和成員解析的支援系統是否無法解析成員。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the member is not resolvable; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the member is resolvable.</source>
          <target state="translated">如果無法解析成員則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，如果可以解析成員則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> ，建構<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>簽章傳回<ph id="ph3">`true`</ph>如<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">適用於牽涉到的載入路徑<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>與<ph id="ph3">`true`</ph>如<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>無法寫入物件圖形。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">在.NET Framework XAML 服務 Api 中的預設實作<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>呼叫會擲回<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>時相關<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>報表<ph id="ph4">`true`</ph>如<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">您不應該建構<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>的值<ph id="ph2">`true`</ph>如<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>除非您的實作可以處理的例外狀況，從<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或者有其他方式來調整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行為。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示唯寫成員。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示唯寫成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a callable public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">取得值，這個值表示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示具有可呼叫之公用 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子的成員。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可呼叫的公用 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 存取子則為 <ph id="ph3">&lt;see langword="set" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> value considers whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public as part of the determination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>值會考慮是否<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是公用判斷的一部分。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`set`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>為非公用，<ph id="ph2">`set`</ph>存取子不是實際的方式，可呼叫和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>傳回<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>方法是虛擬的因此，可以覆寫。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">在衍生類別中實作時，傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">覆寫這個方法以提供的替代方法，若要取得 CLR 屬性值與內部的反映。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</source>
          <target state="translated">沒有覆寫時，在內部反映程式會使用一般的 CLR 反映邏輯，例如呼叫<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">預設實作會傳回 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 物件，這個物件用於延後載入 XAML 宣告的物件。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，具有對泛型的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> 條件約束。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> property.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">如果您想要覆寫此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>資訊。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>The default implementation returns an object either by reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> or using a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> from the declaring type.</source>
          <target state="translated">預設實作會傳回物件以讀取<ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>或使用<ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph>從宣告的型別。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果是使用 無任何物件，這個方法可能會傳回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件的清單。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">這個清單中的項目會報告因與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 有相對初始設定順序而存在相依關聯性的成員。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件的清單。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> property.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">如果您想要覆寫此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>資訊。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The WPF XAML reader and writer implementations attribute this case with <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</source>
          <target state="translated">WPF XAML 讀取器和寫入器實作的屬性與這個案例<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The default implementation uses this existing <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</source>
          <target state="translated">預設實作會使用這個現有<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>技術。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
          <target state="translated">覆寫這個方法，如果您不使用<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>這個用途，而且想要取代該技術，指出屬性處理順序，使用您自己的技術。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
          <target state="translated">如果您不想支援屬性的處理順序，您可以使用的預設實作，因為它會不傳回任何結果，哪個較合適。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The list is read-only.</source>
          <target state="translated">清單是唯讀的。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 相關聯的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 資訊，否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>This method is invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">預設實作不需要<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>使用其中一種傳遞初始的建構函式會建構<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>值必須存在<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; 否則預設實作會傳回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Override this method if you also derive from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">覆寫這個方法，如果您也是衍生自<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>，而且想要傳回衍生的類別。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">如果您傳回<ph id="ph1">`null`</ph>，<ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>傳回<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>給呼叫端。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否報告為環境屬性。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 報告這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 為環境屬性，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
          <target state="translated">這個方法會叫用由內部呼叫，以檢查環境的 XAML 內容資訊。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
          <target state="translated">環境屬性行為會佔用公用 API 的行為，XAML 讀取器和 XAML 寫入器。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The internal calls that reference <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">參考的內部呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>通常是先確認物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
          <target state="translated">預設的.NET Framework XAML 服務實作會使用 CLR 屬性設定來透過支援類型，取得從反映的這項資訊。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Specifically, the default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> and returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member definition.</source>
          <target state="translated">具體來說，預設實作會檢查是否有<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>並傳回<ph id="ph2">`true`</ph>如<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>如果<ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>存在於成員定義。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
          <target state="translated">覆寫這個方法，如果您不使用<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>這個用途，而且想要取代該技術，指出環境的 XAML 屬性，使用您自己的技術。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Example APIs from WPF that attribute with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> are <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">從屬性附帶的 WPF 範例應用程式開發介面<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>是<ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示事件。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report that this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 報告這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示事件，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>The default implementation checks whether <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, and if it is, returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">這個預設實作會檢查是否<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>的型別<ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>，如果是，會傳回與<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an intended read-only property.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示所需的唯讀屬性。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an intended read-only property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 報告這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 為所需的唯讀屬性，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists, but a public <ph id="ph3">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
          <target state="translated">預設實作會傳回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>存在，但公用<ph id="ph3">`set`</ph>存取子不存在，由內部反映所決定。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示具有公用 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 存取子的屬性。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示具有公用 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 存取子的屬性，則為 <ph id="ph3">&lt;see langword="get" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The default implementation returns results based either on internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">預設實作會傳回內部反映或否定結果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>、 依序處理。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> returns whether the member itself is public; it returns <ph id="ph2">`true`</ph> for a public member on a nonpublic declaring type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 傳回成員本身是否為公用。它會傳回<ph id="ph2">`true`</ph>nonpublic，宣告類型上的公用成員。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Use <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> instead, if you also want to consider the visibility of the declaring type.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>相反地，如果您也想要考慮的宣告類型的可見性。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>方法是虛擬的因此，可以覆寫。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示無法解析的成員則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>This method may be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">呼叫者取得的值時，可能會叫用這個方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">預設實作會傳回結果，會根據其中一個內部反映或檢查<ph id="ph1">`null`</ph>值<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>、 依序處理。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor but not a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示具有公用 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子但沒有公用 <ph id="ph3">&lt;see langword="get" /&gt;</ph> 存取子的成員。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示唯寫成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists that has a public <ph id="ph3">`set`</ph> accessor and a nonpublic <ph id="ph4">`get`</ph> accessor, as determined by internal reflection.</source>
          <target state="translated">預設實作會傳回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>存在具有公用<ph id="ph3">`set`</ph>存取子和 nonpublic<ph id="ph4">`get`</ph>存取子，由內部反映所決定。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示具有公用 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子的成員。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a writable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可寫入的成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The default implementation returns results based  either internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">預設實作會傳回結果基礎內部反映或否定<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>、 依序處理。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>方法是虛擬的因此，可以覆寫。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>Returns the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">傳回標記延伸的左右括弧字元。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">包含左右括弧字元的集合。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 可能存在之型別的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 可能存在的型別。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
          <target state="translated">預設實作會區分可附加和非可附加成員。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">對於非可附加成員，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>一律會傳回<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result based on examining the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> accessor parameter type and interprets that type based on XAML schema context.</source>
          <target state="translated">可附加成員<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>傳回結果，根據檢查<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>存取子參數類型和解譯類型根據 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">傳回成員所使用型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">成員所使用型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">如果您想要覆寫此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>資訊。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The default implementation uses different code paths and conceptual meanings for the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on whether this <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event.</source>
          <target state="translated">預設實作會使用不同的程式碼路徑與概念的意義傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，根據這<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>表示屬性、 方法或事件。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">屬性，傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>設定的屬性或屬性所傳回的型別。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">對於事件，傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是所需的事件處理常式型別 （CLR 實作中的委派）。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type.</source>
          <target state="translated">一種方法，如<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>的傳回型別。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
          <target state="translated">在每個案例中，XAML 結構描述內容用於評估的基礎系統類型的 XAML 型別。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的型別轉換器實作。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 條件約束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 執行個體，否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">預設實作會使用下列邏輯並處理順序：</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">如果屬性設定存在成員層級 (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>)，用於呼叫的屬性資訊<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph>對 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a type converter that is associated with the type is returned.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>有效，則會傳回與類型相關聯的類型轉換器。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If the member is an event, an event-specific type converter is returned.</source>
          <target state="translated">如果成員是事件，則會傳回特定事件的型別轉換子。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Returns a <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 存取子。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">相關聯 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 存取子的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The default implementation interprets the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> property as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">預設實作會解譯<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>屬性做為<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>並傳回值<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph>(參數設為<ph id="ph4">`true`</ph>)，這表示傳回的方法可以是公用。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
          <target state="translated">這種行為可能會導致<ph id="ph1">`null`</ph>特定案例。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
          <target state="translated">包括沒有相關聯的存取子存在，或該成員不是屬性。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> property on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph>屬性相關聯之<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">請務必實作<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>使它們都會傳回相互關聯的結果。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Returns a CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 相關聯的 CLR 型別系統 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>A CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">與這個 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 相關聯的 CLR 型別系統 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件，否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
          <target state="translated">預設實作會傳回建構為基礎的基礎成員資訊。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>不提供足夠的資訊來設定基礎成員的簽章與建構物件，這個方法會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
          <target state="translated">如果在建構期間設定為基礎的成員，您應該不需要呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">請務必實作<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>使它們都會傳回相互關聯的結果。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Returns a <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 存取子。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">相關聯 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 存取子的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The default implementation interprets <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">預設實作會解譯<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>為<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>並傳回值<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph>(參數設為<ph id="ph4">`true`</ph>)，這表示傳回的方法可以是公用。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
          <target state="translated">這會導致<ph id="ph1">`null`</ph>某些情況下，包括沒有這類存取子，或不是屬性之成員的狀況。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.Override this method if you want to report uniform results for an entire <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph>相關聯之<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">請務必實作<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>使它們都會傳回相互關聯的結果。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Returns a value serializer implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 相關聯的值序列化程式實作。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 條件約束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 執行個體，或 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">預設實作會使用下列邏輯並處理順序：</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">如果屬性設定存在成員層級 (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>)，用於呼叫的屬性資訊<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph>對 XAML 結構描述內容。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a value converter that is associated with the type is returned.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>有效，則會傳回與類型相關聯的值轉換器。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">如果上述條件不會套用，<ph id="ph1">`null`</ph>傳回。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">這個方法會叫用時呼叫者取得值，從<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">覆寫這個方法，如果您想要報告的統一結果整個<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>Defines the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">定義標記延伸的左右括弧字元。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">包含左右括弧字元的集合。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Name">
          <source>Gets the <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">取得宣告此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 名稱字串。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">宣告這個 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 名稱字串。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>This value is always set during construction.</source>
          <target state="translated">這個值一律是在建構期間設定。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The constructors that are implemented by <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph2">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
          <target state="translated">建構函式實作的<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>通常擲回例外狀況如果未指定初始的名稱; 因此，不想要這個屬性<ph id="ph2">`null`</ph>或空字串，如果您使用預設.NET Framework XAML 服務實作。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
          <target state="translated"><bpt id="p1">[</bpt>XamlName 文法<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>而且命名規則的 CLR 型別和成員不精確的交集。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
          <target state="translated">它是宣告是合法的在 CLR 成員名稱，但卻無效下 XAML 命名。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>You should avoid this situation if possible.</source>
          <target state="translated">您應該儘可能避免這種情況。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have the same value.</source>
          <target state="translated">判斷兩個指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值與 <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> 的值相同，則為 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have different values.</source>
          <target state="translated">判斷兩個指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 物件是否具有不同的值。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> differs from the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> 的值與 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph> 的值不同，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">取得單一 XAML 命名空間 URI，這個 URI 識別此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的主要 XAML 命名空間。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The identifier for the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, as a string.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 之主要 XAML 命名空間的識別項 (字串形式)。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> property provides the same value as calling <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph>屬性會提供相同的值與呼叫<ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph>然後從傳回的清單中取得的第一個值的字串。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
          <target state="translated">撰寫回到文字或 XAML 命名空間資訊會保留其他表示相互轉換的成員時，應該使用慣用的 XAML 命名空間。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> value, which indicates how a visual designer should process the member.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 值，這個值表示視覺化設計工具應該如何處理成員。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 列舉的值。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TargetType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 可能存在之型別的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 可能存在的型別。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The returned value is different for attachable and non-attachable members.</source>
          <target state="translated">傳回的值是不同的可附加和非可附加成員。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">對於非可附加成員，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>傳回<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result that is based on this logic:</source>
          <target state="translated">可附加成員<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>傳回結果，取決於此邏輯：</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If reflection cannot resolve a backing (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
          <target state="translated">如果反映無法解決備份 (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>)，這個方法會傳回代表一般物件類型的內部常數。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If the previous condition does not apply, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> is called.</source>
          <target state="translated">如果之前的條件不適用，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on examining the methods that implement the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessors.</source>
          <target state="translated">預設實作會傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>檢查實作的方法，根據<ph id="ph2">`get`</ph>和<ph id="ph3">`set`</ph>存取子。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>A class might override <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
          <target state="translated">類別可能會覆寫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>来使用不同的行為，例如其他中繼資料表單，可能會報告目標類型的可附加成員。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的字串表示。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的字串表示。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.ToString">
          <source>This implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">這個實作會傳回<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Type">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">取得成員所使用型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">成員所使用型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">會發生這種情況時的初始內部反映邏輯已設定資訊。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In the default behavior (no <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> override), the returned <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> can have different conceptual meanings.</source>
          <target state="translated">此預設行為 (沒有<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph>覆寫)，傳回<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>可以具有不同的概念意義。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Which meaning applies depends on whether this <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event, as the following list shows:</source>
          <target state="translated">適用於哪一個的意義取決於是否這<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>表示屬性、 方法或事件，如下列清單所示：</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">屬性，傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>設定的屬性或屬性所傳回的型別。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">對於事件，傳回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是所需的事件處理常式型別 （CLR 實作中的委派）。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type of that method, which may be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">一種方法，如<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是可能是該方法的傳回型別<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
          <target state="translated">在每個案例中，XAML 結構描述內容用於評估的支援類型的 XAML 型別。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 物件，這個物件可用於建構 XAML 宣告物件的型別轉換。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> value, with a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，對泛型具有 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 條件約束。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">初始內部反映邏輯已設定資訊時，就會發生這種行為。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Implementations that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> are not necessarily a working <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">實作會傳回非 null 屬性值<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>不一定可運作的<ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The following is a list of possible non-null return values for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> and what these values represent:</source>
          <target state="translated">下列是可能的非 null 傳回值的一份<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>和這些值所代表的意義：</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
          <target state="translated">傳回值會報告該成員為或更廣泛地目標型別轉換子的屬性型別轉換子。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
          <target state="translated">這種行為通常是何種大部分的 XAML 類型系統和 XAML 處理器尋找才能具現化類型轉換器，並叫用其方法。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a built-in value converter.</source>
          <target state="translated">傳回值會報告內建值轉換器。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
          <target state="translated">這些轉換存在特定 XAML 寫入器所執行的內部作業。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
          <target state="translated">特別是，這些內建的值轉換器會將原始屬性字串值轉換成 XAML 語言層級基本類型。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
          <target state="translated">如需.NET Framework XAML 服務實作，這些內建型別轉換通常轉送給系統組件中定義的類型轉換器。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For example, a conversion for an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value has built-in forwarded conversion, and therefore, the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> value references <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</source>
          <target state="translated">比方說，轉換為<ph id="ph1">&lt;xref:System.Int32&gt;</ph>值沒有內建的轉送轉換，因此<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph>值參考<ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports the special case of an unconstrained object model; that is, the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> has a <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">傳回值會報告未受限制的物件模型; 特殊的案例也就是說，<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>具有<ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>值<ph id="ph3">&lt;xref:System.Object&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> reports that the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> is {<ph id="ph3">`Object}`</ph>.</source>
          <target state="translated">在此情況下，<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>報告<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph>是 {<ph id="ph3">`Object}`</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> is <ph id="ph2">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>是<ph id="ph2">`null`</ph>因為沒有實際的類型或執行個體是可用來執行這項轉換。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
          <target state="translated">相反地，無法判斷物件模型的行為，直到執行階段，當特定技術的執行階段會判定其物件圖形的處理。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you can access a working <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, you can invoke its conversion methods.</source>
          <target state="translated">如果您可以存取工作<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>從<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>，您可以叫用其轉換方法。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, many conversion methods rely on service context.</source>
          <target state="translated">不過，許多轉換方法都倚賴服務內容。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
          <target state="translated">如果您沒有可用的類型轉換器撰寫物件的物件圖形的其一般角色必須要有相同的服務內容，轉換器方法可以擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Gets the CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is available for a member that is constructed by <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>, or <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</source>
          <target state="translated">針對以 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>、<ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 所建構的成員，取得可用的 CLR 型別系統 <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> information, as cast from the initial constructor parameters.</source>
          <target state="translated">從初始建構函式參數轉型的 CLR 型別系統 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 資訊。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with the <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> signature returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">以 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 簽章建構的 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> 會傳回 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 物件，這個物件用於對 XAML 宣告的物件進行值序列化。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，對泛型具有 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 條件約束。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>叫用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph>或特定覆寫該方法。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">初始內部反映邏輯已設定資訊時，就會發生這種行為。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Not all cases that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> are necessarily a working <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">並非所有的情況下，傳回非 null 屬性的值<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>一定都可運作的<ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; the same considerations apply to <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; 考量同樣適用於<ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>