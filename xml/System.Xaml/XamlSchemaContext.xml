<Type Name="XamlSchemaContext" FullName="System.Xaml.XamlSchemaContext">
  <TypeSignature Language="C#" Value="public class XamlSchemaContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlSchemaContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlSchemaContext" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlSchemaContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlSchemaContext" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7de50-101">定義可重複使用的內容，以解譯或對應 XAML 型別及其基礎組件中的型別。</span><span class="sxs-lookup"><span data-stu-id="7de50-101">Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-102">XAML 結構描述內容提供結構描述或詞彙，針對 XAML 和特定的剖析器實作之間的抽象的層。</span><span class="sxs-lookup"><span data-stu-id="7de50-102">A XAML schema context provides a layer of abstraction between a schema or vocabulary for XAML, and a specific parser implementation.</span></span> <span data-ttu-id="7de50-103">插入結構描述內容的概念、 結構描述可以搭配不同的 XAML 剖析器並結構描述內容填入所需的特定 XAML 剖析器與互動的詳細資料。</span><span class="sxs-lookup"><span data-stu-id="7de50-103">By inserting the concept of a schema context, the schema can be used with different XAML parsers, and the schema context fills in the details that are needed to interact with a specific XAML parser.</span></span> <span data-ttu-id="7de50-104">例如，XAML 結構描述內容會提供查詢與 XAML 概念或 XAML 類型系統的 CLR 繫結相關的 Api。</span><span class="sxs-lookup"><span data-stu-id="7de50-104">For example, the XAML schema context provides query APIs that relate to XAML concepts or to the CLR binding to the XAML type system.</span></span> <span data-ttu-id="7de50-105">也負責維護載入的組件的組件清單會定義 XAML 剖析器尋找支援類型的 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="7de50-105">The XAML schema context is also responsible for maintaining the assembly list of loaded assemblies, which defines where a XAML parser looks for backing types.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="7de50-106">在<see cref="T:System.AppDomain" />、<see cref="T:System.Xaml.XamlSchemaContext" />可以在多個呼叫端，同時包含完整和部分信任呼叫端之間共用。</span><span class="sxs-lookup"><span data-stu-id="7de50-106">In an <see cref="T:System.AppDomain" />, a <see cref="T:System.Xaml.XamlSchemaContext" /> can be shared between multiple callers, which include both full and partial trust callers.</span></span> <span data-ttu-id="7de50-107">這種情況下存在於架構，例如 WPF 中，讓部分信任存取 XAML 載入 WPF 應用程式模型的部分。</span><span class="sxs-lookup"><span data-stu-id="7de50-107">This situation exists in frameworks such as WPF, which provide partial-trust access to XAML loading for portions of the WPF application model.</span></span> <span data-ttu-id="7de50-108">預設值<see cref="T:System.Xaml.XamlSchemaContext" />實作提供保護措施，在此案例中會保留其所有屬性和設定不變。</span><span class="sxs-lookup"><span data-stu-id="7de50-108">The default <see cref="T:System.Xaml.XamlSchemaContext" /> implementation provides safeguards in this scenario by keeping all its properties and settings immutable.</span></span> <span data-ttu-id="7de50-109">在衍生的實作也應該考慮下列屬性的不變性此模型和 XAML 結構描述內容的設定。</span><span class="sxs-lookup"><span data-stu-id="7de50-109">Derived implementations should also consider following this model of immutability for properties and settings of a XAML schema context.</span></span>  
  
 <span data-ttu-id="7de50-110"><see cref="T:System.Xaml.XamlSchemaContext" />基底類別設計成查閱沒有任何外部可觀察的副作用。</span><span class="sxs-lookup"><span data-stu-id="7de50-110">The <see cref="T:System.Xaml.XamlSchemaContext" /> base class is designed so that lookups have no externally observable side effects.</span></span> <span data-ttu-id="7de50-111">所參考的型別<see cref="T:System.Xaml.XamlSchemaContext" />Api 在基底類別，例如<see cref="T:System.Xaml.XamlType" />或<see cref="T:System.Xaml.XamlMember" />，也會產生查詢沒有副作用。</span><span class="sxs-lookup"><span data-stu-id="7de50-111">The types that are referenced by <see cref="T:System.Xaml.XamlSchemaContext" /> APIs in the base class, such as <see cref="T:System.Xaml.XamlType" /> or <see cref="T:System.Xaml.XamlMember" />, also produce no side effects from lookups.</span></span> <span data-ttu-id="7de50-112">結構描述項判斷所需的所有資料都應該都會有的建構和設定<see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-112">All data that is needed to make a schema determination should be available from the construction and settings of the <see cref="T:System.AppDomain" />.</span></span> <span data-ttu-id="7de50-113">請注意，應用程式開發介面不查閱依賴明確傳入服務;其輸入依賴只輸入字串。</span><span class="sxs-lookup"><span data-stu-id="7de50-113">Notice that no lookup APIs rely on explicitly passed-in services; their input relies on string input only.</span></span>  
  
 <span data-ttu-id="7de50-114"><see cref="T:System.Xaml.XamlSchemaContext" />基底類別，和<see cref="T:System.Xaml.XamlType" />和<see cref="T:System.Xaml.XamlMember" />是安全其基底實作中的所有執行緒。</span><span class="sxs-lookup"><span data-stu-id="7de50-114">The <see cref="T:System.Xaml.XamlSchemaContext" /> base class, and <see cref="T:System.Xaml.XamlType" /> and <see cref="T:System.Xaml.XamlMember" /> are all thread safe in their base implementations.</span></span> <span data-ttu-id="7de50-115">如果您是衍生自<see cref="T:System.Xaml.XamlSchemaContext" />或 XAML 類型系統類別衍生，例如<see cref="T:System.Xaml.XamlType" />和<see cref="T:System.Xaml.XamlMember" />，您可以選擇您的類別是否為安全執行緒的行為。</span><span class="sxs-lookup"><span data-stu-id="7de50-115">If you derive from <see cref="T:System.Xaml.XamlSchemaContext" /> or derive XAML type system classes such as <see cref="T:System.Xaml.XamlType" /> and <see cref="T:System.Xaml.XamlMember" /> , you can choose whether your classes will behave as thread safe.</span></span></para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7de50-116">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="7de50-116">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7de50-117">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="7de50-117">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies"><span data-ttu-id="7de50-118">組件資訊項目的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-118">An enumerable set of assembly information items.</span></span> <span data-ttu-id="7de50-119">每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</span><span class="sxs-lookup"><span data-stu-id="7de50-119">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span></span></param>
        <summary><span data-ttu-id="7de50-120">根據參考組件集，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="7de50-120">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a set of reference assemblies.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="settings"><span data-ttu-id="7de50-121">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</span><span class="sxs-lookup"><span data-stu-id="7de50-121">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></param>
        <summary><span data-ttu-id="7de50-122">根據設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="7de50-122">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a settings object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-123">設定物件會儲存文字轉換器和標記延伸模組的詳細資訊的結構描述內容的資訊。</span><span class="sxs-lookup"><span data-stu-id="7de50-123">The settings object stores information about text converter and markup extension specifics for the schema context.</span></span> <span data-ttu-id="7de50-124">如需詳細資訊，請參閱<xref:System.Xaml.XamlSchemaContextSettings>。</span><span class="sxs-lookup"><span data-stu-id="7de50-124">For more information, see <xref:System.Xaml.XamlSchemaContextSettings>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies, class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly), settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies, System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies"><span data-ttu-id="7de50-125">組件資訊的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-125">An enumerable set of assembly information.</span></span> <span data-ttu-id="7de50-126">每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</span><span class="sxs-lookup"><span data-stu-id="7de50-126">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span></span></param>
        <param name="settings"><span data-ttu-id="7de50-127">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</span><span class="sxs-lookup"><span data-stu-id="7de50-127">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></param>
        <summary><span data-ttu-id="7de50-128">根據參考組件集和設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="7de50-128">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a set of reference assemblies and a settings object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!XamlSchemaContext ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7de50-129">提供不會叫用 <see langword="Finalize" /> 的非標準 <see langword="Dispose" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="7de50-129">Provides a nonstandard <see langword="Finalize" /> implementation that does not invoke <see langword="Dispose" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-130">自動記憶體回收，或是手動作業，不應該受到處置 XAML 結構描述內容。</span><span class="sxs-lookup"><span data-stu-id="7de50-130">XAML schema contexts should not be disposed by automatic garbage collection or by manual operations.</span></span> <span data-ttu-id="7de50-131">雖然 XAML 結構描述內容不有任何 unmanaged 的資源，但是<xref:System.Windows.Markup.XamlDeferLoadAttribute>屬性可能仍在作用中，並處置 XAML 結構描述內容可能會干擾相關的延後載入作業。</span><span class="sxs-lookup"><span data-stu-id="7de50-131">Although XAML schema contexts  have no unmanaged resources, <xref:System.Windows.Markup.XamlDeferLoadAttribute> properties might still be active, and disposing a XAML schema context can interfere with the related defer-load operation.</span></span>  
  
 <span data-ttu-id="7de50-132"><xref:System.AppDomain.AssemblyLoad> 事件處理常式，其會做為弱式參考內部連結，此實作會清除。</span><span class="sxs-lookup"><span data-stu-id="7de50-132"><xref:System.AppDomain.AssemblyLoad> event handlers, which are hooked internally as weak references, are cleaned up by this implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullyQualifyAssemblyNamesInClrNamespaces">
      <MemberSignature Language="C#" Value="public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullyQualifyAssemblyNamesInClrNamespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullyQualifyAssemblyNamesInClrNamespaces { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7de50-133">取得值，這個值指定 XAML 結構描述和其內容是否在查閱 API 所傳回的值中使用完整組件名稱。</span><span class="sxs-lookup"><span data-stu-id="7de50-133">Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</span></span></summary>
        <value>
          <span data-ttu-id="7de50-134">如果 XAML 結構描述和其內容在查閱 API 所傳回的值中使用完整組件名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-134"><see langword="true" /> if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-135">這個屬性會傳回<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType>所建立的設定值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>建構函式簽章。</span><span class="sxs-lookup"><span data-stu-id="7de50-135">This property returns the <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> value that is established in the settings for the <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> constructor signature.</span></span> <span data-ttu-id="7de50-136">如果其他的簽章用於建構或<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType>不特別設`true`，這個屬性的值是`false`。</span><span class="sxs-lookup"><span data-stu-id="7de50-136">If other signatures were used for construction or if <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> is not specifically set to `true`, the value of this property is `false`.</span></span>  
  
 <span data-ttu-id="7de50-137">這個屬性的值會影響所傳回的字串<xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>。</span><span class="sxs-lookup"><span data-stu-id="7de50-137">The value of this property influences the strings that are returned by <xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>.</span></span> <span data-ttu-id="7de50-138">如果<xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A>是`true`，字串的組件部分報告的對等<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7de50-138">If <xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A> is `true`, the assembly portion of the string reports the equivalent of <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetAllXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetAllXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlNamespaces () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetAllXamlNamespaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7de50-139">搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並傳回命名空間集。</span><span class="sxs-lookup"><span data-stu-id="7de50-139">Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of namespaces.</span></span></summary>
        <returns><span data-ttu-id="7de50-140">命名空間識別項的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-140">An enumerable set of namespace identifiers.</span></span> <span data-ttu-id="7de50-141">這些識別項是以字串形式提供。</span><span class="sxs-lookup"><span data-stu-id="7de50-141">These identifiers are provided as strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-142">如果它們透過建構或屬性的設定傳入這個方法只會搜尋參考組件。</span><span class="sxs-lookup"><span data-stu-id="7de50-142">This method only searches the reference assemblies if they are passed in through construction or property setting.</span></span> <span data-ttu-id="7de50-143">如果任何組件不建立做為參考組件，這個方法的邏輯會檢查所有已載入的組件，這<xref:System.Xaml.XamlSchemaContext>為作用中。</span><span class="sxs-lookup"><span data-stu-id="7de50-143">If no assemblies are established as reference assemblies, the logic of this method examines all loaded assemblies where this <xref:System.Xaml.XamlSchemaContext> is active.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt; GetAllXamlTypes (string xamlNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlType&gt; GetAllXamlTypes(string xamlNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlTypes (xamlNamespace As String) As ICollection(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::ICollection&lt;System::Xaml::XamlType ^&gt; ^ GetAllXamlTypes(System::String ^ xamlNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace"><span data-ttu-id="7de50-144">要傳回型別的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="7de50-144">The XAML namespace to return types for.</span></span></param>
        <summary><span data-ttu-id="7de50-145">搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並從指定的 XAML 命名空間傳回型別集。</span><span class="sxs-lookup"><span data-stu-id="7de50-145">Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of types from the specified XAML namespace.</span></span></summary>
        <returns><span data-ttu-id="7de50-146">XAML 型別的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-146">An enumerable set of XAML types.</span></span> <span data-ttu-id="7de50-147">集合中的每一個 XAML 型別都是以 <see cref="T:System.Xaml.XamlType" /> 物件表示。</span><span class="sxs-lookup"><span data-stu-id="7de50-147">Each XAML type in the set is represented by a <see cref="T:System.Xaml.XamlType" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredPrefix">
      <MemberSignature Language="C#" Value="public virtual string GetPreferredPrefix (string xmlns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPreferredPrefix(string xmlns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredPrefix (xmlns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetPreferredPrefix(System::String ^ xmlns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlns"><span data-ttu-id="7de50-148">要取得慣用前置詞的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="7de50-148">The XAML namespace to get the preferred prefix for.</span></span></param>
        <summary><span data-ttu-id="7de50-149">取得字串，這個字串會報告為慣用的前置詞，供消費者在對應指定的 XAML 命名空間時使用。</span><span class="sxs-lookup"><span data-stu-id="7de50-149">Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.</span></span></summary>
        <returns><span data-ttu-id="7de50-150">消費者在對應指定的 XAML 命名空間做為標記之用時，應該使用的字串。</span><span class="sxs-lookup"><span data-stu-id="7de50-150">A string that consumers should use when they map the specified XAML namespace for markup use.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-151">最立即的取用者的資訊通常是 XAML 寫入器。</span><span class="sxs-lookup"><span data-stu-id="7de50-151">The most immediate consumer of the information is typically a XAML writer.</span></span> <span data-ttu-id="7de50-152">其他間接取用者包含設計工具。</span><span class="sxs-lookup"><span data-stu-id="7de50-152">Other indirect consumers include design tools.</span></span>  
  
 <span data-ttu-id="7de50-153">Common language runtime (CLR) 的 XAML 繫結的一部分，您可以指定這項資訊藉由套用<xref:System.Windows.Markup.XmlnsPrefixAttribute>組件層級。</span><span class="sxs-lookup"><span data-stu-id="7de50-153">As part of the XAML binding for the common language runtime (CLR), you can specify this information by applying <xref:System.Windows.Markup.XmlnsPrefixAttribute> at the assembly level.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7de50-154"><paramref name="xmlns" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="7de50-154"><paramref name="xmlns" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueConverter&lt;TConverterBase&gt;">
      <MemberSignature Language="C#" Value="protected internal System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; GetValueConverter&lt;TConverterBase&gt; (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Xaml.Schema.XamlValueConverter`1&lt;!!TConverterBase&gt; GetValueConverter&lt;class TConverterBase&gt;(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetValueConverter(Of TConverterBase As Class) (converterType As Type, targetType As XamlType) As XamlValueConverter(Of TConverterBase)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : class System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ GetValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConverterBase">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <typeparam name="TConverterBase"><span data-ttu-id="7de50-155">特定的轉換器基底類別。</span><span class="sxs-lookup"><span data-stu-id="7de50-155">The specific converter base class.</span></span></typeparam>
        <param name="converterType"><span data-ttu-id="7de50-156">轉換子實作。</span><span class="sxs-lookup"><span data-stu-id="7de50-156">The converter implementation.</span></span></param>
        <param name="targetType"><span data-ttu-id="7de50-157">轉換器所需的目的型別。</span><span class="sxs-lookup"><span data-stu-id="7de50-157">The desired destination type for the converter.</span></span></param>
        <summary><span data-ttu-id="7de50-158">傳回可轉換為所要求之 <paramref name="targetType" /> 的值轉換器。</span><span class="sxs-lookup"><span data-stu-id="7de50-158">Returns a value converter that can convert to the requested <paramref name="targetType" />.</span></span></summary>
        <returns><span data-ttu-id="7de50-159"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，其條件約束符合方法呼叫上設定的條件約束。</span><span class="sxs-lookup"><span data-stu-id="7de50-159">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with a constraint that matches the constraint that is put on the method call.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlDirective">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlDirective GetXamlDirective(string xamlNamespace, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlDirective (xamlNamespace As String, name As String) As XamlDirective" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlDirective ^ GetXamlDirective(System::String ^ xamlNamespace, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlDirective</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace"><span data-ttu-id="7de50-160">包含具名指示詞的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="7de50-160">The XAML namespace that contains the named directive.</span></span></param>
        <param name="name"><span data-ttu-id="7de50-161">要取得之指示詞的名稱。</span><span class="sxs-lookup"><span data-stu-id="7de50-161">The name of the directive to obtain.</span></span></param>
        <summary><span data-ttu-id="7de50-162">傳回 <see cref="T:System.Xaml.XamlDirective" /> 值，這個值表示用於 XAML 語言或特定實作的指示詞。</span><span class="sxs-lookup"><span data-stu-id="7de50-162">Returns a <see cref="T:System.Xaml.XamlDirective" /> value that represents a directive, either for the XAML language or for a particular implementation.</span></span></summary>
        <returns><span data-ttu-id="7de50-163"><see cref="T:System.Xaml.XamlDirective" /> 物件，表示所要求的指示詞。</span><span class="sxs-lookup"><span data-stu-id="7de50-163">A <see cref="T:System.Xaml.XamlDirective" /> object that represents the requested directive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-164">如果您建立衍生的類別中覆寫這個方法<xref:System.Xaml.XamlDirective>XAML 類型系統的延伸案例的一部分。</span><span class="sxs-lookup"><span data-stu-id="7de50-164">Override this method if you create a derived class from <xref:System.Xaml.XamlDirective> as part of a XAML type system extension scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7de50-165"><paramref name="xamlNamespace" /> 或 <paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-165"><paramref name="xamlNamespace" /> or <paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXamlType">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7de50-166">傳回以 CLR 或 XAML 型別識別項為基礎的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-166">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on either a CLR or XAML type identifier.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlType GetXamlType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7de50-167">要取得 <see cref="T:System.Xaml.XamlType" /> 的型別。</span><span class="sxs-lookup"><span data-stu-id="7de50-167">The type to get a <see cref="T:System.Xaml.XamlType" /> for.</span></span></param>
        <summary><span data-ttu-id="7de50-168">傳回以 CLR 型別識別項為基礎的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-168">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a CLR type identifier.</span></span></summary>
        <returns><span data-ttu-id="7de50-169">與輸入 <paramref name="type" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-169">The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-170">這個多載會假設您使用 CLR 的支援類型系統。</span><span class="sxs-lookup"><span data-stu-id="7de50-170">This overload assumes that you are using the CLR for the backing type system.</span></span> <span data-ttu-id="7de50-171">如果您未使用的 CLR 型別系統，使用<xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>。</span><span class="sxs-lookup"><span data-stu-id="7de50-171">If you are not using the CLR type system, use <xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7de50-172"><paramref name="type" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-172"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlType GetXamlType(class System.Xaml.Schema.XamlTypeName xamlTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlType ^ GetXamlType(System::Xaml::Schema::XamlTypeName ^ xamlTypeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlTypeName" Type="System.Xaml.Schema.XamlTypeName" />
      </Parameters>
      <Docs>
        <param name="xamlTypeName"><span data-ttu-id="7de50-173">要取得 <see cref="T:System.Xaml.XamlType" /> 的 XAML 型別名稱。</span><span class="sxs-lookup"><span data-stu-id="7de50-173">The XAML type name to get a <see cref="T:System.Xaml.XamlType" /> for.</span></span></param>
        <summary><span data-ttu-id="7de50-174">傳回以 XAML 系統型別名稱為基礎的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-174">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a XAML system type name.</span></span></summary>
        <returns><span data-ttu-id="7de50-175">與輸入 <paramref name="xamlTypeName" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-175">The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="xamlTypeName" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7de50-176"><paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) 的元件為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-176">A component of <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> or <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7de50-177"><paramref name="xamlTypeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-177"><paramref name="xamlTypeName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xaml.Schema.XamlTypeName" />
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="protected internal virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, params System.Xaml.XamlType[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(string xamlNamespace, string name, class System.Xaml.XamlType[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetXamlType (xamlNamespace As String, name As String, ParamArray typeArguments As XamlType()) As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(System::String ^ xamlNamespace, System::String ^ name, ... cli::array &lt;System::Xaml::XamlType ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="xamlNamespace"><span data-ttu-id="7de50-178">包含所需型別的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="7de50-178">The XAML namespace that contains the desired type.</span></span></param>
        <param name="name"><span data-ttu-id="7de50-179">所需型別的字串名稱。</span><span class="sxs-lookup"><span data-stu-id="7de50-179">The string name of the desired type.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="7de50-180">泛型型別的初始化型別引數。</span><span class="sxs-lookup"><span data-stu-id="7de50-180">The initialization type arguments for a generic type.</span></span></param>
        <summary><span data-ttu-id="7de50-181">傳回以 XAML 命名空間和型別名稱字串為基礎的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-181">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a XAML namespace and a string for the type name.</span></span> <span data-ttu-id="7de50-182">這個簽章可以在所需型別為泛型型別的情況下指定型別引數。</span><span class="sxs-lookup"><span data-stu-id="7de50-182">This signature can specify the type arguments for cases where the desired type is a generic type.</span></span></summary>
        <returns><span data-ttu-id="7de50-183">與輸入準則相符的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-183">The <see cref="T:System.Xaml.XamlType" /> that matches the input criteria.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAssemblyResolve">
      <MemberSignature Language="C#" Value="protected internal virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Reflection.Assembly OnAssemblyResolve(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function OnAssemblyResolve (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Reflection::Assembly ^ OnAssemblyResolve(System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="7de50-184">要載入之組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="7de50-184">The name of the assembly to load.</span></span></param>
        <summary><span data-ttu-id="7de50-185">當作業為了要解析組件所含的 XAML 命名空間，而使用這個結構描述內容來解析該組件時呼叫。</span><span class="sxs-lookup"><span data-stu-id="7de50-185">Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.</span></span></summary>
        <returns><span data-ttu-id="7de50-186">解析的組件。</span><span class="sxs-lookup"><span data-stu-id="7de50-186">The resolved assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-187">根據基礎的組件解析技術，這是內部的 API，有不同的字串形式的組件名稱的內建容錯<xref:System.Reflection.AssemblyName>建構行為。</span><span class="sxs-lookup"><span data-stu-id="7de50-187">The underlying assembly resolution technique, which is an internal API, has built-in tolerances for different string forms of an assembly name as based on the <xref:System.Reflection.AssemblyName> construction behavior.</span></span>  
  
 <span data-ttu-id="7de50-188">此 API 的目的是啟用第一個機會解析針對已知集組件，例如，針對參考組件而不是針對全域組件快取。</span><span class="sxs-lookup"><span data-stu-id="7de50-188">The purpose of this API is to enable first-opportunity resolution against known sets of assemblies, such as against reference assemblies instead of against a global assembly cache.</span></span> <span data-ttu-id="7de50-189">如果已填入的參考組件清單的預設實作可以存取的已知的參考組件。</span><span class="sxs-lookup"><span data-stu-id="7de50-189">If the list of reference assemblies is populated, the default implementation can access the known reference assemblies.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt; ReferenceAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.Assembly&gt; ReferenceAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferenceAssemblies As IList(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ ReferenceAssemblies { System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7de50-190">取得 XAML 結構描述內容之參考組件的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-190">Gets an enumerable set of reference assemblies for the XAML schema context.</span></span></summary>
        <value><span data-ttu-id="7de50-191">結構描述內容之參考組件的可列舉集。</span><span class="sxs-lookup"><span data-stu-id="7de50-191">An enumerable set of reference assemblies for the schema context.</span></span> <span data-ttu-id="7de50-192">每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</span><span class="sxs-lookup"><span data-stu-id="7de50-192">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMarkupExtensionsWithDuplicateArity">
      <MemberSignature Language="C#" Value="public bool SupportMarkupExtensionsWithDuplicateArity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportMarkupExtensionsWithDuplicateArity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMarkupExtensionsWithDuplicateArity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7de50-193">取得值，這個值指定 XAML 結構描述和其內容是否支援標記延伸，而這種標記延伸具有兩個包含相同 Arity (即輸入參數的數目) 的建構函式。</span><span class="sxs-lookup"><span data-stu-id="7de50-193">Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).</span></span></summary>
        <value>
          <span data-ttu-id="7de50-194">如果結構描述內容允許具有重複 Arity 的標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-194"><see langword="true" /> if the schema context permits markup extensions that have duplicate arity; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7de50-195">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-195">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-196">這個屬性會傳回<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType>所建立的設定值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>建構函式簽章。</span><span class="sxs-lookup"><span data-stu-id="7de50-196">This property returns the <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> value that is established in the settings for the <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> constructor signature.</span></span> <span data-ttu-id="7de50-197">如果其他的簽章可用來建構或<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType>不特別設`true`，這個屬性的值是`false`。</span><span class="sxs-lookup"><span data-stu-id="7de50-197">If other signatures are used for construction or if <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> is not specifically set to `true`, the value of this property is `false`.</span></span>  
  
 <span data-ttu-id="7de50-198">XAML 規格 [MS-XAML]，6.6.7.2 節，特別是無法解決重複 arity 的標記延伸。</span><span class="sxs-lookup"><span data-stu-id="7de50-198">Duplicate arity of markup extensions is not specifically addressed by the XAML specification [MS-XAML], section 6.6.7.2.</span></span> <span data-ttu-id="7de50-199">這是因為不論在標記延伸實作中可能存在的重複 arity 的標記延伸的 XAML 資訊項目形成等同。</span><span class="sxs-lookup"><span data-stu-id="7de50-199">This is because formation of the XAML information item for a markup extension is identical regardless of duplicate arity that might exist in the markup extension implementation.</span></span> <span data-ttu-id="7de50-200">標記延伸的實際叫用及其`ProvideValue`公開重複 arity 相關聯的任何問題。</span><span class="sxs-lookup"><span data-stu-id="7de50-200">Only the actual invocation of the markup extension and its `ProvideValue` exposes any issues associated with duplicate arity.</span></span> <span data-ttu-id="7de50-201">處理重複 arity 行為因此為未定義，且會維持到每個實作的 XAML 結構描述內容和 XAML 寫入器整合。</span><span class="sxs-lookup"><span data-stu-id="7de50-201">Behavior for handling duplicate arity is thus undefined and is left up to each implementing XAML schema context and its XAML writer integration.</span></span> <span data-ttu-id="7de50-202">預設 XAML 結構描述內容的.NET Framework XAML 服務作業實作不支援重複的引數數目。處理具有基礎重複 arity 的標記延伸使用方式時，各種不同的.NET Framework XAML 服務 Api 將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7de50-202">The default XAML schema context as implemented for .NET Framework XAML Services operations does not support duplicate arity; various .NET Framework XAML Services APIs will throw exceptions when processing markup extension usage with underlying duplicate arity.</span></span>  
  
 <span data-ttu-id="7de50-203">如需定義標記延伸的詳細資訊，請參閱[標記延伸 XAML 概觀](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="7de50-203">For more information about defining markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCompatibleXamlNamespace">
      <MemberSignature Language="C#" Value="public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetCompatibleXamlNamespace(string xamlNamespace, [out] string&amp; compatibleNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetCompatibleXamlNamespace (xamlNamespace As String, ByRef compatibleNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetCompatibleXamlNamespace(System::String ^ xamlNamespace, [Runtime::InteropServices::Out] System::String ^ % compatibleNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="compatibleNamespace" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace"><span data-ttu-id="7de50-204"><see langword="xmlns" /> 字串，表示要檢查是否有相容結果的 XAML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="7de50-204">The <see langword="xmlns" /> string for the XAML namespace to be checked for a compatible result.</span></span></param>
        <param name="compatibleNamespace"><span data-ttu-id="7de50-205">這個方法傳回時，為相容 XAML 命名空間要求的 <see langword="xmlns" /> 字串。</span><span class="sxs-lookup"><span data-stu-id="7de50-205">When this method returns, the <see langword="xmlns" /> string for a compatible XAML namespace request.</span></span> <span data-ttu-id="7de50-206">如果方法傳回 <see langword="false" />，這可能與 <c>xamlNamespace</c> 相同。</span><span class="sxs-lookup"><span data-stu-id="7de50-206">This might be identical to <c>xamlNamespace</c> if the method returns <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7de50-207">傳回針對相容 XAML 命名空間的要求是否成功。</span><span class="sxs-lookup"><span data-stu-id="7de50-207">Returns the success or failure of a request for a compatible XAML namespace.</span></span> <span data-ttu-id="7de50-208">如果要求成功，則會將這個 XAML 命名空間報告為 out 參數。</span><span class="sxs-lookup"><span data-stu-id="7de50-208">A successful request reports that XAML namespace as an out parameter.</span></span></summary>
        <returns>
          <span data-ttu-id="7de50-209">如果 <paramref name="compatibleNamespace" /> 包含可使用的結果則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-209"><see langword="true" /> if <paramref name="compatibleNamespace" /> contains a usable result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7de50-210">就內部而言，這個方法會使用下列搜尋順序：</span><span class="sxs-lookup"><span data-stu-id="7de50-210">Internally, this method uses the following lookup order:</span></span>  
  
1.  <span data-ttu-id="7de50-211">已透過先前的查詢填入內部實作的相容性字典。</span><span class="sxs-lookup"><span data-stu-id="7de50-211">An internally implemented compatibility dictionary, which may have been populated by an earlier lookup.</span></span>  
  
2.  <span data-ttu-id="7de50-212"><xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>參數評估。</span><span class="sxs-lookup"><span data-stu-id="7de50-212">The <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute> parameter evaluation.</span></span>  
  
 <span data-ttu-id="7de50-213">如果不找到任何其他相容的命名空間，這個方法會傳回`false`、`compatibleNamespace`參數輸出可能會有相同的值`xamlNamespace`輸入。</span><span class="sxs-lookup"><span data-stu-id="7de50-213">If no other compatible namespace is discovered and this method returns `false`, the `compatibleNamespace` parameter output might have the same value as the `xamlNamespace` input.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7de50-214"><paramref name="xamlNamespace" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7de50-214"><paramref name="xamlNamespace" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>